DEBUG 2023-04-14 17:42:57,065 bytecode dump:
>          0	NOP(arg=None, lineno=142)
           2	LOAD_GLOBAL(arg=0, lineno=142)
           4	LOAD_FAST(arg=0, lineno=142)
           6	CALL_FUNCTION(arg=1, lineno=142)
           8	LOAD_CONST(arg=1, lineno=142)
          10	BINARY_FLOOR_DIVIDE(arg=None, lineno=142)
          12	STORE_FAST(arg=2, lineno=142)
          14	LOAD_GLOBAL(arg=1, lineno=143)
          16	LOAD_METHOD(arg=2, lineno=143)
          18	LOAD_FAST(arg=2, lineno=143)
          20	CALL_METHOD(arg=1, lineno=143)
          22	STORE_FAST(arg=3, lineno=143)
          24	LOAD_FAST(arg=0, lineno=145)
          26	LOAD_CONST(arg=2, lineno=145)
          28	LOAD_FAST(arg=2, lineno=145)
          30	BUILD_SLICE(arg=2, lineno=145)
          32	LOAD_CONST(arg=2, lineno=145)
          34	LOAD_FAST(arg=2, lineno=145)
          36	BUILD_SLICE(arg=2, lineno=145)
          38	BUILD_TUPLE(arg=2, lineno=145)
          40	BINARY_SUBSCR(arg=None, lineno=145)
          42	LOAD_CONST(arg=3, lineno=145)
          44	LOAD_FAST(arg=1, lineno=145)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=145)
          48	BINARY_MULTIPLY(arg=None, lineno=145)
          50	STORE_FAST(arg=4, lineno=145)
          52	LOAD_FAST(arg=0, lineno=146)
          54	LOAD_CONST(arg=2, lineno=146)
          56	LOAD_FAST(arg=2, lineno=146)
          58	BUILD_SLICE(arg=2, lineno=146)
          60	LOAD_FAST(arg=2, lineno=146)
          62	LOAD_CONST(arg=2, lineno=146)
          64	BUILD_SLICE(arg=2, lineno=146)
          66	BUILD_TUPLE(arg=2, lineno=146)
          68	BINARY_SUBSCR(arg=None, lineno=146)
          70	LOAD_CONST(arg=3, lineno=146)
          72	LOAD_FAST(arg=1, lineno=146)
          74	BINARY_TRUE_DIVIDE(arg=None, lineno=146)
          76	BINARY_MULTIPLY(arg=None, lineno=146)
          78	STORE_FAST(arg=5, lineno=146)
          80	LOAD_FAST(arg=0, lineno=147)
          82	LOAD_FAST(arg=2, lineno=147)
          84	LOAD_CONST(arg=2, lineno=147)
          86	BUILD_SLICE(arg=2, lineno=147)
          88	LOAD_FAST(arg=2, lineno=147)
          90	LOAD_CONST(arg=2, lineno=147)
          92	BUILD_SLICE(arg=2, lineno=147)
          94	BUILD_TUPLE(arg=2, lineno=147)
          96	BINARY_SUBSCR(arg=None, lineno=147)
          98	LOAD_CONST(arg=3, lineno=147)
         100	LOAD_FAST(arg=1, lineno=147)
         102	BINARY_TRUE_DIVIDE(arg=None, lineno=147)
         104	BINARY_MULTIPLY(arg=None, lineno=147)
         106	STORE_FAST(arg=6, lineno=147)
         108	LOAD_FAST(arg=4, lineno=149)
         110	LOAD_FAST(arg=6, lineno=149)
         112	BINARY_ADD(arg=None, lineno=149)
         114	LOAD_CONST(arg=4, lineno=149)
         116	LOAD_FAST(arg=5, lineno=149)
         118	LOAD_FAST(arg=5, lineno=149)
         120	LOAD_ATTR(arg=3, lineno=149)
         122	BINARY_SUBTRACT(arg=None, lineno=149)
         124	BINARY_MULTIPLY(arg=None, lineno=149)
         126	BINARY_ADD(arg=None, lineno=149)
         128	LOAD_CONST(arg=1, lineno=149)
         130	LOAD_FAST(arg=3, lineno=149)
         132	BINARY_MULTIPLY(arg=None, lineno=149)
         134	BINARY_SUBTRACT(arg=None, lineno=149)
         136	LOAD_CONST(arg=5, lineno=149)
         138	BINARY_TRUE_DIVIDE(arg=None, lineno=149)
         140	STORE_FAST(arg=7, lineno=149)
         142	LOAD_FAST(arg=4, lineno=151)
         144	LOAD_FAST(arg=6, lineno=151)
         146	BINARY_SUBTRACT(arg=None, lineno=151)
         148	LOAD_CONST(arg=4, lineno=151)
         150	LOAD_FAST(arg=5, lineno=151)
         152	LOAD_FAST(arg=5, lineno=151)
         154	LOAD_ATTR(arg=3, lineno=151)
         156	BINARY_ADD(arg=None, lineno=151)
         158	BINARY_MULTIPLY(arg=None, lineno=151)
         160	BINARY_ADD(arg=None, lineno=151)
         162	LOAD_CONST(arg=5, lineno=151)
         164	BINARY_TRUE_DIVIDE(arg=None, lineno=151)
         166	STORE_FAST(arg=8, lineno=151)
         168	LOAD_GLOBAL(arg=4, lineno=154)
         170	LOAD_FAST(arg=7, lineno=154)
         172	LOAD_FAST(arg=8, lineno=154)
         174	LOAD_METHOD(arg=5, lineno=154)
         176	CALL_METHOD(arg=0, lineno=154)
         178	BUILD_TUPLE(arg=2, lineno=154)
         180	LOAD_FAST(arg=8, lineno=154)
         182	LOAD_FAST(arg=7, lineno=154)
         184	LOAD_METHOD(arg=5, lineno=154)
         186	CALL_METHOD(arg=0, lineno=154)
         188	BUILD_TUPLE(arg=2, lineno=154)
         190	BUILD_TUPLE(arg=2, lineno=154)
         192	CALL_FUNCTION(arg=1, lineno=154)
         194	LOAD_GLOBAL(arg=1, lineno=154)
         196	LOAD_METHOD(arg=2, lineno=154)
         198	LOAD_CONST(arg=1, lineno=154)
         200	LOAD_FAST(arg=2, lineno=154)
         202	BINARY_MULTIPLY(arg=None, lineno=154)
         204	CALL_METHOD(arg=1, lineno=154)
         206	BINARY_ADD(arg=None, lineno=154)
         208	STORE_FAST(arg=9, lineno=154)
         210	LOAD_FAST(arg=9, lineno=155)
         212	RETURN_VALUE(arg=None, lineno=155)
DEBUG 2023-04-14 17:42:57,065 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,065 stack: []
DEBUG 2023-04-14 17:42:57,065 dispatch pc=0, inst=NOP(arg=None, lineno=142)
DEBUG 2023-04-14 17:42:57,065 stack []
DEBUG 2023-04-14 17:42:57,065 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=142)
DEBUG 2023-04-14 17:42:57,065 stack []
DEBUG 2023-04-14 17:42:57,065 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=142)
DEBUG 2023-04-14 17:42:57,065 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,065 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=142)
DEBUG 2023-04-14 17:42:57,065 stack ['$2load_global.0', '$cov4.1']
DEBUG 2023-04-14 17:42:57,065 dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=142)
DEBUG 2023-04-14 17:42:57,065 stack ['$6call_function.2']
DEBUG 2023-04-14 17:42:57,065 dispatch pc=10, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=142)
DEBUG 2023-04-14 17:42:57,065 stack ['$6call_function.2', '$const8.3']
DEBUG 2023-04-14 17:42:57,065 dispatch pc=12, inst=STORE_FAST(arg=2, lineno=142)
DEBUG 2023-04-14 17:42:57,065 stack ['$10binary_floor_divide.4']
DEBUG 2023-04-14 17:42:57,065 dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=143)
DEBUG 2023-04-14 17:42:57,065 stack []
DEBUG 2023-04-14 17:42:57,065 dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=143)
DEBUG 2023-04-14 17:42:57,065 stack ['$14load_global.5']
DEBUG 2023-04-14 17:42:57,065 dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=143)
DEBUG 2023-04-14 17:42:57,065 stack ['$16load_method.6']
DEBUG 2023-04-14 17:42:57,065 dispatch pc=20, inst=CALL_METHOD(arg=1, lineno=143)
DEBUG 2023-04-14 17:42:57,065 stack ['$16load_method.6', '$N18.7']
DEBUG 2023-04-14 17:42:57,065 dispatch pc=22, inst=STORE_FAST(arg=3, lineno=143)
DEBUG 2023-04-14 17:42:57,065 stack ['$20call_method.8']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack []
DEBUG 2023-04-14 17:42:57,075 dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov24.9']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov24.9', '$const26.10']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov24.9', '$const26.10', '$N28.11']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov24.9', '$30build_slice.13']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov24.9', '$30build_slice.13', '$const32.14']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=36, inst=BUILD_SLICE(arg=2, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov24.9', '$30build_slice.13', '$const32.14', '$N34.15']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=38, inst=BUILD_TUPLE(arg=2, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov24.9', '$30build_slice.13', '$36build_slice.17']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov24.9', '$38build_tuple.18']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=42, inst=LOAD_CONST(arg=3, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$40binary_subscr.19']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=44, inst=LOAD_FAST(arg=1, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$40binary_subscr.19', '$const42.20']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$40binary_subscr.19', '$const42.20', '$hbar44.21']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=48, inst=BINARY_MULTIPLY(arg=None, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$40binary_subscr.19', '$46binary_true_divide.22']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=50, inst=STORE_FAST(arg=4, lineno=145)
DEBUG 2023-04-14 17:42:57,075 stack ['$48binary_multiply.23']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack []
DEBUG 2023-04-14 17:42:57,075 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov52.24']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov52.24', '$const54.25']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=58, inst=BUILD_SLICE(arg=2, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov52.24', '$const54.25', '$N56.26']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=60, inst=LOAD_FAST(arg=2, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov52.24', '$58build_slice.28']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov52.24', '$58build_slice.28', '$N60.29']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=64, inst=BUILD_SLICE(arg=2, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov52.24', '$58build_slice.28', '$N60.29', '$const62.30']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=66, inst=BUILD_TUPLE(arg=2, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov52.24', '$58build_slice.28', '$64build_slice.32']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov52.24', '$66build_tuple.33']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$68binary_subscr.34']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=72, inst=LOAD_FAST(arg=1, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$68binary_subscr.34', '$const70.35']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=74, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$68binary_subscr.34', '$const70.35', '$hbar72.36']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=76, inst=BINARY_MULTIPLY(arg=None, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$68binary_subscr.34', '$74binary_true_divide.37']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=78, inst=STORE_FAST(arg=5, lineno=146)
DEBUG 2023-04-14 17:42:57,075 stack ['$76binary_multiply.38']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack []
DEBUG 2023-04-14 17:42:57,075 dispatch pc=82, inst=LOAD_FAST(arg=2, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov80.39']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov80.39', '$N82.40']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=86, inst=BUILD_SLICE(arg=2, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov80.39', '$N82.40', '$const84.41']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov80.39', '$86build_slice.43']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov80.39', '$86build_slice.43', '$N88.44']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=92, inst=BUILD_SLICE(arg=2, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov80.39', '$86build_slice.43', '$N88.44', '$const90.45']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=94, inst=BUILD_TUPLE(arg=2, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov80.39', '$86build_slice.43', '$92build_slice.47']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$cov80.39', '$94build_tuple.48']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=98, inst=LOAD_CONST(arg=3, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$96binary_subscr.49']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$96binary_subscr.49', '$const98.50']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=102, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$96binary_subscr.49', '$const98.50', '$hbar100.51']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=104, inst=BINARY_MULTIPLY(arg=None, lineno=147)
DEBUG 2023-04-14 17:42:57,075 stack ['$96binary_subscr.49', '$102binary_true_divide.52']
DEBUG 2023-04-14 17:42:57,075 dispatch pc=106, inst=STORE_FAST(arg=6, lineno=147)
DEBUG 2023-04-14 17:42:57,080 stack ['$104binary_multiply.53']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=108, inst=LOAD_FAST(arg=4, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack []
DEBUG 2023-04-14 17:42:57,080 dispatch pc=110, inst=LOAD_FAST(arg=6, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$x108.54']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=112, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$x108.54', '$p110.55']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=114, inst=LOAD_CONST(arg=4, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$112binary_add.56']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=116, inst=LOAD_FAST(arg=5, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$112binary_add.56', '$const114.57']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=118, inst=LOAD_FAST(arg=5, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$112binary_add.56', '$const114.57', '$xp116.58']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=120, inst=LOAD_ATTR(arg=3, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$112binary_add.56', '$const114.57', '$xp116.58', '$xp118.59']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=122, inst=BINARY_SUBTRACT(arg=None, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$112binary_add.56', '$const114.57', '$xp116.58', '$120load_attr.60']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=124, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$112binary_add.56', '$const114.57', '$122binary_subtract.61']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=126, inst=BINARY_ADD(arg=None, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$112binary_add.56', '$124binary_multiply.62']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=128, inst=LOAD_CONST(arg=1, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$126binary_add.63']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=130, inst=LOAD_FAST(arg=3, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$126binary_add.63', '$const128.64']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=132, inst=BINARY_MULTIPLY(arg=None, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$126binary_add.63', '$const128.64', '$I130.65']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=134, inst=BINARY_SUBTRACT(arg=None, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$126binary_add.63', '$132binary_multiply.66']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=136, inst=LOAD_CONST(arg=5, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$134binary_subtract.67']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=138, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$134binary_subtract.67', '$const136.68']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=140, inst=STORE_FAST(arg=7, lineno=149)
DEBUG 2023-04-14 17:42:57,080 stack ['$138binary_true_divide.69']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=142, inst=LOAD_FAST(arg=4, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack []
DEBUG 2023-04-14 17:42:57,080 dispatch pc=144, inst=LOAD_FAST(arg=6, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$x142.70']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=146, inst=BINARY_SUBTRACT(arg=None, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$x142.70', '$p144.71']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=148, inst=LOAD_CONST(arg=4, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$146binary_subtract.72']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=150, inst=LOAD_FAST(arg=5, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$146binary_subtract.72', '$const148.73']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=152, inst=LOAD_FAST(arg=5, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$146binary_subtract.72', '$const148.73', '$xp150.74']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=154, inst=LOAD_ATTR(arg=3, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$146binary_subtract.72', '$const148.73', '$xp150.74', '$xp152.75']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=156, inst=BINARY_ADD(arg=None, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$146binary_subtract.72', '$const148.73', '$xp150.74', '$154load_attr.76']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=158, inst=BINARY_MULTIPLY(arg=None, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$146binary_subtract.72', '$const148.73', '$156binary_add.77']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=160, inst=BINARY_ADD(arg=None, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$146binary_subtract.72', '$158binary_multiply.78']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=162, inst=LOAD_CONST(arg=5, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$160binary_add.79']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=164, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$160binary_add.79', '$const162.80']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=166, inst=STORE_FAST(arg=8, lineno=151)
DEBUG 2023-04-14 17:42:57,080 stack ['$164binary_true_divide.81']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=168, inst=LOAD_GLOBAL(arg=4, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack []
DEBUG 2023-04-14 17:42:57,080 dispatch pc=170, inst=LOAD_FAST(arg=7, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=172, inst=LOAD_FAST(arg=8, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$aidaj170.83']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=174, inst=LOAD_METHOD(arg=5, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$aidaj170.83', '$aiaj172.84']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=176, inst=CALL_METHOD(arg=0, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$aidaj170.83', '$174load_method.85']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=178, inst=BUILD_TUPLE(arg=2, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$aidaj170.83', '$176call_method.86']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$178build_tuple.87']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=182, inst=LOAD_FAST(arg=7, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$178build_tuple.87', '$aiaj180.88']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=184, inst=LOAD_METHOD(arg=5, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$178build_tuple.87', '$aiaj180.88', '$aidaj182.89']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=186, inst=CALL_METHOD(arg=0, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$178build_tuple.87', '$aiaj180.88', '$184load_method.90']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=188, inst=BUILD_TUPLE(arg=2, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$178build_tuple.87', '$aiaj180.88', '$186call_method.91']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=190, inst=BUILD_TUPLE(arg=2, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$178build_tuple.87', '$188build_tuple.92']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=192, inst=CALL_FUNCTION(arg=1, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$168load_global.82', '$190build_tuple.93']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=194, inst=LOAD_GLOBAL(arg=1, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$192call_function.94']
DEBUG 2023-04-14 17:42:57,080 dispatch pc=196, inst=LOAD_METHOD(arg=2, lineno=154)
DEBUG 2023-04-14 17:42:57,080 stack ['$192call_function.94', '$194load_global.95']
DEBUG 2023-04-14 17:42:57,085 dispatch pc=198, inst=LOAD_CONST(arg=1, lineno=154)
DEBUG 2023-04-14 17:42:57,085 stack ['$192call_function.94', '$196load_method.96']
DEBUG 2023-04-14 17:42:57,085 dispatch pc=200, inst=LOAD_FAST(arg=2, lineno=154)
DEBUG 2023-04-14 17:42:57,085 stack ['$192call_function.94', '$196load_method.96', '$const198.97']
DEBUG 2023-04-14 17:42:57,085 dispatch pc=202, inst=BINARY_MULTIPLY(arg=None, lineno=154)
DEBUG 2023-04-14 17:42:57,085 stack ['$192call_function.94', '$196load_method.96', '$const198.97', '$N200.98']
DEBUG 2023-04-14 17:42:57,085 dispatch pc=204, inst=CALL_METHOD(arg=1, lineno=154)
DEBUG 2023-04-14 17:42:57,085 stack ['$192call_function.94', '$196load_method.96', '$202binary_multiply.99']
DEBUG 2023-04-14 17:42:57,085 dispatch pc=206, inst=BINARY_ADD(arg=None, lineno=154)
DEBUG 2023-04-14 17:42:57,085 stack ['$192call_function.94', '$204call_method.100']
DEBUG 2023-04-14 17:42:57,085 dispatch pc=208, inst=STORE_FAST(arg=9, lineno=154)
DEBUG 2023-04-14 17:42:57,085 stack ['$206binary_add.101']
DEBUG 2023-04-14 17:42:57,085 dispatch pc=210, inst=LOAD_FAST(arg=9, lineno=155)
DEBUG 2023-04-14 17:42:57,085 stack []
DEBUG 2023-04-14 17:42:57,085 dispatch pc=212, inst=RETURN_VALUE(arg=None, lineno=155)
DEBUG 2023-04-14 17:42:57,085 stack ['$Q210.102']
DEBUG 2023-04-14 17:42:57,085 end state. edges=[]
DEBUG 2023-04-14 17:42:57,085 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,085 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,085 defmap: {}
DEBUG 2023-04-14 17:42:57,085 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,085 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,085 keep phismap: {}
DEBUG 2023-04-14 17:42:57,085 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,085 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,085 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$cov4.1'}), (6, {'func': '$2load_global.0', 'args': ['$cov4.1'], 'res': '$6call_function.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6call_function.2', 'rhs': '$const8.3', 'res': '$10binary_floor_divide.4'}), (12, {'value': '$10binary_floor_divide.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_method.6'}), (18, {'res': '$N18.7'}), (20, {'func': '$16load_method.6', 'args': ['$N18.7'], 'res': '$20call_method.8'}), (22, {'value': '$20call_method.8'}), (24, {'res': '$cov24.9'}), (26, {'res': '$const26.10'}), (28, {'res': '$N28.11'}), (30, {'start': '$const26.10', 'stop': '$N28.11', 'step': None, 'res': '$30build_slice.13', 'slicevar': '$30build_slice.12'}), (32, {'res': '$const32.14'}), (34, {'res': '$N34.15'}), (36, {'start': '$const32.14', 'stop': '$N34.15', 'step': None, 'res': '$36build_slice.17', 'slicevar': '$36build_slice.16'}), (38, {'items': ['$30build_slice.13', '$36build_slice.17'], 'res': '$38build_tuple.18'}), (40, {'index': '$38build_tuple.18', 'target': '$cov24.9', 'res': '$40binary_subscr.19'}), (42, {'res': '$const42.20'}), (44, {'res': '$hbar44.21'}), (46, {'lhs': '$const42.20', 'rhs': '$hbar44.21', 'res': '$46binary_true_divide.22'}), (48, {'lhs': '$40binary_subscr.19', 'rhs': '$46binary_true_divide.22', 'res': '$48binary_multiply.23'}), (50, {'value': '$48binary_multiply.23'}), (52, {'res': '$cov52.24'}), (54, {'res': '$const54.25'}), (56, {'res': '$N56.26'}), (58, {'start': '$const54.25', 'stop': '$N56.26', 'step': None, 'res': '$58build_slice.28', 'slicevar': '$58build_slice.27'}), (60, {'res': '$N60.29'}), (62, {'res': '$const62.30'}), (64, {'start': '$N60.29', 'stop': '$const62.30', 'step': None, 'res': '$64build_slice.32', 'slicevar': '$64build_slice.31'}), (66, {'items': ['$58build_slice.28', '$64build_slice.32'], 'res': '$66build_tuple.33'}), (68, {'index': '$66build_tuple.33', 'target': '$cov52.24', 'res': '$68binary_subscr.34'}), (70, {'res': '$const70.35'}), (72, {'res': '$hbar72.36'}), (74, {'lhs': '$const70.35', 'rhs': '$hbar72.36', 'res': '$74binary_true_divide.37'}), (76, {'lhs': '$68binary_subscr.34', 'rhs': '$74binary_true_divide.37', 'res': '$76binary_multiply.38'}), (78, {'value': '$76binary_multiply.38'}), (80, {'res': '$cov80.39'}), (82, {'res': '$N82.40'}), (84, {'res': '$const84.41'}), (86, {'start': '$N82.40', 'stop': '$const84.41', 'step': None, 'res': '$86build_slice.43', 'slicevar': '$86build_slice.42'}), (88, {'res': '$N88.44'}), (90, {'res': '$const90.45'}), (92, {'start': '$N88.44', 'stop': '$const90.45', 'step': None, 'res': '$92build_slice.47', 'slicevar': '$92build_slice.46'}), (94, {'items': ['$86build_slice.43', '$92build_slice.47'], 'res': '$94build_tuple.48'}), (96, {'index': '$94build_tuple.48', 'target': '$cov80.39', 'res': '$96binary_subscr.49'}), (98, {'res': '$const98.50'}), (100, {'res': '$hbar100.51'}), (102, {'lhs': '$const98.50', 'rhs': '$hbar100.51', 'res': '$102binary_true_divide.52'}), (104, {'lhs': '$96binary_subscr.49', 'rhs': '$102binary_true_divide.52', 'res': '$104binary_multiply.53'}), (106, {'value': '$104binary_multiply.53'}), (108, {'res': '$x108.54'}), (110, {'res': '$p110.55'}), (112, {'lhs': '$x108.54', 'rhs': '$p110.55', 'res': '$112binary_add.56'}), (114, {'res': '$const114.57'}), (116, {'res': '$xp116.58'}), (118, {'res': '$xp118.59'}), (120, {'item': '$xp118.59', 'res': '$120load_attr.60'}), (122, {'lhs': '$xp116.58', 'rhs': '$120load_attr.60', 'res': '$122binary_subtract.61'}), (124, {'lhs': '$const114.57', 'rhs': '$122binary_subtract.61', 'res': '$124binary_multiply.62'}), (126, {'lhs': '$112binary_add.56', 'rhs': '$124binary_multiply.62', 'res': '$126binary_add.63'}), (128, {'res': '$const128.64'}), (130, {'res': '$I130.65'}), (132, {'lhs': '$const128.64', 'rhs': '$I130.65', 'res': '$132binary_multiply.66'}), (134, {'lhs': '$126binary_add.63', 'rhs': '$132binary_multiply.66', 'res': '$134binary_subtract.67'}), (136, {'res': '$const136.68'}), (138, {'lhs': '$134binary_subtract.67', 'rhs': '$const136.68', 'res': '$138binary_true_divide.69'}), (140, {'value': '$138binary_true_divide.69'}), (142, {'res': '$x142.70'}), (144, {'res': '$p144.71'}), (146, {'lhs': '$x142.70', 'rhs': '$p144.71', 'res': '$146binary_subtract.72'}), (148, {'res': '$const148.73'}), (150, {'res': '$xp150.74'}), (152, {'res': '$xp152.75'}), (154, {'item': '$xp152.75', 'res': '$154load_attr.76'}), (156, {'lhs': '$xp150.74', 'rhs': '$154load_attr.76', 'res': '$156binary_add.77'}), (158, {'lhs': '$const148.73', 'rhs': '$156binary_add.77', 'res': '$158binary_multiply.78'}), (160, {'lhs': '$146binary_subtract.72', 'rhs': '$158binary_multiply.78', 'res': '$160binary_add.79'}), (162, {'res': '$const162.80'}), (164, {'lhs': '$160binary_add.79', 'rhs': '$const162.80', 'res': '$164binary_true_divide.81'}), (166, {'value': '$164binary_true_divide.81'}), (168, {'res': '$168load_global.82'}), (170, {'res': '$aidaj170.83'}), (172, {'res': '$aiaj172.84'}), (174, {'item': '$aiaj172.84', 'res': '$174load_method.85'}), (176, {'func': '$174load_method.85', 'args': [], 'res': '$176call_method.86'}), (178, {'items': ['$aidaj170.83', '$176call_method.86'], 'res': '$178build_tuple.87'}), (180, {'res': '$aiaj180.88'}), (182, {'res': '$aidaj182.89'}), (184, {'item': '$aidaj182.89', 'res': '$184load_method.90'}), (186, {'func': '$184load_method.90', 'args': [], 'res': '$186call_method.91'}), (188, {'items': ['$aiaj180.88', '$186call_method.91'], 'res': '$188build_tuple.92'}), (190, {'items': ['$178build_tuple.87', '$188build_tuple.92'], 'res': '$190build_tuple.93'}), (192, {'func': '$168load_global.82', 'args': ['$190build_tuple.93'], 'res': '$192call_function.94'}), (194, {'res': '$194load_global.95'}), (196, {'item': '$194load_global.95', 'res': '$196load_method.96'}), (198, {'res': '$const198.97'}), (200, {'res': '$N200.98'}), (202, {'lhs': '$const198.97', 'rhs': '$N200.98', 'res': '$202binary_multiply.99'}), (204, {'func': '$196load_method.96', 'args': ['$202binary_multiply.99'], 'res': '$204call_method.100'}), (206, {'lhs': '$192call_function.94', 'rhs': '$204call_method.100', 'res': '$206binary_add.101'}), (208, {'value': '$206binary_add.101'}), (210, {'res': '$Q210.102'}), (212, {'retval': '$Q210.102', 'castval': '$212return_value.103'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,085 label 0:
    cov = arg(0, name=cov)                   ['cov']
    hbar = arg(1, name=hbar)                 ['hbar']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(cov, func=$2load_global.0, args=[Var(cov, _torontonian.py:142)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'cov']
    $const8.3 = const(int, 2)                ['$const8.3']
    N = $6call_function.2 // $const8.3       ['$6call_function.2', '$const8.3', 'N']
    $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_method.6 = getattr(value=$14load_global.5, attr=identity) ['$14load_global.5', '$16load_method.6']
    I = call $16load_method.6(N, func=$16load_method.6, args=[Var(N, _torontonian.py:142)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_method.6', 'I', 'N']
    $const26.10 = const(NoneType, None)      ['$const26.10']
    $30build_slice.12 = global(slice: <class 'slice'>) ['$30build_slice.12']
    $30build_slice.13 = call $30build_slice.12($const26.10, N, func=$30build_slice.12, args=(Var($const26.10, _torontonian.py:145), Var(N, _torontonian.py:142)), kws=(), vararg=None, varkwarg=None, target=None) ['$30build_slice.12', '$30build_slice.13', '$const26.10', 'N']
    $const32.14 = const(NoneType, None)      ['$const32.14']
    $36build_slice.16 = global(slice: <class 'slice'>) ['$36build_slice.16']
    $36build_slice.17 = call $36build_slice.16($const32.14, N, func=$36build_slice.16, args=(Var($const32.14, _torontonian.py:145), Var(N, _torontonian.py:142)), kws=(), vararg=None, varkwarg=None, target=None) ['$36build_slice.16', '$36build_slice.17', '$const32.14', 'N']
    $38build_tuple.18 = build_tuple(items=[Var($30build_slice.13, _torontonian.py:145), Var($36build_slice.17, _torontonian.py:145)]) ['$30build_slice.13', '$36build_slice.17', '$38build_tuple.18']
    $40binary_subscr.19 = getitem(value=cov, index=$38build_tuple.18, fn=<built-in function getitem>) ['$38build_tuple.18', '$40binary_subscr.19', 'cov']
    $const42.20 = const(float, 2.0)          ['$const42.20']
    $46binary_true_divide.22 = $const42.20 / hbar ['$46binary_true_divide.22', '$const42.20', 'hbar']
    x = $40binary_subscr.19 * $46binary_true_divide.22 ['$40binary_subscr.19', '$46binary_true_divide.22', 'x']
    $const54.25 = const(NoneType, None)      ['$const54.25']
    $58build_slice.27 = global(slice: <class 'slice'>) ['$58build_slice.27']
    $58build_slice.28 = call $58build_slice.27($const54.25, N, func=$58build_slice.27, args=(Var($const54.25, _torontonian.py:146), Var(N, _torontonian.py:142)), kws=(), vararg=None, varkwarg=None, target=None) ['$58build_slice.27', '$58build_slice.28', '$const54.25', 'N']
    $const62.30 = const(NoneType, None)      ['$const62.30']
    $64build_slice.31 = global(slice: <class 'slice'>) ['$64build_slice.31']
    $64build_slice.32 = call $64build_slice.31(N, $const62.30, func=$64build_slice.31, args=(Var(N, _torontonian.py:142), Var($const62.30, _torontonian.py:146)), kws=(), vararg=None, varkwarg=None, target=None) ['$64build_slice.31', '$64build_slice.32', '$const62.30', 'N']
    $66build_tuple.33 = build_tuple(items=[Var($58build_slice.28, _torontonian.py:146), Var($64build_slice.32, _torontonian.py:146)]) ['$58build_slice.28', '$64build_slice.32', '$66build_tuple.33']
    $68binary_subscr.34 = getitem(value=cov, index=$66build_tuple.33, fn=<built-in function getitem>) ['$66build_tuple.33', '$68binary_subscr.34', 'cov']
    $const70.35 = const(float, 2.0)          ['$const70.35']
    $74binary_true_divide.37 = $const70.35 / hbar ['$74binary_true_divide.37', '$const70.35', 'hbar']
    xp = $68binary_subscr.34 * $74binary_true_divide.37 ['$68binary_subscr.34', '$74binary_true_divide.37', 'xp']
    $const84.41 = const(NoneType, None)      ['$const84.41']
    $86build_slice.42 = global(slice: <class 'slice'>) ['$86build_slice.42']
    $86build_slice.43 = call $86build_slice.42(N, $const84.41, func=$86build_slice.42, args=(Var(N, _torontonian.py:142), Var($const84.41, _torontonian.py:147)), kws=(), vararg=None, varkwarg=None, target=None) ['$86build_slice.42', '$86build_slice.43', '$const84.41', 'N']
    $const90.45 = const(NoneType, None)      ['$const90.45']
    $92build_slice.46 = global(slice: <class 'slice'>) ['$92build_slice.46']
    $92build_slice.47 = call $92build_slice.46(N, $const90.45, func=$92build_slice.46, args=(Var(N, _torontonian.py:142), Var($const90.45, _torontonian.py:147)), kws=(), vararg=None, varkwarg=None, target=None) ['$92build_slice.46', '$92build_slice.47', '$const90.45', 'N']
    $94build_tuple.48 = build_tuple(items=[Var($86build_slice.43, _torontonian.py:147), Var($92build_slice.47, _torontonian.py:147)]) ['$86build_slice.43', '$92build_slice.47', '$94build_tuple.48']
    $96binary_subscr.49 = getitem(value=cov, index=$94build_tuple.48, fn=<built-in function getitem>) ['$94build_tuple.48', '$96binary_subscr.49', 'cov']
    $const98.50 = const(float, 2.0)          ['$const98.50']
    $102binary_true_divide.52 = $const98.50 / hbar ['$102binary_true_divide.52', '$const98.50', 'hbar']
    p = $96binary_subscr.49 * $102binary_true_divide.52 ['$102binary_true_divide.52', '$96binary_subscr.49', 'p']
    $112binary_add.56 = x + p                ['$112binary_add.56', 'p', 'x']
    $const114.57 = const(complex, 1j)        ['$const114.57']
    $120load_attr.60 = getattr(value=xp, attr=T) ['$120load_attr.60', 'xp']
    $122binary_subtract.61 = xp - $120load_attr.60 ['$120load_attr.60', '$122binary_subtract.61', 'xp']
    $124binary_multiply.62 = $const114.57 * $122binary_subtract.61 ['$122binary_subtract.61', '$124binary_multiply.62', '$const114.57']
    $126binary_add.63 = $112binary_add.56 + $124binary_multiply.62 ['$112binary_add.56', '$124binary_multiply.62', '$126binary_add.63']
    $const128.64 = const(int, 2)             ['$const128.64']
    $132binary_multiply.66 = $const128.64 * I ['$132binary_multiply.66', '$const128.64', 'I']
    $134binary_subtract.67 = $126binary_add.63 - $132binary_multiply.66 ['$126binary_add.63', '$132binary_multiply.66', '$134binary_subtract.67']
    $const136.68 = const(int, 4)             ['$const136.68']
    aidaj = $134binary_subtract.67 / $const136.68 ['$134binary_subtract.67', '$const136.68', 'aidaj']
    $146binary_subtract.72 = x - p           ['$146binary_subtract.72', 'p', 'x']
    $const148.73 = const(complex, 1j)        ['$const148.73']
    $154load_attr.76 = getattr(value=xp, attr=T) ['$154load_attr.76', 'xp']
    $156binary_add.77 = xp + $154load_attr.76 ['$154load_attr.76', '$156binary_add.77', 'xp']
    $158binary_multiply.78 = $const148.73 * $156binary_add.77 ['$156binary_add.77', '$158binary_multiply.78', '$const148.73']
    $160binary_add.79 = $146binary_subtract.72 + $158binary_multiply.78 ['$146binary_subtract.72', '$158binary_multiply.78', '$160binary_add.79']
    $const162.80 = const(int, 4)             ['$const162.80']
    aiaj = $160binary_add.79 / $const162.80  ['$160binary_add.79', '$const162.80', 'aiaj']
    $168load_global.82 = global(nb_block: CPUDispatcher(<function nb_block at 0x000002660843F790>)) ['$168load_global.82']
    $174load_method.85 = getattr(value=aiaj, attr=conj) ['$174load_method.85', 'aiaj']
    $176call_method.86 = call $174load_method.85(func=$174load_method.85, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$174load_method.85', '$176call_method.86']
    $178build_tuple.87 = build_tuple(items=[Var(aidaj, _torontonian.py:149), Var($176call_method.86, _torontonian.py:154)]) ['$176call_method.86', '$178build_tuple.87', 'aidaj']
    $184load_method.90 = getattr(value=aidaj, attr=conj) ['$184load_method.90', 'aidaj']
    $186call_method.91 = call $184load_method.90(func=$184load_method.90, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$184load_method.90', '$186call_method.91']
    $188build_tuple.92 = build_tuple(items=[Var(aiaj, _torontonian.py:151), Var($186call_method.91, _torontonian.py:154)]) ['$186call_method.91', '$188build_tuple.92', 'aiaj']
    $190build_tuple.93 = build_tuple(items=[Var($178build_tuple.87, _torontonian.py:154), Var($188build_tuple.92, _torontonian.py:154)]) ['$178build_tuple.87', '$188build_tuple.92', '$190build_tuple.93']
    $192call_function.94 = call $168load_global.82($190build_tuple.93, func=$168load_global.82, args=[Var($190build_tuple.93, _torontonian.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$168load_global.82', '$190build_tuple.93', '$192call_function.94']
    $194load_global.95 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$194load_global.95']
    $196load_method.96 = getattr(value=$194load_global.95, attr=identity) ['$194load_global.95', '$196load_method.96']
    $const198.97 = const(int, 2)             ['$const198.97']
    $202binary_multiply.99 = $const198.97 * N ['$202binary_multiply.99', '$const198.97', 'N']
    $204call_method.100 = call $196load_method.96($202binary_multiply.99, func=$196load_method.96, args=[Var($202binary_multiply.99, _torontonian.py:154)], kws=(), vararg=None, varkwarg=None, target=None) ['$196load_method.96', '$202binary_multiply.99', '$204call_method.100']
    Q = $192call_function.94 + $204call_method.100 ['$192call_function.94', '$204call_method.100', 'Q']
    $212return_value.103 = cast(value=Q)     ['$212return_value.103', 'Q']
    return $212return_value.103              ['$212return_value.103']

DEBUG 2023-04-14 17:42:57,106 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,106 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617AD9040>
DEBUG 2023-04-14 17:42:57,106 on stmt: cov = arg(0, name=cov)
DEBUG 2023-04-14 17:42:57,106 on stmt: hbar = arg(1, name=hbar)
DEBUG 2023-04-14 17:42:57,106 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $6call_function.2 = call $2load_global.0(cov, func=$2load_global.0, args=[Var(cov, _torontonian.py:142)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $const8.3 = const(int, 2)
DEBUG 2023-04-14 17:42:57,106 on stmt: N = $6call_function.2 // $const8.3
DEBUG 2023-04-14 17:42:57,106 on stmt: $14load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $16load_method.6 = getattr(value=$14load_global.5, attr=identity)
DEBUG 2023-04-14 17:42:57,106 on stmt: I = call $16load_method.6(N, func=$16load_method.6, args=[Var(N, _torontonian.py:142)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $const26.10 = const(NoneType, None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $30build_slice.12 = global(slice: <class 'slice'>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $30build_slice.13 = call $30build_slice.12($const26.10, N, func=$30build_slice.12, args=(Var($const26.10, _torontonian.py:145), Var(N, _torontonian.py:142)), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $const32.14 = const(NoneType, None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $36build_slice.16 = global(slice: <class 'slice'>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $36build_slice.17 = call $36build_slice.16($const32.14, N, func=$36build_slice.16, args=(Var($const32.14, _torontonian.py:145), Var(N, _torontonian.py:142)), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $38build_tuple.18 = build_tuple(items=[Var($30build_slice.13, _torontonian.py:145), Var($36build_slice.17, _torontonian.py:145)])
DEBUG 2023-04-14 17:42:57,106 on stmt: $40binary_subscr.19 = getitem(value=cov, index=$38build_tuple.18, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $const42.20 = const(float, 2.0)
DEBUG 2023-04-14 17:42:57,106 on stmt: $46binary_true_divide.22 = $const42.20 / hbar
DEBUG 2023-04-14 17:42:57,106 on stmt: x = $40binary_subscr.19 * $46binary_true_divide.22
DEBUG 2023-04-14 17:42:57,106 on stmt: $const54.25 = const(NoneType, None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $58build_slice.27 = global(slice: <class 'slice'>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $58build_slice.28 = call $58build_slice.27($const54.25, N, func=$58build_slice.27, args=(Var($const54.25, _torontonian.py:146), Var(N, _torontonian.py:142)), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $const62.30 = const(NoneType, None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $64build_slice.31 = global(slice: <class 'slice'>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $64build_slice.32 = call $64build_slice.31(N, $const62.30, func=$64build_slice.31, args=(Var(N, _torontonian.py:142), Var($const62.30, _torontonian.py:146)), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $66build_tuple.33 = build_tuple(items=[Var($58build_slice.28, _torontonian.py:146), Var($64build_slice.32, _torontonian.py:146)])
DEBUG 2023-04-14 17:42:57,106 on stmt: $68binary_subscr.34 = getitem(value=cov, index=$66build_tuple.33, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $const70.35 = const(float, 2.0)
DEBUG 2023-04-14 17:42:57,106 on stmt: $74binary_true_divide.37 = $const70.35 / hbar
DEBUG 2023-04-14 17:42:57,106 on stmt: xp = $68binary_subscr.34 * $74binary_true_divide.37
DEBUG 2023-04-14 17:42:57,106 on stmt: $const84.41 = const(NoneType, None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $86build_slice.42 = global(slice: <class 'slice'>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $86build_slice.43 = call $86build_slice.42(N, $const84.41, func=$86build_slice.42, args=(Var(N, _torontonian.py:142), Var($const84.41, _torontonian.py:147)), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $const90.45 = const(NoneType, None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $92build_slice.46 = global(slice: <class 'slice'>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $92build_slice.47 = call $92build_slice.46(N, $const90.45, func=$92build_slice.46, args=(Var(N, _torontonian.py:142), Var($const90.45, _torontonian.py:147)), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $94build_tuple.48 = build_tuple(items=[Var($86build_slice.43, _torontonian.py:147), Var($92build_slice.47, _torontonian.py:147)])
DEBUG 2023-04-14 17:42:57,106 on stmt: $96binary_subscr.49 = getitem(value=cov, index=$94build_tuple.48, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $const98.50 = const(float, 2.0)
DEBUG 2023-04-14 17:42:57,106 on stmt: $102binary_true_divide.52 = $const98.50 / hbar
DEBUG 2023-04-14 17:42:57,106 on stmt: p = $96binary_subscr.49 * $102binary_true_divide.52
DEBUG 2023-04-14 17:42:57,106 on stmt: $112binary_add.56 = x + p
DEBUG 2023-04-14 17:42:57,106 on stmt: $const114.57 = const(complex, 1j)
DEBUG 2023-04-14 17:42:57,106 on stmt: $120load_attr.60 = getattr(value=xp, attr=T)
DEBUG 2023-04-14 17:42:57,106 on stmt: $122binary_subtract.61 = xp - $120load_attr.60
DEBUG 2023-04-14 17:42:57,106 on stmt: $124binary_multiply.62 = $const114.57 * $122binary_subtract.61
DEBUG 2023-04-14 17:42:57,106 on stmt: $126binary_add.63 = $112binary_add.56 + $124binary_multiply.62
DEBUG 2023-04-14 17:42:57,106 on stmt: $const128.64 = const(int, 2)
DEBUG 2023-04-14 17:42:57,106 on stmt: $132binary_multiply.66 = $const128.64 * I
DEBUG 2023-04-14 17:42:57,106 on stmt: $134binary_subtract.67 = $126binary_add.63 - $132binary_multiply.66
DEBUG 2023-04-14 17:42:57,106 on stmt: $const136.68 = const(int, 4)
DEBUG 2023-04-14 17:42:57,106 on stmt: aidaj = $134binary_subtract.67 / $const136.68
DEBUG 2023-04-14 17:42:57,106 on stmt: $146binary_subtract.72 = x - p
DEBUG 2023-04-14 17:42:57,106 on stmt: $const148.73 = const(complex, 1j)
DEBUG 2023-04-14 17:42:57,106 on stmt: $154load_attr.76 = getattr(value=xp, attr=T)
DEBUG 2023-04-14 17:42:57,106 on stmt: $156binary_add.77 = xp + $154load_attr.76
DEBUG 2023-04-14 17:42:57,106 on stmt: $158binary_multiply.78 = $const148.73 * $156binary_add.77
DEBUG 2023-04-14 17:42:57,106 on stmt: $160binary_add.79 = $146binary_subtract.72 + $158binary_multiply.78
DEBUG 2023-04-14 17:42:57,106 on stmt: $const162.80 = const(int, 4)
DEBUG 2023-04-14 17:42:57,106 on stmt: aiaj = $160binary_add.79 / $const162.80
DEBUG 2023-04-14 17:42:57,106 on stmt: $168load_global.82 = global(nb_block: CPUDispatcher(<function nb_block at 0x000002660843F790>))
DEBUG 2023-04-14 17:42:57,106 on stmt: $174load_method.85 = getattr(value=aiaj, attr=conj)
DEBUG 2023-04-14 17:42:57,106 on stmt: $176call_method.86 = call $174load_method.85(func=$174load_method.85, args=[], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $178build_tuple.87 = build_tuple(items=[Var(aidaj, _torontonian.py:149), Var($176call_method.86, _torontonian.py:154)])
DEBUG 2023-04-14 17:42:57,106 on stmt: $184load_method.90 = getattr(value=aidaj, attr=conj)
DEBUG 2023-04-14 17:42:57,106 on stmt: $186call_method.91 = call $184load_method.90(func=$184load_method.90, args=[], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $188build_tuple.92 = build_tuple(items=[Var(aiaj, _torontonian.py:151), Var($186call_method.91, _torontonian.py:154)])
DEBUG 2023-04-14 17:42:57,106 on stmt: $190build_tuple.93 = build_tuple(items=[Var($178build_tuple.87, _torontonian.py:154), Var($188build_tuple.92, _torontonian.py:154)])
DEBUG 2023-04-14 17:42:57,106 on stmt: $192call_function.94 = call $168load_global.82($190build_tuple.93, func=$168load_global.82, args=[Var($190build_tuple.93, _torontonian.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: $194load_global.95 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:42:57,106 on stmt: $196load_method.96 = getattr(value=$194load_global.95, attr=identity)
DEBUG 2023-04-14 17:42:57,106 on stmt: $const198.97 = const(int, 2)
DEBUG 2023-04-14 17:42:57,106 on stmt: $202binary_multiply.99 = $const198.97 * N
DEBUG 2023-04-14 17:42:57,106 on stmt: $204call_method.100 = call $196load_method.96($202binary_multiply.99, func=$196load_method.96, args=[Var($202binary_multiply.99, _torontonian.py:154)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,106 on stmt: Q = $192call_function.94 + $204call_method.100
DEBUG 2023-04-14 17:42:57,106 on stmt: $212return_value.103 = cast(value=Q)
DEBUG 2023-04-14 17:42:57,106 on stmt: return $212return_value.103
DEBUG 2023-04-14 17:42:57,106 defs defaultdict(<class 'list'>,
            {'$102binary_true_divide.52': [<numba.core.ir.Assign object at 0x0000026617A95CA0>],
             '$112binary_add.56': [<numba.core.ir.Assign object at 0x0000026617A97340>],
             '$120load_attr.60': [<numba.core.ir.Assign object at 0x0000026617A97850>],
             '$122binary_subtract.61': [<numba.core.ir.Assign object at 0x0000026617A97A00>],
             '$124binary_multiply.62': [<numba.core.ir.Assign object at 0x0000026617A97B80>],
             '$126binary_add.63': [<numba.core.ir.Assign object at 0x0000026617A97D00>],
             '$132binary_multiply.66': [<numba.core.ir.Assign object at 0x0000026617A99160>],
             '$134binary_subtract.67': [<numba.core.ir.Assign object at 0x0000026617A992E0>],
             '$146binary_subtract.72': [<numba.core.ir.Assign object at 0x0000026617A99AC0>],
             '$14load_global.5': [<numba.core.ir.Assign object at 0x0000026617A538B0>],
             '$154load_attr.76': [<numba.core.ir.Assign object at 0x0000026617A99FD0>],
             '$156binary_add.77': [<numba.core.ir.Assign object at 0x0000026617A9B1C0>],
             '$158binary_multiply.78': [<numba.core.ir.Assign object at 0x0000026617A9B340>],
             '$160binary_add.79': [<numba.core.ir.Assign object at 0x0000026617A9B4C0>],
             '$168load_global.82': [<numba.core.ir.Assign object at 0x0000026617A9BA30>],
             '$16load_method.6': [<numba.core.ir.Assign object at 0x0000026617A53A30>],
             '$174load_method.85': [<numba.core.ir.Assign object at 0x0000026617A9BDF0>],
             '$176call_method.86': [<numba.core.ir.Assign object at 0x0000026617A9E040>],
             '$178build_tuple.87': [<numba.core.ir.Assign object at 0x0000026617A9E160>],
             '$184load_method.90': [<numba.core.ir.Assign object at 0x0000026617A9E4F0>],
             '$186call_method.91': [<numba.core.ir.Assign object at 0x0000026617A9E700>],
             '$188build_tuple.92': [<numba.core.ir.Assign object at 0x0000026617A9E820>],
             '$190build_tuple.93': [<numba.core.ir.Assign object at 0x0000026617A9E9A0>],
             '$192call_function.94': [<numba.core.ir.Assign object at 0x0000026617A9EB50>],
             '$194load_global.95': [<numba.core.ir.Assign object at 0x0000026617A9EC70>],
             '$196load_method.96': [<numba.core.ir.Assign object at 0x0000026617A9EDF0>],
             '$202binary_multiply.99': [<numba.core.ir.Assign object at 0x0000026617AA0280>],
             '$204call_method.100': [<numba.core.ir.Assign object at 0x0000026617AA0460>],
             '$212return_value.103': [<numba.core.ir.Assign object at 0x0000026617AA0910>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617A4DA00>],
             '$30build_slice.12': [<numba.core.ir.Assign object at 0x0000026617A8B370>],
             '$30build_slice.13': [<numba.core.ir.Assign object at 0x0000026617A8B490>],
             '$36build_slice.16': [<numba.core.ir.Assign object at 0x0000026617A8B8B0>],
             '$36build_slice.17': [<numba.core.ir.Assign object at 0x0000026617A8B9D0>],
             '$38build_tuple.18': [<numba.core.ir.Assign object at 0x0000026617A8BB80>],
             '$40binary_subscr.19': [<numba.core.ir.Assign object at 0x0000026617A8BD00>],
             '$46binary_true_divide.22': [<numba.core.ir.Assign object at 0x0000026617A8F160>],
             '$58build_slice.27': [<numba.core.ir.Assign object at 0x0000026617A8F910>],
             '$58build_slice.28': [<numba.core.ir.Assign object at 0x0000026617A8FA30>],
             '$64build_slice.31': [<numba.core.ir.Assign object at 0x0000026617A8FE50>],
             '$64build_slice.32': [<numba.core.ir.Assign object at 0x0000026617A8FF70>],
             '$66build_tuple.33': [<numba.core.ir.Assign object at 0x0000026617A93160>],
             '$68binary_subscr.34': [<numba.core.ir.Assign object at 0x0000026617A932E0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000026617A4DA90>],
             '$74binary_true_divide.37': [<numba.core.ir.Assign object at 0x0000026617A93700>],
             '$86build_slice.42': [<numba.core.ir.Assign object at 0x0000026617A93EB0>],
             '$86build_slice.43': [<numba.core.ir.Assign object at 0x0000026617A93FD0>],
             '$92build_slice.46': [<numba.core.ir.Assign object at 0x0000026617A95430>],
             '$92build_slice.47': [<numba.core.ir.Assign object at 0x0000026617A95550>],
             '$94build_tuple.48': [<numba.core.ir.Assign object at 0x0000026617A95700>],
             '$96binary_subscr.49': [<numba.core.ir.Assign object at 0x0000026617A95880>],
             '$const114.57': [<numba.core.ir.Assign object at 0x0000026617A97490>],
             '$const128.64': [<numba.core.ir.Assign object at 0x0000026617A97E50>],
             '$const136.68': [<numba.core.ir.Assign object at 0x0000026617A99430>],
             '$const148.73': [<numba.core.ir.Assign object at 0x0000026617A99C10>],
             '$const162.80': [<numba.core.ir.Assign object at 0x0000026617A9B610>],
             '$const198.97': [<numba.core.ir.Assign object at 0x0000026617A9EF70>],
             '$const26.10': [<numba.core.ir.Assign object at 0x0000026617A8B0D0>],
             '$const32.14': [<numba.core.ir.Assign object at 0x0000026617A8B610>],
             '$const42.20': [<numba.core.ir.Assign object at 0x0000026617A8BE50>],
             '$const54.25': [<numba.core.ir.Assign object at 0x0000026617A8F670>],
             '$const62.30': [<numba.core.ir.Assign object at 0x0000026617A8FCD0>],
             '$const70.35': [<numba.core.ir.Assign object at 0x0000026617A93430>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000026617A53550>],
             '$const84.41': [<numba.core.ir.Assign object at 0x0000026617A93D30>],
             '$const90.45': [<numba.core.ir.Assign object at 0x0000026617A952B0>],
             '$const98.50': [<numba.core.ir.Assign object at 0x0000026617A959D0>],
             'I': [<numba.core.ir.Assign object at 0x0000026617A53D60>],
             'N': [<numba.core.ir.Assign object at 0x0000026617A531F0>],
             'Q': [<numba.core.ir.Assign object at 0x0000026617AA0580>],
             'aiaj': [<numba.core.ir.Assign object at 0x0000026617A9B7C0>],
             'aidaj': [<numba.core.ir.Assign object at 0x0000026617A995E0>],
             'cov': [<numba.core.ir.Assign object at 0x0000026617A4D3D0>],
             'hbar': [<numba.core.ir.Assign object at 0x0000026617A4D1F0>],
             'p': [<numba.core.ir.Assign object at 0x0000026617A95E20>],
             'x': [<numba.core.ir.Assign object at 0x0000026617A8F2E0>],
             'xp': [<numba.core.ir.Assign object at 0x0000026617A93880>]})
DEBUG 2023-04-14 17:42:57,106 SSA violators set()
DEBUG 2023-04-14 17:42:57,120 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2023-04-14 17:42:57,120 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,120 stack: []
DEBUG 2023-04-14 17:42:57,120 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2023-04-14 17:42:57,120 stack []
DEBUG 2023-04-14 17:42:57,120 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2023-04-14 17:42:57,120 stack []
DEBUG 2023-04-14 17:42:57,120 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2023-04-14 17:42:57,120 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,120 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2023-04-14 17:42:57,120 stack ['$2load_global.0', '$tmp04.1']
DEBUG 2023-04-14 17:42:57,120 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2023-04-14 17:42:57,120 stack ['$6call_function.2']
DEBUG 2023-04-14 17:42:57,120 end state. edges=[]
DEBUG 2023-04-14 17:42:57,120 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,120 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,120 defmap: {}
DEBUG 2023-04-14 17:42:57,120 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,120 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,120 keep phismap: {}
DEBUG 2023-04-14 17:42:57,120 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,120 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,120 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,120 label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:42:57,126 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,126 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617B39F70>
DEBUG 2023-04-14 17:42:57,126 on stmt: tmp0 = arg(0, name=tmp0)
DEBUG 2023-04-14 17:42:57,126 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2023-04-14 17:42:57,126 on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,126 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2023-04-14 17:42:57,126 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:42:57,126 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617B398E0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000026617B39BE0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000026617B39D00>],
             'tmp0': [<numba.core.ir.Assign object at 0x0000026617B39760>]})
DEBUG 2023-04-14 17:42:57,126 SSA violators set()
DEBUG 2023-04-14 17:42:57,136 bytecode dump:
>          0	NOP(arg=None, lineno=4278)
           2	LOAD_GLOBAL(arg=0, lineno=4278)
           4	LOAD_METHOD(arg=1, lineno=4278)
           6	LOAD_FAST(arg=0, lineno=4278)
           8	LOAD_FAST(arg=0, lineno=4278)
          10	BUILD_TUPLE(arg=2, lineno=4278)
          12	CALL_METHOD(arg=1, lineno=4278)
          14	STORE_FAST(arg=1, lineno=4278)
          16	LOAD_GLOBAL(arg=2, lineno=4279)
          18	LOAD_FAST(arg=0, lineno=4279)
          20	CALL_FUNCTION(arg=1, lineno=4279)
          22	GET_ITER(arg=None, lineno=4279)
>         24	FOR_ITER(arg=16, lineno=4279)
          26	STORE_FAST(arg=2, lineno=4279)
          28	LOAD_CONST(arg=1, lineno=4280)
          30	LOAD_FAST(arg=1, lineno=4280)
          32	LOAD_FAST(arg=2, lineno=4280)
          34	LOAD_FAST(arg=2, lineno=4280)
          36	BUILD_TUPLE(arg=2, lineno=4280)
          38	STORE_SUBSCR(arg=None, lineno=4280)
          40	JUMP_ABSOLUTE(arg=24, lineno=4280)
>         42	LOAD_FAST(arg=1, lineno=4281)
          44	RETURN_VALUE(arg=None, lineno=4281)
DEBUG 2023-04-14 17:42:57,136 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,136 stack: []
DEBUG 2023-04-14 17:42:57,136 dispatch pc=0, inst=NOP(arg=None, lineno=4278)
DEBUG 2023-04-14 17:42:57,136 stack []
DEBUG 2023-04-14 17:42:57,136 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4278)
DEBUG 2023-04-14 17:42:57,136 stack []
DEBUG 2023-04-14 17:42:57,136 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=4278)
DEBUG 2023-04-14 17:42:57,136 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4278)
DEBUG 2023-04-14 17:42:57,136 stack ['$4load_method.1']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=4278)
DEBUG 2023-04-14 17:42:57,136 stack ['$4load_method.1', '$n6.2']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=10, inst=BUILD_TUPLE(arg=2, lineno=4278)
DEBUG 2023-04-14 17:42:57,136 stack ['$4load_method.1', '$n6.2', '$n8.3']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=4278)
DEBUG 2023-04-14 17:42:57,136 stack ['$4load_method.1', '$10build_tuple.4']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=14, inst=STORE_FAST(arg=1, lineno=4278)
DEBUG 2023-04-14 17:42:57,136 stack ['$12call_method.5']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=4279)
DEBUG 2023-04-14 17:42:57,136 stack []
DEBUG 2023-04-14 17:42:57,136 dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4279)
DEBUG 2023-04-14 17:42:57,136 stack ['$16load_global.6']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=4279)
DEBUG 2023-04-14 17:42:57,136 stack ['$16load_global.6', '$n18.7']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=22, inst=GET_ITER(arg=None, lineno=4279)
DEBUG 2023-04-14 17:42:57,136 stack ['$20call_function.8']
DEBUG 2023-04-14 17:42:57,136 end state. edges=[Edge(pc=24, stack=('$22get_iter.9',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,136 pending: deque([State(pc_initial=24 nstack_initial=1)])
DEBUG 2023-04-14 17:42:57,136 stack: ['$phi24.0']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=24, inst=FOR_ITER(arg=16, lineno=4279)
DEBUG 2023-04-14 17:42:57,136 stack ['$phi24.0']
DEBUG 2023-04-14 17:42:57,136 end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=('$phi24.0', '$24for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,136 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=26 nstack_initial=2)])
DEBUG 2023-04-14 17:42:57,136 stack: []
DEBUG 2023-04-14 17:42:57,136 dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4281)
DEBUG 2023-04-14 17:42:57,136 stack []
DEBUG 2023-04-14 17:42:57,136 dispatch pc=44, inst=RETURN_VALUE(arg=None, lineno=4281)
DEBUG 2023-04-14 17:42:57,136 stack ['$arr42.0']
DEBUG 2023-04-14 17:42:57,136 end state. edges=[]
DEBUG 2023-04-14 17:42:57,136 pending: deque([State(pc_initial=26 nstack_initial=2)])
DEBUG 2023-04-14 17:42:57,136 stack: ['$phi26.0', '$phi26.1']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=26, inst=STORE_FAST(arg=2, lineno=4279)
DEBUG 2023-04-14 17:42:57,136 stack ['$phi26.0', '$phi26.1']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=4280)
DEBUG 2023-04-14 17:42:57,136 stack ['$phi26.0']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=4280)
DEBUG 2023-04-14 17:42:57,136 stack ['$phi26.0', '$const28.2']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=32, inst=LOAD_FAST(arg=2, lineno=4280)
DEBUG 2023-04-14 17:42:57,136 stack ['$phi26.0', '$const28.2', '$arr30.3']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=4280)
DEBUG 2023-04-14 17:42:57,136 stack ['$phi26.0', '$const28.2', '$arr30.3', '$i32.4']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=4280)
DEBUG 2023-04-14 17:42:57,136 stack ['$phi26.0', '$const28.2', '$arr30.3', '$i32.4', '$i34.5']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=38, inst=STORE_SUBSCR(arg=None, lineno=4280)
DEBUG 2023-04-14 17:42:57,136 stack ['$phi26.0', '$const28.2', '$arr30.3', '$36build_tuple.6']
DEBUG 2023-04-14 17:42:57,136 dispatch pc=40, inst=JUMP_ABSOLUTE(arg=24, lineno=4280)
DEBUG 2023-04-14 17:42:57,136 stack ['$phi26.0']
DEBUG 2023-04-14 17:42:57,136 end state. edges=[Edge(pc=24, stack=('$phi26.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,136 pending: deque([State(pc_initial=24 nstack_initial=1)])
DEBUG 2023-04-14 17:42:57,136 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,136 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=26 nstack_initial=2): {'$phi26.1'},
             State(pc_initial=42 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,136 defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi26.1': State(pc_initial=24 nstack_initial=1)}
DEBUG 2023-04-14 17:42:57,136 phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$22get_iter.9',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi26.0': {('$phi24.0', State(pc_initial=24 nstack_initial=1))},
             '$phi26.1': {('$24for_iter.2',
                           State(pc_initial=24 nstack_initial=1))}})
DEBUG 2023-04-14 17:42:57,136 changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$22get_iter.9',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=1))},
             '$phi26.0': {('$22get_iter.9',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$24for_iter.2',
                           State(pc_initial=24 nstack_initial=1))}})
DEBUG 2023-04-14 17:42:57,136 changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$22get_iter.9',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$22get_iter.9',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$24for_iter.2',
                           State(pc_initial=24 nstack_initial=1))}})
DEBUG 2023-04-14 17:42:57,136 changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$22get_iter.9',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$22get_iter.9',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$24for_iter.2',
                           State(pc_initial=24 nstack_initial=1))}})
DEBUG 2023-04-14 17:42:57,136 keep phismap: {'$phi24.0': {('$22get_iter.9', State(pc_initial=0 nstack_initial=0))},
 '$phi26.1': {('$24for_iter.2', State(pc_initial=24 nstack_initial=1))}}
DEBUG 2023-04-14 17:42:57,136 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$22get_iter.9'},
             State(pc_initial=24 nstack_initial=1): {'$phi26.1': '$24for_iter.2'}})
DEBUG 2023-04-14 17:42:57,136 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,136 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$n6.2'}), (8, {'res': '$n8.3'}), (10, {'items': ['$n6.2', '$n8.3'], 'res': '$10build_tuple.4'}), (12, {'func': '$4load_method.1', 'args': ['$10build_tuple.4'], 'res': '$12call_method.5'}), (14, {'value': '$12call_method.5'}), (16, {'res': '$16load_global.6'}), (18, {'res': '$n18.7'}), (20, {'func': '$16load_global.6', 'args': ['$n18.7'], 'res': '$20call_function.8'}), (22, {'value': '$20call_function.8', 'res': '$22get_iter.9'})), outgoing_phis={'$phi24.0': '$22get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$22get_iter.9',)})
DEBUG 2023-04-14 17:42:57,136 block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'iterator': '$phi24.0', 'pair': '$24for_iter.1', 'indval': '$24for_iter.2', 'pred': '$24for_iter.3'}),), outgoing_phis={'$phi26.1': '$24for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 26: ('$phi24.0', '$24for_iter.2')})
DEBUG 2023-04-14 17:42:57,136 block_infos State(pc_initial=26 nstack_initial=2):
AdaptBlockInfo(insts=((26, {'value': '$phi26.1'}), (28, {'res': '$const28.2'}), (30, {'res': '$arr30.3'}), (32, {'res': '$i32.4'}), (34, {'res': '$i34.5'}), (36, {'items': ['$i32.4', '$i34.5'], 'res': '$36build_tuple.6'}), (38, {'target': '$arr30.3', 'index': '$36build_tuple.6', 'value': '$const28.2'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$phi26.0',)})
DEBUG 2023-04-14 17:42:57,136 block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$arr42.0'}), (44, {'retval': '$arr42.0', 'castval': '$44return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,136 label 0:
    n = arg(0, name=n)                       ['n']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=zeros) ['$2load_global.0', '$4load_method.1']
    $10build_tuple.4 = build_tuple(items=[Var(n, arrayobj.py:4278), Var(n, arrayobj.py:4278)]) ['$10build_tuple.4', 'n', 'n']
    arr = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, arrayobj.py:4278)], kws=(), vararg=None, varkwarg=None, target=None) ['$10build_tuple.4', '$4load_method.1', 'arr']
    $16load_global.6 = global(range: <class 'range'>) ['$16load_global.6']
    $20call_function.8 = call $16load_global.6(n, func=$16load_global.6, args=[Var(n, arrayobj.py:4278)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.6', '$20call_function.8', 'n']
    $22get_iter.9 = getiter(value=$20call_function.8) ['$20call_function.8', '$22get_iter.9']
    $phi24.0 = $22get_iter.9                 ['$22get_iter.9', '$phi24.0']
    jump 24                                  []
label 24:
    $24for_iter.1 = iternext(value=$phi24.0) ['$24for_iter.1', '$phi24.0']
    $24for_iter.2 = pair_first(value=$24for_iter.1) ['$24for_iter.1', '$24for_iter.2']
    $24for_iter.3 = pair_second(value=$24for_iter.1) ['$24for_iter.1', '$24for_iter.3']
    $phi26.1 = $24for_iter.2                 ['$24for_iter.2', '$phi26.1']
    branch $24for_iter.3, 26, 42             ['$24for_iter.3']
label 26:
    i = $phi26.1                             ['$phi26.1', 'i']
    $const28.2 = const(int, 1)               ['$const28.2']
    $36build_tuple.6 = build_tuple(items=[Var(i, arrayobj.py:4279), Var(i, arrayobj.py:4279)]) ['$36build_tuple.6', 'i', 'i']
    arr[$36build_tuple.6] = $const28.2       ['$36build_tuple.6', '$const28.2', 'arr']
    jump 24                                  []
label 42:
    $44return_value.1 = cast(value=arr)      ['$44return_value.1', 'arr']
    return $44return_value.1                 ['$44return_value.1']

DEBUG 2023-04-14 17:42:57,146 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,146 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617B6ED90>
DEBUG 2023-04-14 17:42:57,146 on stmt: n = arg(0, name=n)
DEBUG 2023-04-14 17:42:57,146 on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:42:57,146 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=zeros)
DEBUG 2023-04-14 17:42:57,146 on stmt: $10build_tuple.4 = build_tuple(items=[Var(n, arrayobj.py:4278), Var(n, arrayobj.py:4278)])
DEBUG 2023-04-14 17:42:57,146 on stmt: arr = call $4load_method.1($10build_tuple.4, func=$4load_method.1, args=[Var($10build_tuple.4, arrayobj.py:4278)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,146 on stmt: $16load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:42:57,146 on stmt: $20call_function.8 = call $16load_global.6(n, func=$16load_global.6, args=[Var(n, arrayobj.py:4278)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,146 on stmt: $22get_iter.9 = getiter(value=$20call_function.8)
DEBUG 2023-04-14 17:42:57,146 on stmt: $phi24.0 = $22get_iter.9
DEBUG 2023-04-14 17:42:57,146 on stmt: jump 24
DEBUG 2023-04-14 17:42:57,146 ==== SSA block analysis pass on 24
DEBUG 2023-04-14 17:42:57,146 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617B6ED90>
DEBUG 2023-04-14 17:42:57,146 on stmt: $24for_iter.1 = iternext(value=$phi24.0)
DEBUG 2023-04-14 17:42:57,146 on stmt: $24for_iter.2 = pair_first(value=$24for_iter.1)
DEBUG 2023-04-14 17:42:57,146 on stmt: $24for_iter.3 = pair_second(value=$24for_iter.1)
DEBUG 2023-04-14 17:42:57,146 on stmt: $phi26.1 = $24for_iter.2
DEBUG 2023-04-14 17:42:57,146 on stmt: branch $24for_iter.3, 26, 42
DEBUG 2023-04-14 17:42:57,146 ==== SSA block analysis pass on 26
DEBUG 2023-04-14 17:42:57,146 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617B6ED90>
DEBUG 2023-04-14 17:42:57,146 on stmt: i = $phi26.1
DEBUG 2023-04-14 17:42:57,146 on stmt: $const28.2 = const(int, 1)
DEBUG 2023-04-14 17:42:57,146 on stmt: $36build_tuple.6 = build_tuple(items=[Var(i, arrayobj.py:4279), Var(i, arrayobj.py:4279)])
DEBUG 2023-04-14 17:42:57,146 on stmt: arr[$36build_tuple.6] = $const28.2
DEBUG 2023-04-14 17:42:57,146 on stmt: jump 24
DEBUG 2023-04-14 17:42:57,146 ==== SSA block analysis pass on 42
DEBUG 2023-04-14 17:42:57,146 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617B6ED90>
DEBUG 2023-04-14 17:42:57,146 on stmt: $44return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:42:57,146 on stmt: return $44return_value.1
DEBUG 2023-04-14 17:42:57,146 defs defaultdict(<class 'list'>,
            {'$10build_tuple.4': [<numba.core.ir.Assign object at 0x0000026617B76880>],
             '$16load_global.6': [<numba.core.ir.Assign object at 0x0000026617B76C70>],
             '$20call_function.8': [<numba.core.ir.Assign object at 0x0000026617B76F70>],
             '$22get_iter.9': [<numba.core.ir.Assign object at 0x0000026617B800D0>],
             '$24for_iter.1': [<numba.core.ir.Assign object at 0x0000026617B802E0>],
             '$24for_iter.2': [<numba.core.ir.Assign object at 0x0000026617B80400>],
             '$24for_iter.3': [<numba.core.ir.Assign object at 0x0000026617B80520>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617B76310>],
             '$36build_tuple.6': [<numba.core.ir.Assign object at 0x0000026617B80E80>],
             '$44return_value.1': [<numba.core.ir.Assign object at 0x0000026617B83250>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000026617B76490>],
             '$const28.2': [<numba.core.ir.Assign object at 0x0000026617B80970>],
             '$phi24.0': [<numba.core.ir.Assign object at 0x0000026617B76640>],
             '$phi26.1': [<numba.core.ir.Assign object at 0x0000026617B80220>],
             'arr': [<numba.core.ir.Assign object at 0x0000026617B76A60>],
             'i': [<numba.core.ir.Assign object at 0x0000026617B807F0>],
             'n': [<numba.core.ir.Assign object at 0x0000026617B76190>]})
DEBUG 2023-04-14 17:42:57,146 SSA violators set()
DEBUG 2023-04-14 17:42:57,155 bytecode dump:
>          0	NOP(arg=None, lineno=4169)
           2	LOAD_GLOBAL(arg=0, lineno=4169)
           4	LOAD_ATTR(arg=1, lineno=4169)
           6	LOAD_FAST(arg=0, lineno=4169)
           8	LOAD_FAST(arg=1, lineno=4169)
          10	LOAD_CONST(arg=1, lineno=4169)
          12	CALL_FUNCTION_KW(arg=2, lineno=4169)
          14	STORE_FAST(arg=2, lineno=4169)
          16	LOAD_FAST(arg=2, lineno=4170)
          18	LOAD_METHOD(arg=2, lineno=4170)
          20	CALL_METHOD(arg=0, lineno=4170)
          22	POP_TOP(arg=None, lineno=4170)
          24	LOAD_FAST(arg=2, lineno=4171)
          26	RETURN_VALUE(arg=None, lineno=4171)
DEBUG 2023-04-14 17:42:57,155 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,155 stack: []
DEBUG 2023-04-14 17:42:57,155 dispatch pc=0, inst=NOP(arg=None, lineno=4169)
DEBUG 2023-04-14 17:42:57,155 stack []
DEBUG 2023-04-14 17:42:57,155 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4169)
DEBUG 2023-04-14 17:42:57,155 stack []
DEBUG 2023-04-14 17:42:57,155 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=4169)
DEBUG 2023-04-14 17:42:57,155 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,155 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4169)
DEBUG 2023-04-14 17:42:57,155 stack ['$4load_attr.1']
DEBUG 2023-04-14 17:42:57,155 dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=4169)
DEBUG 2023-04-14 17:42:57,155 stack ['$4load_attr.1', '$shape6.2']
DEBUG 2023-04-14 17:42:57,155 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=4169)
DEBUG 2023-04-14 17:42:57,155 stack ['$4load_attr.1', '$shape6.2', '$dtype8.3']
DEBUG 2023-04-14 17:42:57,155 dispatch pc=12, inst=CALL_FUNCTION_KW(arg=2, lineno=4169)
DEBUG 2023-04-14 17:42:57,155 stack ['$4load_attr.1', '$shape6.2', '$dtype8.3', '$const10.4']
DEBUG 2023-04-14 17:42:57,155 dispatch pc=14, inst=STORE_FAST(arg=2, lineno=4169)
DEBUG 2023-04-14 17:42:57,155 stack ['$12call_function_kw.5']
DEBUG 2023-04-14 17:42:57,155 dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=4170)
DEBUG 2023-04-14 17:42:57,155 stack []
DEBUG 2023-04-14 17:42:57,155 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=4170)
DEBUG 2023-04-14 17:42:57,155 stack ['$arr16.6']
DEBUG 2023-04-14 17:42:57,155 dispatch pc=20, inst=CALL_METHOD(arg=0, lineno=4170)
DEBUG 2023-04-14 17:42:57,155 stack ['$18load_method.7']
DEBUG 2023-04-14 17:42:57,155 dispatch pc=22, inst=POP_TOP(arg=None, lineno=4170)
DEBUG 2023-04-14 17:42:57,155 stack ['$20call_method.8']
DEBUG 2023-04-14 17:42:57,155 dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=4171)
DEBUG 2023-04-14 17:42:57,155 stack []
DEBUG 2023-04-14 17:42:57,155 dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=4171)
DEBUG 2023-04-14 17:42:57,155 stack ['$arr24.9']
DEBUG 2023-04-14 17:42:57,155 end state. edges=[]
DEBUG 2023-04-14 17:42:57,155 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,155 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,155 defmap: {}
DEBUG 2023-04-14 17:42:57,155 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,155 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,155 keep phismap: {}
DEBUG 2023-04-14 17:42:57,155 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,155 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,155 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'res': '$const10.4'}), (12, {'func': '$4load_attr.1', 'args': ['$shape6.2', '$dtype8.3'], 'names': '$const10.4', 'res': '$12call_function_kw.5'}), (14, {'value': '$12call_function_kw.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_method.7'}), (20, {'func': '$18load_method.7', 'args': [], 'res': '$20call_method.8'}), (24, {'res': '$arr24.9'}), (26, {'retval': '$arr24.9', 'castval': '$26return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,155 label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None) ['$4load_attr.1', 'arr', 'dtype', 'shape']
    $18load_method.7 = getattr(value=arr, attr=_zero_fill) ['$18load_method.7', 'arr']
    $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_method.7', '$20call_method.8']
    $26return_value.10 = cast(value=arr)     ['$26return_value.10', 'arr']
    return $26return_value.10                ['$26return_value.10']

DEBUG 2023-04-14 17:42:57,160 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,160 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C2AF40>
DEBUG 2023-04-14 17:42:57,160 on stmt: shape = arg(0, name=shape)
DEBUG 2023-04-14 17:42:57,160 on stmt: dtype = arg(1, name=dtype)
DEBUG 2023-04-14 17:42:57,160 on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:42:57,160 on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
DEBUG 2023-04-14 17:42:57,160 on stmt: arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,165 on stmt: $18load_method.7 = getattr(value=arr, attr=_zero_fill)
DEBUG 2023-04-14 17:42:57,165 on stmt: $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,165 on stmt: $26return_value.10 = cast(value=arr)
DEBUG 2023-04-14 17:42:57,165 on stmt: return $26return_value.10
DEBUG 2023-04-14 17:42:57,165 defs defaultdict(<class 'list'>,
            {'$18load_method.7': [<numba.core.ir.Assign object at 0x0000026617C18BB0>],
             '$20call_method.8': [<numba.core.ir.Assign object at 0x0000026617C18DC0>],
             '$26return_value.10': [<numba.core.ir.Assign object at 0x0000026617C18FD0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617C180D0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000026617C18250>],
             'arr': [<numba.core.ir.Assign object at 0x0000026617C18910>],
             'dtype': [<numba.core.ir.Assign object at 0x0000026617C16F10>],
             'shape': [<numba.core.ir.Assign object at 0x0000026617C16400>]})
DEBUG 2023-04-14 17:42:57,165 SSA violators set()
DEBUG 2023-04-14 17:42:57,165 bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
DEBUG 2023-04-14 17:42:57,165 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,165 stack: []
DEBUG 2023-04-14 17:42:57,165 dispatch pc=0, inst=NOP(arg=None, lineno=4101)
DEBUG 2023-04-14 17:42:57,165 stack []
DEBUG 2023-04-14 17:42:57,165 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
DEBUG 2023-04-14 17:42:57,165 stack []
DEBUG 2023-04-14 17:42:57,165 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
DEBUG 2023-04-14 17:42:57,165 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,165 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
DEBUG 2023-04-14 17:42:57,165 stack ['$2load_global.0', '$shape4.1']
DEBUG 2023-04-14 17:42:57,165 dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
DEBUG 2023-04-14 17:42:57,165 stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
DEBUG 2023-04-14 17:42:57,165 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
DEBUG 2023-04-14 17:42:57,165 stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
DEBUG 2023-04-14 17:42:57,165 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
DEBUG 2023-04-14 17:42:57,165 stack ['$10call_function.4']
DEBUG 2023-04-14 17:42:57,165 end state. edges=[]
DEBUG 2023-04-14 17:42:57,165 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,165 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,165 defmap: {}
DEBUG 2023-04-14 17:42:57,165 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,165 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,165 keep phismap: {}
DEBUG 2023-04-14 17:42:57,165 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,165 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,165 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,165 label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 2d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2023-04-14 17:42:57,165 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,165 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617B83C40>
DEBUG 2023-04-14 17:42:57,165 on stmt: shape = arg(0, name=shape)
DEBUG 2023-04-14 17:42:57,165 on stmt: dtype = arg(1, name=dtype)
DEBUG 2023-04-14 17:42:57,165 on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
DEBUG 2023-04-14 17:42:57,165 on stmt: $8load_deref.3 = freevar(retty: array(float64, 2d, C))
DEBUG 2023-04-14 17:42:57,165 on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,165 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2023-04-14 17:42:57,165 on stmt: return $12return_value.5
DEBUG 2023-04-14 17:42:57,165 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000026617C23160>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000026617C232E0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617C23100>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x0000026617C239D0>],
             'dtype': [<numba.core.ir.Assign object at 0x0000026617C23CD0>],
             'shape': [<numba.core.ir.Assign object at 0x0000026617C233D0>]})
DEBUG 2023-04-14 17:42:57,175 SSA violators set()
DEBUG 2023-04-14 17:42:57,180 bytecode dump:
>          0	NOP(arg=None, lineno=3979)
           2	LOAD_FAST(arg=0, lineno=3979)
           4	LOAD_METHOD(arg=0, lineno=3979)
           6	LOAD_FAST(arg=1, lineno=3979)
           8	LOAD_FAST(arg=2, lineno=3979)
          10	CALL_METHOD(arg=2, lineno=3979)
          12	RETURN_VALUE(arg=None, lineno=3979)
DEBUG 2023-04-14 17:42:57,180 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,180 stack: []
DEBUG 2023-04-14 17:42:57,180 dispatch pc=0, inst=NOP(arg=None, lineno=3979)
DEBUG 2023-04-14 17:42:57,180 stack []
DEBUG 2023-04-14 17:42:57,180 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3979)
DEBUG 2023-04-14 17:42:57,180 stack []
DEBUG 2023-04-14 17:42:57,180 dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3979)
DEBUG 2023-04-14 17:42:57,180 stack ['$arrtype2.0']
DEBUG 2023-04-14 17:42:57,180 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3979)
DEBUG 2023-04-14 17:42:57,180 stack ['$4load_method.1']
DEBUG 2023-04-14 17:42:57,180 dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3979)
DEBUG 2023-04-14 17:42:57,180 stack ['$4load_method.1', '$size6.2']
DEBUG 2023-04-14 17:42:57,180 dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3979)
DEBUG 2023-04-14 17:42:57,180 stack ['$4load_method.1', '$size6.2', '$align8.3']
DEBUG 2023-04-14 17:42:57,180 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3979)
DEBUG 2023-04-14 17:42:57,180 stack ['$10call_method.4']
DEBUG 2023-04-14 17:42:57,180 end state. edges=[]
DEBUG 2023-04-14 17:42:57,185 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,185 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,185 defmap: {}
DEBUG 2023-04-14 17:42:57,185 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,185 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,185 keep phismap: {}
DEBUG 2023-04-14 17:42:57,185 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,185 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,185 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,185 label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3979), Var(align, arrayobj.py:3979)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2023-04-14 17:42:57,185 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,185 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C6A790>
DEBUG 2023-04-14 17:42:57,185 on stmt: arrtype = arg(0, name=arrtype)
DEBUG 2023-04-14 17:42:57,185 on stmt: size = arg(1, name=size)
DEBUG 2023-04-14 17:42:57,185 on stmt: align = arg(2, name=align)
DEBUG 2023-04-14 17:42:57,185 on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
DEBUG 2023-04-14 17:42:57,185 on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3979), Var(align, arrayobj.py:3979)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,185 on stmt: $12return_value.5 = cast(value=$10call_method.4)
DEBUG 2023-04-14 17:42:57,185 on stmt: return $12return_value.5
DEBUG 2023-04-14 17:42:57,185 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x0000026617C67280>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000026617C67370>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000026617C6ADF0>],
             'align': [<numba.core.ir.Assign object at 0x0000026617C6AB50>],
             'arrtype': [<numba.core.ir.Assign object at 0x0000026617C6A520>],
             'size': [<numba.core.ir.Assign object at 0x0000026617C6AA30>]})
DEBUG 2023-04-14 17:42:57,185 SSA violators set()
DEBUG 2023-04-14 17:42:57,185 bytecode dump:
>          0	NOP(arg=None, lineno=3972)
           2	LOAD_GLOBAL(arg=0, lineno=3972)
           4	LOAD_FAST(arg=1, lineno=3972)
           6	LOAD_FAST(arg=2, lineno=3972)
           8	CALL_FUNCTION(arg=2, lineno=3972)
          10	RETURN_VALUE(arg=None, lineno=3972)
DEBUG 2023-04-14 17:42:57,185 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,185 stack: []
DEBUG 2023-04-14 17:42:57,185 dispatch pc=0, inst=NOP(arg=None, lineno=3972)
DEBUG 2023-04-14 17:42:57,185 stack []
DEBUG 2023-04-14 17:42:57,185 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3972)
DEBUG 2023-04-14 17:42:57,185 stack []
DEBUG 2023-04-14 17:42:57,185 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3972)
DEBUG 2023-04-14 17:42:57,185 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,185 dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3972)
DEBUG 2023-04-14 17:42:57,185 stack ['$2load_global.0', '$allocsize4.1']
DEBUG 2023-04-14 17:42:57,185 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3972)
DEBUG 2023-04-14 17:42:57,185 stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
DEBUG 2023-04-14 17:42:57,185 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3972)
DEBUG 2023-04-14 17:42:57,185 stack ['$8call_function.3']
DEBUG 2023-04-14 17:42:57,185 end state. edges=[]
DEBUG 2023-04-14 17:42:57,185 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,185 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,185 defmap: {}
DEBUG 2023-04-14 17:42:57,185 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,185 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,185 keep phismap: {}
DEBUG 2023-04-14 17:42:57,185 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,185 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,185 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,185 label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3972), Var(align, arrayobj.py:3972)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2023-04-14 17:42:57,196 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,196 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C679D0>
DEBUG 2023-04-14 17:42:57,196 on stmt: cls = arg(0, name=cls)
DEBUG 2023-04-14 17:42:57,196 on stmt: allocsize = arg(1, name=allocsize)
DEBUG 2023-04-14 17:42:57,196 on stmt: align = arg(2, name=align)
DEBUG 2023-04-14 17:42:57,196 on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
DEBUG 2023-04-14 17:42:57,196 on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3972), Var(align, arrayobj.py:3972)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,196 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2023-04-14 17:42:57,196 on stmt: return $10return_value.4
DEBUG 2023-04-14 17:42:57,196 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x0000026617C6A8E0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617C618E0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x0000026617C6A640>],
             'align': [<numba.core.ir.Assign object at 0x0000026617C5C160>],
             'allocsize': [<numba.core.ir.Assign object at 0x0000026617C50DC0>],
             'cls': [<numba.core.ir.Assign object at 0x0000026617C67C70>]})
DEBUG 2023-04-14 17:42:57,196 SSA violators set()
DEBUG 2023-04-14 17:42:57,276 bytecode dump:
>          0	NOP(arg=None, lineno=4160)
           2	LOAD_GLOBAL(arg=0, lineno=4160)
           4	LOAD_FAST(arg=0, lineno=4160)
           6	CALL_FUNCTION(arg=1, lineno=4160)
           8	POP_TOP(arg=None, lineno=4160)
          10	LOAD_CONST(arg=0, lineno=4160)
          12	RETURN_VALUE(arg=None, lineno=4160)
DEBUG 2023-04-14 17:42:57,276 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,276 stack: []
DEBUG 2023-04-14 17:42:57,276 dispatch pc=0, inst=NOP(arg=None, lineno=4160)
DEBUG 2023-04-14 17:42:57,276 stack []
DEBUG 2023-04-14 17:42:57,276 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4160)
DEBUG 2023-04-14 17:42:57,276 stack []
DEBUG 2023-04-14 17:42:57,276 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4160)
DEBUG 2023-04-14 17:42:57,276 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,276 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=4160)
DEBUG 2023-04-14 17:42:57,276 stack ['$2load_global.0', '$self4.1']
DEBUG 2023-04-14 17:42:57,276 dispatch pc=8, inst=POP_TOP(arg=None, lineno=4160)
DEBUG 2023-04-14 17:42:57,276 stack ['$6call_function.2']
DEBUG 2023-04-14 17:42:57,276 dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=4160)
DEBUG 2023-04-14 17:42:57,276 stack []
DEBUG 2023-04-14 17:42:57,276 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4160)
DEBUG 2023-04-14 17:42:57,276 stack ['$const10.3']
DEBUG 2023-04-14 17:42:57,276 end state. edges=[]
DEBUG 2023-04-14 17:42:57,276 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,276 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,276 defmap: {}
DEBUG 2023-04-14 17:42:57,276 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,276 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,276 keep phismap: {}
DEBUG 2023-04-14 17:42:57,276 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,276 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,276 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$self4.1'}), (6, {'func': '$2load_global.0', 'args': ['$self4.1'], 'res': '$6call_function.2'}), (10, {'res': '$const10.3'}), (12, {'retval': '$const10.3', 'castval': '$12return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,276 label 0:
    self = arg(0, name=self)                 ['self']
    $2load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(self, func=$2load_global.0, args=[Var(self, arrayobj.py:4160)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'self']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12return_value.4 = cast(value=$const10.3) ['$12return_value.4', '$const10.3']
    return $12return_value.4                 ['$12return_value.4']

DEBUG 2023-04-14 17:42:57,285 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,285 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617D0ECA0>
DEBUG 2023-04-14 17:42:57,285 on stmt: self = arg(0, name=self)
DEBUG 2023-04-14 17:42:57,285 on stmt: $2load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
DEBUG 2023-04-14 17:42:57,285 on stmt: $6call_function.2 = call $2load_global.0(self, func=$2load_global.0, args=[Var(self, arrayobj.py:4160)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,285 on stmt: $const10.3 = const(NoneType, None)
DEBUG 2023-04-14 17:42:57,285 on stmt: $12return_value.4 = cast(value=$const10.3)
DEBUG 2023-04-14 17:42:57,285 on stmt: return $12return_value.4
DEBUG 2023-04-14 17:42:57,285 defs defaultdict(<class 'list'>,
            {'$12return_value.4': [<numba.core.ir.Assign object at 0x0000026617D1AD90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617D1A7F0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000026617D1AAF0>],
             '$const10.3': [<numba.core.ir.Assign object at 0x0000026617D1AC10>],
             'self': [<numba.core.ir.Assign object at 0x0000026617D1A1C0>]})
DEBUG 2023-04-14 17:42:57,285 SSA violators set()
DEBUG 2023-04-14 17:42:57,455 bytecode dump:
>          0	NOP(arg=None, lineno=2779)
           2	LOAD_GLOBAL(arg=0, lineno=2779)
           4	LOAD_METHOD(arg=1, lineno=2779)
           6	LOAD_FAST(arg=0, lineno=2779)
           8	CALL_METHOD(arg=1, lineno=2779)
          10	RETURN_VALUE(arg=None, lineno=2779)
DEBUG 2023-04-14 17:42:57,455 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,455 stack: []
DEBUG 2023-04-14 17:42:57,455 dispatch pc=0, inst=NOP(arg=None, lineno=2779)
DEBUG 2023-04-14 17:42:57,455 stack []
DEBUG 2023-04-14 17:42:57,455 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2779)
DEBUG 2023-04-14 17:42:57,455 stack []
DEBUG 2023-04-14 17:42:57,455 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2779)
DEBUG 2023-04-14 17:42:57,455 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,455 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2779)
DEBUG 2023-04-14 17:42:57,455 stack ['$4load_method.1']
DEBUG 2023-04-14 17:42:57,455 dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2779)
DEBUG 2023-04-14 17:42:57,455 stack ['$4load_method.1', '$arr6.2']
DEBUG 2023-04-14 17:42:57,455 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=2779)
DEBUG 2023-04-14 17:42:57,455 stack ['$8call_method.3']
DEBUG 2023-04-14 17:42:57,455 end state. edges=[]
DEBUG 2023-04-14 17:42:57,461 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,461 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,461 defmap: {}
DEBUG 2023-04-14 17:42:57,461 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,461 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,461 keep phismap: {}
DEBUG 2023-04-14 17:42:57,461 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,461 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,461 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$arr6.2'}), (8, {'func': '$4load_method.1', 'args': ['$arr6.2'], 'res': '$8call_method.3'}), (10, {'retval': '$8call_method.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,461 label 0:
    arr = arg(0, name=arr)                   ['arr']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=conj) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(arr, func=$4load_method.1, args=[Var(arr, arrayobj.py:2779)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'arr']
    $10return_value.4 = cast(value=$8call_method.3) ['$10return_value.4', '$8call_method.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2023-04-14 17:42:57,461 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,461 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617D7F2E0>
DEBUG 2023-04-14 17:42:57,461 on stmt: arr = arg(0, name=arr)
DEBUG 2023-04-14 17:42:57,466 on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:42:57,466 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=conj)
DEBUG 2023-04-14 17:42:57,466 on stmt: $8call_method.3 = call $4load_method.1(arr, func=$4load_method.1, args=[Var(arr, arrayobj.py:2779)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,466 on stmt: $10return_value.4 = cast(value=$8call_method.3)
DEBUG 2023-04-14 17:42:57,466 on stmt: return $10return_value.4
DEBUG 2023-04-14 17:42:57,466 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x0000026617D786A0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617D78070>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000026617D78280>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x0000026617D785B0>],
             'arr': [<numba.core.ir.Assign object at 0x0000026617B18670>]})
DEBUG 2023-04-14 17:42:57,466 SSA violators set()
DEBUG 2023-04-14 17:42:57,470 bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2779)
           6	CALL_FUNCTION(arg=1, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:57,470 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,470 stack: []
DEBUG 2023-04-14 17:42:57,470 dispatch pc=0, inst=NOP(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:57,470 stack []
DEBUG 2023-04-14 17:42:57,470 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
DEBUG 2023-04-14 17:42:57,470 stack []
DEBUG 2023-04-14 17:42:57,470 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2779)
DEBUG 2023-04-14 17:42:57,470 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,470 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1)
DEBUG 2023-04-14 17:42:57,470 stack ['$2load_global.0', '$arr_14.1']
DEBUG 2023-04-14 17:42:57,470 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:57,470 stack ['$6call_function.2']
DEBUG 2023-04-14 17:42:57,470 end state. edges=[]
DEBUG 2023-04-14 17:42:57,470 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,470 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,470 defmap: {}
DEBUG 2023-04-14 17:42:57,475 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,475 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,475 keep phismap: {}
DEBUG 2023-04-14 17:42:57,475 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,475 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,475 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$arr_14.1'}), (6, {'func': '$2load_global.0', 'args': ['$arr_14.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,475 label 0:
    arr_1 = arg(0, name=arr_1)               ['arr_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x26673a4a04: <ufunc 'conjugate'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(arr_1, func=$2load_global.0, args=[Var(arr_1, arrayobj.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'arr_1']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:42:57,475 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,475 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617D52B80>
DEBUG 2023-04-14 17:42:57,475 on stmt: arr_1 = arg(0, name=arr_1)
DEBUG 2023-04-14 17:42:57,475 on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x26673a4a04: <ufunc 'conjugate'>)
DEBUG 2023-04-14 17:42:57,475 on stmt: $6call_function.2 = call $2load_global.0(arr_1, func=$2load_global.0, args=[Var(arr_1, arrayobj.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,475 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2023-04-14 17:42:57,475 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:42:57,475 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617CA4D30>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000026617D30BB0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000026617D30280>],
             'arr_1': [<numba.core.ir.Assign object at 0x0000026617D30580>]})
DEBUG 2023-04-14 17:42:57,475 SSA violators set()
DEBUG 2023-04-14 17:42:57,485 bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
>         26	LOAD_FAST(arg=4, lineno=212)
          28	LOAD_FAST(arg=0, lineno=212)
          30	COMPARE_OP(arg=0, lineno=212)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=212)
          34	LOAD_FAST(arg=1, lineno=213)
          36	LOAD_FAST(arg=4, lineno=213)
          38	BINARY_SUBSCR(arg=None, lineno=213)
          40	STORE_FAST(arg=6, lineno=213)
          42	LOAD_FAST(arg=3, lineno=214)
          44	LOAD_FAST(arg=5, lineno=214)
          46	BINARY_SUBSCR(arg=None, lineno=214)
          48	STORE_FAST(arg=7, lineno=214)
          50	LOAD_FAST(arg=7, lineno=217)
          52	LOAD_CONST(arg=2, lineno=217)
          54	COMPARE_OP(arg=3, lineno=217)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=217)
          58	LOAD_FAST(arg=6, lineno=221)
          60	LOAD_FAST(arg=7, lineno=221)
          62	COMPARE_OP(arg=3, lineno=221)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          66	LOAD_FAST(arg=6, lineno=221)
          68	LOAD_CONST(arg=2, lineno=221)
          70	COMPARE_OP(arg=3, lineno=221)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=221)
          74	LOAD_FAST(arg=5, lineno=222)
          76	LOAD_CONST(arg=2, lineno=222)
          78	BINARY_ADD(arg=None, lineno=222)
          80	UNARY_NEGATIVE(arg=None, lineno=222)
          82	RETURN_VALUE(arg=None, lineno=222)
          84	JUMP_FORWARD(arg=16, lineno=222)
>         86	LOAD_FAST(arg=6, lineno=223)
          88	LOAD_CONST(arg=2, lineno=223)
          90	COMPARE_OP(arg=3, lineno=223)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=223)
          94	LOAD_FAST(arg=6, lineno=225)
          96	LOAD_FAST(arg=3, lineno=225)
          98	LOAD_FAST(arg=5, lineno=225)
         100	STORE_SUBSCR(arg=None, lineno=225)
>        102	LOAD_FAST(arg=4, lineno=226)
         104	LOAD_CONST(arg=2, lineno=226)
         106	INPLACE_ADD(arg=None, lineno=226)
         108	STORE_FAST(arg=4, lineno=226)
         110	LOAD_FAST(arg=5, lineno=227)
         112	LOAD_CONST(arg=2, lineno=227)
         114	INPLACE_ADD(arg=None, lineno=227)
         116	STORE_FAST(arg=5, lineno=227)
         118	JUMP_ABSOLUTE(arg=26, lineno=227)
>        120	LOAD_FAST(arg=5, lineno=228)
         122	RETURN_VALUE(arg=None, lineno=228)
DEBUG 2023-04-14 17:42:57,485 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,485 stack: []
DEBUG 2023-04-14 17:42:57,485 dispatch pc=0, inst=NOP(arg=None, lineno=205)
DEBUG 2023-04-14 17:42:57,485 stack []
DEBUG 2023-04-14 17:42:57,485 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
DEBUG 2023-04-14 17:42:57,485 stack []
DEBUG 2023-04-14 17:42:57,485 dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
DEBUG 2023-04-14 17:42:57,485 stack ['$src_ndim2.0']
DEBUG 2023-04-14 17:42:57,485 dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
DEBUG 2023-04-14 17:42:57,485 stack ['$src_ndim2.0', '$dest_ndim4.1']
DEBUG 2023-04-14 17:42:57,485 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
DEBUG 2023-04-14 17:42:57,485 stack ['$6compare_op.2']
DEBUG 2023-04-14 17:42:57,485 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,485 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,485 stack: []
DEBUG 2023-04-14 17:42:57,485 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
DEBUG 2023-04-14 17:42:57,485 stack []
DEBUG 2023-04-14 17:42:57,485 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
DEBUG 2023-04-14 17:42:57,485 stack ['$const10.0']
DEBUG 2023-04-14 17:42:57,485 end state. edges=[]
DEBUG 2023-04-14 17:42:57,485 pending: deque([State(pc_initial=14 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,485 stack: []
DEBUG 2023-04-14 17:42:57,485 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
DEBUG 2023-04-14 17:42:57,485 stack []
DEBUG 2023-04-14 17:42:57,485 dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
DEBUG 2023-04-14 17:42:57,485 stack ['$const14.0']
DEBUG 2023-04-14 17:42:57,485 dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
DEBUG 2023-04-14 17:42:57,495 stack []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
DEBUG 2023-04-14 17:42:57,495 stack ['$dest_ndim18.1']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
DEBUG 2023-04-14 17:42:57,495 stack ['$dest_ndim18.1', '$src_ndim20.2']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
DEBUG 2023-04-14 17:42:57,495 stack ['$22binary_subtract.3']
DEBUG 2023-04-14 17:42:57,495 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,495 pending: deque([State(pc_initial=26 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,495 stack: []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=212)
DEBUG 2023-04-14 17:42:57,495 stack []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=212)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_index26.0']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=212)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_index26.0', '$src_ndim28.1']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=212)
DEBUG 2023-04-14 17:42:57,495 stack ['$30compare_op.2']
DEBUG 2023-04-14 17:42:57,495 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,495 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,495 stack: []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=213)
DEBUG 2023-04-14 17:42:57,495 stack []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=213)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_shape34.0']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=213)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_shape34.0', '$src_index36.1']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=40, inst=STORE_FAST(arg=6, lineno=213)
DEBUG 2023-04-14 17:42:57,495 stack ['$38binary_subscr.2']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=214)
DEBUG 2023-04-14 17:42:57,495 stack []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=214)
DEBUG 2023-04-14 17:42:57,495 stack ['$dest_shape42.3']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=214)
DEBUG 2023-04-14 17:42:57,495 stack ['$dest_shape42.3', '$dest_index44.4']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=48, inst=STORE_FAST(arg=7, lineno=214)
DEBUG 2023-04-14 17:42:57,495 stack ['$46binary_subscr.5']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=217)
DEBUG 2023-04-14 17:42:57,495 stack []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=217)
DEBUG 2023-04-14 17:42:57,495 stack ['$dest_dim_size50.6']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=217)
DEBUG 2023-04-14 17:42:57,495 stack ['$dest_dim_size50.6', '$const52.7']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=217)
DEBUG 2023-04-14 17:42:57,495 stack ['$54compare_op.8']
DEBUG 2023-04-14 17:42:57,495 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,495 pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,495 stack: []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=228)
DEBUG 2023-04-14 17:42:57,495 stack []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=228)
DEBUG 2023-04-14 17:42:57,495 stack ['$dest_index120.0']
DEBUG 2023-04-14 17:42:57,495 end state. edges=[]
DEBUG 2023-04-14 17:42:57,495 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,495 stack: []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG 2023-04-14 17:42:57,495 stack []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=221)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_dim_size58.0']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_dim_size58.0', '$dest_dim_size60.1']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG 2023-04-14 17:42:57,495 stack ['$62compare_op.2']
DEBUG 2023-04-14 17:42:57,495 end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,495 pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,495 stack: []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=223)
DEBUG 2023-04-14 17:42:57,495 stack []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=223)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_dim_size86.0']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=223)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_dim_size86.0', '$const88.1']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=223)
DEBUG 2023-04-14 17:42:57,495 stack ['$90compare_op.2']
DEBUG 2023-04-14 17:42:57,495 end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,495 pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,495 stack: []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=221)
DEBUG 2023-04-14 17:42:57,495 stack []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_dim_size66.0']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=221)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_dim_size66.0', '$const68.1']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=221)
DEBUG 2023-04-14 17:42:57,495 stack ['$70compare_op.2']
DEBUG 2023-04-14 17:42:57,495 end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,495 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,495 stack: []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=226)
DEBUG 2023-04-14 17:42:57,495 stack []
DEBUG 2023-04-14 17:42:57,495 dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=226)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_index102.0']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=226)
DEBUG 2023-04-14 17:42:57,495 stack ['$src_index102.0', '$const104.1']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=108, inst=STORE_FAST(arg=4, lineno=226)
DEBUG 2023-04-14 17:42:57,495 stack ['$106inplace_add.2']
DEBUG 2023-04-14 17:42:57,495 dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=227)
DEBUG 2023-04-14 17:42:57,501 stack []
DEBUG 2023-04-14 17:42:57,501 dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=227)
DEBUG 2023-04-14 17:42:57,501 stack ['$dest_index110.3']
DEBUG 2023-04-14 17:42:57,501 dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=227)
DEBUG 2023-04-14 17:42:57,501 stack ['$dest_index110.3', '$const112.4']
DEBUG 2023-04-14 17:42:57,501 dispatch pc=116, inst=STORE_FAST(arg=5, lineno=227)
DEBUG 2023-04-14 17:42:57,501 stack ['$114inplace_add.5']
DEBUG 2023-04-14 17:42:57,501 dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=227)
DEBUG 2023-04-14 17:42:57,501 stack []
DEBUG 2023-04-14 17:42:57,501 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,501 pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,501 stack: []
DEBUG 2023-04-14 17:42:57,501 dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=225)
DEBUG 2023-04-14 17:42:57,501 stack []
DEBUG 2023-04-14 17:42:57,501 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=225)
DEBUG 2023-04-14 17:42:57,501 stack ['$src_dim_size94.0']
DEBUG 2023-04-14 17:42:57,501 dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=225)
DEBUG 2023-04-14 17:42:57,501 stack ['$src_dim_size94.0', '$dest_shape96.1']
DEBUG 2023-04-14 17:42:57,501 dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=225)
DEBUG 2023-04-14 17:42:57,501 stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
DEBUG 2023-04-14 17:42:57,501 end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:57,501 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,501 pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,501 stack: []
DEBUG 2023-04-14 17:42:57,501 dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=222)
DEBUG 2023-04-14 17:42:57,501 stack []
DEBUG 2023-04-14 17:42:57,501 dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=222)
DEBUG 2023-04-14 17:42:57,501 stack ['$dest_index74.0']
DEBUG 2023-04-14 17:42:57,501 dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=222)
DEBUG 2023-04-14 17:42:57,501 stack ['$dest_index74.0', '$const76.1']
DEBUG 2023-04-14 17:42:57,501 dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=222)
DEBUG 2023-04-14 17:42:57,501 stack ['$78binary_add.2']
DEBUG 2023-04-14 17:42:57,501 dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=222)
DEBUG 2023-04-14 17:42:57,501 stack ['$80unary_negative.3']
DEBUG 2023-04-14 17:42:57,501 end state. edges=[]
DEBUG 2023-04-14 17:42:57,501 pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,501 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,501 pending: deque([State(pc_initial=102 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,501 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,501 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,501 defmap: {}
DEBUG 2023-04-14 17:42:57,501 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,501 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,501 keep phismap: {}
DEBUG 2023-04-14 17:42:57,501 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,501 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
DEBUG 2023-04-14 17:42:57,501 block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,501 label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

DEBUG 2023-04-14 17:42:57,506 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,506 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,506 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2023-04-14 17:42:57,506 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2023-04-14 17:42:57,506 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2023-04-14 17:42:57,506 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2023-04-14 17:42:57,506 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2023-04-14 17:42:57,506 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,506 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,506 on stmt: branch $8pred, 10, 14
DEBUG 2023-04-14 17:42:57,506 ==== SSA block analysis pass on 10
DEBUG 2023-04-14 17:42:57,506 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,506 on stmt: $const10.0 = const(int, 0)
DEBUG 2023-04-14 17:42:57,506 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2023-04-14 17:42:57,506 on stmt: return $12return_value.1
DEBUG 2023-04-14 17:42:57,506 ==== SSA block analysis pass on 14
DEBUG 2023-04-14 17:42:57,506 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,506 on stmt: src_index = const(int, 0)
DEBUG 2023-04-14 17:42:57,506 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2023-04-14 17:42:57,506 on stmt: jump 26
DEBUG 2023-04-14 17:42:57,506 ==== SSA block analysis pass on 26
DEBUG 2023-04-14 17:42:57,506 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,506 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2023-04-14 17:42:57,506 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,506 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,506 on stmt: branch $32pred, 34, 120
DEBUG 2023-04-14 17:42:57,506 ==== SSA block analysis pass on 34
DEBUG 2023-04-14 17:42:57,506 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,506 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,506 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,516 on stmt: $const52.7 = const(int, 1)
DEBUG 2023-04-14 17:42:57,516 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2023-04-14 17:42:57,516 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,516 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,516 on stmt: branch $56pred, 58, 86
DEBUG 2023-04-14 17:42:57,516 ==== SSA block analysis pass on 58
DEBUG 2023-04-14 17:42:57,516 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,516 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2023-04-14 17:42:57,516 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,516 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,516 on stmt: branch $64pred, 66, 102
DEBUG 2023-04-14 17:42:57,516 ==== SSA block analysis pass on 66
DEBUG 2023-04-14 17:42:57,516 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,516 on stmt: $const68.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,516 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2023-04-14 17:42:57,516 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,516 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,516 on stmt: branch $72pred, 74, 102
DEBUG 2023-04-14 17:42:57,516 ==== SSA block analysis pass on 74
DEBUG 2023-04-14 17:42:57,516 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,516 on stmt: $const76.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,516 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2023-04-14 17:42:57,516 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2023-04-14 17:42:57,516 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2023-04-14 17:42:57,516 on stmt: return $82return_value.4
DEBUG 2023-04-14 17:42:57,516 ==== SSA block analysis pass on 86
DEBUG 2023-04-14 17:42:57,516 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,516 on stmt: $const88.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,516 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2023-04-14 17:42:57,516 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,516 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,516 on stmt: branch $92pred, 94, 102
DEBUG 2023-04-14 17:42:57,516 ==== SSA block analysis pass on 94
DEBUG 2023-04-14 17:42:57,516 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,516 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2023-04-14 17:42:57,516 on stmt: jump 102
DEBUG 2023-04-14 17:42:57,516 ==== SSA block analysis pass on 102
DEBUG 2023-04-14 17:42:57,516 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,516 on stmt: $const104.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,516 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,516 on stmt: src_index = $106inplace_add.2
DEBUG 2023-04-14 17:42:57,516 on stmt: $const112.4 = const(int, 1)
DEBUG 2023-04-14 17:42:57,516 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,516 on stmt: dest_index = $114inplace_add.5
DEBUG 2023-04-14 17:42:57,516 on stmt: jump 26
DEBUG 2023-04-14 17:42:57,516 ==== SSA block analysis pass on 120
DEBUG 2023-04-14 17:42:57,516 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C50250>
DEBUG 2023-04-14 17:42:57,516 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2023-04-14 17:42:57,516 on stmt: return $122return_value.1
DEBUG 2023-04-14 17:42:57,516 defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x0000026617C491C0>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x0000026617C50F70>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x0000026617C509A0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x0000026617B6EC40>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x0000026617B833D0>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000026617B83C70>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x0000026617CC5100>],
             '$56pred': [<numba.core.ir.Assign object at 0x0000026617CC5790>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x0000026617CC5700>],
             '$64pred': [<numba.core.ir.Assign object at 0x0000026617CC5A00>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000026617CF8FA0>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x0000026617C2D250>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000026617C2D040>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x0000026617C2DD30>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x0000026617C2D850>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x0000026617C2DA00>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000026617AD2F70>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x0000026617D1AF40>],
             '$92pred': [<numba.core.ir.Assign object at 0x0000026617D1A580>],
             '$const10.0': [<numba.core.ir.Assign object at 0x0000026617B6E4C0>],
             '$const104.1': [<numba.core.ir.Assign object at 0x0000026617C49760>],
             '$const112.4': [<numba.core.ir.Assign object at 0x0000026617C49A30>],
             '$const52.7': [<numba.core.ir.Assign object at 0x0000026617C2ADF0>],
             '$const68.1': [<numba.core.ir.Assign object at 0x0000026617CC5460>],
             '$const76.1': [<numba.core.ir.Assign object at 0x0000026617C2DF10>],
             '$const88.1': [<numba.core.ir.Assign object at 0x0000026617D1A190>],
             'bool32': [<numba.core.ir.Assign object at 0x0000026617B83FD0>],
             'bool56': [<numba.core.ir.Assign object at 0x0000026617CC5340>],
             'bool64': [<numba.core.ir.Assign object at 0x0000026617CC53D0>],
             'bool72': [<numba.core.ir.Assign object at 0x0000026617C2D610>],
             'bool8': [<numba.core.ir.Assign object at 0x0000026617AD24F0>],
             'bool92': [<numba.core.ir.Assign object at 0x0000026617D1AE80>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x0000026617C2A130>],
             'dest_index': [<numba.core.ir.Assign object at 0x0000026617B83DC0>,
                            <numba.core.ir.Assign object at 0x0000026617C506D0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x0000026617CF87C0>],
             'dest_shape': [<numba.core.ir.Assign object at 0x0000026617CF8640>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x0000026617C43F10>],
             'src_index': [<numba.core.ir.Assign object at 0x0000026617C23EE0>,
                           <numba.core.ir.Assign object at 0x0000026617C49940>],
             'src_ndim': [<numba.core.ir.Assign object at 0x0000026617CF85B0>],
             'src_shape': [<numba.core.ir.Assign object at 0x0000026617CF8F40>]})
DEBUG 2023-04-14 17:42:57,516 SSA violators {'dest_index', 'src_index'}
DEBUG 2023-04-14 17:42:57,516 Fix SSA violator on var dest_index
DEBUG 2023-04-14 17:42:57,516 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:42:57,516 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,516 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2023-04-14 17:42:57,520 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2023-04-14 17:42:57,520 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2023-04-14 17:42:57,520 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2023-04-14 17:42:57,520 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2023-04-14 17:42:57,520 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,520 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,520 on stmt: branch $8pred, 10, 14
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 10
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: $const10.0 = const(int, 0)
DEBUG 2023-04-14 17:42:57,520 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2023-04-14 17:42:57,520 on stmt: return $12return_value.1
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 14
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: src_index = const(int, 0)
DEBUG 2023-04-14 17:42:57,520 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2023-04-14 17:42:57,520 first assign: dest_index
DEBUG 2023-04-14 17:42:57,520 replaced with: dest_index = dest_ndim - src_ndim
DEBUG 2023-04-14 17:42:57,520 on stmt: jump 26
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2023-04-14 17:42:57,520 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,520 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,520 on stmt: branch $32pred, 34, 120
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,520 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,520 on stmt: $const52.7 = const(int, 1)
DEBUG 2023-04-14 17:42:57,520 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2023-04-14 17:42:57,520 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,520 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,520 on stmt: branch $56pred, 58, 86
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2023-04-14 17:42:57,520 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,520 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,520 on stmt: branch $64pred, 66, 102
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 66
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: $const68.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,520 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2023-04-14 17:42:57,520 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,520 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,520 on stmt: branch $72pred, 74, 102
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 74
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: $const76.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,520 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2023-04-14 17:42:57,520 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2023-04-14 17:42:57,520 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2023-04-14 17:42:57,520 on stmt: return $82return_value.4
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 86
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: $const88.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,520 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2023-04-14 17:42:57,520 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,520 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,520 on stmt: branch $92pred, 94, 102
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 94
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2023-04-14 17:42:57,520 on stmt: jump 102
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 102
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: $const104.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,520 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,520 on stmt: src_index = $106inplace_add.2
DEBUG 2023-04-14 17:42:57,520 on stmt: $const112.4 = const(int, 1)
DEBUG 2023-04-14 17:42:57,520 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,520 on stmt: dest_index = $114inplace_add.5
DEBUG 2023-04-14 17:42:57,520 replaced with: dest_index.1 = $114inplace_add.5
DEBUG 2023-04-14 17:42:57,520 on stmt: jump 26
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2023-04-14 17:42:57,520 on stmt: return $122return_value.1
DEBUG 2023-04-14 17:42:57,520 Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x0000026617C6A880>],
             102: [<numba.core.ir.Assign object at 0x0000026617CF2D60>]})
DEBUG 2023-04-14 17:42:57,520 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:42:57,520 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,520 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2023-04-14 17:42:57,520 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2023-04-14 17:42:57,520 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2023-04-14 17:42:57,520 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2023-04-14 17:42:57,520 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2023-04-14 17:42:57,520 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,520 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,520 on stmt: branch $8pred, 10, 14
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 10
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $const10.0 = const(int, 0)
DEBUG 2023-04-14 17:42:57,525 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2023-04-14 17:42:57,525 on stmt: return $12return_value.1
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 14
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: src_index = const(int, 0)
DEBUG 2023-04-14 17:42:57,525 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2023-04-14 17:42:57,525 on stmt: jump 26
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2023-04-14 17:42:57,525 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,525 on stmt: branch $32pred, 34, 120
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,525 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,525 find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 34
DEBUG 2023-04-14 17:42:57,525 idom 26 from label 34
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 26
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 26
DEBUG 2023-04-14 17:42:57,525 insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 102
DEBUG 2023-04-14 17:42:57,525 incoming_def dest_index.1 = $114inplace_add.5
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 14
DEBUG 2023-04-14 17:42:57,525 incoming_def dest_index = dest_ndim - src_ndim
DEBUG 2023-04-14 17:42:57,525 replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $const52.7 = const(int, 1)
DEBUG 2023-04-14 17:42:57,525 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2023-04-14 17:42:57,525 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,525 on stmt: branch $56pred, 58, 86
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2023-04-14 17:42:57,525 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,525 on stmt: branch $64pred, 66, 102
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 66
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $const68.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,525 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2023-04-14 17:42:57,525 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,525 on stmt: branch $72pred, 74, 102
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 74
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $const76.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,525 on stmt: $78binary_add.2 = dest_index + $const76.1
DEBUG 2023-04-14 17:42:57,525 find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 74
DEBUG 2023-04-14 17:42:57,525 idom 66 from label 74
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 66
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 66
DEBUG 2023-04-14 17:42:57,525 idom 58 from label 66
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 58
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 58
DEBUG 2023-04-14 17:42:57,525 idom 34 from label 58
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 34
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 34
DEBUG 2023-04-14 17:42:57,525 idom 26 from label 34
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 26
DEBUG 2023-04-14 17:42:57,525 replaced with: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG 2023-04-14 17:42:57,525 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2023-04-14 17:42:57,525 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2023-04-14 17:42:57,525 on stmt: return $82return_value.4
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 86
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $const88.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,525 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2023-04-14 17:42:57,525 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,525 on stmt: branch $92pred, 94, 102
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 94
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: dest_shape[dest_index] = src_dim_size
DEBUG 2023-04-14 17:42:57,525 find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 94
DEBUG 2023-04-14 17:42:57,525 idom 86 from label 94
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 86
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 86
DEBUG 2023-04-14 17:42:57,525 idom 34 from label 86
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 34
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 34
DEBUG 2023-04-14 17:42:57,525 idom 26 from label 34
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 26
DEBUG 2023-04-14 17:42:57,525 replaced with: dest_shape[dest_index.2] = src_dim_size
DEBUG 2023-04-14 17:42:57,525 on stmt: jump 102
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 102
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $const104.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,525 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,525 on stmt: src_index = $106inplace_add.2
DEBUG 2023-04-14 17:42:57,525 on stmt: $const112.4 = const(int, 1)
DEBUG 2023-04-14 17:42:57,525 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,525 find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 102
DEBUG 2023-04-14 17:42:57,525 idom 34 from label 102
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 34
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 34
DEBUG 2023-04-14 17:42:57,525 idom 26 from label 34
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 26
DEBUG 2023-04-14 17:42:57,525 replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,525 on stmt: dest_index.1 = $114inplace_add.5
DEBUG 2023-04-14 17:42:57,525 on stmt: jump 26
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FixSSAVars object at 0x0000026617CF86A0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $122return_value.1 = cast(value=dest_index)
DEBUG 2023-04-14 17:42:57,525 find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
DEBUG 2023-04-14 17:42:57,525 find_def_from_top label 120
DEBUG 2023-04-14 17:42:57,525 idom 26 from label 120
DEBUG 2023-04-14 17:42:57,525 find_def_from_bottom label 26
DEBUG 2023-04-14 17:42:57,525 replaced with: $122return_value.1 = cast(value=dest_index.2)
DEBUG 2023-04-14 17:42:57,525 on stmt: return $122return_value.1
DEBUG 2023-04-14 17:42:57,525 Fix SSA violator on var src_index
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,525 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2023-04-14 17:42:57,525 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2023-04-14 17:42:57,525 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2023-04-14 17:42:57,525 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2023-04-14 17:42:57,525 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2023-04-14 17:42:57,525 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,525 on stmt: branch $8pred, 10, 14
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 10
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $const10.0 = const(int, 0)
DEBUG 2023-04-14 17:42:57,525 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2023-04-14 17:42:57,525 on stmt: return $12return_value.1
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 14
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,525 on stmt: src_index = const(int, 0)
DEBUG 2023-04-14 17:42:57,525 first assign: src_index
DEBUG 2023-04-14 17:42:57,525 replaced with: src_index = const(int, 0)
DEBUG 2023-04-14 17:42:57,525 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2023-04-14 17:42:57,525 on stmt: jump 26
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,525 on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
DEBUG 2023-04-14 17:42:57,525 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2023-04-14 17:42:57,525 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,525 on stmt: branch $32pred, 34, 120
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,525 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,525 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $const52.7 = const(int, 1)
DEBUG 2023-04-14 17:42:57,525 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2023-04-14 17:42:57,525 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,525 on stmt: branch $56pred, 58, 86
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2023-04-14 17:42:57,525 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,525 on stmt: branch $64pred, 66, 102
DEBUG 2023-04-14 17:42:57,525 ==== SSA block rewrite pass on 66
DEBUG 2023-04-14 17:42:57,525 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,525 on stmt: $const68.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,525 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2023-04-14 17:42:57,525 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,525 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,525 on stmt: branch $72pred, 74, 102
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 74
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,535 on stmt: $const76.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,535 on stmt: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG 2023-04-14 17:42:57,535 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2023-04-14 17:42:57,535 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2023-04-14 17:42:57,535 on stmt: return $82return_value.4
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 86
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,535 on stmt: $const88.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,535 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2023-04-14 17:42:57,535 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,535 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,535 on stmt: branch $92pred, 94, 102
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 94
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,535 on stmt: dest_shape[dest_index.2] = src_dim_size
DEBUG 2023-04-14 17:42:57,535 on stmt: jump 102
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 102
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,535 on stmt: $const104.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,535 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,535 on stmt: src_index = $106inplace_add.2
DEBUG 2023-04-14 17:42:57,535 replaced with: src_index.1 = $106inplace_add.2
DEBUG 2023-04-14 17:42:57,535 on stmt: $const112.4 = const(int, 1)
DEBUG 2023-04-14 17:42:57,535 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,535 on stmt: dest_index.1 = $114inplace_add.5
DEBUG 2023-04-14 17:42:57,535 on stmt: jump 26
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617CF2FA0>
DEBUG 2023-04-14 17:42:57,535 on stmt: $122return_value.1 = cast(value=dest_index.2)
DEBUG 2023-04-14 17:42:57,535 on stmt: return $122return_value.1
DEBUG 2023-04-14 17:42:57,535 Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x0000026617CE6FD0>],
             102: [<numba.core.ir.Assign object at 0x0000026617C5C310>]})
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: src_ndim = arg(0, name=src_ndim)
DEBUG 2023-04-14 17:42:57,535 on stmt: src_shape = arg(1, name=src_shape)
DEBUG 2023-04-14 17:42:57,535 on stmt: dest_ndim = arg(2, name=dest_ndim)
DEBUG 2023-04-14 17:42:57,535 on stmt: dest_shape = arg(3, name=dest_shape)
DEBUG 2023-04-14 17:42:57,535 on stmt: $6compare_op.2 = src_ndim > dest_ndim
DEBUG 2023-04-14 17:42:57,535 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,535 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,535 on stmt: branch $8pred, 10, 14
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 10
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: $const10.0 = const(int, 0)
DEBUG 2023-04-14 17:42:57,535 on stmt: $12return_value.1 = cast(value=$const10.0)
DEBUG 2023-04-14 17:42:57,535 on stmt: return $12return_value.1
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 14
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: src_index = const(int, 0)
DEBUG 2023-04-14 17:42:57,535 on stmt: dest_index = dest_ndim - src_ndim
DEBUG 2023-04-14 17:42:57,535 on stmt: jump 26
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:227), Var(dest_index, npyimpl.py:211)], incoming_blocks=[102, 14])
DEBUG 2023-04-14 17:42:57,535 on stmt: $30compare_op.2 = src_index < src_ndim
DEBUG 2023-04-14 17:42:57,535 find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
DEBUG 2023-04-14 17:42:57,535 find_def_from_top label 26
DEBUG 2023-04-14 17:42:57,535 insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
DEBUG 2023-04-14 17:42:57,535 find_def_from_bottom label 102
DEBUG 2023-04-14 17:42:57,535 incoming_def src_index.1 = $106inplace_add.2
DEBUG 2023-04-14 17:42:57,535 find_def_from_bottom label 14
DEBUG 2023-04-14 17:42:57,535 incoming_def src_index = const(int, 0)
DEBUG 2023-04-14 17:42:57,535 replaced with: $30compare_op.2 = src_index.2 < src_ndim
DEBUG 2023-04-14 17:42:57,535 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,535 on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:212),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,535 on stmt: branch $32pred, 34, 120
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,535 find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,535 find_def_from_top label 34
DEBUG 2023-04-14 17:42:57,535 idom 26 from label 34
DEBUG 2023-04-14 17:42:57,535 find_def_from_bottom label 26
DEBUG 2023-04-14 17:42:57,535 replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,535 on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,535 on stmt: $const52.7 = const(int, 1)
DEBUG 2023-04-14 17:42:57,535 on stmt: $54compare_op.8 = dest_dim_size != $const52.7
DEBUG 2023-04-14 17:42:57,535 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,535 on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:217),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,535 on stmt: branch $56pred, 58, 86
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
DEBUG 2023-04-14 17:42:57,535 on stmt: bool64 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,535 on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,535 on stmt: branch $64pred, 66, 102
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 66
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: $const68.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,535 on stmt: $70compare_op.2 = src_dim_size != $const68.1
DEBUG 2023-04-14 17:42:57,535 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,535 on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,535 on stmt: branch $72pred, 74, 102
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 74
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: $const76.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,535 on stmt: $78binary_add.2 = dest_index.2 + $const76.1
DEBUG 2023-04-14 17:42:57,535 on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
DEBUG 2023-04-14 17:42:57,535 on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
DEBUG 2023-04-14 17:42:57,535 on stmt: return $82return_value.4
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 86
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: $const88.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,535 on stmt: $90compare_op.2 = src_dim_size != $const88.1
DEBUG 2023-04-14 17:42:57,535 on stmt: bool92 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:57,535 on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,535 on stmt: branch $92pred, 94, 102
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 94
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: dest_shape[dest_index.2] = src_dim_size
DEBUG 2023-04-14 17:42:57,535 on stmt: jump 102
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 102
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: $const104.1 = const(int, 1)
DEBUG 2023-04-14 17:42:57,535 on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,535 find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,535 find_def_from_top label 102
DEBUG 2023-04-14 17:42:57,535 idom 34 from label 102
DEBUG 2023-04-14 17:42:57,535 find_def_from_bottom label 34
DEBUG 2023-04-14 17:42:57,535 find_def_from_top label 34
DEBUG 2023-04-14 17:42:57,535 idom 26 from label 34
DEBUG 2023-04-14 17:42:57,535 find_def_from_bottom label 26
DEBUG 2023-04-14 17:42:57,535 replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,535 on stmt: src_index.1 = $106inplace_add.2
DEBUG 2023-04-14 17:42:57,535 on stmt: $const112.4 = const(int, 1)
DEBUG 2023-04-14 17:42:57,535 on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:42:57,535 on stmt: dest_index.1 = $114inplace_add.5
DEBUG 2023-04-14 17:42:57,535 on stmt: jump 26
DEBUG 2023-04-14 17:42:57,535 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:42:57,535 Running <numba.core.ssa._FixSSAVars object at 0x0000026617C16280>
DEBUG 2023-04-14 17:42:57,535 on stmt: $122return_value.1 = cast(value=dest_index.2)
DEBUG 2023-04-14 17:42:57,535 on stmt: return $122return_value.1
DEBUG 2023-04-14 17:42:57,845 bytecode dump:
>          0	NOP(arg=None, lineno=107)
           2	LOAD_GLOBAL(arg=0, lineno=107)
           4	LOAD_ATTR(arg=1, lineno=107)
           6	LOAD_FAST(arg=0, lineno=107)
           8	LOAD_CONST(arg=1, lineno=107)
          10	BINARY_SUBSCR(arg=None, lineno=107)
          12	LOAD_CONST(arg=2, lineno=107)
          14	LOAD_CONST(arg=3, lineno=107)
          16	CALL_FUNCTION_KW(arg=2, lineno=107)
          18	STORE_FAST(arg=1, lineno=107)
          20	LOAD_GLOBAL(arg=0, lineno=108)
          22	LOAD_ATTR(arg=1, lineno=108)
          24	LOAD_FAST(arg=0, lineno=108)
          26	LOAD_CONST(arg=2, lineno=108)
          28	BINARY_SUBSCR(arg=None, lineno=108)
          30	LOAD_CONST(arg=2, lineno=108)
          32	LOAD_CONST(arg=3, lineno=108)
          34	CALL_FUNCTION_KW(arg=2, lineno=108)
          36	STORE_FAST(arg=2, lineno=108)
          38	LOAD_GLOBAL(arg=0, lineno=109)
          40	LOAD_ATTR(arg=1, lineno=109)
          42	LOAD_FAST(arg=1, lineno=109)
          44	LOAD_FAST(arg=2, lineno=109)
          46	BUILD_TUPLE(arg=2, lineno=109)
          48	LOAD_CONST(arg=1, lineno=109)
          50	LOAD_CONST(arg=3, lineno=109)
          52	CALL_FUNCTION_KW(arg=2, lineno=109)
          54	RETURN_VALUE(arg=None, lineno=109)
DEBUG 2023-04-14 17:42:57,845 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,845 stack: []
DEBUG 2023-04-14 17:42:57,845 dispatch pc=0, inst=NOP(arg=None, lineno=107)
DEBUG 2023-04-14 17:42:57,845 stack []
DEBUG 2023-04-14 17:42:57,845 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=107)
DEBUG 2023-04-14 17:42:57,845 stack []
DEBUG 2023-04-14 17:42:57,845 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=107)
DEBUG 2023-04-14 17:42:57,845 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,845 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=107)
DEBUG 2023-04-14 17:42:57,845 stack ['$4load_attr.1']
DEBUG 2023-04-14 17:42:57,845 dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=107)
DEBUG 2023-04-14 17:42:57,845 stack ['$4load_attr.1', '$X6.2']
DEBUG 2023-04-14 17:42:57,845 dispatch pc=10, inst=BINARY_SUBSCR(arg=None, lineno=107)
DEBUG 2023-04-14 17:42:57,845 stack ['$4load_attr.1', '$X6.2', '$const8.3']
DEBUG 2023-04-14 17:42:57,845 dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=107)
DEBUG 2023-04-14 17:42:57,845 stack ['$4load_attr.1', '$10binary_subscr.4']
DEBUG 2023-04-14 17:42:57,845 dispatch pc=14, inst=LOAD_CONST(arg=3, lineno=107)
DEBUG 2023-04-14 17:42:57,845 stack ['$4load_attr.1', '$10binary_subscr.4', '$const12.5']
DEBUG 2023-04-14 17:42:57,845 dispatch pc=16, inst=CALL_FUNCTION_KW(arg=2, lineno=107)
DEBUG 2023-04-14 17:42:57,845 stack ['$4load_attr.1', '$10binary_subscr.4', '$const12.5', '$const14.6']
DEBUG 2023-04-14 17:42:57,845 dispatch pc=18, inst=STORE_FAST(arg=1, lineno=107)
DEBUG 2023-04-14 17:42:57,850 stack ['$16call_function_kw.7']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=20, inst=LOAD_GLOBAL(arg=0, lineno=108)
DEBUG 2023-04-14 17:42:57,850 stack []
DEBUG 2023-04-14 17:42:57,850 dispatch pc=22, inst=LOAD_ATTR(arg=1, lineno=108)
DEBUG 2023-04-14 17:42:57,850 stack ['$20load_global.8']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=108)
DEBUG 2023-04-14 17:42:57,850 stack ['$22load_attr.9']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=108)
DEBUG 2023-04-14 17:42:57,850 stack ['$22load_attr.9', '$X24.10']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=108)
DEBUG 2023-04-14 17:42:57,850 stack ['$22load_attr.9', '$X24.10', '$const26.11']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=108)
DEBUG 2023-04-14 17:42:57,850 stack ['$22load_attr.9', '$28binary_subscr.12']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=108)
DEBUG 2023-04-14 17:42:57,850 stack ['$22load_attr.9', '$28binary_subscr.12', '$const30.13']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=34, inst=CALL_FUNCTION_KW(arg=2, lineno=108)
DEBUG 2023-04-14 17:42:57,850 stack ['$22load_attr.9', '$28binary_subscr.12', '$const30.13', '$const32.14']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=36, inst=STORE_FAST(arg=2, lineno=108)
DEBUG 2023-04-14 17:42:57,850 stack ['$34call_function_kw.15']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=38, inst=LOAD_GLOBAL(arg=0, lineno=109)
DEBUG 2023-04-14 17:42:57,850 stack []
DEBUG 2023-04-14 17:42:57,850 dispatch pc=40, inst=LOAD_ATTR(arg=1, lineno=109)
DEBUG 2023-04-14 17:42:57,850 stack ['$38load_global.16']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=109)
DEBUG 2023-04-14 17:42:57,850 stack ['$40load_attr.17']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=109)
DEBUG 2023-04-14 17:42:57,850 stack ['$40load_attr.17', '$xtmp142.18']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=46, inst=BUILD_TUPLE(arg=2, lineno=109)
DEBUG 2023-04-14 17:42:57,850 stack ['$40load_attr.17', '$xtmp142.18', '$xtmp244.19']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=48, inst=LOAD_CONST(arg=1, lineno=109)
DEBUG 2023-04-14 17:42:57,850 stack ['$40load_attr.17', '$46build_tuple.20']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=50, inst=LOAD_CONST(arg=3, lineno=109)
DEBUG 2023-04-14 17:42:57,850 stack ['$40load_attr.17', '$46build_tuple.20', '$const48.21']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=52, inst=CALL_FUNCTION_KW(arg=2, lineno=109)
DEBUG 2023-04-14 17:42:57,850 stack ['$40load_attr.17', '$46build_tuple.20', '$const48.21', '$const50.22']
DEBUG 2023-04-14 17:42:57,850 dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=109)
DEBUG 2023-04-14 17:42:57,850 stack ['$52call_function_kw.23']
DEBUG 2023-04-14 17:42:57,850 end state. edges=[]
DEBUG 2023-04-14 17:42:57,850 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,850 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,850 defmap: {}
DEBUG 2023-04-14 17:42:57,853 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,853 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,853 keep phismap: {}
DEBUG 2023-04-14 17:42:57,853 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,853 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,853 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$X6.2'}), (8, {'res': '$const8.3'}), (10, {'index': '$const8.3', 'target': '$X6.2', 'res': '$10binary_subscr.4'}), (12, {'res': '$const12.5'}), (14, {'res': '$const14.6'}), (16, {'func': '$4load_attr.1', 'args': ['$10binary_subscr.4', '$const12.5'], 'names': '$const14.6', 'res': '$16call_function_kw.7'}), (18, {'value': '$16call_function_kw.7'}), (20, {'res': '$20load_global.8'}), (22, {'item': '$20load_global.8', 'res': '$22load_attr.9'}), (24, {'res': '$X24.10'}), (26, {'res': '$const26.11'}), (28, {'index': '$const26.11', 'target': '$X24.10', 'res': '$28binary_subscr.12'}), (30, {'res': '$const30.13'}), (32, {'res': '$const32.14'}), (34, {'func': '$22load_attr.9', 'args': ['$28binary_subscr.12', '$const30.13'], 'names': '$const32.14', 'res': '$34call_function_kw.15'}), (36, {'value': '$34call_function_kw.15'}), (38, {'res': '$38load_global.16'}), (40, {'item': '$38load_global.16', 'res': '$40load_attr.17'}), (42, {'res': '$xtmp142.18'}), (44, {'res': '$xtmp244.19'}), (46, {'items': ['$xtmp142.18', '$xtmp244.19'], 'res': '$46build_tuple.20'}), (48, {'res': '$const48.21'}), (50, {'res': '$const50.22'}), (52, {'func': '$40load_attr.17', 'args': ['$46build_tuple.20', '$const48.21'], 'names': '$const50.22', 'res': '$52call_function_kw.23'}), (54, {'retval': '$52call_function_kw.23', 'castval': '$54return_value.24'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,855 label 0:
    X = arg(0, name=X)                       ['X']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=concatenate) ['$2load_global.0', '$4load_attr.1']
    $const8.3 = const(int, 0)                ['$const8.3']
    $10binary_subscr.4 = getitem(value=X, index=$const8.3, fn=<built-in function getitem>) ['$10binary_subscr.4', '$const8.3', 'X']
    $const12.5 = const(int, 1)               ['$const12.5']
    xtmp1 = call $4load_attr.1($10binary_subscr.4, func=$4load_attr.1, args=[Var($10binary_subscr.4, _torontonian.py:107)], kws=[('axis', Var($const12.5, _torontonian.py:107))], vararg=None, varkwarg=None, target=None) ['$10binary_subscr.4', '$4load_attr.1', '$const12.5', 'xtmp1']
    $20load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$20load_global.8']
    $22load_attr.9 = getattr(value=$20load_global.8, attr=concatenate) ['$20load_global.8', '$22load_attr.9']
    $const26.11 = const(int, 1)              ['$const26.11']
    $28binary_subscr.12 = getitem(value=X, index=$const26.11, fn=<built-in function getitem>) ['$28binary_subscr.12', '$const26.11', 'X']
    $const30.13 = const(int, 1)              ['$const30.13']
    xtmp2 = call $22load_attr.9($28binary_subscr.12, func=$22load_attr.9, args=[Var($28binary_subscr.12, _torontonian.py:108)], kws=[('axis', Var($const30.13, _torontonian.py:108))], vararg=None, varkwarg=None, target=None) ['$22load_attr.9', '$28binary_subscr.12', '$const30.13', 'xtmp2']
    $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$38load_global.16']
    $40load_attr.17 = getattr(value=$38load_global.16, attr=concatenate) ['$38load_global.16', '$40load_attr.17']
    $46build_tuple.20 = build_tuple(items=[Var(xtmp1, _torontonian.py:107), Var(xtmp2, _torontonian.py:108)]) ['$46build_tuple.20', 'xtmp1', 'xtmp2']
    $const48.21 = const(int, 0)              ['$const48.21']
    $52call_function_kw.23 = call $40load_attr.17($46build_tuple.20, func=$40load_attr.17, args=[Var($46build_tuple.20, _torontonian.py:109)], kws=[('axis', Var($const48.21, _torontonian.py:109))], vararg=None, varkwarg=None, target=None) ['$40load_attr.17', '$46build_tuple.20', '$52call_function_kw.23', '$const48.21']
    $54return_value.24 = cast(value=$52call_function_kw.23) ['$52call_function_kw.23', '$54return_value.24']
    return $54return_value.24                ['$54return_value.24']

DEBUG 2023-04-14 17:42:57,860 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,860 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617C18400>
DEBUG 2023-04-14 17:42:57,860 on stmt: X = arg(0, name=X)
DEBUG 2023-04-14 17:42:57,860 on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:42:57,860 on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=concatenate)
DEBUG 2023-04-14 17:42:57,860 on stmt: $const8.3 = const(int, 0)
DEBUG 2023-04-14 17:42:57,860 on stmt: $10binary_subscr.4 = static_getitem(value=X, index=0, index_var=$const8.3, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,860 on stmt: $const12.5 = const(int, 1)
DEBUG 2023-04-14 17:42:57,860 on stmt: xtmp1 = call $4load_attr.1($10binary_subscr.4, func=$4load_attr.1, args=[Var($10binary_subscr.4, _torontonian.py:107)], kws=[('axis', Var($const12.5, _torontonian.py:107))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,860 on stmt: $20load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:42:57,860 on stmt: $22load_attr.9 = getattr(value=$20load_global.8, attr=concatenate)
DEBUG 2023-04-14 17:42:57,860 on stmt: $const26.11 = const(int, 1)
DEBUG 2023-04-14 17:42:57,860 on stmt: $28binary_subscr.12 = static_getitem(value=X, index=1, index_var=$const26.11, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:42:57,860 on stmt: $const30.13 = const(int, 1)
DEBUG 2023-04-14 17:42:57,860 on stmt: xtmp2 = call $22load_attr.9($28binary_subscr.12, func=$22load_attr.9, args=[Var($28binary_subscr.12, _torontonian.py:108)], kws=[('axis', Var($const30.13, _torontonian.py:108))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,860 on stmt: $38load_global.16 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:42:57,860 on stmt: $40load_attr.17 = getattr(value=$38load_global.16, attr=concatenate)
DEBUG 2023-04-14 17:42:57,860 on stmt: $46build_tuple.20 = build_tuple(items=[Var(xtmp1, _torontonian.py:107), Var(xtmp2, _torontonian.py:108)])
DEBUG 2023-04-14 17:42:57,860 on stmt: $const48.21 = const(int, 0)
DEBUG 2023-04-14 17:42:57,860 on stmt: $52call_function_kw.23 = call $40load_attr.17($46build_tuple.20, func=$40load_attr.17, args=[Var($46build_tuple.20, _torontonian.py:109)], kws=[('axis', Var($const48.21, _torontonian.py:109))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,860 on stmt: $54return_value.24 = cast(value=$52call_function_kw.23)
DEBUG 2023-04-14 17:42:57,860 on stmt: return $54return_value.24
DEBUG 2023-04-14 17:42:57,860 defs defaultdict(<class 'list'>,
            {'$10binary_subscr.4': [<numba.core.ir.Assign object at 0x0000026617C16A90>],
             '$20load_global.8': [<numba.core.ir.Assign object at 0x0000026617C897C0>],
             '$22load_attr.9': [<numba.core.ir.Assign object at 0x0000026617C89D00>],
             '$28binary_subscr.12': [<numba.core.ir.Assign object at 0x0000026617C16850>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617C7B910>],
             '$38load_global.16': [<numba.core.ir.Assign object at 0x0000026617D788E0>],
             '$40load_attr.17': [<numba.core.ir.Assign object at 0x0000026617D78C70>],
             '$46build_tuple.20': [<numba.core.ir.Assign object at 0x0000026617D76F10>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000026617C7BAF0>],
             '$52call_function_kw.23': [<numba.core.ir.Assign object at 0x0000026617C231C0>],
             '$54return_value.24': [<numba.core.ir.Assign object at 0x0000026617C23460>],
             '$const12.5': [<numba.core.ir.Assign object at 0x0000026617B18700>],
             '$const26.11': [<numba.core.ir.Assign object at 0x0000026617C676A0>],
             '$const30.13': [<numba.core.ir.Assign object at 0x0000026617D0E5B0>],
             '$const48.21': [<numba.core.ir.Assign object at 0x0000026617D76D00>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000026617B18D00>],
             'X': [<numba.core.ir.Assign object at 0x0000026617C7B040>],
             'xtmp1': [<numba.core.ir.Assign object at 0x0000026617C89AF0>],
             'xtmp2': [<numba.core.ir.Assign object at 0x0000026617C7B9D0>]})
DEBUG 2023-04-14 17:42:57,860 SSA violators set()
DEBUG 2023-04-14 17:42:57,865 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2023-04-14 17:42:57,865 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:57,865 stack: []
DEBUG 2023-04-14 17:42:57,865 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2023-04-14 17:42:57,865 stack []
DEBUG 2023-04-14 17:42:57,865 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2023-04-14 17:42:57,865 stack []
DEBUG 2023-04-14 17:42:57,865 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2023-04-14 17:42:57,865 stack ['$2load_global.0']
DEBUG 2023-04-14 17:42:57,865 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2023-04-14 17:42:57,865 stack ['$2load_global.0', '$arrays4.1']
DEBUG 2023-04-14 17:42:57,865 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2023-04-14 17:42:57,865 stack ['$2load_global.0', '$arrays4.1', '$axis6.2']
DEBUG 2023-04-14 17:42:57,865 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2023-04-14 17:42:57,865 stack ['$8call_function.3']
DEBUG 2023-04-14 17:42:57,865 end state. edges=[]
DEBUG 2023-04-14 17:42:57,865 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:57,865 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:57,865 defmap: {}
DEBUG 2023-04-14 17:42:57,865 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,865 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:57,865 keep phismap: {}
DEBUG 2023-04-14 17:42:57,865 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:57,865 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:57,865 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$arrays4.1'}), (6, {'res': '$axis6.2'}), (8, {'func': '$2load_global.0', 'args': ['$arrays4.1', '$axis6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:57,865 label 0:
    arrays = arg(0, name=arrays)             ['arrays']
    axis = arg(1, name=axis)                 ['axis']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(arrays, axis, func=$2load_global.0, args=[Var(arrays, <string>:3), Var(axis, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'arrays', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2023-04-14 17:42:57,870 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:57,870 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617D6C9A0>
DEBUG 2023-04-14 17:42:57,870 on stmt: arrays = arg(0, name=arrays)
DEBUG 2023-04-14 17:42:57,870 on stmt: axis = arg(1, name=axis)
DEBUG 2023-04-14 17:42:57,870 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2023-04-14 17:42:57,870 on stmt: $8call_function.3 = call $2load_global.0(arrays, axis, func=$2load_global.0, args=[Var(arrays, <string>:3), Var(axis, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:57,870 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2023-04-14 17:42:57,870 on stmt: return $10return_value.4
DEBUG 2023-04-14 17:42:57,875 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x0000026617D30FA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026617D52190>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x0000026617CC5310>],
             'arrays': [<numba.core.ir.Assign object at 0x0000026617B6EB20>],
             'axis': [<numba.core.ir.Assign object at 0x0000026617D52100>]})
DEBUG 2023-04-14 17:42:57,875 SSA violators set()
DEBUG 2023-04-14 17:42:58,886 bytecode dump:
>          0	NOP(arg=None, lineno=145)
           2	LOAD_FAST(arg=0, lineno=145)
           4	LOAD_FAST(arg=1, lineno=145)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:58,886 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:58,886 stack: []
DEBUG 2023-04-14 17:42:58,886 dispatch pc=0, inst=NOP(arg=None, lineno=145)
DEBUG 2023-04-14 17:42:58,886 stack []
DEBUG 2023-04-14 17:42:58,886 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=145)
DEBUG 2023-04-14 17:42:58,886 stack []
DEBUG 2023-04-14 17:42:58,886 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=145)
DEBUG 2023-04-14 17:42:58,886 stack ['$_40binary_subscr_19_12.0']
DEBUG 2023-04-14 17:42:58,886 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:58,886 stack ['$_40binary_subscr_19_12.0', '$_46binary_true_divide_22_14.1']
DEBUG 2023-04-14 17:42:58,886 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:58,886 stack ['$6binary_multiply.2']
DEBUG 2023-04-14 17:42:58,886 end state. edges=[]
DEBUG 2023-04-14 17:42:58,886 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:58,886 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:58,886 defmap: {}
DEBUG 2023-04-14 17:42:58,886 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:58,886 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:58,886 keep phismap: {}
DEBUG 2023-04-14 17:42:58,886 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:58,886 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:58,886 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_40binary_subscr_19_12.0'}), (4, {'res': '$_46binary_true_divide_22_14.1'}), (6, {'lhs': '$_40binary_subscr_19_12.0', 'rhs': '$_46binary_true_divide_22_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:58,886 label 0:
    _40binary_subscr_19_1 = arg(0, name=_40binary_subscr_19_1) ['_40binary_subscr_19_1']
    _46binary_true_divide_22_1 = arg(1, name=_46binary_true_divide_22_1) ['_46binary_true_divide_22_1']
    $6binary_multiply.2 = _40binary_subscr_19_1 * _46binary_true_divide_22_1 ['$6binary_multiply.2', '_40binary_subscr_19_1', '_46binary_true_divide_22_1']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:42:58,896 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:58,896 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618E39AF0>
DEBUG 2023-04-14 17:42:58,896 on stmt: _40binary_subscr_19_1 = arg(0, name=_40binary_subscr_19_1)
DEBUG 2023-04-14 17:42:58,896 on stmt: _46binary_true_divide_22_1 = arg(1, name=_46binary_true_divide_22_1)
DEBUG 2023-04-14 17:42:58,896 on stmt: $6binary_multiply.2 = _40binary_subscr_19_1 * _46binary_true_divide_22_1
DEBUG 2023-04-14 17:42:58,896 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2023-04-14 17:42:58,896 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:42:58,896 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x0000026618E3A880>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000026618E3A9D0>],
             '_40binary_subscr_19_1': [<numba.core.ir.Assign object at 0x0000026618E397F0>],
             '_46binary_true_divide_22_1': [<numba.core.ir.Assign object at 0x0000026618E3A490>]})
DEBUG 2023-04-14 17:42:58,896 SSA violators set()
DEBUG 2023-04-14 17:42:58,925 bytecode dump:
>          0	NOP(arg=None, lineno=146)
           2	LOAD_FAST(arg=0, lineno=146)
           4	LOAD_FAST(arg=1, lineno=146)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:58,925 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:58,925 stack: []
DEBUG 2023-04-14 17:42:58,925 dispatch pc=0, inst=NOP(arg=None, lineno=146)
DEBUG 2023-04-14 17:42:58,925 stack []
DEBUG 2023-04-14 17:42:58,925 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=146)
DEBUG 2023-04-14 17:42:58,925 stack []
DEBUG 2023-04-14 17:42:58,925 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=146)
DEBUG 2023-04-14 17:42:58,925 stack ['$_68binary_subscr_34_12.0']
DEBUG 2023-04-14 17:42:58,926 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:58,926 stack ['$_68binary_subscr_34_12.0', '$_74binary_true_divide_37_14.1']
DEBUG 2023-04-14 17:42:58,926 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:58,926 stack ['$6binary_multiply.2']
DEBUG 2023-04-14 17:42:58,926 end state. edges=[]
DEBUG 2023-04-14 17:42:58,926 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:58,926 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:58,926 defmap: {}
DEBUG 2023-04-14 17:42:58,926 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:58,926 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:58,927 keep phismap: {}
DEBUG 2023-04-14 17:42:58,927 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:58,927 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:58,927 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_68binary_subscr_34_12.0'}), (4, {'res': '$_74binary_true_divide_37_14.1'}), (6, {'lhs': '$_68binary_subscr_34_12.0', 'rhs': '$_74binary_true_divide_37_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:58,927 label 0:
    _68binary_subscr_34_1 = arg(0, name=_68binary_subscr_34_1) ['_68binary_subscr_34_1']
    _74binary_true_divide_37_1 = arg(1, name=_74binary_true_divide_37_1) ['_74binary_true_divide_37_1']
    $6binary_multiply.2 = _68binary_subscr_34_1 * _74binary_true_divide_37_1 ['$6binary_multiply.2', '_68binary_subscr_34_1', '_74binary_true_divide_37_1']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:42:58,935 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:58,935 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618EAC970>
DEBUG 2023-04-14 17:42:58,936 on stmt: _68binary_subscr_34_1 = arg(0, name=_68binary_subscr_34_1)
DEBUG 2023-04-14 17:42:58,936 on stmt: _74binary_true_divide_37_1 = arg(1, name=_74binary_true_divide_37_1)
DEBUG 2023-04-14 17:42:58,936 on stmt: $6binary_multiply.2 = _68binary_subscr_34_1 * _74binary_true_divide_37_1
DEBUG 2023-04-14 17:42:58,936 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2023-04-14 17:42:58,936 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:42:58,936 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x0000026618EB15E0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000026618EB14F0>],
             '_68binary_subscr_34_1': [<numba.core.ir.Assign object at 0x0000026618EA7B50>],
             '_74binary_true_divide_37_1': [<numba.core.ir.Assign object at 0x0000026618EA7850>]})
DEBUG 2023-04-14 17:42:58,936 SSA violators set()
DEBUG 2023-04-14 17:42:58,976 bytecode dump:
>          0	NOP(arg=None, lineno=147)
           2	LOAD_FAST(arg=1, lineno=147)
           4	LOAD_FAST(arg=0, lineno=147)
           6	BINARY_MULTIPLY(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:58,976 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:58,976 stack: []
DEBUG 2023-04-14 17:42:58,976 dispatch pc=0, inst=NOP(arg=None, lineno=147)
DEBUG 2023-04-14 17:42:58,976 stack []
DEBUG 2023-04-14 17:42:58,976 dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=147)
DEBUG 2023-04-14 17:42:58,976 stack []
DEBUG 2023-04-14 17:42:58,976 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=147)
DEBUG 2023-04-14 17:42:58,976 stack ['$_96binary_subscr_49_12.0']
DEBUG 2023-04-14 17:42:58,976 dispatch pc=6, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:58,976 stack ['$_96binary_subscr_49_12.0', '$_102binary_true_divide_52_14.1']
DEBUG 2023-04-14 17:42:58,976 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:58,976 stack ['$6binary_multiply.2']
DEBUG 2023-04-14 17:42:58,976 end state. edges=[]
DEBUG 2023-04-14 17:42:58,976 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:58,980 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:58,980 defmap: {}
DEBUG 2023-04-14 17:42:58,980 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:58,980 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:58,980 keep phismap: {}
DEBUG 2023-04-14 17:42:58,980 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:58,980 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:58,980 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_96binary_subscr_49_12.0'}), (4, {'res': '$_102binary_true_divide_52_14.1'}), (6, {'lhs': '$_96binary_subscr_49_12.0', 'rhs': '$_102binary_true_divide_52_14.1', 'res': '$6binary_multiply.2'}), (8, {'retval': '$6binary_multiply.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:58,980 label 0:
    _102binary_true_divide_52_1 = arg(0, name=_102binary_true_divide_52_1) ['_102binary_true_divide_52_1']
    _96binary_subscr_49_1 = arg(1, name=_96binary_subscr_49_1) ['_96binary_subscr_49_1']
    $6binary_multiply.2 = _96binary_subscr_49_1 * _102binary_true_divide_52_1 ['$6binary_multiply.2', '_102binary_true_divide_52_1', '_96binary_subscr_49_1']
    $8return_value.3 = cast(value=$6binary_multiply.2) ['$6binary_multiply.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:42:58,984 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:58,984 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618F22280>
DEBUG 2023-04-14 17:42:58,984 on stmt: _102binary_true_divide_52_1 = arg(0, name=_102binary_true_divide_52_1)
DEBUG 2023-04-14 17:42:58,984 on stmt: _96binary_subscr_49_1 = arg(1, name=_96binary_subscr_49_1)
DEBUG 2023-04-14 17:42:58,984 on stmt: $6binary_multiply.2 = _96binary_subscr_49_1 * _102binary_true_divide_52_1
DEBUG 2023-04-14 17:42:58,984 on stmt: $8return_value.3 = cast(value=$6binary_multiply.2)
DEBUG 2023-04-14 17:42:58,984 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:42:58,984 defs defaultdict(<class 'list'>,
            {'$6binary_multiply.2': [<numba.core.ir.Assign object at 0x0000026618F22F40>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000026618F250D0>],
             '_102binary_true_divide_52_1': [<numba.core.ir.Assign object at 0x0000026618F22610>],
             '_96binary_subscr_49_1': [<numba.core.ir.Assign object at 0x0000026618F22B50>]})
DEBUG 2023-04-14 17:42:58,985 SSA violators set()
DEBUG 2023-04-14 17:42:59,007 bytecode dump:
>          0	NOP(arg=None, lineno=145)
           2	LOAD_FAST(arg=3, lineno=145)
           4	LOAD_FAST(arg=2, lineno=147)
           6	BINARY_ADD(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	LOAD_FAST(arg=4, lineno=146)
          12	LOAD_FAST(arg=0, lineno=149)
          14	BINARY_SUBTRACT(arg=None, lineno=1)
          16	BINARY_MULTIPLY(arg=None, lineno=1)
          18	BINARY_ADD(arg=None, lineno=1)
          20	LOAD_CONST(arg=2, lineno=1)
          22	LOAD_FAST(arg=1, lineno=143)
          24	BINARY_MULTIPLY(arg=None, lineno=1)
          26	BINARY_SUBTRACT(arg=None, lineno=1)
          28	LOAD_CONST(arg=3, lineno=1)
          30	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
          32	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,007 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,007 stack: []
DEBUG 2023-04-14 17:42:59,015 dispatch pc=0, inst=NOP(arg=None, lineno=145)
DEBUG 2023-04-14 17:42:59,015 stack []
DEBUG 2023-04-14 17:42:59,015 dispatch pc=2, inst=LOAD_FAST(arg=3, lineno=145)
DEBUG 2023-04-14 17:42:59,015 stack []
DEBUG 2023-04-14 17:42:59,015 dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=147)
DEBUG 2023-04-14 17:42:59,015 stack ['$x_12.0']
DEBUG 2023-04-14 17:42:59,015 dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,015 stack ['$x_12.0', '$p_14.1']
DEBUG 2023-04-14 17:42:59,015 dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2023-04-14 17:42:59,015 stack ['$6binary_add.2']
DEBUG 2023-04-14 17:42:59,015 dispatch pc=10, inst=LOAD_FAST(arg=4, lineno=146)
DEBUG 2023-04-14 17:42:59,016 stack ['$6binary_add.2', '$const8.3']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=149)
DEBUG 2023-04-14 17:42:59,016 stack ['$6binary_add.2', '$const8.3', '$xp_110.4']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=14, inst=BINARY_SUBTRACT(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,016 stack ['$6binary_add.2', '$const8.3', '$xp_110.4', '$_120load_attr_60_112.5']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,016 stack ['$6binary_add.2', '$const8.3', '$14binary_subtract.6']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,016 stack ['$6binary_add.2', '$16binary_multiply.7']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=1)
DEBUG 2023-04-14 17:42:59,016 stack ['$18binary_add.8']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=143)
DEBUG 2023-04-14 17:42:59,016 stack ['$18binary_add.8', '$const20.9']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,016 stack ['$18binary_add.8', '$const20.9', '$I_122.10']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,016 stack ['$18binary_add.8', '$24binary_multiply.11']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=1)
DEBUG 2023-04-14 17:42:59,016 stack ['$26binary_subtract.12']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=30, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,016 stack ['$26binary_subtract.12', '$const28.13']
DEBUG 2023-04-14 17:42:59,016 dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,016 stack ['$30binary_true_divide.14']
DEBUG 2023-04-14 17:42:59,016 end state. edges=[]
DEBUG 2023-04-14 17:42:59,016 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:59,017 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:59,017 defmap: {}
DEBUG 2023-04-14 17:42:59,017 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:59,017 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:59,017 keep phismap: {}
DEBUG 2023-04-14 17:42:59,017 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:59,017 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:59,017 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_12.0'}), (4, {'res': '$p_14.1'}), (6, {'lhs': '$x_12.0', 'rhs': '$p_14.1', 'res': '$6binary_add.2'}), (8, {'res': '$const8.3'}), (10, {'res': '$xp_110.4'}), (12, {'res': '$_120load_attr_60_112.5'}), (14, {'lhs': '$xp_110.4', 'rhs': '$_120load_attr_60_112.5', 'res': '$14binary_subtract.6'}), (16, {'lhs': '$const8.3', 'rhs': '$14binary_subtract.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$6binary_add.2', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'res': '$const20.9'}), (22, {'res': '$I_122.10'}), (24, {'lhs': '$const20.9', 'rhs': '$I_122.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$18binary_add.8', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'res': '$const28.13'}), (30, {'lhs': '$26binary_subtract.12', 'rhs': '$const28.13', 'res': '$30binary_true_divide.14'}), (32, {'retval': '$30binary_true_divide.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:59,017 label 0:
    _120load_attr_60_1 = arg(0, name=_120load_attr_60_1) ['_120load_attr_60_1']
    I_1 = arg(1, name=I_1)                   ['I_1']
    p_1 = arg(2, name=p_1)                   ['p_1']
    x_1 = arg(3, name=x_1)                   ['x_1']
    xp_1 = arg(4, name=xp_1)                 ['xp_1']
    $6binary_add.2 = x_1 + p_1               ['$6binary_add.2', 'p_1', 'x_1']
    $const8.3 = const(complex, 1j)           ['$const8.3']
    $14binary_subtract.6 = xp_1 - _120load_attr_60_1 ['$14binary_subtract.6', '_120load_attr_60_1', 'xp_1']
    $16binary_multiply.7 = $const8.3 * $14binary_subtract.6 ['$14binary_subtract.6', '$16binary_multiply.7', '$const8.3']
    $18binary_add.8 = $6binary_add.2 + $16binary_multiply.7 ['$16binary_multiply.7', '$18binary_add.8', '$6binary_add.2']
    $const20.9 = const(int, 2)               ['$const20.9']
    $24binary_multiply.11 = $const20.9 * I_1 ['$24binary_multiply.11', '$const20.9', 'I_1']
    $26binary_subtract.12 = $18binary_add.8 - $24binary_multiply.11 ['$18binary_add.8', '$24binary_multiply.11', '$26binary_subtract.12']
    $const28.13 = const(int, 4)              ['$const28.13']
    $30binary_true_divide.14 = $26binary_subtract.12 / $const28.13 ['$26binary_subtract.12', '$30binary_true_divide.14', '$const28.13']
    $32return_value.15 = cast(value=$30binary_true_divide.14) ['$30binary_true_divide.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

DEBUG 2023-04-14 17:42:59,017 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:59,017 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618F64880>
DEBUG 2023-04-14 17:42:59,017 on stmt: _120load_attr_60_1 = arg(0, name=_120load_attr_60_1)
DEBUG 2023-04-14 17:42:59,017 on stmt: I_1 = arg(1, name=I_1)
DEBUG 2023-04-14 17:42:59,017 on stmt: p_1 = arg(2, name=p_1)
DEBUG 2023-04-14 17:42:59,017 on stmt: x_1 = arg(3, name=x_1)
DEBUG 2023-04-14 17:42:59,017 on stmt: xp_1 = arg(4, name=xp_1)
DEBUG 2023-04-14 17:42:59,017 on stmt: $6binary_add.2 = x_1 + p_1
DEBUG 2023-04-14 17:42:59,017 on stmt: $const8.3 = const(complex, 1j)
DEBUG 2023-04-14 17:42:59,017 on stmt: $14binary_subtract.6 = xp_1 - _120load_attr_60_1
DEBUG 2023-04-14 17:42:59,017 on stmt: $16binary_multiply.7 = $const8.3 * $14binary_subtract.6
DEBUG 2023-04-14 17:42:59,017 on stmt: $18binary_add.8 = $6binary_add.2 + $16binary_multiply.7
DEBUG 2023-04-14 17:42:59,017 on stmt: $const20.9 = const(int, 2)
DEBUG 2023-04-14 17:42:59,017 on stmt: $24binary_multiply.11 = $const20.9 * I_1
DEBUG 2023-04-14 17:42:59,025 on stmt: $26binary_subtract.12 = $18binary_add.8 - $24binary_multiply.11
DEBUG 2023-04-14 17:42:59,025 on stmt: $const28.13 = const(int, 4)
DEBUG 2023-04-14 17:42:59,025 on stmt: $30binary_true_divide.14 = $26binary_subtract.12 / $const28.13
DEBUG 2023-04-14 17:42:59,025 on stmt: $32return_value.15 = cast(value=$30binary_true_divide.14)
DEBUG 2023-04-14 17:42:59,025 on stmt: return $32return_value.15
DEBUG 2023-04-14 17:42:59,026 defs defaultdict(<class 'list'>,
            {'$14binary_subtract.6': [<numba.core.ir.Assign object at 0x0000026618F66E20>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x0000026618F66FA0>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x0000026618F66100>],
             '$24binary_multiply.11': [<numba.core.ir.Assign object at 0x0000026618F64310>],
             '$26binary_subtract.12': [<numba.core.ir.Assign object at 0x0000026618F64640>],
             '$30binary_true_divide.14': [<numba.core.ir.Assign object at 0x0000026618F6C0A0>],
             '$32return_value.15': [<numba.core.ir.Assign object at 0x0000026618F6C220>],
             '$6binary_add.2': [<numba.core.ir.Assign object at 0x0000026618F668E0>],
             '$const20.9': [<numba.core.ir.Assign object at 0x0000026618F64F40>],
             '$const28.13': [<numba.core.ir.Assign object at 0x0000026618F644F0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000026618F66A30>],
             'I_1': [<numba.core.ir.Assign object at 0x0000026618F66190>],
             '_120load_attr_60_1': [<numba.core.ir.Assign object at 0x0000026618F64970>],
             'p_1': [<numba.core.ir.Assign object at 0x0000026618F662B0>],
             'x_1': [<numba.core.ir.Assign object at 0x0000026618F663D0>],
             'xp_1': [<numba.core.ir.Assign object at 0x0000026618F664F0>]})
DEBUG 2023-04-14 17:42:59,026 SSA violators set()
DEBUG 2023-04-14 17:42:59,048 bytecode dump:
>          0	NOP(arg=None, lineno=1063)
           2	LOAD_FAST(arg=0, lineno=1063)
           4	LOAD_ATTR(arg=0, lineno=1063)
           6	STORE_FAST(arg=2, lineno=1063)
           8	LOAD_FAST(arg=0, lineno=1064)
          10	LOAD_ATTR(arg=1, lineno=1064)
          12	STORE_FAST(arg=3, lineno=1064)
          14	LOAD_FAST(arg=1, lineno=1065)
          16	LOAD_ATTR(arg=0, lineno=1065)
          18	STORE_FAST(arg=4, lineno=1065)
          20	LOAD_FAST(arg=1, lineno=1066)
          22	LOAD_ATTR(arg=1, lineno=1066)
          24	STORE_FAST(arg=5, lineno=1066)
          26	LOAD_FAST(arg=4, lineno=1067)
          28	POP_JUMP_IF_TRUE(arg=42, lineno=1067)
          30	LOAD_FAST(arg=5, lineno=1067)
          32	POP_JUMP_IF_TRUE(arg=42, lineno=1067)
          34	LOAD_GLOBAL(arg=2, lineno=1068)
          36	LOAD_CONST(arg=1, lineno=1068)
          38	CALL_FUNCTION(arg=1, lineno=1068)
          40	RAISE_VARARGS(arg=1, lineno=1068)
>         42	LOAD_GLOBAL(arg=3, lineno=1069)
          44	LOAD_FAST(arg=4, lineno=1069)
          46	CALL_FUNCTION(arg=1, lineno=1069)
          48	LOAD_GLOBAL(arg=3, lineno=1069)
          50	LOAD_FAST(arg=5, lineno=1069)
          52	CALL_FUNCTION(arg=1, lineno=1069)
          54	COMPARE_OP(arg=5, lineno=1069)
          56	POP_JUMP_IF_FALSE(arg=126, lineno=1069)
          58	LOAD_FAST(arg=4, lineno=1071)
          60	POP_JUMP_IF_TRUE(arg=72, lineno=1071)
          62	LOAD_GLOBAL(arg=4, lineno=1072)
          64	LOAD_GLOBAL(arg=5, lineno=1072)
          66	LOAD_GLOBAL(arg=5, lineno=1072)
          68	CALL_FUNCTION(arg=2, lineno=1072)
          70	RETURN_VALUE(arg=None, lineno=1072)
>         72	LOAD_FAST(arg=5, lineno=1073)
          74	LOAD_FAST(arg=4, lineno=1073)
          76	BINARY_TRUE_DIVIDE(arg=None, lineno=1073)
          78	STORE_FAST(arg=6, lineno=1073)
          80	LOAD_FAST(arg=4, lineno=1074)
          82	LOAD_FAST(arg=5, lineno=1074)
          84	LOAD_FAST(arg=6, lineno=1074)
          86	BINARY_MULTIPLY(arg=None, lineno=1074)
          88	BINARY_ADD(arg=None, lineno=1074)
          90	STORE_FAST(arg=7, lineno=1074)
          92	LOAD_GLOBAL(arg=4, lineno=1075)
          94	LOAD_FAST(arg=2, lineno=1076)
          96	LOAD_FAST(arg=3, lineno=1076)
          98	LOAD_FAST(arg=6, lineno=1076)
         100	BINARY_MULTIPLY(arg=None, lineno=1076)
         102	BINARY_ADD(arg=None, lineno=1076)
         104	LOAD_FAST(arg=7, lineno=1076)
         106	BINARY_TRUE_DIVIDE(arg=None, lineno=1076)
         108	LOAD_FAST(arg=3, lineno=1077)
         110	LOAD_FAST(arg=2, lineno=1077)
         112	LOAD_FAST(arg=6, lineno=1077)
         114	BINARY_MULTIPLY(arg=None, lineno=1077)
         116	BINARY_SUBTRACT(arg=None, lineno=1077)
         118	LOAD_FAST(arg=7, lineno=1077)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=1077)
         122	CALL_FUNCTION(arg=2, lineno=1075)
         124	RETURN_VALUE(arg=None, lineno=1075)
>        126	LOAD_FAST(arg=5, lineno=1080)
         128	POP_JUMP_IF_TRUE(arg=140, lineno=1080)
         130	LOAD_GLOBAL(arg=4, lineno=1081)
         132	LOAD_GLOBAL(arg=5, lineno=1081)
         134	LOAD_GLOBAL(arg=5, lineno=1081)
         136	CALL_FUNCTION(arg=2, lineno=1081)
         138	RETURN_VALUE(arg=None, lineno=1081)
>        140	LOAD_FAST(arg=4, lineno=1082)
         142	LOAD_FAST(arg=5, lineno=1082)
         144	BINARY_TRUE_DIVIDE(arg=None, lineno=1082)
         146	STORE_FAST(arg=6, lineno=1082)
         148	LOAD_FAST(arg=4, lineno=1083)
         150	LOAD_FAST(arg=6, lineno=1083)
         152	BINARY_MULTIPLY(arg=None, lineno=1083)
         154	LOAD_FAST(arg=5, lineno=1083)
         156	BINARY_ADD(arg=None, lineno=1083)
         158	STORE_FAST(arg=7, lineno=1083)
         160	LOAD_GLOBAL(arg=4, lineno=1084)
         162	LOAD_FAST(arg=0, lineno=1085)
         164	LOAD_ATTR(arg=0, lineno=1085)
         166	LOAD_FAST(arg=6, lineno=1085)
         168	BINARY_MULTIPLY(arg=None, lineno=1085)
         170	LOAD_FAST(arg=0, lineno=1085)
         172	LOAD_ATTR(arg=1, lineno=1085)
         174	BINARY_ADD(arg=None, lineno=1085)
         176	LOAD_FAST(arg=7, lineno=1085)
         178	BINARY_TRUE_DIVIDE(arg=None, lineno=1085)
         180	LOAD_FAST(arg=0, lineno=1086)
         182	LOAD_ATTR(arg=1, lineno=1086)
         184	LOAD_FAST(arg=6, lineno=1086)
         186	BINARY_MULTIPLY(arg=None, lineno=1086)
         188	LOAD_FAST(arg=0, lineno=1086)
         190	LOAD_ATTR(arg=0, lineno=1086)
         192	BINARY_SUBTRACT(arg=None, lineno=1086)
         194	LOAD_FAST(arg=7, lineno=1086)
         196	BINARY_TRUE_DIVIDE(arg=None, lineno=1086)
         198	CALL_FUNCTION(arg=2, lineno=1084)
         200	RETURN_VALUE(arg=None, lineno=1084)
         202	LOAD_CONST(arg=0, lineno=1084)
         204	RETURN_VALUE(arg=None, lineno=1084)
DEBUG 2023-04-14 17:42:59,048 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,048 stack: []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=0, inst=NOP(arg=None, lineno=1063)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1063)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=1063)
DEBUG 2023-04-14 17:42:59,048 stack ['$a2.0']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=6, inst=STORE_FAST(arg=2, lineno=1063)
DEBUG 2023-04-14 17:42:59,048 stack ['$4load_attr.1']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1064)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=10, inst=LOAD_ATTR(arg=1, lineno=1064)
DEBUG 2023-04-14 17:42:59,048 stack ['$a8.2']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=12, inst=STORE_FAST(arg=3, lineno=1064)
DEBUG 2023-04-14 17:42:59,048 stack ['$10load_attr.3']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1065)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=16, inst=LOAD_ATTR(arg=0, lineno=1065)
DEBUG 2023-04-14 17:42:59,048 stack ['$b14.4']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=18, inst=STORE_FAST(arg=4, lineno=1065)
DEBUG 2023-04-14 17:42:59,048 stack ['$16load_attr.5']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=1066)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=22, inst=LOAD_ATTR(arg=1, lineno=1066)
DEBUG 2023-04-14 17:42:59,048 stack ['$b20.6']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=1066)
DEBUG 2023-04-14 17:42:59,048 stack ['$22load_attr.7']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=1067)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=28, inst=POP_JUMP_IF_TRUE(arg=42, lineno=1067)
DEBUG 2023-04-14 17:42:59,048 stack ['$breal26.8']
DEBUG 2023-04-14 17:42:59,048 end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:59,048 pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,048 stack: []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=30, inst=LOAD_FAST(arg=5, lineno=1067)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=32, inst=POP_JUMP_IF_TRUE(arg=42, lineno=1067)
DEBUG 2023-04-14 17:42:59,048 stack ['$bimag30.0']
DEBUG 2023-04-14 17:42:59,048 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:59,048 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,048 stack: []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=42, inst=LOAD_GLOBAL(arg=3, lineno=1069)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1069)
DEBUG 2023-04-14 17:42:59,048 stack ['$42load_global.0']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=1069)
DEBUG 2023-04-14 17:42:59,048 stack ['$42load_global.0', '$breal44.1']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=48, inst=LOAD_GLOBAL(arg=3, lineno=1069)
DEBUG 2023-04-14 17:42:59,048 stack ['$46call_function.2']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=1069)
DEBUG 2023-04-14 17:42:59,048 stack ['$46call_function.2', '$48load_global.3']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=1069)
DEBUG 2023-04-14 17:42:59,048 stack ['$46call_function.2', '$48load_global.3', '$bimag50.4']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=54, inst=COMPARE_OP(arg=5, lineno=1069)
DEBUG 2023-04-14 17:42:59,048 stack ['$46call_function.2', '$52call_function.5']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=126, lineno=1069)
DEBUG 2023-04-14 17:42:59,048 stack ['$54compare_op.6']
DEBUG 2023-04-14 17:42:59,048 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=126, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:59,048 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,048 stack: []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=34, inst=LOAD_GLOBAL(arg=2, lineno=1068)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1068)
DEBUG 2023-04-14 17:42:59,048 stack ['$34load_global.0']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=1068)
DEBUG 2023-04-14 17:42:59,048 stack ['$34load_global.0', '$const36.1']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=40, inst=RAISE_VARARGS(arg=1, lineno=1068)
DEBUG 2023-04-14 17:42:59,048 stack ['$38call_function.2']
DEBUG 2023-04-14 17:42:59,048 end state. edges=[]
DEBUG 2023-04-14 17:42:59,048 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,048 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,048 stack: []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=1071)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=60, inst=POP_JUMP_IF_TRUE(arg=72, lineno=1071)
DEBUG 2023-04-14 17:42:59,048 stack ['$breal58.0']
DEBUG 2023-04-14 17:42:59,048 end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:59,048 pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,048 stack: []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=126, inst=LOAD_FAST(arg=5, lineno=1080)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=128, inst=POP_JUMP_IF_TRUE(arg=140, lineno=1080)
DEBUG 2023-04-14 17:42:59,048 stack ['$bimag126.0']
DEBUG 2023-04-14 17:42:59,048 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0), Edge(pc=140, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:42:59,048 pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,048 stack: []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=62, inst=LOAD_GLOBAL(arg=4, lineno=1072)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=64, inst=LOAD_GLOBAL(arg=5, lineno=1072)
DEBUG 2023-04-14 17:42:59,048 stack ['$62load_global.0']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=66, inst=LOAD_GLOBAL(arg=5, lineno=1072)
DEBUG 2023-04-14 17:42:59,048 stack ['$62load_global.0', '$64load_global.1']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=68, inst=CALL_FUNCTION(arg=2, lineno=1072)
DEBUG 2023-04-14 17:42:59,048 stack ['$62load_global.0', '$64load_global.1', '$66load_global.2']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=70, inst=RETURN_VALUE(arg=None, lineno=1072)
DEBUG 2023-04-14 17:42:59,048 stack ['$68call_function.3']
DEBUG 2023-04-14 17:42:59,048 end state. edges=[]
DEBUG 2023-04-14 17:42:59,048 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,048 stack: []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=1073)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=1073)
DEBUG 2023-04-14 17:42:59,048 stack ['$bimag72.0']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=76, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1073)
DEBUG 2023-04-14 17:42:59,048 stack ['$bimag72.0', '$breal74.1']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=78, inst=STORE_FAST(arg=6, lineno=1073)
DEBUG 2023-04-14 17:42:59,048 stack ['$76binary_true_divide.2']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=1074)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,048 dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=1074)
DEBUG 2023-04-14 17:42:59,048 stack ['$breal80.3']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=84, inst=LOAD_FAST(arg=6, lineno=1074)
DEBUG 2023-04-14 17:42:59,048 stack ['$breal80.3', '$bimag82.4']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=86, inst=BINARY_MULTIPLY(arg=None, lineno=1074)
DEBUG 2023-04-14 17:42:59,048 stack ['$breal80.3', '$bimag82.4', '$ratio84.5']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1074)
DEBUG 2023-04-14 17:42:59,048 stack ['$breal80.3', '$86binary_multiply.6']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=90, inst=STORE_FAST(arg=7, lineno=1074)
DEBUG 2023-04-14 17:42:59,048 stack ['$88binary_add.7']
DEBUG 2023-04-14 17:42:59,048 dispatch pc=92, inst=LOAD_GLOBAL(arg=4, lineno=1075)
DEBUG 2023-04-14 17:42:59,048 stack []
DEBUG 2023-04-14 17:42:59,056 dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=1076)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1076)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$areal94.9']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=98, inst=LOAD_FAST(arg=6, lineno=1076)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$areal94.9', '$aimag96.10']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=100, inst=BINARY_MULTIPLY(arg=None, lineno=1076)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$areal94.9', '$aimag96.10', '$ratio98.11']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=102, inst=BINARY_ADD(arg=None, lineno=1076)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$areal94.9', '$100binary_multiply.12']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=104, inst=LOAD_FAST(arg=7, lineno=1076)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$102binary_add.13']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=106, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1076)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$102binary_add.13', '$denom104.14']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=108, inst=LOAD_FAST(arg=3, lineno=1077)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$106binary_true_divide.15']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=1077)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=112, inst=LOAD_FAST(arg=6, lineno=1077)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$areal110.17']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=114, inst=BINARY_MULTIPLY(arg=None, lineno=1077)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$areal110.17', '$ratio112.18']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=116, inst=BINARY_SUBTRACT(arg=None, lineno=1077)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$114binary_multiply.19']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=1077)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$106binary_true_divide.15', '$116binary_subtract.20']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1077)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$106binary_true_divide.15', '$116binary_subtract.20', '$denom118.21']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=122, inst=CALL_FUNCTION(arg=2, lineno=1075)
DEBUG 2023-04-14 17:42:59,056 stack ['$92load_global.8', '$106binary_true_divide.15', '$120binary_true_divide.22']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=124, inst=RETURN_VALUE(arg=None, lineno=1075)
DEBUG 2023-04-14 17:42:59,056 stack ['$122call_function.23']
DEBUG 2023-04-14 17:42:59,056 end state. edges=[]
DEBUG 2023-04-14 17:42:59,056 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,056 stack: []
DEBUG 2023-04-14 17:42:59,056 dispatch pc=130, inst=LOAD_GLOBAL(arg=4, lineno=1081)
DEBUG 2023-04-14 17:42:59,056 stack []
DEBUG 2023-04-14 17:42:59,056 dispatch pc=132, inst=LOAD_GLOBAL(arg=5, lineno=1081)
DEBUG 2023-04-14 17:42:59,056 stack ['$130load_global.0']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=134, inst=LOAD_GLOBAL(arg=5, lineno=1081)
DEBUG 2023-04-14 17:42:59,056 stack ['$130load_global.0', '$132load_global.1']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=136, inst=CALL_FUNCTION(arg=2, lineno=1081)
DEBUG 2023-04-14 17:42:59,056 stack ['$130load_global.0', '$132load_global.1', '$134load_global.2']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=138, inst=RETURN_VALUE(arg=None, lineno=1081)
DEBUG 2023-04-14 17:42:59,056 stack ['$136call_function.3']
DEBUG 2023-04-14 17:42:59,056 end state. edges=[]
DEBUG 2023-04-14 17:42:59,056 pending: deque([State(pc_initial=140 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,056 stack: []
DEBUG 2023-04-14 17:42:59,056 dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=1082)
DEBUG 2023-04-14 17:42:59,056 stack []
DEBUG 2023-04-14 17:42:59,056 dispatch pc=142, inst=LOAD_FAST(arg=5, lineno=1082)
DEBUG 2023-04-14 17:42:59,056 stack ['$breal140.0']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=144, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1082)
DEBUG 2023-04-14 17:42:59,056 stack ['$breal140.0', '$bimag142.1']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=146, inst=STORE_FAST(arg=6, lineno=1082)
DEBUG 2023-04-14 17:42:59,056 stack ['$144binary_true_divide.2']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=1083)
DEBUG 2023-04-14 17:42:59,056 stack []
DEBUG 2023-04-14 17:42:59,056 dispatch pc=150, inst=LOAD_FAST(arg=6, lineno=1083)
DEBUG 2023-04-14 17:42:59,056 stack ['$breal148.3']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=152, inst=BINARY_MULTIPLY(arg=None, lineno=1083)
DEBUG 2023-04-14 17:42:59,056 stack ['$breal148.3', '$ratio150.4']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=154, inst=LOAD_FAST(arg=5, lineno=1083)
DEBUG 2023-04-14 17:42:59,056 stack ['$152binary_multiply.5']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=156, inst=BINARY_ADD(arg=None, lineno=1083)
DEBUG 2023-04-14 17:42:59,056 stack ['$152binary_multiply.5', '$bimag154.6']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=158, inst=STORE_FAST(arg=7, lineno=1083)
DEBUG 2023-04-14 17:42:59,056 stack ['$156binary_add.7']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=1084)
DEBUG 2023-04-14 17:42:59,056 stack []
DEBUG 2023-04-14 17:42:59,056 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=1085)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=164, inst=LOAD_ATTR(arg=0, lineno=1085)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$a162.9']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=166, inst=LOAD_FAST(arg=6, lineno=1085)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$164load_attr.10']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=168, inst=BINARY_MULTIPLY(arg=None, lineno=1085)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$164load_attr.10', '$ratio166.11']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=170, inst=LOAD_FAST(arg=0, lineno=1085)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$168binary_multiply.12']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=172, inst=LOAD_ATTR(arg=1, lineno=1085)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$168binary_multiply.12', '$a170.13']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=174, inst=BINARY_ADD(arg=None, lineno=1085)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$168binary_multiply.12', '$172load_attr.14']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=176, inst=LOAD_FAST(arg=7, lineno=1085)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$174binary_add.15']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=178, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1085)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$174binary_add.15', '$denom176.16']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=1086)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$178binary_true_divide.17']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=182, inst=LOAD_ATTR(arg=1, lineno=1086)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$178binary_true_divide.17', '$a180.18']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=184, inst=LOAD_FAST(arg=6, lineno=1086)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$178binary_true_divide.17', '$182load_attr.19']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=186, inst=BINARY_MULTIPLY(arg=None, lineno=1086)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$178binary_true_divide.17', '$182load_attr.19', '$ratio184.20']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=188, inst=LOAD_FAST(arg=0, lineno=1086)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=190, inst=LOAD_ATTR(arg=0, lineno=1086)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21', '$a188.22']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=192, inst=BINARY_SUBTRACT(arg=None, lineno=1086)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21', '$190load_attr.23']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1086)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$178binary_true_divide.17', '$192binary_subtract.24']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=196, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1086)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$178binary_true_divide.17', '$192binary_subtract.24', '$denom194.25']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=1084)
DEBUG 2023-04-14 17:42:59,056 stack ['$160load_global.8', '$178binary_true_divide.17', '$196binary_true_divide.26']
DEBUG 2023-04-14 17:42:59,056 dispatch pc=200, inst=RETURN_VALUE(arg=None, lineno=1084)
DEBUG 2023-04-14 17:42:59,056 stack ['$198call_function.27']
DEBUG 2023-04-14 17:42:59,056 end state. edges=[]
DEBUG 2023-04-14 17:42:59,056 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:59,056 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=126 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:59,056 defmap: {}
DEBUG 2023-04-14 17:42:59,056 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:59,056 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:59,056 keep phismap: {}
DEBUG 2023-04-14 17:42:59,056 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:59,056 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:59,056 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$a8.2'}), (10, {'item': '$a8.2', 'res': '$10load_attr.3'}), (12, {'value': '$10load_attr.3'}), (14, {'res': '$b14.4'}), (16, {'item': '$b14.4', 'res': '$16load_attr.5'}), (18, {'value': '$16load_attr.5'}), (20, {'res': '$b20.6'}), (22, {'item': '$b20.6', 'res': '$22load_attr.7'}), (24, {'value': '$22load_attr.7'}), (26, {'res': '$breal26.8'}), (28, {'pred': '$breal26.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 42: ()})
DEBUG 2023-04-14 17:42:59,056 block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$bimag30.0'}), (32, {'pred': '$bimag30.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 42: ()})
DEBUG 2023-04-14 17:42:59,056 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'res': '$const36.1'}), (38, {'func': '$34load_global.0', 'args': ['$const36.1'], 'res': '$38call_function.2'}), (40, {'exc': '$38call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:59,056 block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'res': '$breal44.1'}), (46, {'func': '$42load_global.0', 'args': ['$breal44.1'], 'res': '$46call_function.2'}), (48, {'res': '$48load_global.3'}), (50, {'res': '$bimag50.4'}), (52, {'func': '$48load_global.3', 'args': ['$bimag50.4'], 'res': '$52call_function.5'}), (54, {'lhs': '$46call_function.2', 'rhs': '$52call_function.5', 'res': '$54compare_op.6'}), (56, {'pred': '$54compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 126: ()})
DEBUG 2023-04-14 17:42:59,056 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$breal58.0'}), (60, {'pred': '$breal58.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 72: ()})
DEBUG 2023-04-14 17:42:59,056 block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$62load_global.0'}), (64, {'res': '$64load_global.1'}), (66, {'res': '$66load_global.2'}), (68, {'func': '$62load_global.0', 'args': ['$64load_global.1', '$66load_global.2'], 'res': '$68call_function.3'}), (70, {'retval': '$68call_function.3', 'castval': '$70return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:59,056 block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$bimag72.0'}), (74, {'res': '$breal74.1'}), (76, {'lhs': '$bimag72.0', 'rhs': '$breal74.1', 'res': '$76binary_true_divide.2'}), (78, {'value': '$76binary_true_divide.2'}), (80, {'res': '$breal80.3'}), (82, {'res': '$bimag82.4'}), (84, {'res': '$ratio84.5'}), (86, {'lhs': '$bimag82.4', 'rhs': '$ratio84.5', 'res': '$86binary_multiply.6'}), (88, {'lhs': '$breal80.3', 'rhs': '$86binary_multiply.6', 'res': '$88binary_add.7'}), (90, {'value': '$88binary_add.7'}), (92, {'res': '$92load_global.8'}), (94, {'res': '$areal94.9'}), (96, {'res': '$aimag96.10'}), (98, {'res': '$ratio98.11'}), (100, {'lhs': '$aimag96.10', 'rhs': '$ratio98.11', 'res': '$100binary_multiply.12'}), (102, {'lhs': '$areal94.9', 'rhs': '$100binary_multiply.12', 'res': '$102binary_add.13'}), (104, {'res': '$denom104.14'}), (106, {'lhs': '$102binary_add.13', 'rhs': '$denom104.14', 'res': '$106binary_true_divide.15'}), (108, {'res': '$aimag108.16'}), (110, {'res': '$areal110.17'}), (112, {'res': '$ratio112.18'}), (114, {'lhs': '$areal110.17', 'rhs': '$ratio112.18', 'res': '$114binary_multiply.19'}), (116, {'lhs': '$aimag108.16', 'rhs': '$114binary_multiply.19', 'res': '$116binary_subtract.20'}), (118, {'res': '$denom118.21'}), (120, {'lhs': '$116binary_subtract.20', 'rhs': '$denom118.21', 'res': '$120binary_true_divide.22'}), (122, {'func': '$92load_global.8', 'args': ['$106binary_true_divide.15', '$120binary_true_divide.22'], 'res': '$122call_function.23'}), (124, {'retval': '$122call_function.23', 'castval': '$124return_value.24'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:59,056 block_infos State(pc_initial=126 nstack_initial=0):
AdaptBlockInfo(insts=((126, {'res': '$bimag126.0'}), (128, {'pred': '$bimag126.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: (), 140: ()})
DEBUG 2023-04-14 17:42:59,056 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$130load_global.0'}), (132, {'res': '$132load_global.1'}), (134, {'res': '$134load_global.2'}), (136, {'func': '$130load_global.0', 'args': ['$132load_global.1', '$134load_global.2'], 'res': '$136call_function.3'}), (138, {'retval': '$136call_function.3', 'castval': '$138return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:59,056 block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$breal140.0'}), (142, {'res': '$bimag142.1'}), (144, {'lhs': '$breal140.0', 'rhs': '$bimag142.1', 'res': '$144binary_true_divide.2'}), (146, {'value': '$144binary_true_divide.2'}), (148, {'res': '$breal148.3'}), (150, {'res': '$ratio150.4'}), (152, {'lhs': '$breal148.3', 'rhs': '$ratio150.4', 'res': '$152binary_multiply.5'}), (154, {'res': '$bimag154.6'}), (156, {'lhs': '$152binary_multiply.5', 'rhs': '$bimag154.6', 'res': '$156binary_add.7'}), (158, {'value': '$156binary_add.7'}), (160, {'res': '$160load_global.8'}), (162, {'res': '$a162.9'}), (164, {'item': '$a162.9', 'res': '$164load_attr.10'}), (166, {'res': '$ratio166.11'}), (168, {'lhs': '$164load_attr.10', 'rhs': '$ratio166.11', 'res': '$168binary_multiply.12'}), (170, {'res': '$a170.13'}), (172, {'item': '$a170.13', 'res': '$172load_attr.14'}), (174, {'lhs': '$168binary_multiply.12', 'rhs': '$172load_attr.14', 'res': '$174binary_add.15'}), (176, {'res': '$denom176.16'}), (178, {'lhs': '$174binary_add.15', 'rhs': '$denom176.16', 'res': '$178binary_true_divide.17'}), (180, {'res': '$a180.18'}), (182, {'item': '$a180.18', 'res': '$182load_attr.19'}), (184, {'res': '$ratio184.20'}), (186, {'lhs': '$182load_attr.19', 'rhs': '$ratio184.20', 'res': '$186binary_multiply.21'}), (188, {'res': '$a188.22'}), (190, {'item': '$a188.22', 'res': '$190load_attr.23'}), (192, {'lhs': '$186binary_multiply.21', 'rhs': '$190load_attr.23', 'res': '$192binary_subtract.24'}), (194, {'res': '$denom194.25'}), (196, {'lhs': '$192binary_subtract.24', 'rhs': '$denom194.25', 'res': '$196binary_true_divide.26'}), (198, {'func': '$160load_global.8', 'args': ['$178binary_true_divide.17', '$196binary_true_divide.26'], 'res': '$198call_function.27'}), (200, {'retval': '$198call_function.27', 'castval': '$200return_value.28'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:59,066 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    areal = getattr(value=a, attr=real)      ['a', 'areal']
    aimag = getattr(value=a, attr=imag)      ['a', 'aimag']
    breal = getattr(value=b, attr=real)      ['b', 'breal']
    bimag = getattr(value=b, attr=imag)      ['b', 'bimag']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None) ['$28pred', 'bool28', 'breal']
    branch $28pred, 42, 30                   ['$28pred']
label 30:
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None) ['$32pred', 'bimag', 'bool32']
    branch $32pred, 42, 34                   ['$32pred']
label 34:
    $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$34load_global.0']
    $const36.1 = const(str, complex division by zero) ['$const36.1']
    $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_global.0', '$38call_function.2', '$const36.1']
    raise $38call_function.2                 ['$38call_function.2']
label 42:
    $42load_global.0 = global(abs: <built-in function abs>) ['$42load_global.0']
    $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.0', '$46call_function.2', 'breal']
    $48load_global.3 = global(abs: <built-in function abs>) ['$48load_global.3']
    $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.3', '$52call_function.5', 'bimag']
    $54compare_op.6 = $46call_function.2 >= $52call_function.5 ['$46call_function.2', '$52call_function.5', '$54compare_op.6']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.6', '$56pred', 'bool56']
    branch $56pred, 58, 126                  ['$56pred']
label 58:
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None) ['$60pred', 'bool60', 'breal']
    branch $60pred, 72, 62                   ['$60pred']
label 62:
    $62load_global.0 = global(complex: <class 'complex'>) ['$62load_global.0']
    $64load_global.1 = global(NAN: nan)      ['$64load_global.1']
    $66load_global.2 = global(NAN: nan)      ['$66load_global.2']
    $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None) ['$62load_global.0', '$64load_global.1', '$66load_global.2', '$68call_function.3']
    $70return_value.4 = cast(value=$68call_function.3) ['$68call_function.3', '$70return_value.4']
    return $70return_value.4                 ['$70return_value.4']
label 72:
    ratio = bimag / breal                    ['bimag', 'breal', 'ratio']
    $86binary_multiply.6 = bimag * ratio     ['$86binary_multiply.6', 'bimag', 'ratio']
    denom = breal + $86binary_multiply.6     ['$86binary_multiply.6', 'breal', 'denom']
    $92load_global.8 = global(complex: <class 'complex'>) ['$92load_global.8']
    $100binary_multiply.12 = aimag * ratio   ['$100binary_multiply.12', 'aimag', 'ratio']
    $102binary_add.13 = areal + $100binary_multiply.12 ['$100binary_multiply.12', '$102binary_add.13', 'areal']
    $106binary_true_divide.15 = $102binary_add.13 / denom ['$102binary_add.13', '$106binary_true_divide.15', 'denom']
    $114binary_multiply.19 = areal * ratio   ['$114binary_multiply.19', 'areal', 'ratio']
    $116binary_subtract.20 = aimag - $114binary_multiply.19 ['$114binary_multiply.19', '$116binary_subtract.20', 'aimag']
    $120binary_true_divide.22 = $116binary_subtract.20 / denom ['$116binary_subtract.20', '$120binary_true_divide.22', 'denom']
    $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None) ['$106binary_true_divide.15', '$120binary_true_divide.22', '$122call_function.23', '$92load_global.8']
    $124return_value.24 = cast(value=$122call_function.23) ['$122call_function.23', '$124return_value.24']
    return $124return_value.24               ['$124return_value.24']
label 126:
    bool128 = global(bool: <class 'bool'>)   ['bool128']
    $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None) ['$128pred', 'bimag', 'bool128']
    branch $128pred, 140, 130                ['$128pred']
label 130:
    $130load_global.0 = global(complex: <class 'complex'>) ['$130load_global.0']
    $132load_global.1 = global(NAN: nan)     ['$132load_global.1']
    $134load_global.2 = global(NAN: nan)     ['$134load_global.2']
    $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None) ['$130load_global.0', '$132load_global.1', '$134load_global.2', '$136call_function.3']
    $138return_value.4 = cast(value=$136call_function.3) ['$136call_function.3', '$138return_value.4']
    return $138return_value.4                ['$138return_value.4']
label 140:
    ratio = breal / bimag                    ['bimag', 'breal', 'ratio']
    $152binary_multiply.5 = breal * ratio    ['$152binary_multiply.5', 'breal', 'ratio']
    denom = $152binary_multiply.5 + bimag    ['$152binary_multiply.5', 'bimag', 'denom']
    $160load_global.8 = global(complex: <class 'complex'>) ['$160load_global.8']
    $164load_attr.10 = getattr(value=a, attr=real) ['$164load_attr.10', 'a']
    $168binary_multiply.12 = $164load_attr.10 * ratio ['$164load_attr.10', '$168binary_multiply.12', 'ratio']
    $172load_attr.14 = getattr(value=a, attr=imag) ['$172load_attr.14', 'a']
    $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14 ['$168binary_multiply.12', '$172load_attr.14', '$174binary_add.15']
    $178binary_true_divide.17 = $174binary_add.15 / denom ['$174binary_add.15', '$178binary_true_divide.17', 'denom']
    $182load_attr.19 = getattr(value=a, attr=imag) ['$182load_attr.19', 'a']
    $186binary_multiply.21 = $182load_attr.19 * ratio ['$182load_attr.19', '$186binary_multiply.21', 'ratio']
    $190load_attr.23 = getattr(value=a, attr=real) ['$190load_attr.23', 'a']
    $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23 ['$186binary_multiply.21', '$190load_attr.23', '$192binary_subtract.24']
    $196binary_true_divide.26 = $192binary_subtract.24 / denom ['$192binary_subtract.24', '$196binary_true_divide.26', 'denom']
    $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.8', '$178binary_true_divide.17', '$196binary_true_divide.26', '$198call_function.27']
    $200return_value.28 = cast(value=$198call_function.27) ['$198call_function.27', '$200return_value.28']
    return $200return_value.28               ['$200return_value.28']

DEBUG 2023-04-14 17:42:59,075 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:59,075 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FB2F70>
DEBUG 2023-04-14 17:42:59,075 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:42:59,075 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:42:59,075 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,075 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,075 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2023-04-14 17:42:59,075 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2023-04-14 17:42:59,075 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,075 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,075 on stmt: branch $28pred, 42, 30
DEBUG 2023-04-14 17:42:59,075 ==== SSA block analysis pass on 30
DEBUG 2023-04-14 17:42:59,075 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FB2F70>
DEBUG 2023-04-14 17:42:59,075 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,075 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,075 on stmt: branch $32pred, 42, 34
DEBUG 2023-04-14 17:42:59,075 ==== SSA block analysis pass on 34
DEBUG 2023-04-14 17:42:59,075 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FB2F70>
DEBUG 2023-04-14 17:42:59,075 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:42:59,075 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2023-04-14 17:42:59,075 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,075 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2023-04-14 17:42:59,075 ==== SSA block analysis pass on 42
DEBUG 2023-04-14 17:42:59,075 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FB2F70>
DEBUG 2023-04-14 17:42:59,075 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:42:59,075 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,075 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:42:59,075 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,075 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2023-04-14 17:42:59,075 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,075 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,086 on stmt: branch $56pred, 58, 126
DEBUG 2023-04-14 17:42:59,086 ==== SSA block analysis pass on 58
DEBUG 2023-04-14 17:42:59,086 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FB2F70>
DEBUG 2023-04-14 17:42:59,086 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,086 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,086 on stmt: branch $60pred, 72, 62
DEBUG 2023-04-14 17:42:59,086 ==== SSA block analysis pass on 62
DEBUG 2023-04-14 17:42:59,086 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FB2F70>
DEBUG 2023-04-14 17:42:59,086 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,086 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,086 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,086 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,086 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2023-04-14 17:42:59,086 on stmt: return $70return_value.4
DEBUG 2023-04-14 17:42:59,086 ==== SSA block analysis pass on 72
DEBUG 2023-04-14 17:42:59,086 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FB2F70>
DEBUG 2023-04-14 17:42:59,086 on stmt: ratio = bimag / breal
DEBUG 2023-04-14 17:42:59,086 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:42:59,086 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:42:59,086 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,086 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:42:59,086 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2023-04-14 17:42:59,086 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:42:59,086 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:42:59,086 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2023-04-14 17:42:59,086 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:42:59,086 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,086 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2023-04-14 17:42:59,086 on stmt: return $124return_value.24
DEBUG 2023-04-14 17:42:59,086 ==== SSA block analysis pass on 126
DEBUG 2023-04-14 17:42:59,086 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FB2F70>
DEBUG 2023-04-14 17:42:59,086 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,086 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,086 on stmt: branch $128pred, 140, 130
DEBUG 2023-04-14 17:42:59,086 ==== SSA block analysis pass on 130
DEBUG 2023-04-14 17:42:59,086 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FB2F70>
DEBUG 2023-04-14 17:42:59,086 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,086 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,086 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,086 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,086 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2023-04-14 17:42:59,086 on stmt: return $138return_value.4
DEBUG 2023-04-14 17:42:59,086 ==== SSA block analysis pass on 140
DEBUG 2023-04-14 17:42:59,086 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FB2F70>
DEBUG 2023-04-14 17:42:59,086 on stmt: ratio = breal / bimag
DEBUG 2023-04-14 17:42:59,086 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2023-04-14 17:42:59,086 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:42:59,086 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,086 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,086 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2023-04-14 17:42:59,086 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,086 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2023-04-14 17:42:59,086 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:42:59,086 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,086 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2023-04-14 17:42:59,086 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,086 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2023-04-14 17:42:59,086 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:42:59,086 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,086 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2023-04-14 17:42:59,086 on stmt: return $200return_value.28
DEBUG 2023-04-14 17:42:59,086 defs defaultdict(<class 'list'>,
            {'$100binary_multiply.12': [<numba.core.ir.Assign object at 0x0000026618FA9C10>],
             '$102binary_add.13': [<numba.core.ir.Assign object at 0x0000026618FA9D90>],
             '$106binary_true_divide.15': [<numba.core.ir.Assign object at 0x0000026618FAC070>],
             '$114binary_multiply.19': [<numba.core.ir.Assign object at 0x0000026618FAC550>],
             '$116binary_subtract.20': [<numba.core.ir.Assign object at 0x0000026618FAC6D0>],
             '$120binary_true_divide.22': [<numba.core.ir.Assign object at 0x0000026618FAC970>],
             '$122call_function.23': [<numba.core.ir.Assign object at 0x0000026618FACB20>],
             '$124return_value.24': [<numba.core.ir.Assign object at 0x0000026618FACC40>],
             '$128pred': [<numba.core.ir.Assign object at 0x0000026618FA5070>],
             '$130load_global.0': [<numba.core.ir.Assign object at 0x0000026618FACDC0>],
             '$132load_global.1': [<numba.core.ir.Assign object at 0x0000026618FACF40>],
             '$134load_global.2': [<numba.core.ir.Assign object at 0x0000026618FAE100>],
             '$136call_function.3': [<numba.core.ir.Assign object at 0x0000026618FAE2E0>],
             '$138return_value.4': [<numba.core.ir.Assign object at 0x0000026618FAE400>],
             '$152binary_multiply.5': [<numba.core.ir.Assign object at 0x0000026618FAED90>],
             '$160load_global.8': [<numba.core.ir.Assign object at 0x0000026618FB0280>],
             '$164load_attr.10': [<numba.core.ir.Assign object at 0x0000026618FB0520>],
             '$168binary_multiply.12': [<numba.core.ir.Assign object at 0x0000026618FB07F0>],
             '$172load_attr.14': [<numba.core.ir.Assign object at 0x0000026618FB0A60>],
             '$174binary_add.15': [<numba.core.ir.Assign object at 0x0000026618FB0C10>],
             '$178binary_true_divide.17': [<numba.core.ir.Assign object at 0x0000026618FB0EB0>],
             '$182load_attr.19': [<numba.core.ir.Assign object at 0x0000026618FB2160>],
             '$186binary_multiply.21': [<numba.core.ir.Assign object at 0x0000026618FB2430>],
             '$190load_attr.23': [<numba.core.ir.Assign object at 0x0000026618FB26A0>],
             '$192binary_subtract.24': [<numba.core.ir.Assign object at 0x0000026618FB2850>],
             '$196binary_true_divide.26': [<numba.core.ir.Assign object at 0x0000026618FB2AF0>],
             '$198call_function.27': [<numba.core.ir.Assign object at 0x0000026618FB2CA0>],
             '$200return_value.28': [<numba.core.ir.Assign object at 0x0000026618FB2DC0>],
             '$28pred': [<numba.core.ir.Assign object at 0x0000026618FA2EB0>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000026618FA3070>],
             '$34load_global.0': [<numba.core.ir.Assign object at 0x0000026618FA32B0>],
             '$38call_function.2': [<numba.core.ir.Assign object at 0x0000026618FA3610>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x0000026618FA38B0>],
             '$46call_function.2': [<numba.core.ir.Assign object at 0x0000026618FA3BB0>],
             '$48load_global.3': [<numba.core.ir.Assign object at 0x0000026618FA3CD0>],
             '$52call_function.5': [<numba.core.ir.Assign object at 0x0000026618FA3FD0>],
             '$54compare_op.6': [<numba.core.ir.Assign object at 0x0000026618F8D970>],
             '$56pred': [<numba.core.ir.Assign object at 0x0000026618F6C8B0>],
             '$60pred': [<numba.core.ir.Assign object at 0x0000026618F8AF70>],
             '$62load_global.0': [<numba.core.ir.Assign object at 0x0000026618FA51C0>],
             '$64load_global.1': [<numba.core.ir.Assign object at 0x0000026618FA5340>],
             '$66load_global.2': [<numba.core.ir.Assign object at 0x0000026618FA54C0>],
             '$68call_function.3': [<numba.core.ir.Assign object at 0x0000026618FA56A0>],
             '$70return_value.4': [<numba.core.ir.Assign object at 0x0000026618FA57C0>],
             '$86binary_multiply.6': [<numba.core.ir.Assign object at 0x0000026618FA9310>],
             '$92load_global.8': [<numba.core.ir.Assign object at 0x0000026618FA9700>],
             '$const36.1': [<numba.core.ir.Assign object at 0x0000026618FA3430>],
             'a': [<numba.core.ir.Assign object at 0x0000026618F8D640>],
             'aimag': [<numba.core.ir.Assign object at 0x0000026618FA2250>],
             'areal': [<numba.core.ir.Assign object at 0x0000026618F8DE50>],
             'b': [<numba.core.ir.Assign object at 0x0000026618F8D070>],
             'bimag': [<numba.core.ir.Assign object at 0x0000026618FA29D0>],
             'bool128': [<numba.core.ir.Assign object at 0x0000026618FA5B20>],
             'bool28': [<numba.core.ir.Assign object at 0x0000026618FA2D90>],
             'bool32': [<numba.core.ir.Assign object at 0x0000026618FA2B80>],
             'bool56': [<numba.core.ir.Assign object at 0x0000026618F821C0>],
             'bool60': [<numba.core.ir.Assign object at 0x0000026618F8ACD0>],
             'breal': [<numba.core.ir.Assign object at 0x0000026618FA2610>],
             'denom': [<numba.core.ir.Assign object at 0x0000026618FA9490>,
                       <numba.core.ir.Assign object at 0x0000026618FB0070>],
             'ratio': [<numba.core.ir.Assign object at 0x0000026618FA5CD0>,
                       <numba.core.ir.Assign object at 0x0000026618FAE910>]})
DEBUG 2023-04-14 17:42:59,091 SSA violators {'ratio', 'denom'}
DEBUG 2023-04-14 17:42:59,091 Fix SSA violator on var ratio
DEBUG 2023-04-14 17:42:59,091 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:42:59,091 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,091 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:42:59,091 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:42:59,091 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,091 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,091 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2023-04-14 17:42:59,091 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2023-04-14 17:42:59,091 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: branch $28pred, 42, 30
DEBUG 2023-04-14 17:42:59,091 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:42:59,091 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,091 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: branch $32pred, 42, 34
DEBUG 2023-04-14 17:42:59,091 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:42:59,091 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,091 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2023-04-14 17:42:59,091 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2023-04-14 17:42:59,091 ==== SSA block rewrite pass on 42
DEBUG 2023-04-14 17:42:59,091 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,091 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2023-04-14 17:42:59,091 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: branch $56pred, 58, 126
DEBUG 2023-04-14 17:42:59,091 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:42:59,091 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,091 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: branch $60pred, 72, 62
DEBUG 2023-04-14 17:42:59,091 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:42:59,091 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,091 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,091 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,091 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2023-04-14 17:42:59,091 on stmt: return $70return_value.4
DEBUG 2023-04-14 17:42:59,091 ==== SSA block rewrite pass on 72
DEBUG 2023-04-14 17:42:59,091 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,091 on stmt: ratio = bimag / breal
DEBUG 2023-04-14 17:42:59,091 first assign: ratio
DEBUG 2023-04-14 17:42:59,091 replaced with: ratio = bimag / breal
DEBUG 2023-04-14 17:42:59,091 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:42:59,091 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:42:59,091 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:42:59,091 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2023-04-14 17:42:59,091 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:42:59,091 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:42:59,091 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2023-04-14 17:42:59,091 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:42:59,091 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2023-04-14 17:42:59,091 on stmt: return $124return_value.24
DEBUG 2023-04-14 17:42:59,091 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:42:59,091 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,091 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: branch $128pred, 140, 130
DEBUG 2023-04-14 17:42:59,091 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:42:59,091 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,091 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,091 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,091 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,091 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2023-04-14 17:42:59,091 on stmt: return $138return_value.4
DEBUG 2023-04-14 17:42:59,091 ==== SSA block rewrite pass on 140
DEBUG 2023-04-14 17:42:59,091 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,091 on stmt: ratio = breal / bimag
DEBUG 2023-04-14 17:42:59,091 replaced with: ratio.1 = breal / bimag
DEBUG 2023-04-14 17:42:59,091 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2023-04-14 17:42:59,091 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:42:59,091 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,091 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,091 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2023-04-14 17:42:59,091 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,091 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2023-04-14 17:42:59,091 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:42:59,091 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,091 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2023-04-14 17:42:59,091 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,091 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2023-04-14 17:42:59,091 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:42:59,091 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2023-04-14 17:42:59,096 on stmt: return $200return_value.28
DEBUG 2023-04-14 17:42:59,096 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x0000026618F71490>],
             140: [<numba.core.ir.Assign object at 0x0000026618FD90A0>]})
DEBUG 2023-04-14 17:42:59,096 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:42:59,096 Running <numba.core.ssa._FixSSAVars object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,096 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:42:59,096 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:42:59,096 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,096 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,096 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2023-04-14 17:42:59,096 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2023-04-14 17:42:59,096 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: branch $28pred, 42, 30
DEBUG 2023-04-14 17:42:59,096 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:42:59,096 Running <numba.core.ssa._FixSSAVars object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,096 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: branch $32pred, 42, 34
DEBUG 2023-04-14 17:42:59,096 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:42:59,096 Running <numba.core.ssa._FixSSAVars object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,096 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2023-04-14 17:42:59,096 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2023-04-14 17:42:59,096 ==== SSA block rewrite pass on 42
DEBUG 2023-04-14 17:42:59,096 Running <numba.core.ssa._FixSSAVars object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,096 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2023-04-14 17:42:59,096 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: branch $56pred, 58, 126
DEBUG 2023-04-14 17:42:59,096 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:42:59,096 Running <numba.core.ssa._FixSSAVars object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,096 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: branch $60pred, 72, 62
DEBUG 2023-04-14 17:42:59,096 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:42:59,096 Running <numba.core.ssa._FixSSAVars object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,096 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,096 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,096 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2023-04-14 17:42:59,096 on stmt: return $70return_value.4
DEBUG 2023-04-14 17:42:59,096 ==== SSA block rewrite pass on 72
DEBUG 2023-04-14 17:42:59,096 Running <numba.core.ssa._FixSSAVars object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,096 on stmt: ratio = bimag / breal
DEBUG 2023-04-14 17:42:59,096 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:42:59,096 find_def var='ratio' stmt=$86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:42:59,096 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:42:59,096 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:42:59,096 find_def var='ratio' stmt=$100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:42:59,096 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2023-04-14 17:42:59,096 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:42:59,096 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:42:59,096 find_def var='ratio' stmt=$114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:42:59,096 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2023-04-14 17:42:59,096 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:42:59,096 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2023-04-14 17:42:59,096 on stmt: return $124return_value.24
DEBUG 2023-04-14 17:42:59,096 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:42:59,096 Running <numba.core.ssa._FixSSAVars object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,096 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: branch $128pred, 140, 130
DEBUG 2023-04-14 17:42:59,096 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:42:59,096 Running <numba.core.ssa._FixSSAVars object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,096 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,096 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,096 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,096 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,096 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2023-04-14 17:42:59,096 on stmt: return $138return_value.4
DEBUG 2023-04-14 17:42:59,096 ==== SSA block rewrite pass on 140
DEBUG 2023-04-14 17:42:59,096 Running <numba.core.ssa._FixSSAVars object at 0x0000026618FB2EB0>
DEBUG 2023-04-14 17:42:59,096 on stmt: ratio.1 = breal / bimag
DEBUG 2023-04-14 17:42:59,100 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2023-04-14 17:42:59,100 find_def var='ratio' stmt=$152binary_multiply.5 = breal * ratio
DEBUG 2023-04-14 17:42:59,100 replaced with: $152binary_multiply.5 = breal * ratio.1
DEBUG 2023-04-14 17:42:59,100 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:42:59,100 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,100 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,100 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2023-04-14 17:42:59,100 find_def var='ratio' stmt=$168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2023-04-14 17:42:59,100 replaced with: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2023-04-14 17:42:59,100 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,100 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2023-04-14 17:42:59,100 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:42:59,100 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,100 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2023-04-14 17:42:59,100 find_def var='ratio' stmt=$186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2023-04-14 17:42:59,100 replaced with: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2023-04-14 17:42:59,100 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,100 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2023-04-14 17:42:59,100 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:42:59,100 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,100 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2023-04-14 17:42:59,100 on stmt: return $200return_value.28
DEBUG 2023-04-14 17:42:59,100 Fix SSA violator on var denom
DEBUG 2023-04-14 17:42:59,100 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:42:59,100 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,100 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:42:59,100 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:42:59,100 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,100 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,100 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2023-04-14 17:42:59,100 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2023-04-14 17:42:59,100 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,100 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,100 on stmt: branch $28pred, 42, 30
DEBUG 2023-04-14 17:42:59,100 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:42:59,100 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,100 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,100 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,100 on stmt: branch $32pred, 42, 34
DEBUG 2023-04-14 17:42:59,100 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:42:59,100 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,100 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:42:59,100 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2023-04-14 17:42:59,100 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,100 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2023-04-14 17:42:59,100 ==== SSA block rewrite pass on 42
DEBUG 2023-04-14 17:42:59,100 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,100 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:42:59,100 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,100 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:42:59,100 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,100 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2023-04-14 17:42:59,100 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,100 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,100 on stmt: branch $56pred, 58, 126
DEBUG 2023-04-14 17:42:59,100 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:42:59,100 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,100 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,100 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,100 on stmt: branch $60pred, 72, 62
DEBUG 2023-04-14 17:42:59,100 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:42:59,100 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,100 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,100 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,100 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,100 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,100 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2023-04-14 17:42:59,100 on stmt: return $70return_value.4
DEBUG 2023-04-14 17:42:59,100 ==== SSA block rewrite pass on 72
DEBUG 2023-04-14 17:42:59,100 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,100 on stmt: ratio = bimag / breal
DEBUG 2023-04-14 17:42:59,100 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:42:59,100 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:42:59,100 first assign: denom
DEBUG 2023-04-14 17:42:59,100 replaced with: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:42:59,100 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,100 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:42:59,100 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2023-04-14 17:42:59,100 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:42:59,100 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:42:59,100 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2023-04-14 17:42:59,100 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:42:59,100 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,100 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2023-04-14 17:42:59,100 on stmt: return $124return_value.24
DEBUG 2023-04-14 17:42:59,100 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:42:59,100 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,100 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,105 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,105 on stmt: branch $128pred, 140, 130
DEBUG 2023-04-14 17:42:59,105 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:42:59,105 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,105 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,105 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,105 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,105 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,105 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2023-04-14 17:42:59,105 on stmt: return $138return_value.4
DEBUG 2023-04-14 17:42:59,105 ==== SSA block rewrite pass on 140
DEBUG 2023-04-14 17:42:59,105 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,105 on stmt: ratio.1 = breal / bimag
DEBUG 2023-04-14 17:42:59,105 on stmt: $152binary_multiply.5 = breal * ratio.1
DEBUG 2023-04-14 17:42:59,105 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:42:59,105 replaced with: denom.1 = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:42:59,105 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,105 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,105 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2023-04-14 17:42:59,105 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,105 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2023-04-14 17:42:59,105 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:42:59,105 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,105 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2023-04-14 17:42:59,105 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,105 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2023-04-14 17:42:59,105 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:42:59,105 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,105 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2023-04-14 17:42:59,105 on stmt: return $200return_value.28
DEBUG 2023-04-14 17:42:59,105 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x0000026618F71100>],
             140: [<numba.core.ir.Assign object at 0x0000026618FD9910>]})
DEBUG 2023-04-14 17:42:59,105 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:42:59,105 Running <numba.core.ssa._FixSSAVars object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,105 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:42:59,105 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:42:59,105 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,105 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,105 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2023-04-14 17:42:59,105 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2023-04-14 17:42:59,105 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,105 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,105 on stmt: branch $28pred, 42, 30
DEBUG 2023-04-14 17:42:59,105 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:42:59,105 Running <numba.core.ssa._FixSSAVars object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,105 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,105 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,105 on stmt: branch $32pred, 42, 34
DEBUG 2023-04-14 17:42:59,105 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:42:59,105 Running <numba.core.ssa._FixSSAVars object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,105 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:42:59,105 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2023-04-14 17:42:59,105 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,105 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2023-04-14 17:42:59,105 ==== SSA block rewrite pass on 42
DEBUG 2023-04-14 17:42:59,105 Running <numba.core.ssa._FixSSAVars object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,105 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:42:59,105 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,105 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:42:59,105 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,105 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2023-04-14 17:42:59,105 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,105 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,105 on stmt: branch $56pred, 58, 126
DEBUG 2023-04-14 17:42:59,105 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:42:59,105 Running <numba.core.ssa._FixSSAVars object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,105 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,105 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,105 on stmt: branch $60pred, 72, 62
DEBUG 2023-04-14 17:42:59,105 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:42:59,105 Running <numba.core.ssa._FixSSAVars object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,110 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,110 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,110 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,110 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,110 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2023-04-14 17:42:59,110 on stmt: return $70return_value.4
DEBUG 2023-04-14 17:42:59,110 ==== SSA block rewrite pass on 72
DEBUG 2023-04-14 17:42:59,110 Running <numba.core.ssa._FixSSAVars object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,110 on stmt: ratio = bimag / breal
DEBUG 2023-04-14 17:42:59,110 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:42:59,110 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:42:59,110 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,110 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:42:59,110 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2023-04-14 17:42:59,110 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:42:59,110 find_def var='denom' stmt=$106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:42:59,110 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:42:59,110 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2023-04-14 17:42:59,110 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:42:59,110 find_def var='denom' stmt=$120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:42:59,110 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,110 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2023-04-14 17:42:59,110 on stmt: return $124return_value.24
DEBUG 2023-04-14 17:42:59,110 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:42:59,110 Running <numba.core.ssa._FixSSAVars object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,110 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:42:59,110 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,110 on stmt: branch $128pred, 140, 130
DEBUG 2023-04-14 17:42:59,110 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:42:59,110 Running <numba.core.ssa._FixSSAVars object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,110 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,110 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,110 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:42:59,110 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,110 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2023-04-14 17:42:59,110 on stmt: return $138return_value.4
DEBUG 2023-04-14 17:42:59,110 ==== SSA block rewrite pass on 140
DEBUG 2023-04-14 17:42:59,110 Running <numba.core.ssa._FixSSAVars object at 0x0000026618F76730>
DEBUG 2023-04-14 17:42:59,110 on stmt: ratio.1 = breal / bimag
DEBUG 2023-04-14 17:42:59,110 on stmt: $152binary_multiply.5 = breal * ratio.1
DEBUG 2023-04-14 17:42:59,110 on stmt: denom.1 = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:42:59,110 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:42:59,110 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,110 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2023-04-14 17:42:59,110 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,110 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2023-04-14 17:42:59,110 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:42:59,110 find_def var='denom' stmt=$178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:42:59,110 replaced with: $178binary_true_divide.17 = $174binary_add.15 / denom.1
DEBUG 2023-04-14 17:42:59,110 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:42:59,110 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2023-04-14 17:42:59,110 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:42:59,110 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2023-04-14 17:42:59,110 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:42:59,110 find_def var='denom' stmt=$196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:42:59,110 replaced with: $196binary_true_divide.26 = $192binary_subtract.24 / denom.1
DEBUG 2023-04-14 17:42:59,110 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:42:59,110 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2023-04-14 17:42:59,110 on stmt: return $200return_value.28
DEBUG 2023-04-14 17:42:59,220 bytecode dump:
>          0	NOP(arg=None, lineno=145)
           2	LOAD_FAST(arg=2, lineno=145)
           4	LOAD_FAST(arg=1, lineno=147)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	LOAD_CONST(arg=1, lineno=1)
          10	LOAD_FAST(arg=3, lineno=146)
          12	LOAD_FAST(arg=0, lineno=151)
          14	BINARY_ADD(arg=None, lineno=1)
          16	BINARY_MULTIPLY(arg=None, lineno=1)
          18	BINARY_ADD(arg=None, lineno=1)
          20	LOAD_CONST(arg=2, lineno=1)
          22	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
          24	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,220 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,220 stack: []
DEBUG 2023-04-14 17:42:59,220 dispatch pc=0, inst=NOP(arg=None, lineno=145)
DEBUG 2023-04-14 17:42:59,220 stack []
DEBUG 2023-04-14 17:42:59,220 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=145)
DEBUG 2023-04-14 17:42:59,220 stack []
DEBUG 2023-04-14 17:42:59,220 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=147)
DEBUG 2023-04-14 17:42:59,220 stack ['$x_22.0']
DEBUG 2023-04-14 17:42:59,220 dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,220 stack ['$x_22.0', '$p_24.1']
DEBUG 2023-04-14 17:42:59,220 dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=1)
DEBUG 2023-04-14 17:42:59,220 stack ['$6binary_subtract.2']
DEBUG 2023-04-14 17:42:59,220 dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=146)
DEBUG 2023-04-14 17:42:59,220 stack ['$6binary_subtract.2', '$const8.3']
DEBUG 2023-04-14 17:42:59,220 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=151)
DEBUG 2023-04-14 17:42:59,220 stack ['$6binary_subtract.2', '$const8.3', '$xp_210.4']
DEBUG 2023-04-14 17:42:59,220 dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,220 stack ['$6binary_subtract.2', '$const8.3', '$xp_210.4', '$_154load_attr_76_112.5']
DEBUG 2023-04-14 17:42:59,220 dispatch pc=16, inst=BINARY_MULTIPLY(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,220 stack ['$6binary_subtract.2', '$const8.3', '$14binary_add.6']
DEBUG 2023-04-14 17:42:59,220 dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,225 stack ['$6binary_subtract.2', '$16binary_multiply.7']
DEBUG 2023-04-14 17:42:59,225 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=1)
DEBUG 2023-04-14 17:42:59,225 stack ['$18binary_add.8']
DEBUG 2023-04-14 17:42:59,225 dispatch pc=22, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,225 stack ['$18binary_add.8', '$const20.9']
DEBUG 2023-04-14 17:42:59,225 dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,225 stack ['$22binary_true_divide.10']
DEBUG 2023-04-14 17:42:59,225 end state. edges=[]
DEBUG 2023-04-14 17:42:59,225 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:59,225 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:59,225 defmap: {}
DEBUG 2023-04-14 17:42:59,225 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:59,225 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:59,225 keep phismap: {}
DEBUG 2023-04-14 17:42:59,225 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:59,225 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:59,225 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x_22.0'}), (4, {'res': '$p_24.1'}), (6, {'lhs': '$x_22.0', 'rhs': '$p_24.1', 'res': '$6binary_subtract.2'}), (8, {'res': '$const8.3'}), (10, {'res': '$xp_210.4'}), (12, {'res': '$_154load_attr_76_112.5'}), (14, {'lhs': '$xp_210.4', 'rhs': '$_154load_attr_76_112.5', 'res': '$14binary_add.6'}), (16, {'lhs': '$const8.3', 'rhs': '$14binary_add.6', 'res': '$16binary_multiply.7'}), (18, {'lhs': '$6binary_subtract.2', 'rhs': '$16binary_multiply.7', 'res': '$18binary_add.8'}), (20, {'res': '$const20.9'}), (22, {'lhs': '$18binary_add.8', 'rhs': '$const20.9', 'res': '$22binary_true_divide.10'}), (24, {'retval': '$22binary_true_divide.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:59,225 label 0:
    _154load_attr_76_1 = arg(0, name=_154load_attr_76_1) ['_154load_attr_76_1']
    p_2 = arg(1, name=p_2)                   ['p_2']
    x_2 = arg(2, name=x_2)                   ['x_2']
    xp_2 = arg(3, name=xp_2)                 ['xp_2']
    $6binary_subtract.2 = x_2 - p_2          ['$6binary_subtract.2', 'p_2', 'x_2']
    $const8.3 = const(complex, 1j)           ['$const8.3']
    $14binary_add.6 = xp_2 + _154load_attr_76_1 ['$14binary_add.6', '_154load_attr_76_1', 'xp_2']
    $16binary_multiply.7 = $const8.3 * $14binary_add.6 ['$14binary_add.6', '$16binary_multiply.7', '$const8.3']
    $18binary_add.8 = $6binary_subtract.2 + $16binary_multiply.7 ['$16binary_multiply.7', '$18binary_add.8', '$6binary_subtract.2']
    $const20.9 = const(int, 4)               ['$const20.9']
    $22binary_true_divide.10 = $18binary_add.8 / $const20.9 ['$18binary_add.8', '$22binary_true_divide.10', '$const20.9']
    $24return_value.11 = cast(value=$22binary_true_divide.10) ['$22binary_true_divide.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

DEBUG 2023-04-14 17:42:59,225 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:59,225 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661909C460>
DEBUG 2023-04-14 17:42:59,225 on stmt: _154load_attr_76_1 = arg(0, name=_154load_attr_76_1)
DEBUG 2023-04-14 17:42:59,225 on stmt: p_2 = arg(1, name=p_2)
DEBUG 2023-04-14 17:42:59,225 on stmt: x_2 = arg(2, name=x_2)
DEBUG 2023-04-14 17:42:59,225 on stmt: xp_2 = arg(3, name=xp_2)
DEBUG 2023-04-14 17:42:59,225 on stmt: $6binary_subtract.2 = x_2 - p_2
DEBUG 2023-04-14 17:42:59,225 on stmt: $const8.3 = const(complex, 1j)
DEBUG 2023-04-14 17:42:59,225 on stmt: $14binary_add.6 = xp_2 + _154load_attr_76_1
DEBUG 2023-04-14 17:42:59,225 on stmt: $16binary_multiply.7 = $const8.3 * $14binary_add.6
DEBUG 2023-04-14 17:42:59,225 on stmt: $18binary_add.8 = $6binary_subtract.2 + $16binary_multiply.7
DEBUG 2023-04-14 17:42:59,225 on stmt: $const20.9 = const(int, 4)
DEBUG 2023-04-14 17:42:59,225 on stmt: $22binary_true_divide.10 = $18binary_add.8 / $const20.9
DEBUG 2023-04-14 17:42:59,225 on stmt: $24return_value.11 = cast(value=$22binary_true_divide.10)
DEBUG 2023-04-14 17:42:59,225 on stmt: return $24return_value.11
DEBUG 2023-04-14 17:42:59,225 defs defaultdict(<class 'list'>,
            {'$14binary_add.6': [<numba.core.ir.Assign object at 0x000002661909FFD0>],
             '$16binary_multiply.7': [<numba.core.ir.Assign object at 0x00000266190A5190>],
             '$18binary_add.8': [<numba.core.ir.Assign object at 0x00000266190A5310>],
             '$22binary_true_divide.10': [<numba.core.ir.Assign object at 0x00000266190A5610>],
             '$24return_value.11': [<numba.core.ir.Assign object at 0x00000266190A5760>],
             '$6binary_subtract.2': [<numba.core.ir.Assign object at 0x000002661909FA90>],
             '$const20.9': [<numba.core.ir.Assign object at 0x00000266190A5460>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000002661909FBE0>],
             '_154load_attr_76_1': [<numba.core.ir.Assign object at 0x000002661909CBB0>],
             'p_2': [<numba.core.ir.Assign object at 0x000002661909F460>],
             'x_2': [<numba.core.ir.Assign object at 0x000002661909F580>],
             'xp_2': [<numba.core.ir.Assign object at 0x000002661909F6A0>]})
DEBUG 2023-04-14 17:42:59,225 SSA violators set()
DEBUG 2023-04-14 17:42:59,285 bytecode dump:
>          0	NOP(arg=None, lineno=154)
           2	LOAD_FAST(arg=0, lineno=154)
           4	LOAD_FAST(arg=1, lineno=154)
           6	BINARY_ADD(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,285 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:42:59,285 stack: []
DEBUG 2023-04-14 17:42:59,285 dispatch pc=0, inst=NOP(arg=None, lineno=154)
DEBUG 2023-04-14 17:42:59,285 stack []
DEBUG 2023-04-14 17:42:59,285 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=154)
DEBUG 2023-04-14 17:42:59,285 stack []
DEBUG 2023-04-14 17:42:59,285 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=154)
DEBUG 2023-04-14 17:42:59,285 stack ['$_192call_function_94_12.0']
DEBUG 2023-04-14 17:42:59,285 dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,285 stack ['$_192call_function_94_12.0', '$_204call_method_100_14.1']
DEBUG 2023-04-14 17:42:59,285 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:42:59,285 stack ['$6binary_add.2']
DEBUG 2023-04-14 17:42:59,285 end state. edges=[]
DEBUG 2023-04-14 17:42:59,285 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:42:59,285 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:42:59,285 defmap: {}
DEBUG 2023-04-14 17:42:59,285 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:59,285 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:42:59,285 keep phismap: {}
DEBUG 2023-04-14 17:42:59,285 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:42:59,285 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:42:59,285 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_192call_function_94_12.0'}), (4, {'res': '$_204call_method_100_14.1'}), (6, {'lhs': '$_192call_function_94_12.0', 'rhs': '$_204call_method_100_14.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:42:59,285 label 0:
    _192call_function_94_1 = arg(0, name=_192call_function_94_1) ['_192call_function_94_1']
    _204call_method_100_1 = arg(1, name=_204call_method_100_1) ['_204call_method_100_1']
    $6binary_add.2 = _192call_function_94_1 + _204call_method_100_1 ['$6binary_add.2', '_192call_function_94_1', '_204call_method_100_1']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:42:59,285 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:42:59,285 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266191905B0>
DEBUG 2023-04-14 17:42:59,285 on stmt: _192call_function_94_1 = arg(0, name=_192call_function_94_1)
DEBUG 2023-04-14 17:42:59,285 on stmt: _204call_method_100_1 = arg(1, name=_204call_method_100_1)
DEBUG 2023-04-14 17:42:59,285 on stmt: $6binary_add.2 = _192call_function_94_1 + _204call_method_100_1
DEBUG 2023-04-14 17:42:59,285 on stmt: $8return_value.3 = cast(value=$6binary_add.2)
DEBUG 2023-04-14 17:42:59,285 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:42:59,285 defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x0000026619197BE0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000026619197D30>],
             '_192call_function_94_1': [<numba.core.ir.Assign object at 0x00000266191971C0>],
             '_204call_method_100_1': [<numba.core.ir.Assign object at 0x00000266191977F0>]})
DEBUG 2023-04-14 17:42:59,285 SSA violators set()
DEBUG 2023-04-14 17:43:01,382 bytecode dump:
>          0	NOP(arg=None, lineno=281)
           2	LOAD_FAST(arg=0, lineno=281)
           4	LOAD_ATTR(arg=0, lineno=281)
           6	LOAD_CONST(arg=1, lineno=281)
           8	BINARY_SUBSCR(arg=None, lineno=281)
          10	LOAD_CONST(arg=2, lineno=281)
          12	BINARY_FLOOR_DIVIDE(arg=None, lineno=281)
          14	STORE_FAST(arg=1, lineno=281)
          16	LOAD_CONST(arg=3, lineno=282)
          18	STORE_FAST(arg=2, lineno=282)
          20	LOAD_GLOBAL(arg=1, lineno=283)
          22	LOAD_GLOBAL(arg=2, lineno=283)
          24	LOAD_METHOD(arg=3, lineno=283)
          26	LOAD_FAST(arg=1, lineno=283)
          28	CALL_METHOD(arg=1, lineno=283)
          30	CALL_FUNCTION(arg=1, lineno=283)
          32	GET_ITER(arg=None, lineno=283)
>         34	FOR_ITER(arg=100, lineno=283)
          36	STORE_FAST(arg=3, lineno=283)
          38	LOAD_GLOBAL(arg=2, lineno=284)
          40	LOAD_METHOD(arg=4, lineno=284)
          42	LOAD_FAST(arg=3, lineno=284)
          44	CALL_METHOD(arg=1, lineno=284)
          46	STORE_FAST(arg=4, lineno=284)
          48	LOAD_GLOBAL(arg=2, lineno=285)
          50	LOAD_ATTR(arg=5, lineno=285)
          52	LOAD_FAST(arg=4, lineno=285)
          54	LOAD_FAST(arg=4, lineno=285)
          56	LOAD_FAST(arg=1, lineno=285)
          58	BINARY_ADD(arg=None, lineno=285)
          60	BUILD_TUPLE(arg=2, lineno=285)
          62	LOAD_CONST(arg=1, lineno=285)
          64	LOAD_CONST(arg=4, lineno=285)
          66	CALL_FUNCTION_KW(arg=2, lineno=285)
          68	STORE_FAST(arg=5, lineno=285)
          70	LOAD_GLOBAL(arg=6, lineno=286)
          72	LOAD_FAST(arg=0, lineno=286)
          74	LOAD_FAST(arg=5, lineno=286)
          76	LOAD_FAST(arg=5, lineno=286)
          78	CALL_FUNCTION(arg=3, lineno=286)
          80	STORE_FAST(arg=6, lineno=286)
          82	LOAD_GLOBAL(arg=7, lineno=287)
          84	LOAD_FAST(arg=4, lineno=287)
          86	CALL_FUNCTION(arg=1, lineno=287)
          88	STORE_FAST(arg=7, lineno=287)
          90	LOAD_FAST(arg=2, lineno=288)
          92	LOAD_CONST(arg=5, lineno=288)
          94	LOAD_FAST(arg=7, lineno=288)
          96	BINARY_POWER(arg=None, lineno=288)
          98	LOAD_GLOBAL(arg=2, lineno=288)
         100	LOAD_METHOD(arg=8, lineno=288)
         102	LOAD_GLOBAL(arg=2, lineno=288)
         104	LOAD_ATTR(arg=9, lineno=288)
         106	LOAD_METHOD(arg=10, lineno=288)
         108	LOAD_GLOBAL(arg=2, lineno=288)
         110	LOAD_METHOD(arg=11, lineno=288)
         112	LOAD_CONST(arg=2, lineno=288)
         114	LOAD_FAST(arg=7, lineno=288)
         116	BINARY_MULTIPLY(arg=None, lineno=288)
         118	CALL_METHOD(arg=1, lineno=288)
         120	LOAD_FAST(arg=6, lineno=288)
         122	BINARY_SUBTRACT(arg=None, lineno=288)
         124	CALL_METHOD(arg=1, lineno=288)
         126	CALL_METHOD(arg=1, lineno=288)
         128	BINARY_TRUE_DIVIDE(arg=None, lineno=288)
         130	INPLACE_ADD(arg=None, lineno=288)
         132	STORE_FAST(arg=2, lineno=288)
         134	JUMP_ABSOLUTE(arg=34, lineno=288)
>        136	LOAD_FAST(arg=2, lineno=290)
         138	LOAD_CONST(arg=5, lineno=290)
         140	LOAD_FAST(arg=1, lineno=290)
         142	BINARY_POWER(arg=None, lineno=290)
         144	BINARY_MULTIPLY(arg=None, lineno=290)
         146	RETURN_VALUE(arg=None, lineno=290)
DEBUG 2023-04-14 17:43:01,382 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,382 stack: []
DEBUG 2023-04-14 17:43:01,382 dispatch pc=0, inst=NOP(arg=None, lineno=281)
DEBUG 2023-04-14 17:43:01,382 stack []
DEBUG 2023-04-14 17:43:01,382 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=281)
DEBUG 2023-04-14 17:43:01,382 stack []
DEBUG 2023-04-14 17:43:01,382 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=281)
DEBUG 2023-04-14 17:43:01,382 stack ['$A2.0']
DEBUG 2023-04-14 17:43:01,382 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=281)
DEBUG 2023-04-14 17:43:01,382 stack ['$4load_attr.1']
DEBUG 2023-04-14 17:43:01,382 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=281)
DEBUG 2023-04-14 17:43:01,382 stack ['$4load_attr.1', '$const6.2']
DEBUG 2023-04-14 17:43:01,382 dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=281)
DEBUG 2023-04-14 17:43:01,382 stack ['$8binary_subscr.3']
DEBUG 2023-04-14 17:43:01,382 dispatch pc=12, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=281)
DEBUG 2023-04-14 17:43:01,382 stack ['$8binary_subscr.3', '$const10.4']
DEBUG 2023-04-14 17:43:01,382 dispatch pc=14, inst=STORE_FAST(arg=1, lineno=281)
DEBUG 2023-04-14 17:43:01,382 stack ['$12binary_floor_divide.5']
DEBUG 2023-04-14 17:43:01,382 dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=282)
DEBUG 2023-04-14 17:43:01,382 stack []
DEBUG 2023-04-14 17:43:01,382 dispatch pc=18, inst=STORE_FAST(arg=2, lineno=282)
DEBUG 2023-04-14 17:43:01,382 stack ['$const16.6']
DEBUG 2023-04-14 17:43:01,382 dispatch pc=20, inst=LOAD_GLOBAL(arg=1, lineno=283)
DEBUG 2023-04-14 17:43:01,382 stack []
DEBUG 2023-04-14 17:43:01,382 dispatch pc=22, inst=LOAD_GLOBAL(arg=2, lineno=283)
DEBUG 2023-04-14 17:43:01,382 stack ['$20load_global.7']
DEBUG 2023-04-14 17:43:01,382 dispatch pc=24, inst=LOAD_METHOD(arg=3, lineno=283)
DEBUG 2023-04-14 17:43:01,382 stack ['$20load_global.7', '$22load_global.8']
DEBUG 2023-04-14 17:43:01,382 dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=283)
DEBUG 2023-04-14 17:43:01,382 stack ['$20load_global.7', '$24load_method.9']
DEBUG 2023-04-14 17:43:01,382 dispatch pc=28, inst=CALL_METHOD(arg=1, lineno=283)
DEBUG 2023-04-14 17:43:01,382 stack ['$20load_global.7', '$24load_method.9', '$n_det26.10']
DEBUG 2023-04-14 17:43:01,385 dispatch pc=30, inst=CALL_FUNCTION(arg=1, lineno=283)
DEBUG 2023-04-14 17:43:01,385 stack ['$20load_global.7', '$28call_method.11']
DEBUG 2023-04-14 17:43:01,385 dispatch pc=32, inst=GET_ITER(arg=None, lineno=283)
DEBUG 2023-04-14 17:43:01,385 stack ['$30call_function.12']
DEBUG 2023-04-14 17:43:01,385 end state. edges=[Edge(pc=34, stack=('$32get_iter.13',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,385 pending: deque([State(pc_initial=34 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,385 stack: ['$phi34.0']
DEBUG 2023-04-14 17:43:01,385 dispatch pc=34, inst=FOR_ITER(arg=100, lineno=283)
DEBUG 2023-04-14 17:43:01,385 stack ['$phi34.0']
DEBUG 2023-04-14 17:43:01,385 end state. edges=[Edge(pc=136, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=('$phi34.0', '$34for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,385 pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=36 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,385 stack: []
DEBUG 2023-04-14 17:43:01,385 dispatch pc=136, inst=LOAD_FAST(arg=2, lineno=290)
DEBUG 2023-04-14 17:43:01,385 stack []
DEBUG 2023-04-14 17:43:01,385 dispatch pc=138, inst=LOAD_CONST(arg=5, lineno=290)
DEBUG 2023-04-14 17:43:01,385 stack ['$p_sum136.0']
DEBUG 2023-04-14 17:43:01,385 dispatch pc=140, inst=LOAD_FAST(arg=1, lineno=290)
DEBUG 2023-04-14 17:43:01,385 stack ['$p_sum136.0', '$const138.1']
DEBUG 2023-04-14 17:43:01,385 dispatch pc=142, inst=BINARY_POWER(arg=None, lineno=290)
DEBUG 2023-04-14 17:43:01,385 stack ['$p_sum136.0', '$const138.1', '$n_det140.2']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=144, inst=BINARY_MULTIPLY(arg=None, lineno=290)
DEBUG 2023-04-14 17:43:01,386 stack ['$p_sum136.0', '$142binary_power.3']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=146, inst=RETURN_VALUE(arg=None, lineno=290)
DEBUG 2023-04-14 17:43:01,386 stack ['$144binary_multiply.4']
DEBUG 2023-04-14 17:43:01,386 end state. edges=[]
DEBUG 2023-04-14 17:43:01,386 pending: deque([State(pc_initial=36 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,386 stack: ['$phi36.0', '$phi36.1']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=36, inst=STORE_FAST(arg=3, lineno=283)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$phi36.1']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=38, inst=LOAD_GLOBAL(arg=2, lineno=284)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=40, inst=LOAD_METHOD(arg=4, lineno=284)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$38load_global.2']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=284)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$40load_method.3']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=44, inst=CALL_METHOD(arg=1, lineno=284)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$40load_method.3', '$z42.4']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=46, inst=STORE_FAST(arg=4, lineno=284)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$44call_method.5']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=48, inst=LOAD_GLOBAL(arg=2, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=50, inst=LOAD_ATTR(arg=5, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$48load_global.6']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$50load_attr.7']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$50load_attr.7', '$Z52.8']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$50load_attr.7', '$Z52.8', '$Z54.9']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=58, inst=BINARY_ADD(arg=None, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$50load_attr.7', '$Z52.8', '$Z54.9', '$n_det56.10']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=60, inst=BUILD_TUPLE(arg=2, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$50load_attr.7', '$Z52.8', '$58binary_add.11']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=62, inst=LOAD_CONST(arg=1, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$50load_attr.7', '$60build_tuple.12']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=64, inst=LOAD_CONST(arg=4, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$50load_attr.7', '$60build_tuple.12', '$const62.13']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=66, inst=CALL_FUNCTION_KW(arg=2, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$50load_attr.7', '$60build_tuple.12', '$const62.13', '$const64.14']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=68, inst=STORE_FAST(arg=5, lineno=285)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$66call_function_kw.15']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=70, inst=LOAD_GLOBAL(arg=6, lineno=286)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=286)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$70load_global.16']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=286)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$70load_global.16', '$A72.17']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=286)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$70load_global.16', '$A72.17', '$ZZ74.18']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=78, inst=CALL_FUNCTION(arg=3, lineno=286)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$70load_global.16', '$A72.17', '$ZZ74.18', '$ZZ76.19']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=80, inst=STORE_FAST(arg=6, lineno=286)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$78call_function.20']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=82, inst=LOAD_GLOBAL(arg=7, lineno=287)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=84, inst=LOAD_FAST(arg=4, lineno=287)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$82load_global.21']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=86, inst=CALL_FUNCTION(arg=1, lineno=287)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$82load_global.21', '$Z84.22']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=88, inst=STORE_FAST(arg=7, lineno=287)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$86call_function.23']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=92, inst=LOAD_CONST(arg=5, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=94, inst=LOAD_FAST(arg=7, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$const92.25']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=96, inst=BINARY_POWER(arg=None, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$const92.25', '$n94.26']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=98, inst=LOAD_GLOBAL(arg=2, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=100, inst=LOAD_METHOD(arg=8, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$98load_global.28']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=102, inst=LOAD_GLOBAL(arg=2, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=104, inst=LOAD_ATTR(arg=9, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$102load_global.30']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=106, inst=LOAD_METHOD(arg=10, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$104load_attr.31']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=108, inst=LOAD_GLOBAL(arg=2, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$106load_method.32']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=110, inst=LOAD_METHOD(arg=11, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$106load_method.32', '$108load_global.33']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$106load_method.32', '$110load_method.34']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=114, inst=LOAD_FAST(arg=7, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$106load_method.32', '$110load_method.34', '$const112.35']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=116, inst=BINARY_MULTIPLY(arg=None, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$106load_method.32', '$110load_method.34', '$const112.35', '$n114.36']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=118, inst=CALL_METHOD(arg=1, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$106load_method.32', '$110load_method.34', '$116binary_multiply.37']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=120, inst=LOAD_FAST(arg=6, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$106load_method.32', '$118call_method.38']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=122, inst=BINARY_SUBTRACT(arg=None, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$106load_method.32', '$118call_method.38', '$A_ZZ120.39']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=124, inst=CALL_METHOD(arg=1, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$106load_method.32', '$122binary_subtract.40']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=126, inst=CALL_METHOD(arg=1, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$100load_method.29', '$124call_method.41']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=128, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$96binary_power.27', '$126call_method.42']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=130, inst=INPLACE_ADD(arg=None, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$p_sum90.24', '$128binary_true_divide.43']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=132, inst=STORE_FAST(arg=2, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0', '$130inplace_add.44']
DEBUG 2023-04-14 17:43:01,386 dispatch pc=134, inst=JUMP_ABSOLUTE(arg=34, lineno=288)
DEBUG 2023-04-14 17:43:01,386 stack ['$phi36.0']
DEBUG 2023-04-14 17:43:01,386 end state. edges=[Edge(pc=34, stack=('$phi36.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,386 pending: deque([State(pc_initial=34 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,386 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:01,386 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=1): {'$phi34.0'},
             State(pc_initial=36 nstack_initial=2): {'$phi36.1'},
             State(pc_initial=136 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:01,386 defmap: {'$phi34.0': State(pc_initial=0 nstack_initial=0),
 '$phi36.1': State(pc_initial=34 nstack_initial=1)}
DEBUG 2023-04-14 17:43:01,386 phismap: defaultdict(<class 'set'>,
            {'$phi34.0': {('$32get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=2))},
             '$phi36.0': {('$phi34.0', State(pc_initial=34 nstack_initial=1))},
             '$phi36.1': {('$34for_iter.2',
                           State(pc_initial=34 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:01,386 changing phismap: defaultdict(<class 'set'>,
            {'$phi34.0': {('$32get_iter.13',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=1))},
             '$phi36.0': {('$32get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi36.1': {('$34for_iter.2',
                           State(pc_initial=34 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:01,386 changing phismap: defaultdict(<class 'set'>,
            {'$phi34.0': {('$32get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi36.0': {('$32get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi36.1': {('$34for_iter.2',
                           State(pc_initial=34 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:01,386 changing phismap: defaultdict(<class 'set'>,
            {'$phi34.0': {('$32get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi36.0': {('$32get_iter.13',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi36.1': {('$34for_iter.2',
                           State(pc_initial=34 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:01,386 keep phismap: {'$phi34.0': {('$32get_iter.13', State(pc_initial=0 nstack_initial=0))},
 '$phi36.1': {('$34for_iter.2', State(pc_initial=34 nstack_initial=1))}}
DEBUG 2023-04-14 17:43:01,386 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi34.0': '$32get_iter.13'},
             State(pc_initial=34 nstack_initial=1): {'$phi36.1': '$34for_iter.2'}})
DEBUG 2023-04-14 17:43:01,386 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:01,393 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$A2.0'}), (4, {'item': '$A2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'res': '$const10.4'}), (12, {'lhs': '$8binary_subscr.3', 'rhs': '$const10.4', 'res': '$12binary_floor_divide.5'}), (14, {'value': '$12binary_floor_divide.5'}), (16, {'res': '$const16.6'}), (18, {'value': '$const16.6'}), (20, {'res': '$20load_global.7'}), (22, {'res': '$22load_global.8'}), (24, {'item': '$22load_global.8', 'res': '$24load_method.9'}), (26, {'res': '$n_det26.10'}), (28, {'func': '$24load_method.9', 'args': ['$n_det26.10'], 'res': '$28call_method.11'}), (30, {'func': '$20load_global.7', 'args': ['$28call_method.11'], 'res': '$30call_function.12'}), (32, {'value': '$30call_function.12', 'res': '$32get_iter.13'})), outgoing_phis={'$phi34.0': '$32get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$32get_iter.13',)})
DEBUG 2023-04-14 17:43:01,393 block_infos State(pc_initial=34 nstack_initial=1):
AdaptBlockInfo(insts=((34, {'iterator': '$phi34.0', 'pair': '$34for_iter.1', 'indval': '$34for_iter.2', 'pred': '$34for_iter.3'}),), outgoing_phis={'$phi36.1': '$34for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: (), 36: ('$phi34.0', '$34for_iter.2')})
DEBUG 2023-04-14 17:43:01,393 block_infos State(pc_initial=36 nstack_initial=2):
AdaptBlockInfo(insts=((36, {'value': '$phi36.1'}), (38, {'res': '$38load_global.2'}), (40, {'item': '$38load_global.2', 'res': '$40load_method.3'}), (42, {'res': '$z42.4'}), (44, {'func': '$40load_method.3', 'args': ['$z42.4'], 'res': '$44call_method.5'}), (46, {'value': '$44call_method.5'}), (48, {'res': '$48load_global.6'}), (50, {'item': '$48load_global.6', 'res': '$50load_attr.7'}), (52, {'res': '$Z52.8'}), (54, {'res': '$Z54.9'}), (56, {'res': '$n_det56.10'}), (58, {'lhs': '$Z54.9', 'rhs': '$n_det56.10', 'res': '$58binary_add.11'}), (60, {'items': ['$Z52.8', '$58binary_add.11'], 'res': '$60build_tuple.12'}), (62, {'res': '$const62.13'}), (64, {'res': '$const64.14'}), (66, {'func': '$50load_attr.7', 'args': ['$60build_tuple.12', '$const62.13'], 'names': '$const64.14', 'res': '$66call_function_kw.15'}), (68, {'value': '$66call_function_kw.15'}), (70, {'res': '$70load_global.16'}), (72, {'res': '$A72.17'}), (74, {'res': '$ZZ74.18'}), (76, {'res': '$ZZ76.19'}), (78, {'func': '$70load_global.16', 'args': ['$A72.17', '$ZZ74.18', '$ZZ76.19'], 'res': '$78call_function.20'}), (80, {'value': '$78call_function.20'}), (82, {'res': '$82load_global.21'}), (84, {'res': '$Z84.22'}), (86, {'func': '$82load_global.21', 'args': ['$Z84.22'], 'res': '$86call_function.23'}), (88, {'value': '$86call_function.23'}), (90, {'res': '$p_sum90.24'}), (92, {'res': '$const92.25'}), (94, {'res': '$n94.26'}), (96, {'lhs': '$const92.25', 'rhs': '$n94.26', 'res': '$96binary_power.27'}), (98, {'res': '$98load_global.28'}), (100, {'item': '$98load_global.28', 'res': '$100load_method.29'}), (102, {'res': '$102load_global.30'}), (104, {'item': '$102load_global.30', 'res': '$104load_attr.31'}), (106, {'item': '$104load_attr.31', 'res': '$106load_method.32'}), (108, {'res': '$108load_global.33'}), (110, {'item': '$108load_global.33', 'res': '$110load_method.34'}), (112, {'res': '$const112.35'}), (114, {'res': '$n114.36'}), (116, {'lhs': '$const112.35', 'rhs': '$n114.36', 'res': '$116binary_multiply.37'}), (118, {'func': '$110load_method.34', 'args': ['$116binary_multiply.37'], 'res': '$118call_method.38'}), (120, {'res': '$A_ZZ120.39'}), (122, {'lhs': '$118call_method.38', 'rhs': '$A_ZZ120.39', 'res': '$122binary_subtract.40'}), (124, {'func': '$106load_method.32', 'args': ['$122binary_subtract.40'], 'res': '$124call_method.41'}), (126, {'func': '$100load_method.29', 'args': ['$124call_method.41'], 'res': '$126call_method.42'}), (128, {'lhs': '$96binary_power.27', 'rhs': '$126call_method.42', 'res': '$128binary_true_divide.43'}), (130, {'lhs': '$p_sum90.24', 'rhs': '$128binary_true_divide.43', 'res': '$130inplace_add.44'}), (132, {'value': '$130inplace_add.44'}), (134, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi36.0',)})
DEBUG 2023-04-14 17:43:01,393 block_infos State(pc_initial=136 nstack_initial=0):
AdaptBlockInfo(insts=((136, {'res': '$p_sum136.0'}), (138, {'res': '$const138.1'}), (140, {'res': '$n_det140.2'}), (142, {'lhs': '$const138.1', 'rhs': '$n_det140.2', 'res': '$142binary_power.3'}), (144, {'lhs': '$p_sum136.0', 'rhs': '$142binary_power.3', 'res': '$144binary_multiply.4'}), (146, {'retval': '$144binary_multiply.4', 'castval': '$146return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:01,395 label 0:
    A = arg(0, name=A)                       ['A']
    $4load_attr.1 = getattr(value=A, attr=shape) ['$4load_attr.1', 'A']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=$4load_attr.1, index=$const6.2, fn=<built-in function getitem>) ['$4load_attr.1', '$8binary_subscr.3', '$const6.2']
    $const10.4 = const(int, 2)               ['$const10.4']
    n_det = $8binary_subscr.3 // $const10.4  ['$8binary_subscr.3', '$const10.4', 'n_det']
    p_sum = const(float, 1.0)                ['p_sum']
    $20load_global.7 = global(powerset: CPUDispatcher(<function powerset at 0x000002660843F5E0>)) ['$20load_global.7']
    $22load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=arange) ['$22load_global.8', '$24load_method.9']
    $28call_method.11 = call $24load_method.9(n_det, func=$24load_method.9, args=[Var(n_det, _torontonian.py:281)], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.9', '$28call_method.11', 'n_det']
    $30call_function.12 = call $20load_global.7($28call_method.11, func=$20load_global.7, args=[Var($28call_method.11, _torontonian.py:283)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_global.7', '$28call_method.11', '$30call_function.12']
    $32get_iter.13 = getiter(value=$30call_function.12) ['$30call_function.12', '$32get_iter.13']
    $phi34.0 = $32get_iter.13                ['$32get_iter.13', '$phi34.0']
    jump 34                                  []
label 34:
    $34for_iter.1 = iternext(value=$phi34.0) ['$34for_iter.1', '$phi34.0']
    $34for_iter.2 = pair_first(value=$34for_iter.1) ['$34for_iter.1', '$34for_iter.2']
    $34for_iter.3 = pair_second(value=$34for_iter.1) ['$34for_iter.1', '$34for_iter.3']
    $phi36.1 = $34for_iter.2                 ['$34for_iter.2', '$phi36.1']
    branch $34for_iter.3, 36, 136            ['$34for_iter.3']
label 36:
    z = $phi36.1                             ['$phi36.1', 'z']
    $38load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$38load_global.2']
    $40load_method.3 = getattr(value=$38load_global.2, attr=asarray) ['$38load_global.2', '$40load_method.3']
    Z = call $40load_method.3(z, func=$40load_method.3, args=[Var(z, _torontonian.py:283)], kws=(), vararg=None, varkwarg=None, target=None) ['$40load_method.3', 'Z', 'z']
    $48load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$48load_global.6']
    $50load_attr.7 = getattr(value=$48load_global.6, attr=concatenate) ['$48load_global.6', '$50load_attr.7']
    $58binary_add.11 = Z + n_det             ['$58binary_add.11', 'Z', 'n_det']
    $60build_tuple.12 = build_tuple(items=[Var(Z, _torontonian.py:284), Var($58binary_add.11, _torontonian.py:285)]) ['$58binary_add.11', '$60build_tuple.12', 'Z']
    $const62.13 = const(int, 0)              ['$const62.13']
    ZZ = call $50load_attr.7($60build_tuple.12, func=$50load_attr.7, args=[Var($60build_tuple.12, _torontonian.py:285)], kws=[('axis', Var($const62.13, _torontonian.py:285))], vararg=None, varkwarg=None, target=None) ['$50load_attr.7', '$60build_tuple.12', '$const62.13', 'ZZ']
    $70load_global.16 = global(numba_ix: CPUDispatcher(<function numba_ix at 0x000002660843F940>)) ['$70load_global.16']
    A_ZZ = call $70load_global.16(A, ZZ, ZZ, func=$70load_global.16, args=[Var(A, _torontonian.py:281), Var(ZZ, _torontonian.py:285), Var(ZZ, _torontonian.py:285)], kws=(), vararg=None, varkwarg=None, target=None) ['$70load_global.16', 'A', 'A_ZZ', 'ZZ', 'ZZ']
    $82load_global.21 = global(len: <built-in function len>) ['$82load_global.21']
    n = call $82load_global.21(Z, func=$82load_global.21, args=[Var(Z, _torontonian.py:284)], kws=(), vararg=None, varkwarg=None, target=None) ['$82load_global.21', 'Z', 'n']
    $const92.25 = const(int, -1)             ['$const92.25']
    $96binary_power.27 = $const92.25 ** n    ['$96binary_power.27', '$const92.25', 'n']
    $98load_global.28 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$98load_global.28']
    $100load_method.29 = getattr(value=$98load_global.28, attr=sqrt) ['$100load_method.29', '$98load_global.28']
    $102load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.30']
    $104load_attr.31 = getattr(value=$102load_global.30, attr=linalg) ['$102load_global.30', '$104load_attr.31']
    $106load_method.32 = getattr(value=$104load_attr.31, attr=det) ['$104load_attr.31', '$106load_method.32']
    $108load_global.33 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$108load_global.33']
    $110load_method.34 = getattr(value=$108load_global.33, attr=eye) ['$108load_global.33', '$110load_method.34']
    $const112.35 = const(int, 2)             ['$const112.35']
    $116binary_multiply.37 = $const112.35 * n ['$116binary_multiply.37', '$const112.35', 'n']
    $118call_method.38 = call $110load_method.34($116binary_multiply.37, func=$110load_method.34, args=[Var($116binary_multiply.37, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None) ['$110load_method.34', '$116binary_multiply.37', '$118call_method.38']
    $122binary_subtract.40 = $118call_method.38 - A_ZZ ['$118call_method.38', '$122binary_subtract.40', 'A_ZZ']
    $124call_method.41 = call $106load_method.32($122binary_subtract.40, func=$106load_method.32, args=[Var($122binary_subtract.40, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None) ['$106load_method.32', '$122binary_subtract.40', '$124call_method.41']
    $126call_method.42 = call $100load_method.29($124call_method.41, func=$100load_method.29, args=[Var($124call_method.41, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None) ['$100load_method.29', '$124call_method.41', '$126call_method.42']
    $128binary_true_divide.43 = $96binary_power.27 / $126call_method.42 ['$126call_method.42', '$128binary_true_divide.43', '$96binary_power.27']
    $130inplace_add.44 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=p_sum, rhs=$128binary_true_divide.43, static_lhs=Undefined, static_rhs=Undefined) ['$128binary_true_divide.43', '$130inplace_add.44', 'p_sum']
    p_sum = $130inplace_add.44               ['$130inplace_add.44', 'p_sum']
    jump 34                                  []
label 136:
    $const138.1 = const(int, -1)             ['$const138.1']
    $142binary_power.3 = $const138.1 ** n_det ['$142binary_power.3', '$const138.1', 'n_det']
    $144binary_multiply.4 = p_sum * $142binary_power.3 ['$142binary_power.3', '$144binary_multiply.4', 'p_sum']
    $146return_value.5 = cast(value=$144binary_multiply.4) ['$144binary_multiply.4', '$146return_value.5']
    return $146return_value.5                ['$146return_value.5']

DEBUG 2023-04-14 17:43:01,403 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:01,403 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619357A00>
DEBUG 2023-04-14 17:43:01,403 on stmt: A = arg(0, name=A)
DEBUG 2023-04-14 17:43:01,403 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2023-04-14 17:43:01,403 on stmt: $const6.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,403 on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,403 on stmt: $const10.4 = const(int, 2)
DEBUG 2023-04-14 17:43:01,403 on stmt: n_det = $8binary_subscr.3 // $const10.4
DEBUG 2023-04-14 17:43:01,403 on stmt: p_sum = const(float, 1.0)
DEBUG 2023-04-14 17:43:01,405 on stmt: $20load_global.7 = global(powerset: CPUDispatcher(<function powerset at 0x000002660843F5E0>))
DEBUG 2023-04-14 17:43:01,405 on stmt: $22load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=arange)
DEBUG 2023-04-14 17:43:01,405 on stmt: $28call_method.11 = call $24load_method.9(n_det, func=$24load_method.9, args=[Var(n_det, _torontonian.py:281)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $30call_function.12 = call $20load_global.7($28call_method.11, func=$20load_global.7, args=[Var($28call_method.11, _torontonian.py:283)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $32get_iter.13 = getiter(value=$30call_function.12)
DEBUG 2023-04-14 17:43:01,405 on stmt: $phi34.0 = $32get_iter.13
DEBUG 2023-04-14 17:43:01,405 on stmt: jump 34
DEBUG 2023-04-14 17:43:01,405 ==== SSA block analysis pass on 34
DEBUG 2023-04-14 17:43:01,405 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619357A00>
DEBUG 2023-04-14 17:43:01,405 on stmt: $34for_iter.1 = iternext(value=$phi34.0)
DEBUG 2023-04-14 17:43:01,405 on stmt: $34for_iter.2 = pair_first(value=$34for_iter.1)
DEBUG 2023-04-14 17:43:01,405 on stmt: $34for_iter.3 = pair_second(value=$34for_iter.1)
DEBUG 2023-04-14 17:43:01,405 on stmt: $phi36.1 = $34for_iter.2
DEBUG 2023-04-14 17:43:01,405 on stmt: branch $34for_iter.3, 36, 136
DEBUG 2023-04-14 17:43:01,405 ==== SSA block analysis pass on 36
DEBUG 2023-04-14 17:43:01,405 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619357A00>
DEBUG 2023-04-14 17:43:01,405 on stmt: z = $phi36.1
DEBUG 2023-04-14 17:43:01,405 on stmt: $38load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $40load_method.3 = getattr(value=$38load_global.2, attr=asarray)
DEBUG 2023-04-14 17:43:01,405 on stmt: Z = call $40load_method.3(z, func=$40load_method.3, args=[Var(z, _torontonian.py:283)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $48load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $50load_attr.7 = getattr(value=$48load_global.6, attr=concatenate)
DEBUG 2023-04-14 17:43:01,405 on stmt: $58binary_add.11 = Z + n_det
DEBUG 2023-04-14 17:43:01,405 on stmt: $60build_tuple.12 = build_tuple(items=[Var(Z, _torontonian.py:284), Var($58binary_add.11, _torontonian.py:285)])
DEBUG 2023-04-14 17:43:01,405 on stmt: $const62.13 = const(int, 0)
DEBUG 2023-04-14 17:43:01,405 on stmt: ZZ = call $50load_attr.7($60build_tuple.12, func=$50load_attr.7, args=[Var($60build_tuple.12, _torontonian.py:285)], kws=[('axis', Var($const62.13, _torontonian.py:285))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $70load_global.16 = global(numba_ix: CPUDispatcher(<function numba_ix at 0x000002660843F940>))
DEBUG 2023-04-14 17:43:01,405 on stmt: A_ZZ = call $70load_global.16(A, ZZ, ZZ, func=$70load_global.16, args=[Var(A, _torontonian.py:281), Var(ZZ, _torontonian.py:285), Var(ZZ, _torontonian.py:285)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $82load_global.21 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,405 on stmt: n = call $82load_global.21(Z, func=$82load_global.21, args=[Var(Z, _torontonian.py:284)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $const92.25 = const(int, -1)
DEBUG 2023-04-14 17:43:01,405 on stmt: $96binary_power.27 = $const92.25 ** n
DEBUG 2023-04-14 17:43:01,405 on stmt: $98load_global.28 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $100load_method.29 = getattr(value=$98load_global.28, attr=sqrt)
DEBUG 2023-04-14 17:43:01,405 on stmt: $102load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $104load_attr.31 = getattr(value=$102load_global.30, attr=linalg)
DEBUG 2023-04-14 17:43:01,405 on stmt: $106load_method.32 = getattr(value=$104load_attr.31, attr=det)
DEBUG 2023-04-14 17:43:01,405 on stmt: $108load_global.33 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $110load_method.34 = getattr(value=$108load_global.33, attr=eye)
DEBUG 2023-04-14 17:43:01,405 on stmt: $const112.35 = const(int, 2)
DEBUG 2023-04-14 17:43:01,405 on stmt: $116binary_multiply.37 = $const112.35 * n
DEBUG 2023-04-14 17:43:01,405 on stmt: $118call_method.38 = call $110load_method.34($116binary_multiply.37, func=$110load_method.34, args=[Var($116binary_multiply.37, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $122binary_subtract.40 = $118call_method.38 - A_ZZ
DEBUG 2023-04-14 17:43:01,405 on stmt: $124call_method.41 = call $106load_method.32($122binary_subtract.40, func=$106load_method.32, args=[Var($122binary_subtract.40, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $126call_method.42 = call $100load_method.29($124call_method.41, func=$100load_method.29, args=[Var($124call_method.41, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $128binary_true_divide.43 = $96binary_power.27 / $126call_method.42
DEBUG 2023-04-14 17:43:01,405 on stmt: $130inplace_add.44 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=p_sum, rhs=$128binary_true_divide.43, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,405 on stmt: p_sum = $130inplace_add.44
DEBUG 2023-04-14 17:43:01,405 on stmt: jump 34
DEBUG 2023-04-14 17:43:01,405 ==== SSA block analysis pass on 136
DEBUG 2023-04-14 17:43:01,405 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619357A00>
DEBUG 2023-04-14 17:43:01,405 on stmt: $const138.1 = const(int, -1)
DEBUG 2023-04-14 17:43:01,405 on stmt: $142binary_power.3 = $const138.1 ** n_det
DEBUG 2023-04-14 17:43:01,405 on stmt: $144binary_multiply.4 = p_sum * $142binary_power.3
DEBUG 2023-04-14 17:43:01,405 on stmt: $146return_value.5 = cast(value=$144binary_multiply.4)
DEBUG 2023-04-14 17:43:01,405 on stmt: return $146return_value.5
DEBUG 2023-04-14 17:43:01,405 defs defaultdict(<class 'list'>,
            {'$100load_method.29': [<numba.core.ir.Assign object at 0x0000026619351CD0>],
             '$102load_global.30': [<numba.core.ir.Assign object at 0x0000026619351E50>],
             '$104load_attr.31': [<numba.core.ir.Assign object at 0x0000026619351FD0>],
             '$106load_method.32': [<numba.core.ir.Assign object at 0x0000026619352190>],
             '$108load_global.33': [<numba.core.ir.Assign object at 0x0000026619352310>],
             '$110load_method.34': [<numba.core.ir.Assign object at 0x0000026619352490>],
             '$116binary_multiply.37': [<numba.core.ir.Assign object at 0x00000266193528E0>],
             '$118call_method.38': [<numba.core.ir.Assign object at 0x0000026619352AC0>],
             '$122binary_subtract.40': [<numba.core.ir.Assign object at 0x0000026619352D00>],
             '$124call_method.41': [<numba.core.ir.Assign object at 0x0000026619352EE0>],
             '$126call_method.42': [<numba.core.ir.Assign object at 0x00000266193540A0>],
             '$128binary_true_divide.43': [<numba.core.ir.Assign object at 0x00000266193541C0>],
             '$130inplace_add.44': [<numba.core.ir.Assign object at 0x0000026619354340>],
             '$142binary_power.3': [<numba.core.ir.Assign object at 0x000002661934DEE0>],
             '$144binary_multiply.4': [<numba.core.ir.Assign object at 0x0000026619354640>],
             '$146return_value.5': [<numba.core.ir.Assign object at 0x0000026619354790>],
             '$20load_global.7': [<numba.core.ir.Assign object at 0x0000026619340A30>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x0000026619340BB0>],
             '$24load_method.9': [<numba.core.ir.Assign object at 0x0000026619340D30>],
             '$28call_method.11': [<numba.core.ir.Assign object at 0x000002661934D0A0>],
             '$30call_function.12': [<numba.core.ir.Assign object at 0x000002661934D1F0>],
             '$32get_iter.13': [<numba.core.ir.Assign object at 0x000002661934D310>],
             '$34for_iter.1': [<numba.core.ir.Assign object at 0x000002661934D520>],
             '$34for_iter.2': [<numba.core.ir.Assign object at 0x000002661934D640>],
             '$34for_iter.3': [<numba.core.ir.Assign object at 0x000002661934D760>],
             '$38load_global.2': [<numba.core.ir.Assign object at 0x000002661934DBB0>],
             '$40load_method.3': [<numba.core.ir.Assign object at 0x000002661934DD30>],
             '$48load_global.6': [<numba.core.ir.Assign object at 0x000002661934F2B0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000026617A93550>],
             '$50load_attr.7': [<numba.core.ir.Assign object at 0x0000026617A991F0>],
             '$58binary_add.11': [<numba.core.ir.Assign object at 0x0000026618E6B640>],
             '$60build_tuple.12': [<numba.core.ir.Assign object at 0x0000026618E6B4C0>],
             '$70load_global.16': [<numba.core.ir.Assign object at 0x000002661934F910>],
             '$82load_global.21': [<numba.core.ir.Assign object at 0x00000266193510D0>],
             '$8binary_subscr.3': [<numba.core.ir.Assign object at 0x0000026618E6B250>],
             '$96binary_power.27': [<numba.core.ir.Assign object at 0x0000026619351A00>],
             '$98load_global.28': [<numba.core.ir.Assign object at 0x0000026619351B50>],
             '$const10.4': [<numba.core.ir.Assign object at 0x0000026618E3DFD0>],
             '$const112.35': [<numba.core.ir.Assign object at 0x0000026619352610>],
             '$const138.1': [<numba.core.ir.Assign object at 0x00000266193511F0>],
             '$const6.2': [<numba.core.ir.Assign object at 0x0000026618E1B910>],
             '$const62.13': [<numba.core.ir.Assign object at 0x0000026617A9B250>],
             '$const92.25': [<numba.core.ir.Assign object at 0x0000026619351730>],
             '$phi34.0': [<numba.core.ir.Assign object at 0x0000026618E6F790>],
             '$phi36.1': [<numba.core.ir.Assign object at 0x000002661934D460>],
             'A': [<numba.core.ir.Assign object at 0x0000026617A99D30>],
             'A_ZZ': [<numba.core.ir.Assign object at 0x000002661934FE50>],
             'Z': [<numba.core.ir.Assign object at 0x000002661934F0A0>],
             'ZZ': [<numba.core.ir.Assign object at 0x000002661934F790>],
             'n': [<numba.core.ir.Assign object at 0x00000266193513D0>],
             'n_det': [<numba.core.ir.Assign object at 0x0000026617AD2040>],
             'p_sum': [<numba.core.ir.Assign object at 0x00000266193343A0>,
                       <numba.core.ir.Assign object at 0x0000026619354400>],
             'z': [<numba.core.ir.Assign object at 0x000002661934DA30>]})
DEBUG 2023-04-14 17:43:01,405 SSA violators {'p_sum'}
DEBUG 2023-04-14 17:43:01,405 Fix SSA violator on var p_sum
DEBUG 2023-04-14 17:43:01,405 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193572B0>
DEBUG 2023-04-14 17:43:01,405 on stmt: A = arg(0, name=A)
DEBUG 2023-04-14 17:43:01,405 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2023-04-14 17:43:01,405 on stmt: $const6.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,405 on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $const10.4 = const(int, 2)
DEBUG 2023-04-14 17:43:01,405 on stmt: n_det = $8binary_subscr.3 // $const10.4
DEBUG 2023-04-14 17:43:01,405 on stmt: p_sum = const(float, 1.0)
DEBUG 2023-04-14 17:43:01,405 first assign: p_sum
DEBUG 2023-04-14 17:43:01,405 replaced with: p_sum = const(float, 1.0)
DEBUG 2023-04-14 17:43:01,405 on stmt: $20load_global.7 = global(powerset: CPUDispatcher(<function powerset at 0x000002660843F5E0>))
DEBUG 2023-04-14 17:43:01,405 on stmt: $22load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=arange)
DEBUG 2023-04-14 17:43:01,405 on stmt: $28call_method.11 = call $24load_method.9(n_det, func=$24load_method.9, args=[Var(n_det, _torontonian.py:281)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $30call_function.12 = call $20load_global.7($28call_method.11, func=$20load_global.7, args=[Var($28call_method.11, _torontonian.py:283)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $32get_iter.13 = getiter(value=$30call_function.12)
DEBUG 2023-04-14 17:43:01,405 on stmt: $phi34.0 = $32get_iter.13
DEBUG 2023-04-14 17:43:01,405 on stmt: jump 34
DEBUG 2023-04-14 17:43:01,405 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:43:01,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193572B0>
DEBUG 2023-04-14 17:43:01,405 on stmt: $34for_iter.1 = iternext(value=$phi34.0)
DEBUG 2023-04-14 17:43:01,405 on stmt: $34for_iter.2 = pair_first(value=$34for_iter.1)
DEBUG 2023-04-14 17:43:01,405 on stmt: $34for_iter.3 = pair_second(value=$34for_iter.1)
DEBUG 2023-04-14 17:43:01,405 on stmt: $phi36.1 = $34for_iter.2
DEBUG 2023-04-14 17:43:01,405 on stmt: branch $34for_iter.3, 36, 136
DEBUG 2023-04-14 17:43:01,405 ==== SSA block rewrite pass on 36
DEBUG 2023-04-14 17:43:01,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193572B0>
DEBUG 2023-04-14 17:43:01,405 on stmt: z = $phi36.1
DEBUG 2023-04-14 17:43:01,405 on stmt: $38load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $40load_method.3 = getattr(value=$38load_global.2, attr=asarray)
DEBUG 2023-04-14 17:43:01,405 on stmt: Z = call $40load_method.3(z, func=$40load_method.3, args=[Var(z, _torontonian.py:283)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $48load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $50load_attr.7 = getattr(value=$48load_global.6, attr=concatenate)
DEBUG 2023-04-14 17:43:01,405 on stmt: $58binary_add.11 = Z + n_det
DEBUG 2023-04-14 17:43:01,405 on stmt: $60build_tuple.12 = build_tuple(items=[Var(Z, _torontonian.py:284), Var($58binary_add.11, _torontonian.py:285)])
DEBUG 2023-04-14 17:43:01,405 on stmt: $const62.13 = const(int, 0)
DEBUG 2023-04-14 17:43:01,405 on stmt: ZZ = call $50load_attr.7($60build_tuple.12, func=$50load_attr.7, args=[Var($60build_tuple.12, _torontonian.py:285)], kws=[('axis', Var($const62.13, _torontonian.py:285))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $70load_global.16 = global(numba_ix: CPUDispatcher(<function numba_ix at 0x000002660843F940>))
DEBUG 2023-04-14 17:43:01,405 on stmt: A_ZZ = call $70load_global.16(A, ZZ, ZZ, func=$70load_global.16, args=[Var(A, _torontonian.py:281), Var(ZZ, _torontonian.py:285), Var(ZZ, _torontonian.py:285)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $82load_global.21 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,405 on stmt: n = call $82load_global.21(Z, func=$82load_global.21, args=[Var(Z, _torontonian.py:284)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $const92.25 = const(int, -1)
DEBUG 2023-04-14 17:43:01,405 on stmt: $96binary_power.27 = $const92.25 ** n
DEBUG 2023-04-14 17:43:01,405 on stmt: $98load_global.28 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $100load_method.29 = getattr(value=$98load_global.28, attr=sqrt)
DEBUG 2023-04-14 17:43:01,405 on stmt: $102load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $104load_attr.31 = getattr(value=$102load_global.30, attr=linalg)
DEBUG 2023-04-14 17:43:01,405 on stmt: $106load_method.32 = getattr(value=$104load_attr.31, attr=det)
DEBUG 2023-04-14 17:43:01,405 on stmt: $108load_global.33 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $110load_method.34 = getattr(value=$108load_global.33, attr=eye)
DEBUG 2023-04-14 17:43:01,405 on stmt: $const112.35 = const(int, 2)
DEBUG 2023-04-14 17:43:01,405 on stmt: $116binary_multiply.37 = $const112.35 * n
DEBUG 2023-04-14 17:43:01,405 on stmt: $118call_method.38 = call $110load_method.34($116binary_multiply.37, func=$110load_method.34, args=[Var($116binary_multiply.37, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $122binary_subtract.40 = $118call_method.38 - A_ZZ
DEBUG 2023-04-14 17:43:01,405 on stmt: $124call_method.41 = call $106load_method.32($122binary_subtract.40, func=$106load_method.32, args=[Var($122binary_subtract.40, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $126call_method.42 = call $100load_method.29($124call_method.41, func=$100load_method.29, args=[Var($124call_method.41, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,405 on stmt: $128binary_true_divide.43 = $96binary_power.27 / $126call_method.42
DEBUG 2023-04-14 17:43:01,405 on stmt: $130inplace_add.44 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=p_sum, rhs=$128binary_true_divide.43, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,405 on stmt: p_sum = $130inplace_add.44
DEBUG 2023-04-14 17:43:01,405 replaced with: p_sum.1 = $130inplace_add.44
DEBUG 2023-04-14 17:43:01,405 on stmt: jump 34
DEBUG 2023-04-14 17:43:01,405 ==== SSA block rewrite pass on 136
DEBUG 2023-04-14 17:43:01,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193572B0>
DEBUG 2023-04-14 17:43:01,405 on stmt: $const138.1 = const(int, -1)
DEBUG 2023-04-14 17:43:01,405 on stmt: $142binary_power.3 = $const138.1 ** n_det
DEBUG 2023-04-14 17:43:01,405 on stmt: $144binary_multiply.4 = p_sum * $142binary_power.3
DEBUG 2023-04-14 17:43:01,405 on stmt: $146return_value.5 = cast(value=$144binary_multiply.4)
DEBUG 2023-04-14 17:43:01,405 on stmt: return $146return_value.5
DEBUG 2023-04-14 17:43:01,405 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026619357B20>],
             36: [<numba.core.ir.Assign object at 0x0000026619357250>]})
DEBUG 2023-04-14 17:43:01,405 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,405 Running <numba.core.ssa._FixSSAVars object at 0x00000266193572B0>
DEBUG 2023-04-14 17:43:01,405 on stmt: A = arg(0, name=A)
DEBUG 2023-04-14 17:43:01,405 on stmt: $4load_attr.1 = getattr(value=A, attr=shape)
DEBUG 2023-04-14 17:43:01,405 on stmt: $const6.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,405 on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,405 on stmt: $const10.4 = const(int, 2)
DEBUG 2023-04-14 17:43:01,413 on stmt: n_det = $8binary_subscr.3 // $const10.4
DEBUG 2023-04-14 17:43:01,413 on stmt: p_sum = const(float, 1.0)
DEBUG 2023-04-14 17:43:01,413 on stmt: $20load_global.7 = global(powerset: CPUDispatcher(<function powerset at 0x000002660843F5E0>))
DEBUG 2023-04-14 17:43:01,413 on stmt: $22load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,413 on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=arange)
DEBUG 2023-04-14 17:43:01,413 on stmt: $28call_method.11 = call $24load_method.9(n_det, func=$24load_method.9, args=[Var(n_det, _torontonian.py:281)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,413 on stmt: $30call_function.12 = call $20load_global.7($28call_method.11, func=$20load_global.7, args=[Var($28call_method.11, _torontonian.py:283)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,413 on stmt: $32get_iter.13 = getiter(value=$30call_function.12)
DEBUG 2023-04-14 17:43:01,413 on stmt: $phi34.0 = $32get_iter.13
DEBUG 2023-04-14 17:43:01,413 on stmt: jump 34
DEBUG 2023-04-14 17:43:01,413 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:43:01,413 Running <numba.core.ssa._FixSSAVars object at 0x00000266193572B0>
DEBUG 2023-04-14 17:43:01,413 on stmt: $34for_iter.1 = iternext(value=$phi34.0)
DEBUG 2023-04-14 17:43:01,413 on stmt: $34for_iter.2 = pair_first(value=$34for_iter.1)
DEBUG 2023-04-14 17:43:01,413 on stmt: $34for_iter.3 = pair_second(value=$34for_iter.1)
DEBUG 2023-04-14 17:43:01,413 on stmt: $phi36.1 = $34for_iter.2
DEBUG 2023-04-14 17:43:01,413 on stmt: branch $34for_iter.3, 36, 136
DEBUG 2023-04-14 17:43:01,413 ==== SSA block rewrite pass on 36
DEBUG 2023-04-14 17:43:01,413 Running <numba.core.ssa._FixSSAVars object at 0x00000266193572B0>
DEBUG 2023-04-14 17:43:01,413 on stmt: z = $phi36.1
DEBUG 2023-04-14 17:43:01,413 on stmt: $38load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,413 on stmt: $40load_method.3 = getattr(value=$38load_global.2, attr=asarray)
DEBUG 2023-04-14 17:43:01,413 on stmt: Z = call $40load_method.3(z, func=$40load_method.3, args=[Var(z, _torontonian.py:283)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,413 on stmt: $48load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,413 on stmt: $50load_attr.7 = getattr(value=$48load_global.6, attr=concatenate)
DEBUG 2023-04-14 17:43:01,413 on stmt: $58binary_add.11 = Z + n_det
DEBUG 2023-04-14 17:43:01,413 on stmt: $60build_tuple.12 = build_tuple(items=[Var(Z, _torontonian.py:284), Var($58binary_add.11, _torontonian.py:285)])
DEBUG 2023-04-14 17:43:01,413 on stmt: $const62.13 = const(int, 0)
DEBUG 2023-04-14 17:43:01,413 on stmt: ZZ = call $50load_attr.7($60build_tuple.12, func=$50load_attr.7, args=[Var($60build_tuple.12, _torontonian.py:285)], kws=[('axis', Var($const62.13, _torontonian.py:285))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,413 on stmt: $70load_global.16 = global(numba_ix: CPUDispatcher(<function numba_ix at 0x000002660843F940>))
DEBUG 2023-04-14 17:43:01,413 on stmt: A_ZZ = call $70load_global.16(A, ZZ, ZZ, func=$70load_global.16, args=[Var(A, _torontonian.py:281), Var(ZZ, _torontonian.py:285), Var(ZZ, _torontonian.py:285)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,413 on stmt: $82load_global.21 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,413 on stmt: n = call $82load_global.21(Z, func=$82load_global.21, args=[Var(Z, _torontonian.py:284)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,413 on stmt: $const92.25 = const(int, -1)
DEBUG 2023-04-14 17:43:01,413 on stmt: $96binary_power.27 = $const92.25 ** n
DEBUG 2023-04-14 17:43:01,413 on stmt: $98load_global.28 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,413 on stmt: $100load_method.29 = getattr(value=$98load_global.28, attr=sqrt)
DEBUG 2023-04-14 17:43:01,413 on stmt: $102load_global.30 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,413 on stmt: $104load_attr.31 = getattr(value=$102load_global.30, attr=linalg)
DEBUG 2023-04-14 17:43:01,415 on stmt: $106load_method.32 = getattr(value=$104load_attr.31, attr=det)
DEBUG 2023-04-14 17:43:01,415 on stmt: $108load_global.33 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,415 on stmt: $110load_method.34 = getattr(value=$108load_global.33, attr=eye)
DEBUG 2023-04-14 17:43:01,415 on stmt: $const112.35 = const(int, 2)
DEBUG 2023-04-14 17:43:01,415 on stmt: $116binary_multiply.37 = $const112.35 * n
DEBUG 2023-04-14 17:43:01,415 on stmt: $118call_method.38 = call $110load_method.34($116binary_multiply.37, func=$110load_method.34, args=[Var($116binary_multiply.37, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,415 on stmt: $122binary_subtract.40 = $118call_method.38 - A_ZZ
DEBUG 2023-04-14 17:43:01,415 on stmt: $124call_method.41 = call $106load_method.32($122binary_subtract.40, func=$106load_method.32, args=[Var($122binary_subtract.40, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,415 on stmt: $126call_method.42 = call $100load_method.29($124call_method.41, func=$100load_method.29, args=[Var($124call_method.41, _torontonian.py:288)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,416 on stmt: $128binary_true_divide.43 = $96binary_power.27 / $126call_method.42
DEBUG 2023-04-14 17:43:01,416 on stmt: $130inplace_add.44 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=p_sum, rhs=$128binary_true_divide.43, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,416 find_def var='p_sum' stmt=$130inplace_add.44 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=p_sum, rhs=$128binary_true_divide.43, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,416 find_def_from_top label 36
DEBUG 2023-04-14 17:43:01,416 idom 34 from label 36
DEBUG 2023-04-14 17:43:01,416 find_def_from_bottom label 34
DEBUG 2023-04-14 17:43:01,416 find_def_from_top label 34
DEBUG 2023-04-14 17:43:01,416 insert phi node p_sum.2 = phi(incoming_values=[], incoming_blocks=[]) at 34
DEBUG 2023-04-14 17:43:01,416 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:01,416 incoming_def p_sum = const(float, 1.0)
DEBUG 2023-04-14 17:43:01,416 find_def_from_bottom label 36
DEBUG 2023-04-14 17:43:01,416 incoming_def p_sum.1 = $130inplace_add.44
DEBUG 2023-04-14 17:43:01,416 replaced with: $130inplace_add.44 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=p_sum.2, rhs=$128binary_true_divide.43, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,416 on stmt: p_sum.1 = $130inplace_add.44
DEBUG 2023-04-14 17:43:01,416 on stmt: jump 34
DEBUG 2023-04-14 17:43:01,416 ==== SSA block rewrite pass on 136
DEBUG 2023-04-14 17:43:01,416 Running <numba.core.ssa._FixSSAVars object at 0x00000266193572B0>
DEBUG 2023-04-14 17:43:01,416 on stmt: $const138.1 = const(int, -1)
DEBUG 2023-04-14 17:43:01,416 on stmt: $142binary_power.3 = $const138.1 ** n_det
DEBUG 2023-04-14 17:43:01,416 on stmt: $144binary_multiply.4 = p_sum * $142binary_power.3
DEBUG 2023-04-14 17:43:01,416 find_def var='p_sum' stmt=$144binary_multiply.4 = p_sum * $142binary_power.3
DEBUG 2023-04-14 17:43:01,416 find_def_from_top label 136
DEBUG 2023-04-14 17:43:01,416 idom 34 from label 136
DEBUG 2023-04-14 17:43:01,416 find_def_from_bottom label 34
DEBUG 2023-04-14 17:43:01,416 replaced with: $144binary_multiply.4 = p_sum.2 * $142binary_power.3
DEBUG 2023-04-14 17:43:01,416 on stmt: $146return_value.5 = cast(value=$144binary_multiply.4)
DEBUG 2023-04-14 17:43:01,416 on stmt: return $146return_value.5
DEBUG 2023-04-14 17:43:01,416 bytecode dump:
>          0	NOP(arg=None, lineno=4516)
           2	LOAD_DEREF(arg=0, lineno=4516)
           4	LOAD_CONST(arg=0, lineno=4516)
           6	IS_OP(arg=1, lineno=4516)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=4516)
          10	LOAD_DEREF(arg=0, lineno=4516)
          12	JUMP_FORWARD(arg=2, lineno=4516)
>         14	LOAD_FAST(arg=0, lineno=4516)
>         16	STORE_FAST(arg=4, lineno=4516)
          18	LOAD_DEREF(arg=2, lineno=4517)
          20	LOAD_CONST(arg=0, lineno=4517)
          22	IS_OP(arg=1, lineno=4517)
          24	POP_JUMP_IF_FALSE(arg=30, lineno=4517)
          26	LOAD_DEREF(arg=2, lineno=4517)
          28	JUMP_FORWARD(arg=2, lineno=4517)
>         30	LOAD_FAST(arg=1, lineno=4517)
>         32	STORE_FAST(arg=5, lineno=4517)
          34	LOAD_DEREF(arg=1, lineno=4518)
          36	LOAD_CONST(arg=0, lineno=4518)
          38	IS_OP(arg=1, lineno=4518)
          40	POP_JUMP_IF_FALSE(arg=46, lineno=4518)
          42	LOAD_DEREF(arg=1, lineno=4518)
          44	JUMP_FORWARD(arg=2, lineno=4518)
>         46	LOAD_FAST(arg=2, lineno=4518)
>         48	STORE_FAST(arg=6, lineno=4518)
          50	LOAD_FAST(arg=6, lineno=4520)
          52	LOAD_CONST(arg=0, lineno=4520)
          54	IS_OP(arg=1, lineno=4520)
          56	POP_JUMP_IF_FALSE(arg=62, lineno=4520)
          58	LOAD_FAST(arg=6, lineno=4520)
          60	JUMP_FORWARD(arg=2, lineno=4520)
>         62	LOAD_CONST(arg=1, lineno=4520)
>         64	STORE_FAST(arg=7, lineno=4520)
          66	LOAD_FAST(arg=5, lineno=4521)
          68	LOAD_CONST(arg=0, lineno=4521)
          70	IS_OP(arg=0, lineno=4521)
          72	POP_JUMP_IF_FALSE(arg=86, lineno=4521)
          74	LOAD_CONST(arg=2, lineno=4522)
          76	LOAD_FAST(arg=4, lineno=4522)
          78	ROT_TWO(arg=None, lineno=4522)
          80	STORE_FAST(arg=8, lineno=4522)
          82	STORE_FAST(arg=9, lineno=4522)
          84	JUMP_FORWARD(arg=10, lineno=4522)
>         86	LOAD_FAST(arg=4, lineno=4524)
          88	LOAD_FAST(arg=5, lineno=4524)
          90	ROT_TWO(arg=None, lineno=4524)
          92	STORE_FAST(arg=8, lineno=4524)
          94	STORE_FAST(arg=9, lineno=4524)
>         96	LOAD_FAST(arg=7, lineno=4526)
          98	LOAD_CONST(arg=2, lineno=4526)
         100	COMPARE_OP(arg=2, lineno=4526)
         102	POP_JUMP_IF_FALSE(arg=112, lineno=4526)
         104	LOAD_GLOBAL(arg=0, lineno=4527)
         106	LOAD_CONST(arg=3, lineno=4527)
         108	CALL_FUNCTION(arg=1, lineno=4527)
         110	RAISE_VARARGS(arg=1, lineno=4527)
>        112	LOAD_FAST(arg=9, lineno=4529)
         114	LOAD_FAST(arg=8, lineno=4529)
         116	BINARY_SUBTRACT(arg=None, lineno=4529)
         118	LOAD_FAST(arg=7, lineno=4529)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=4529)
         122	STORE_FAST(arg=10, lineno=4529)
         124	LOAD_GLOBAL(arg=1, lineno=4530)
         126	LOAD_GLOBAL(arg=2, lineno=4530)
         128	LOAD_METHOD(arg=3, lineno=4530)
         130	LOAD_FAST(arg=10, lineno=4530)
         132	LOAD_ATTR(arg=4, lineno=4530)
         134	CALL_METHOD(arg=1, lineno=4530)
         136	CALL_FUNCTION(arg=1, lineno=4530)
         138	STORE_FAST(arg=11, lineno=4530)
         140	LOAD_DEREF(arg=4, lineno=4533)
         142	LOAD_CONST(arg=4, lineno=4533)
         144	IS_OP(arg=0, lineno=4533)
         146	POP_JUMP_IF_FALSE(arg=182, lineno=4533)
         148	LOAD_GLOBAL(arg=1, lineno=4534)
         150	LOAD_GLOBAL(arg=2, lineno=4534)
         152	LOAD_METHOD(arg=3, lineno=4534)
         154	LOAD_FAST(arg=10, lineno=4534)
         156	LOAD_ATTR(arg=5, lineno=4534)
         158	CALL_METHOD(arg=1, lineno=4534)
         160	CALL_FUNCTION(arg=1, lineno=4534)
         162	STORE_FAST(arg=12, lineno=4534)
         164	LOAD_GLOBAL(arg=6, lineno=4535)
         166	LOAD_GLOBAL(arg=7, lineno=4535)
         168	LOAD_FAST(arg=12, lineno=4535)
         170	LOAD_FAST(arg=11, lineno=4535)
         172	CALL_FUNCTION(arg=2, lineno=4535)
         174	LOAD_CONST(arg=2, lineno=4535)
         176	CALL_FUNCTION(arg=2, lineno=4535)
         178	STORE_FAST(arg=13, lineno=4535)
         180	JUMP_FORWARD(arg=10, lineno=4535)
>        182	LOAD_GLOBAL(arg=6, lineno=4537)
         184	LOAD_FAST(arg=11, lineno=4537)
         186	LOAD_CONST(arg=2, lineno=4537)
         188	CALL_FUNCTION(arg=2, lineno=4537)
         190	STORE_FAST(arg=13, lineno=4537)
>        192	LOAD_GLOBAL(arg=8, lineno=4538)
         194	LOAD_METHOD(arg=9, lineno=4538)
         196	LOAD_FAST(arg=13, lineno=4538)
         198	LOAD_DEREF(arg=3, lineno=4538)
         200	CALL_METHOD(arg=2, lineno=4538)
         202	STORE_FAST(arg=14, lineno=4538)
         204	LOAD_FAST(arg=8, lineno=4539)
         206	STORE_FAST(arg=15, lineno=4539)
         208	LOAD_GLOBAL(arg=10, lineno=4540)
         210	LOAD_FAST(arg=13, lineno=4540)
         212	CALL_FUNCTION(arg=1, lineno=4540)
         214	GET_ITER(arg=None, lineno=4540)
>        216	FOR_ITER(arg=20, lineno=4540)
         218	STORE_FAST(arg=16, lineno=4540)
         220	LOAD_FAST(arg=15, lineno=4541)
         222	LOAD_FAST(arg=16, lineno=4541)
         224	LOAD_FAST(arg=7, lineno=4541)
         226	BINARY_MULTIPLY(arg=None, lineno=4541)
         228	BINARY_ADD(arg=None, lineno=4541)
         230	LOAD_FAST(arg=14, lineno=4541)
         232	LOAD_FAST(arg=16, lineno=4541)
         234	STORE_SUBSCR(arg=None, lineno=4541)
         236	JUMP_ABSOLUTE(arg=216, lineno=4541)
>        238	LOAD_FAST(arg=14, lineno=4542)
         240	RETURN_VALUE(arg=None, lineno=4542)
DEBUG 2023-04-14 17:43:01,423 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,423 stack: []
DEBUG 2023-04-14 17:43:01,423 dispatch pc=0, inst=NOP(arg=None, lineno=4516)
DEBUG 2023-04-14 17:43:01,423 stack []
DEBUG 2023-04-14 17:43:01,423 dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=4516)
DEBUG 2023-04-14 17:43:01,423 stack []
DEBUG 2023-04-14 17:43:01,423 dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=4516)
DEBUG 2023-04-14 17:43:01,423 stack ['$2load_deref.0']
DEBUG 2023-04-14 17:43:01,423 dispatch pc=6, inst=IS_OP(arg=1, lineno=4516)
DEBUG 2023-04-14 17:43:01,423 stack ['$2load_deref.0', '$const4.1']
DEBUG 2023-04-14 17:43:01,423 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=4516)
DEBUG 2023-04-14 17:43:01,423 stack ['$6is_op.2']
DEBUG 2023-04-14 17:43:01,423 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,423 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,423 stack: []
DEBUG 2023-04-14 17:43:01,423 dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=4516)
DEBUG 2023-04-14 17:43:01,423 stack []
DEBUG 2023-04-14 17:43:01,423 dispatch pc=12, inst=JUMP_FORWARD(arg=2, lineno=4516)
DEBUG 2023-04-14 17:43:01,423 stack ['$10load_deref.0']
DEBUG 2023-04-14 17:43:01,423 end state. edges=[Edge(pc=16, stack=('$10load_deref.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,423 pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=16 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,423 stack: []
DEBUG 2023-04-14 17:43:01,423 dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=4516)
DEBUG 2023-04-14 17:43:01,423 stack []
DEBUG 2023-04-14 17:43:01,423 end state. edges=[Edge(pc=16, stack=('$start14.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,423 pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=16 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,423 stack: ['$phi16.0']
DEBUG 2023-04-14 17:43:01,423 dispatch pc=16, inst=STORE_FAST(arg=4, lineno=4516)
DEBUG 2023-04-14 17:43:01,423 stack ['$phi16.0']
DEBUG 2023-04-14 17:43:01,423 dispatch pc=18, inst=LOAD_DEREF(arg=2, lineno=4517)
DEBUG 2023-04-14 17:43:01,423 stack []
DEBUG 2023-04-14 17:43:01,423 dispatch pc=20, inst=LOAD_CONST(arg=0, lineno=4517)
DEBUG 2023-04-14 17:43:01,423 stack ['$18load_deref.1']
DEBUG 2023-04-14 17:43:01,423 dispatch pc=22, inst=IS_OP(arg=1, lineno=4517)
DEBUG 2023-04-14 17:43:01,423 stack ['$18load_deref.1', '$const20.2']
DEBUG 2023-04-14 17:43:01,423 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=30, lineno=4517)
DEBUG 2023-04-14 17:43:01,425 stack ['$22is_op.3']
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=30, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=26 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=26, inst=LOAD_DEREF(arg=2, lineno=4517)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=28, inst=JUMP_FORWARD(arg=2, lineno=4517)
DEBUG 2023-04-14 17:43:01,425 stack ['$26load_deref.0']
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=32, stack=('$26load_deref.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=32 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=4517)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=32, stack=('$stop30.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,425 stack: ['$phi32.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=32, inst=STORE_FAST(arg=5, lineno=4517)
DEBUG 2023-04-14 17:43:01,425 stack ['$phi32.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=34, inst=LOAD_DEREF(arg=1, lineno=4518)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=36, inst=LOAD_CONST(arg=0, lineno=4518)
DEBUG 2023-04-14 17:43:01,425 stack ['$34load_deref.1']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=38, inst=IS_OP(arg=1, lineno=4518)
DEBUG 2023-04-14 17:43:01,425 stack ['$34load_deref.1', '$const36.2']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=46, lineno=4518)
DEBUG 2023-04-14 17:43:01,425 stack ['$38is_op.3']
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=42, inst=LOAD_DEREF(arg=1, lineno=4518)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=44, inst=JUMP_FORWARD(arg=2, lineno=4518)
DEBUG 2023-04-14 17:43:01,425 stack ['$42load_deref.0']
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=48, stack=('$42load_deref.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=48 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=4518)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=48, stack=('$step46.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,425 stack: ['$phi48.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4518)
DEBUG 2023-04-14 17:43:01,425 stack ['$phi48.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=50, inst=LOAD_FAST(arg=6, lineno=4520)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=4520)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_step50.1']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=54, inst=IS_OP(arg=1, lineno=4520)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_step50.1', '$const52.2']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=62, lineno=4520)
DEBUG 2023-04-14 17:43:01,425 stack ['$54is_op.3']
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=4520)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=60, inst=JUMP_FORWARD(arg=2, lineno=4520)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_step58.0']
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=64, stack=('$lit_step58.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=64 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=62, inst=LOAD_CONST(arg=1, lineno=4520)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=64, stack=('$const62.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,425 stack: ['$phi64.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=64, inst=STORE_FAST(arg=7, lineno=4520)
DEBUG 2023-04-14 17:43:01,425 stack ['$phi64.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=4521)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=68, inst=LOAD_CONST(arg=0, lineno=4521)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_stop66.1']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=70, inst=IS_OP(arg=0, lineno=4521)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_stop66.1', '$const68.2']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=86, lineno=4521)
DEBUG 2023-04-14 17:43:01,425 stack ['$70is_op.3']
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=4522)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=76, inst=LOAD_FAST(arg=4, lineno=4522)
DEBUG 2023-04-14 17:43:01,425 stack ['$const74.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=78, inst=ROT_TWO(arg=None, lineno=4522)
DEBUG 2023-04-14 17:43:01,425 stack ['$const74.0', '$lit_start76.1']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=80, inst=STORE_FAST(arg=8, lineno=4522)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_start76.1', '$const74.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=82, inst=STORE_FAST(arg=9, lineno=4522)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_start76.1']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=84, inst=JUMP_FORWARD(arg=10, lineno=4522)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=86, inst=LOAD_FAST(arg=4, lineno=4524)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=88, inst=LOAD_FAST(arg=5, lineno=4524)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_start86.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=90, inst=ROT_TWO(arg=None, lineno=4524)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_start86.0', '$lit_stop88.1']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=92, inst=STORE_FAST(arg=8, lineno=4524)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_stop88.1', '$lit_start86.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=94, inst=STORE_FAST(arg=9, lineno=4524)
DEBUG 2023-04-14 17:43:01,425 stack ['$lit_stop88.1']
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=96, inst=LOAD_FAST(arg=7, lineno=4526)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=98, inst=LOAD_CONST(arg=2, lineno=4526)
DEBUG 2023-04-14 17:43:01,425 stack ['$_step96.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=4526)
DEBUG 2023-04-14 17:43:01,425 stack ['$_step96.0', '$const98.1']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=112, lineno=4526)
DEBUG 2023-04-14 17:43:01,425 stack ['$100compare_op.2']
DEBUG 2023-04-14 17:43:01,425 end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=112, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=104, inst=LOAD_GLOBAL(arg=0, lineno=4527)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=4527)
DEBUG 2023-04-14 17:43:01,425 stack ['$104load_global.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=108, inst=CALL_FUNCTION(arg=1, lineno=4527)
DEBUG 2023-04-14 17:43:01,425 stack ['$104load_global.0', '$const106.1']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=110, inst=RAISE_VARARGS(arg=1, lineno=4527)
DEBUG 2023-04-14 17:43:01,425 stack ['$108call_function.2']
DEBUG 2023-04-14 17:43:01,425 end state. edges=[]
DEBUG 2023-04-14 17:43:01,425 pending: deque([State(pc_initial=112 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,425 stack: []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=112, inst=LOAD_FAST(arg=9, lineno=4529)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=114, inst=LOAD_FAST(arg=8, lineno=4529)
DEBUG 2023-04-14 17:43:01,425 stack ['$_stop112.0']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=116, inst=BINARY_SUBTRACT(arg=None, lineno=4529)
DEBUG 2023-04-14 17:43:01,425 stack ['$_stop112.0', '$_start114.1']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=4529)
DEBUG 2023-04-14 17:43:01,425 stack ['$116binary_subtract.2']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=4529)
DEBUG 2023-04-14 17:43:01,425 stack ['$116binary_subtract.2', '$_step118.3']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=122, inst=STORE_FAST(arg=10, lineno=4529)
DEBUG 2023-04-14 17:43:01,425 stack ['$120binary_true_divide.4']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=124, inst=LOAD_GLOBAL(arg=1, lineno=4530)
DEBUG 2023-04-14 17:43:01,425 stack []
DEBUG 2023-04-14 17:43:01,425 dispatch pc=126, inst=LOAD_GLOBAL(arg=2, lineno=4530)
DEBUG 2023-04-14 17:43:01,425 stack ['$124load_global.5']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=128, inst=LOAD_METHOD(arg=3, lineno=4530)
DEBUG 2023-04-14 17:43:01,425 stack ['$124load_global.5', '$126load_global.6']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=130, inst=LOAD_FAST(arg=10, lineno=4530)
DEBUG 2023-04-14 17:43:01,425 stack ['$124load_global.5', '$128load_method.7']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=132, inst=LOAD_ATTR(arg=4, lineno=4530)
DEBUG 2023-04-14 17:43:01,425 stack ['$124load_global.5', '$128load_method.7', '$nitems_c130.8']
DEBUG 2023-04-14 17:43:01,425 dispatch pc=134, inst=CALL_METHOD(arg=1, lineno=4530)
DEBUG 2023-04-14 17:43:01,425 stack ['$124load_global.5', '$128load_method.7', '$132load_attr.9']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=136, inst=CALL_FUNCTION(arg=1, lineno=4530)
DEBUG 2023-04-14 17:43:01,433 stack ['$124load_global.5', '$134call_method.10']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=138, inst=STORE_FAST(arg=11, lineno=4530)
DEBUG 2023-04-14 17:43:01,433 stack ['$136call_function.11']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=140, inst=LOAD_DEREF(arg=4, lineno=4533)
DEBUG 2023-04-14 17:43:01,433 stack []
DEBUG 2023-04-14 17:43:01,433 dispatch pc=142, inst=LOAD_CONST(arg=4, lineno=4533)
DEBUG 2023-04-14 17:43:01,433 stack ['$140load_deref.12']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=144, inst=IS_OP(arg=0, lineno=4533)
DEBUG 2023-04-14 17:43:01,433 stack ['$140load_deref.12', '$const142.13']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=146, inst=POP_JUMP_IF_FALSE(arg=182, lineno=4533)
DEBUG 2023-04-14 17:43:01,433 stack ['$144is_op.14']
DEBUG 2023-04-14 17:43:01,433 end state. edges=[Edge(pc=148, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,433 pending: deque([State(pc_initial=148 nstack_initial=0), State(pc_initial=182 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,433 stack: []
DEBUG 2023-04-14 17:43:01,433 dispatch pc=148, inst=LOAD_GLOBAL(arg=1, lineno=4534)
DEBUG 2023-04-14 17:43:01,433 stack []
DEBUG 2023-04-14 17:43:01,433 dispatch pc=150, inst=LOAD_GLOBAL(arg=2, lineno=4534)
DEBUG 2023-04-14 17:43:01,433 stack ['$148load_global.0']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=152, inst=LOAD_METHOD(arg=3, lineno=4534)
DEBUG 2023-04-14 17:43:01,433 stack ['$148load_global.0', '$150load_global.1']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=154, inst=LOAD_FAST(arg=10, lineno=4534)
DEBUG 2023-04-14 17:43:01,433 stack ['$148load_global.0', '$152load_method.2']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=156, inst=LOAD_ATTR(arg=5, lineno=4534)
DEBUG 2023-04-14 17:43:01,433 stack ['$148load_global.0', '$152load_method.2', '$nitems_c154.3']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=158, inst=CALL_METHOD(arg=1, lineno=4534)
DEBUG 2023-04-14 17:43:01,433 stack ['$148load_global.0', '$152load_method.2', '$156load_attr.4']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=160, inst=CALL_FUNCTION(arg=1, lineno=4534)
DEBUG 2023-04-14 17:43:01,433 stack ['$148load_global.0', '$158call_method.5']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=162, inst=STORE_FAST(arg=12, lineno=4534)
DEBUG 2023-04-14 17:43:01,433 stack ['$160call_function.6']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=164, inst=LOAD_GLOBAL(arg=6, lineno=4535)
DEBUG 2023-04-14 17:43:01,433 stack []
DEBUG 2023-04-14 17:43:01,433 dispatch pc=166, inst=LOAD_GLOBAL(arg=7, lineno=4535)
DEBUG 2023-04-14 17:43:01,433 stack ['$164load_global.7']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=168, inst=LOAD_FAST(arg=12, lineno=4535)
DEBUG 2023-04-14 17:43:01,433 stack ['$164load_global.7', '$166load_global.8']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=170, inst=LOAD_FAST(arg=11, lineno=4535)
DEBUG 2023-04-14 17:43:01,433 stack ['$164load_global.7', '$166load_global.8', '$nitems_i168.9']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=172, inst=CALL_FUNCTION(arg=2, lineno=4535)
DEBUG 2023-04-14 17:43:01,433 stack ['$164load_global.7', '$166load_global.8', '$nitems_i168.9', '$nitems_r170.10']
DEBUG 2023-04-14 17:43:01,433 dispatch pc=174, inst=LOAD_CONST(arg=2, lineno=4535)
DEBUG 2023-04-14 17:43:01,435 stack ['$164load_global.7', '$172call_function.11']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=176, inst=CALL_FUNCTION(arg=2, lineno=4535)
DEBUG 2023-04-14 17:43:01,435 stack ['$164load_global.7', '$172call_function.11', '$const174.12']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=178, inst=STORE_FAST(arg=13, lineno=4535)
DEBUG 2023-04-14 17:43:01,435 stack ['$176call_function.13']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=180, inst=JUMP_FORWARD(arg=10, lineno=4535)
DEBUG 2023-04-14 17:43:01,435 stack []
DEBUG 2023-04-14 17:43:01,435 end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,435 pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,435 stack: []
DEBUG 2023-04-14 17:43:01,435 dispatch pc=182, inst=LOAD_GLOBAL(arg=6, lineno=4537)
DEBUG 2023-04-14 17:43:01,435 stack []
DEBUG 2023-04-14 17:43:01,435 dispatch pc=184, inst=LOAD_FAST(arg=11, lineno=4537)
DEBUG 2023-04-14 17:43:01,435 stack ['$182load_global.0']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=186, inst=LOAD_CONST(arg=2, lineno=4537)
DEBUG 2023-04-14 17:43:01,435 stack ['$182load_global.0', '$nitems_r184.1']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=188, inst=CALL_FUNCTION(arg=2, lineno=4537)
DEBUG 2023-04-14 17:43:01,435 stack ['$182load_global.0', '$nitems_r184.1', '$const186.2']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=190, inst=STORE_FAST(arg=13, lineno=4537)
DEBUG 2023-04-14 17:43:01,435 stack ['$188call_function.3']
DEBUG 2023-04-14 17:43:01,435 end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,435 pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,435 stack: []
DEBUG 2023-04-14 17:43:01,435 dispatch pc=192, inst=LOAD_GLOBAL(arg=8, lineno=4538)
DEBUG 2023-04-14 17:43:01,435 stack []
DEBUG 2023-04-14 17:43:01,435 dispatch pc=194, inst=LOAD_METHOD(arg=9, lineno=4538)
DEBUG 2023-04-14 17:43:01,435 stack ['$192load_global.0']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=196, inst=LOAD_FAST(arg=13, lineno=4538)
DEBUG 2023-04-14 17:43:01,435 stack ['$194load_method.1']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=198, inst=LOAD_DEREF(arg=3, lineno=4538)
DEBUG 2023-04-14 17:43:01,435 stack ['$194load_method.1', '$nitems196.2']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=200, inst=CALL_METHOD(arg=2, lineno=4538)
DEBUG 2023-04-14 17:43:01,435 stack ['$194load_method.1', '$nitems196.2', '$198load_deref.3']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=202, inst=STORE_FAST(arg=14, lineno=4538)
DEBUG 2023-04-14 17:43:01,435 stack ['$200call_method.4']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=204, inst=LOAD_FAST(arg=8, lineno=4539)
DEBUG 2023-04-14 17:43:01,435 stack []
DEBUG 2023-04-14 17:43:01,435 dispatch pc=206, inst=STORE_FAST(arg=15, lineno=4539)
DEBUG 2023-04-14 17:43:01,435 stack ['$_start204.5']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=208, inst=LOAD_GLOBAL(arg=10, lineno=4540)
DEBUG 2023-04-14 17:43:01,435 stack []
DEBUG 2023-04-14 17:43:01,435 dispatch pc=210, inst=LOAD_FAST(arg=13, lineno=4540)
DEBUG 2023-04-14 17:43:01,435 stack ['$208load_global.6']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=212, inst=CALL_FUNCTION(arg=1, lineno=4540)
DEBUG 2023-04-14 17:43:01,435 stack ['$208load_global.6', '$nitems210.7']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=214, inst=GET_ITER(arg=None, lineno=4540)
DEBUG 2023-04-14 17:43:01,435 stack ['$212call_function.8']
DEBUG 2023-04-14 17:43:01,435 end state. edges=[Edge(pc=216, stack=('$214get_iter.9',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,435 pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=216 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,435 pending: deque([State(pc_initial=216 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,435 stack: ['$phi216.0']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=216, inst=FOR_ITER(arg=20, lineno=4540)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi216.0']
DEBUG 2023-04-14 17:43:01,435 end state. edges=[Edge(pc=238, stack=(), blockstack=(), npush=0), Edge(pc=218, stack=('$phi216.0', '$216for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,435 pending: deque([State(pc_initial=238 nstack_initial=0), State(pc_initial=218 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,435 stack: []
DEBUG 2023-04-14 17:43:01,435 dispatch pc=238, inst=LOAD_FAST(arg=14, lineno=4542)
DEBUG 2023-04-14 17:43:01,435 stack []
DEBUG 2023-04-14 17:43:01,435 dispatch pc=240, inst=RETURN_VALUE(arg=None, lineno=4542)
DEBUG 2023-04-14 17:43:01,435 stack ['$arr238.0']
DEBUG 2023-04-14 17:43:01,435 end state. edges=[]
DEBUG 2023-04-14 17:43:01,435 pending: deque([State(pc_initial=218 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,435 stack: ['$phi218.0', '$phi218.1']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=218, inst=STORE_FAST(arg=16, lineno=4540)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi218.0', '$phi218.1']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=220, inst=LOAD_FAST(arg=15, lineno=4541)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi218.0']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=222, inst=LOAD_FAST(arg=16, lineno=4541)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi218.0', '$val220.2']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=224, inst=LOAD_FAST(arg=7, lineno=4541)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi218.0', '$val220.2', '$i222.3']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=226, inst=BINARY_MULTIPLY(arg=None, lineno=4541)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi218.0', '$val220.2', '$i222.3', '$_step224.4']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=228, inst=BINARY_ADD(arg=None, lineno=4541)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi218.0', '$val220.2', '$226binary_multiply.5']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=230, inst=LOAD_FAST(arg=14, lineno=4541)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi218.0', '$228binary_add.6']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=232, inst=LOAD_FAST(arg=16, lineno=4541)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi218.0', '$228binary_add.6', '$arr230.7']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=4541)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi218.0', '$228binary_add.6', '$arr230.7', '$i232.8']
DEBUG 2023-04-14 17:43:01,435 dispatch pc=236, inst=JUMP_ABSOLUTE(arg=216, lineno=4541)
DEBUG 2023-04-14 17:43:01,435 stack ['$phi218.0']
DEBUG 2023-04-14 17:43:01,435 end state. edges=[Edge(pc=216, stack=('$phi218.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,435 pending: deque([State(pc_initial=216 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,435 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:01,435 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=1): {'$phi48.0'},
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set(),
             State(pc_initial=148 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=216 nstack_initial=1): {'$phi216.0'},
             State(pc_initial=218 nstack_initial=2): {'$phi218.1'},
             State(pc_initial=238 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:01,435 defmap: {'$phi16.0': State(pc_initial=14 nstack_initial=0),
 '$phi216.0': State(pc_initial=192 nstack_initial=0),
 '$phi218.1': State(pc_initial=216 nstack_initial=1),
 '$phi32.0': State(pc_initial=26 nstack_initial=0),
 '$phi48.0': State(pc_initial=46 nstack_initial=0),
 '$phi64.0': State(pc_initial=62 nstack_initial=0)}
DEBUG 2023-04-14 17:43:01,435 phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi218.0',
                            State(pc_initial=218 nstack_initial=2))},
             '$phi218.0': {('$phi216.0',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:01,435 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi218.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:01,435 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:01,435 changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:01,435 keep phismap: {'$phi16.0': {('$10load_deref.0', State(pc_initial=10 nstack_initial=0)),
              ('$start14.0', State(pc_initial=14 nstack_initial=0))},
 '$phi216.0': {('$214get_iter.9', State(pc_initial=192 nstack_initial=0))},
 '$phi218.1': {('$216for_iter.2', State(pc_initial=216 nstack_initial=1))},
 '$phi32.0': {('$26load_deref.0', State(pc_initial=26 nstack_initial=0)),
              ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
 '$phi48.0': {('$42load_deref.0', State(pc_initial=42 nstack_initial=0)),
              ('$step46.0', State(pc_initial=46 nstack_initial=0))},
 '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
              ('$lit_step58.0', State(pc_initial=58 nstack_initial=0))}}
DEBUG 2023-04-14 17:43:01,435 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi16.0': '$10load_deref.0'},
             State(pc_initial=14 nstack_initial=0): {'$phi16.0': '$start14.0'},
             State(pc_initial=26 nstack_initial=0): {'$phi32.0': '$26load_deref.0'},
             State(pc_initial=30 nstack_initial=0): {'$phi32.0': '$stop30.0'},
             State(pc_initial=42 nstack_initial=0): {'$phi48.0': '$42load_deref.0'},
             State(pc_initial=46 nstack_initial=0): {'$phi48.0': '$step46.0'},
             State(pc_initial=58 nstack_initial=0): {'$phi64.0': '$lit_step58.0'},
             State(pc_initial=62 nstack_initial=0): {'$phi64.0': '$const62.0'},
             State(pc_initial=192 nstack_initial=0): {'$phi216.0': '$214get_iter.9'},
             State(pc_initial=216 nstack_initial=1): {'$phi218.1': '$216for_iter.2'}})
DEBUG 2023-04-14 17:43:01,435 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$2load_deref.0', 'rhs': '$const4.1', 'res': '$6is_op.2'}), (8, {'pred': '$6is_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_deref.0'}), (12, {})), outgoing_phis={'$phi16.0': '$10load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$10load_deref.0',)})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$start14.0'}),), outgoing_phis={'$phi16.0': '$start14.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$start14.0',)})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'value': '$phi16.0'}), (18, {'res': '$18load_deref.1'}), (20, {'res': '$const20.2'}), (22, {'lhs': '$18load_deref.1', 'rhs': '$const20.2', 'res': '$22is_op.3'}), (24, {'pred': '$22is_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 30: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$26load_deref.0'}), (28, {})), outgoing_phis={'$phi32.0': '$26load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$26load_deref.0',)})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$stop30.0'}),), outgoing_phis={'$phi32.0': '$stop30.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$stop30.0',)})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'value': '$phi32.0'}), (34, {'res': '$34load_deref.1'}), (36, {'res': '$const36.2'}), (38, {'lhs': '$34load_deref.1', 'rhs': '$const36.2', 'res': '$38is_op.3'}), (40, {'pred': '$38is_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 46: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_deref.0'}), (44, {})), outgoing_phis={'$phi48.0': '$42load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$42load_deref.0',)})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$step46.0'}),), outgoing_phis={'$phi48.0': '$step46.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$step46.0',)})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'value': '$phi48.0'}), (50, {'res': '$lit_step50.1'}), (52, {'res': '$const52.2'}), (54, {'lhs': '$lit_step50.1', 'rhs': '$const52.2', 'res': '$54is_op.3'}), (56, {'pred': '$54is_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 62: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$lit_step58.0'}), (60, {})), outgoing_phis={'$phi64.0': '$lit_step58.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$lit_step58.0',)})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$const62.0'}),), outgoing_phis={'$phi64.0': '$const62.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$const62.0',)})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'value': '$phi64.0'}), (66, {'res': '$lit_stop66.1'}), (68, {'res': '$const68.2'}), (70, {'lhs': '$lit_stop66.1', 'rhs': '$const68.2', 'res': '$70is_op.3'}), (72, {'pred': '$70is_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 86: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'res': '$lit_start76.1'}), (80, {'value': '$const74.0'}), (82, {'value': '$lit_start76.1'}), (84, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$lit_start86.0'}), (88, {'res': '$lit_stop88.1'}), (92, {'value': '$lit_start86.0'}), (94, {'value': '$lit_stop88.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$_step96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$_step96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 112: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$104load_global.0'}), (106, {'res': '$const106.1'}), (108, {'func': '$104load_global.0', 'args': ['$const106.1'], 'res': '$108call_function.2'}), (110, {'exc': '$108call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$_stop112.0'}), (114, {'res': '$_start114.1'}), (116, {'lhs': '$_stop112.0', 'rhs': '$_start114.1', 'res': '$116binary_subtract.2'}), (118, {'res': '$_step118.3'}), (120, {'lhs': '$116binary_subtract.2', 'rhs': '$_step118.3', 'res': '$120binary_true_divide.4'}), (122, {'value': '$120binary_true_divide.4'}), (124, {'res': '$124load_global.5'}), (126, {'res': '$126load_global.6'}), (128, {'item': '$126load_global.6', 'res': '$128load_method.7'}), (130, {'res': '$nitems_c130.8'}), (132, {'item': '$nitems_c130.8', 'res': '$132load_attr.9'}), (134, {'func': '$128load_method.7', 'args': ['$132load_attr.9'], 'res': '$134call_method.10'}), (136, {'func': '$124load_global.5', 'args': ['$134call_method.10'], 'res': '$136call_function.11'}), (138, {'value': '$136call_function.11'}), (140, {'res': '$140load_deref.12'}), (142, {'res': '$const142.13'}), (144, {'lhs': '$140load_deref.12', 'rhs': '$const142.13', 'res': '$144is_op.14'}), (146, {'pred': '$144is_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={148: (), 182: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=148 nstack_initial=0):
AdaptBlockInfo(insts=((148, {'res': '$148load_global.0'}), (150, {'res': '$150load_global.1'}), (152, {'item': '$150load_global.1', 'res': '$152load_method.2'}), (154, {'res': '$nitems_c154.3'}), (156, {'item': '$nitems_c154.3', 'res': '$156load_attr.4'}), (158, {'func': '$152load_method.2', 'args': ['$156load_attr.4'], 'res': '$158call_method.5'}), (160, {'func': '$148load_global.0', 'args': ['$158call_method.5'], 'res': '$160call_function.6'}), (162, {'value': '$160call_function.6'}), (164, {'res': '$164load_global.7'}), (166, {'res': '$166load_global.8'}), (168, {'res': '$nitems_i168.9'}), (170, {'res': '$nitems_r170.10'}), (172, {'func': '$166load_global.8', 'args': ['$nitems_i168.9', '$nitems_r170.10'], 'res': '$172call_function.11'}), (174, {'res': '$const174.12'}), (176, {'func': '$164load_global.7', 'args': ['$172call_function.11', '$const174.12'], 'res': '$176call_function.13'}), (178, {'value': '$176call_function.13'}), (180, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$182load_global.0'}), (184, {'res': '$nitems_r184.1'}), (186, {'res': '$const186.2'}), (188, {'func': '$182load_global.0', 'args': ['$nitems_r184.1', '$const186.2'], 'res': '$188call_function.3'}), (190, {'value': '$188call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$192load_global.0'}), (194, {'item': '$192load_global.0', 'res': '$194load_method.1'}), (196, {'res': '$nitems196.2'}), (198, {'res': '$198load_deref.3'}), (200, {'func': '$194load_method.1', 'args': ['$nitems196.2', '$198load_deref.3'], 'res': '$200call_method.4'}), (202, {'value': '$200call_method.4'}), (204, {'res': '$_start204.5'}), (206, {'value': '$_start204.5'}), (208, {'res': '$208load_global.6'}), (210, {'res': '$nitems210.7'}), (212, {'func': '$208load_global.6', 'args': ['$nitems210.7'], 'res': '$212call_function.8'}), (214, {'value': '$212call_function.8', 'res': '$214get_iter.9'})), outgoing_phis={'$phi216.0': '$214get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={216: ('$214get_iter.9',)})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=216 nstack_initial=1):
AdaptBlockInfo(insts=((216, {'iterator': '$phi216.0', 'pair': '$216for_iter.1', 'indval': '$216for_iter.2', 'pred': '$216for_iter.3'}),), outgoing_phis={'$phi218.1': '$216for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: (), 218: ('$phi216.0', '$216for_iter.2')})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=218 nstack_initial=2):
AdaptBlockInfo(insts=((218, {'value': '$phi218.1'}), (220, {'res': '$val220.2'}), (222, {'res': '$i222.3'}), (224, {'res': '$_step224.4'}), (226, {'lhs': '$i222.3', 'rhs': '$_step224.4', 'res': '$226binary_multiply.5'}), (228, {'lhs': '$val220.2', 'rhs': '$226binary_multiply.5', 'res': '$228binary_add.6'}), (230, {'res': '$arr230.7'}), (232, {'res': '$i232.8'}), (234, {'target': '$arr230.7', 'index': '$i232.8', 'value': '$228binary_add.6'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={216: ('$phi218.0',)})
DEBUG 2023-04-14 17:43:01,435 block_infos State(pc_initial=238 nstack_initial=0):
AdaptBlockInfo(insts=((238, {'res': '$arr238.0'}), (240, {'retval': '$arr238.0', 'castval': '$240return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:01,446 label 0:
    start = arg(0, name=start)               ['start']
    stop = arg(1, name=stop)                 ['stop']
    step = arg(2, name=step)                 ['step']
    dtype = arg(3, name=dtype)               ['dtype']
    $2load_deref.0 = freevar(start_value: None) ['$2load_deref.0']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $6is_op.2 = $2load_deref.0 is not $const4.1 ['$2load_deref.0', '$6is_op.2', '$const4.1']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6is_op.2, func=bool8, args=(Var($6is_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None) ['$6is_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $10load_deref.0 = freevar(start_value: None) ['$10load_deref.0']
    $phi16.0 = $10load_deref.0               ['$10load_deref.0', '$phi16.0']
    jump 16                                  []
label 14:
    $phi16.0 = start                         ['$phi16.0', 'start']
    jump 16                                  []
label 16:
    lit_start = $phi16.0                     ['$phi16.0', 'lit_start']
    $18load_deref.1 = freevar(stop_value: None) ['$18load_deref.1']
    $const20.2 = const(NoneType, None)       ['$const20.2']
    $22is_op.3 = $18load_deref.1 is not $const20.2 ['$18load_deref.1', '$22is_op.3', '$const20.2']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22is_op.3, func=bool24, args=(Var($22is_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None) ['$22is_op.3', '$24pred', 'bool24']
    branch $24pred, 26, 30                   ['$24pred']
label 26:
    $26load_deref.0 = freevar(stop_value: None) ['$26load_deref.0']
    $phi32.0 = $26load_deref.0               ['$26load_deref.0', '$phi32.0']
    jump 32                                  []
label 30:
    $phi32.0 = stop                          ['$phi32.0', 'stop']
    jump 32                                  []
label 32:
    lit_stop = $phi32.0                      ['$phi32.0', 'lit_stop']
    $34load_deref.1 = freevar(step_value: None) ['$34load_deref.1']
    $const36.2 = const(NoneType, None)       ['$const36.2']
    $38is_op.3 = $34load_deref.1 is not $const36.2 ['$34load_deref.1', '$38is_op.3', '$const36.2']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38is_op.3, func=bool40, args=(Var($38is_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None) ['$38is_op.3', '$40pred', 'bool40']
    branch $40pred, 42, 46                   ['$40pred']
label 42:
    $42load_deref.0 = freevar(step_value: None) ['$42load_deref.0']
    $phi48.0 = $42load_deref.0               ['$42load_deref.0', '$phi48.0']
    jump 48                                  []
label 46:
    $phi48.0 = step                          ['$phi48.0', 'step']
    jump 48                                  []
label 48:
    lit_step = $phi48.0                      ['$phi48.0', 'lit_step']
    $const52.2 = const(NoneType, None)       ['$const52.2']
    $54is_op.3 = lit_step is not $const52.2  ['$54is_op.3', '$const52.2', 'lit_step']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54is_op.3, func=bool56, args=(Var($54is_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None) ['$54is_op.3', '$56pred', 'bool56']
    branch $56pred, 58, 62                   ['$56pred']
label 58:
    $phi64.0 = lit_step                      ['$phi64.0', 'lit_step']
    jump 64                                  []
label 62:
    $const62.0 = const(int, 1)               ['$const62.0']
    $phi64.0 = $const62.0                    ['$const62.0', '$phi64.0']
    jump 64                                  []
label 64:
    _step = $phi64.0                         ['$phi64.0', '_step']
    $const68.2 = const(NoneType, None)       ['$const68.2']
    $70is_op.3 = lit_stop is $const68.2      ['$70is_op.3', '$const68.2', 'lit_stop']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70is_op.3, func=bool72, args=(Var($70is_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None) ['$70is_op.3', '$72pred', 'bool72']
    branch $72pred, 74, 86                   ['$72pred']
label 74:
    _start = const(int, 0)                   ['_start']
    _stop = lit_start                        ['_stop', 'lit_start']
    jump 96                                  []
label 86:
    _start = lit_start                       ['_start', 'lit_start']
    _stop = lit_stop                         ['_stop', 'lit_stop']
    jump 96                                  []
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = _step == $const98.1   ['$100compare_op.2', '$const98.1', '_step']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 112                ['$102pred']
label 104:
    $104load_global.0 = global(ValueError: <class 'ValueError'>) ['$104load_global.0']
    $const106.1 = const(str, Maximum allowed size exceeded) ['$const106.1']
    $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_global.0', '$108call_function.2', '$const106.1']
    raise $108call_function.2                ['$108call_function.2']
label 112:
    $116binary_subtract.2 = _stop - _start   ['$116binary_subtract.2', '_start', '_stop']
    nitems_c = $116binary_subtract.2 / _step ['$116binary_subtract.2', '_step', 'nitems_c']
    $124load_global.5 = global(int: <class 'int'>) ['$124load_global.5']
    $126load_global.6 = global(math: <module 'math' (built-in)>) ['$126load_global.6']
    $128load_method.7 = getattr(value=$126load_global.6, attr=ceil) ['$126load_global.6', '$128load_method.7']
    $132load_attr.9 = getattr(value=nitems_c, attr=real) ['$132load_attr.9', 'nitems_c']
    $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None) ['$128load_method.7', '$132load_attr.9', '$134call_method.10']
    nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None) ['$124load_global.5', '$134call_method.10', 'nitems_r']
    $140load_deref.12 = freevar(use_complex: False) ['$140load_deref.12']
    $const142.13 = const(bool, True)         ['$const142.13']
    $144is_op.14 = $140load_deref.12 is $const142.13 ['$140load_deref.12', '$144is_op.14', '$const142.13']
    bool146 = global(bool: <class 'bool'>)   ['bool146']
    $146pred = call bool146($144is_op.14, func=bool146, args=(Var($144is_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None) ['$144is_op.14', '$146pred', 'bool146']
    branch $146pred, 148, 182                ['$146pred']
label 148:
    $148load_global.0 = global(int: <class 'int'>) ['$148load_global.0']
    $150load_global.1 = global(math: <module 'math' (built-in)>) ['$150load_global.1']
    $152load_method.2 = getattr(value=$150load_global.1, attr=ceil) ['$150load_global.1', '$152load_method.2']
    $156load_attr.4 = getattr(value=nitems_c, attr=imag) ['$156load_attr.4', 'nitems_c']
    $158call_method.5 = call $152load_method.2($156load_attr.4, func=$152load_method.2, args=[Var($156load_attr.4, arrayobj.py:4534)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_method.2', '$156load_attr.4', '$158call_method.5']
    nitems_i = call $148load_global.0($158call_method.5, func=$148load_global.0, args=[Var($158call_method.5, arrayobj.py:4534)], kws=(), vararg=None, varkwarg=None, target=None) ['$148load_global.0', '$158call_method.5', 'nitems_i']
    $164load_global.7 = global(max: <built-in function max>) ['$164load_global.7']
    $166load_global.8 = global(min: <built-in function min>) ['$166load_global.8']
    $172call_function.11 = call $166load_global.8(nitems_i, nitems_r, func=$166load_global.8, args=[Var(nitems_i, arrayobj.py:4534), Var(nitems_r, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None) ['$166load_global.8', '$172call_function.11', 'nitems_i', 'nitems_r']
    $const174.12 = const(int, 0)             ['$const174.12']
    nitems = call $164load_global.7($172call_function.11, $const174.12, func=$164load_global.7, args=[Var($172call_function.11, arrayobj.py:4535), Var($const174.12, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None) ['$164load_global.7', '$172call_function.11', '$const174.12', 'nitems']
    jump 192                                 []
label 182:
    $182load_global.0 = global(max: <built-in function max>) ['$182load_global.0']
    $const186.2 = const(int, 0)              ['$const186.2']
    nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None) ['$182load_global.0', '$const186.2', 'nitems', 'nitems_r']
    jump 192                                 []
label 192:
    $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$192load_global.0']
    $194load_method.1 = getattr(value=$192load_global.0, attr=empty) ['$192load_global.0', '$194load_method.1']
    $198load_deref.3 = freevar(true_dtype: int64) ['$198load_deref.3']
    arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None) ['$194load_method.1', '$198load_deref.3', 'arr', 'nitems']
    val = _start                             ['_start', 'val']
    $208load_global.6 = global(range: <class 'range'>) ['$208load_global.6']
    $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None) ['$208load_global.6', '$212call_function.8', 'nitems']
    $214get_iter.9 = getiter(value=$212call_function.8) ['$212call_function.8', '$214get_iter.9']
    $phi216.0 = $214get_iter.9               ['$214get_iter.9', '$phi216.0']
    jump 216                                 []
label 216:
    $216for_iter.1 = iternext(value=$phi216.0) ['$216for_iter.1', '$phi216.0']
    $216for_iter.2 = pair_first(value=$216for_iter.1) ['$216for_iter.1', '$216for_iter.2']
    $216for_iter.3 = pair_second(value=$216for_iter.1) ['$216for_iter.1', '$216for_iter.3']
    $phi218.1 = $216for_iter.2               ['$216for_iter.2', '$phi218.1']
    branch $216for_iter.3, 218, 238          ['$216for_iter.3']
label 218:
    i = $phi218.1                            ['$phi218.1', 'i']
    $226binary_multiply.5 = i * _step        ['$226binary_multiply.5', '_step', 'i']
    $228binary_add.6 = val + $226binary_multiply.5 ['$226binary_multiply.5', '$228binary_add.6', 'val']
    arr[i] = $228binary_add.6                ['$228binary_add.6', 'arr', 'i']
    jump 216                                 []
label 238:
    $240return_value.1 = cast(value=arr)     ['$240return_value.1', 'arr']
    return $240return_value.1                ['$240return_value.1']

DEBUG 2023-04-14 17:43:01,456 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:01,464 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,464 on stmt: start = arg(0, name=start)
DEBUG 2023-04-14 17:43:01,464 on stmt: stop = arg(1, name=stop)
DEBUG 2023-04-14 17:43:01,464 on stmt: step = arg(2, name=step)
DEBUG 2023-04-14 17:43:01,464 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:01,464 on stmt: $2load_deref.0 = freevar(start_value: None)
DEBUG 2023-04-14 17:43:01,464 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,464 on stmt: $6is_op.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,464 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,464 on stmt: $8pred = call bool8($6is_op.2, func=bool8, args=(Var($6is_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,464 on stmt: jump 14
DEBUG 2023-04-14 17:43:01,464 ==== SSA block analysis pass on 14
DEBUG 2023-04-14 17:43:01,464 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,464 on stmt: $phi16.0 = start
DEBUG 2023-04-14 17:43:01,464 on stmt: jump 16
DEBUG 2023-04-14 17:43:01,464 ==== SSA block analysis pass on 16
DEBUG 2023-04-14 17:43:01,464 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,464 on stmt: lit_start = $phi16.0
DEBUG 2023-04-14 17:43:01,464 on stmt: $18load_deref.1 = freevar(stop_value: None)
DEBUG 2023-04-14 17:43:01,464 on stmt: $const20.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,464 on stmt: $22is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,464 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,464 on stmt: $24pred = call bool24($22is_op.3, func=bool24, args=(Var($22is_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,464 on stmt: jump 30
DEBUG 2023-04-14 17:43:01,464 ==== SSA block analysis pass on 30
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $phi32.0 = stop
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 32
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 32
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: lit_stop = $phi32.0
DEBUG 2023-04-14 17:43:01,466 on stmt: $34load_deref.1 = freevar(step_value: None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $const36.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $38is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,466 on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $40pred = call bool40($38is_op.3, func=bool40, args=(Var($38is_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 46
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 46
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $phi48.0 = step
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 48
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: lit_step = $phi48.0
DEBUG 2023-04-14 17:43:01,466 on stmt: $const52.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $54is_op.3 = lit_step is not $const52.2
DEBUG 2023-04-14 17:43:01,466 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $56pred = call bool56($54is_op.3, func=bool56, args=(Var($54is_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: branch $56pred, 58, 62
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 58
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $phi64.0 = lit_step
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 62
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $const62.0 = const(int, 1)
DEBUG 2023-04-14 17:43:01,466 on stmt: $phi64.0 = $const62.0
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 64
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: _step = $phi64.0
DEBUG 2023-04-14 17:43:01,466 on stmt: $const68.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $70is_op.3 = lit_stop is $const68.2
DEBUG 2023-04-14 17:43:01,466 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $72pred = call bool72($70is_op.3, func=bool72, args=(Var($70is_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: branch $72pred, 74, 86
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 74
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: _start = const(int, 0)
DEBUG 2023-04-14 17:43:01,466 on stmt: _stop = lit_start
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 86
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: _start = lit_start
DEBUG 2023-04-14 17:43:01,466 on stmt: _stop = lit_stop
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 96
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $const98.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,466 on stmt: $100compare_op.2 = _step == $const98.1
DEBUG 2023-04-14 17:43:01,466 on stmt: bool102 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: branch $102pred, 104, 112
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 104
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
DEBUG 2023-04-14 17:43:01,466 on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 112
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $116binary_subtract.2 = _stop - _start
DEBUG 2023-04-14 17:43:01,466 on stmt: nitems_c = $116binary_subtract.2 / _step
DEBUG 2023-04-14 17:43:01,466 on stmt: $124load_global.5 = global(int: <class 'int'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
DEBUG 2023-04-14 17:43:01,466 on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
DEBUG 2023-04-14 17:43:01,466 on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $140load_deref.12 = freevar(use_complex: False)
DEBUG 2023-04-14 17:43:01,466 on stmt: $const142.13 = const(bool, True)
DEBUG 2023-04-14 17:43:01,466 on stmt: $144is_op.14 = const(int, 0)
DEBUG 2023-04-14 17:43:01,466 on stmt: bool146 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $146pred = call bool146($144is_op.14, func=bool146, args=(Var($144is_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 182
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 182
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $182load_global.0 = global(max: <built-in function max>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $const186.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,466 on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 192
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 192
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
DEBUG 2023-04-14 17:43:01,466 on stmt: $198load_deref.3 = freevar(true_dtype: int64)
DEBUG 2023-04-14 17:43:01,466 on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: val = _start
DEBUG 2023-04-14 17:43:01,466 on stmt: $208load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
DEBUG 2023-04-14 17:43:01,466 on stmt: $phi216.0 = $214get_iter.9
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 216
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $216for_iter.1 = iternext(value=$phi216.0)
DEBUG 2023-04-14 17:43:01,466 on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,466 on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,466 on stmt: $phi218.1 = $216for_iter.2
DEBUG 2023-04-14 17:43:01,466 on stmt: branch $216for_iter.3, 218, 238
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 218
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: i = $phi218.1
DEBUG 2023-04-14 17:43:01,466 on stmt: $226binary_multiply.5 = i * _step
DEBUG 2023-04-14 17:43:01,466 on stmt: $228binary_add.6 = val + $226binary_multiply.5
DEBUG 2023-04-14 17:43:01,466 on stmt: arr[i] = $228binary_add.6
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,466 ==== SSA block analysis pass on 238
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619378D60>
DEBUG 2023-04-14 17:43:01,466 on stmt: $240return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:01,466 on stmt: return $240return_value.1
DEBUG 2023-04-14 17:43:01,466 defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x00000266193662E0>],
             '$102pred': [<numba.core.ir.Assign object at 0x0000026619366550>],
             '$104load_global.0': [<numba.core.ir.Assign object at 0x0000026619366790>],
             '$108call_function.2': [<numba.core.ir.Assign object at 0x0000026619366AF0>],
             '$116binary_subtract.2': [<numba.core.ir.Assign object at 0x0000026619367040>],
             '$124load_global.5': [<numba.core.ir.Assign object at 0x0000026619367550>],
             '$126load_global.6': [<numba.core.ir.Assign object at 0x00000266193676D0>],
             '$128load_method.7': [<numba.core.ir.Assign object at 0x0000026619367850>],
             '$132load_attr.9': [<numba.core.ir.Assign object at 0x0000026619367AF0>],
             '$134call_method.10': [<numba.core.ir.Assign object at 0x0000026619367D00>],
             '$140load_deref.12': [<numba.core.ir.Assign object at 0x00000266193680D0>],
             '$144is_op.14': [<numba.core.ir.Assign object at 0x0000026619368400>],
             '$146pred': [<numba.core.ir.Assign object at 0x0000026619368670>],
             '$182load_global.0': [<numba.core.ir.Assign object at 0x0000026619369C40>],
             '$18load_deref.1': [<numba.core.ir.Assign object at 0x0000026619334460>],
             '$192load_global.0': [<numba.core.ir.Assign object at 0x000002661936A370>],
             '$194load_method.1': [<numba.core.ir.Assign object at 0x000002661936A4F0>],
             '$198load_deref.3': [<numba.core.ir.Assign object at 0x000002661936A790>],
             '$208load_global.6': [<numba.core.ir.Assign object at 0x000002661936ADF0>],
             '$212call_function.8': [<numba.core.ir.Assign object at 0x000002661936B130>],
             '$214get_iter.9': [<numba.core.ir.Assign object at 0x000002661936B250>],
             '$216for_iter.1': [<numba.core.ir.Assign object at 0x000002661936B460>],
             '$216for_iter.2': [<numba.core.ir.Assign object at 0x000002661936B580>],
             '$216for_iter.3': [<numba.core.ir.Assign object at 0x000002661936B6A0>],
             '$226binary_multiply.5': [<numba.core.ir.Assign object at 0x000002661936BE80>],
             '$228binary_add.6': [<numba.core.ir.Assign object at 0x000002661936C040>],
             '$22is_op.3': [<numba.core.ir.Assign object at 0x0000026619334D90>],
             '$240return_value.1': [<numba.core.ir.Assign object at 0x000002661936C550>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000026619334C70>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000026619354BE0>],
             '$34load_deref.1': [<numba.core.ir.Assign object at 0x000002661932F5B0>],
             '$38is_op.3': [<numba.core.ir.Assign object at 0x000002661932FF40>],
             '$40pred': [<numba.core.ir.Assign object at 0x000002661932FD30>],
             '$54is_op.3': [<numba.core.ir.Assign object at 0x00000266192F2760>],
             '$56pred': [<numba.core.ir.Assign object at 0x00000266192F2C40>],
             '$6is_op.2': [<numba.core.ir.Assign object at 0x0000026619357670>],
             '$70is_op.3': [<numba.core.ir.Assign object at 0x0000026619365160>],
             '$72pred': [<numba.core.ir.Assign object at 0x00000266193653D0>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000026619357C10>],
             '$const106.1': [<numba.core.ir.Assign object at 0x0000026619366910>],
             '$const142.13': [<numba.core.ir.Assign object at 0x0000026619368250>],
             '$const186.2': [<numba.core.ir.Assign object at 0x0000026619369F70>],
             '$const20.2': [<numba.core.ir.Assign object at 0x0000026619334400>],
             '$const36.2': [<numba.core.ir.Assign object at 0x000002661932FA60>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000026619354A60>],
             '$const52.2': [<numba.core.ir.Assign object at 0x00000266192F28E0>],
             '$const62.0': [<numba.core.ir.Assign object at 0x0000026619199C70>],
             '$const68.2': [<numba.core.ir.Assign object at 0x0000026619362F70>],
             '$const98.1': [<numba.core.ir.Assign object at 0x0000026619366130>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x0000026619357D00>],
             '$phi216.0': [<numba.core.ir.Assign object at 0x000002661936A6A0>],
             '$phi218.1': [<numba.core.ir.Assign object at 0x000002661936B3A0>],
             '$phi32.0': [<numba.core.ir.Assign object at 0x00000266193340A0>],
             '$phi48.0': [<numba.core.ir.Assign object at 0x000002661932F9D0>],
             '$phi64.0': [<numba.core.ir.Assign object at 0x00000266192F2E20>,
                          <numba.core.ir.Assign object at 0x00000266192F2D60>],
             '_start': [<numba.core.ir.Assign object at 0x0000026619365610>,
                        <numba.core.ir.Assign object at 0x0000026619365D60>],
             '_step': [<numba.core.ir.Assign object at 0x0000026619362DF0>],
             '_stop': [<numba.core.ir.Assign object at 0x0000026619365970>,
                       <numba.core.ir.Assign object at 0x0000026619365E20>],
             'arr': [<numba.core.ir.Assign object at 0x000002661936A9A0>],
             'bool102': [<numba.core.ir.Assign object at 0x0000026619366430>],
             'bool146': [<numba.core.ir.Assign object at 0x0000026619368550>],
             'bool24': [<numba.core.ir.Assign object at 0x0000026619334BE0>],
             'bool40': [<numba.core.ir.Assign object at 0x000002661932FC10>],
             'bool56': [<numba.core.ir.Assign object at 0x00000266192F2B20>],
             'bool72': [<numba.core.ir.Assign object at 0x00000266193652B0>],
             'bool8': [<numba.core.ir.Assign object at 0x0000026619357730>],
             'dtype': [<numba.core.ir.Assign object at 0x0000026619354940>],
             'i': [<numba.core.ir.Assign object at 0x000002661936B970>],
             'lit_start': [<numba.core.ir.Assign object at 0x0000026619340520>],
             'lit_step': [<numba.core.ir.Assign object at 0x000002661932F4F0>],
             'lit_stop': [<numba.core.ir.Assign object at 0x0000026619334340>],
             'nitems': [<numba.core.ir.Assign object at 0x000002661936A190>],
             'nitems_c': [<numba.core.ir.Assign object at 0x00000266193672E0>],
             'nitems_r': [<numba.core.ir.Assign object at 0x0000026619367E50>],
             'start': [<numba.core.ir.Assign object at 0x000002661935E1F0>],
             'step': [<numba.core.ir.Assign object at 0x0000026619354BB0>],
             'stop': [<numba.core.ir.Assign object at 0x0000026619354F70>],
             'val': [<numba.core.ir.Assign object at 0x000002661936AC70>]})
DEBUG 2023-04-14 17:43:01,466 SSA violators {'$phi64.0', '_stop', '_start'}
DEBUG 2023-04-14 17:43:01,466 Fix SSA violator on var $phi64.0
DEBUG 2023-04-14 17:43:01,466 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,466 on stmt: start = arg(0, name=start)
DEBUG 2023-04-14 17:43:01,466 on stmt: stop = arg(1, name=stop)
DEBUG 2023-04-14 17:43:01,466 on stmt: step = arg(2, name=step)
DEBUG 2023-04-14 17:43:01,466 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:01,466 on stmt: $2load_deref.0 = freevar(start_value: None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $6is_op.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,466 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $8pred = call bool8($6is_op.2, func=bool8, args=(Var($6is_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 14
DEBUG 2023-04-14 17:43:01,466 ==== SSA block rewrite pass on 14
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,466 on stmt: $phi16.0 = start
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 16
DEBUG 2023-04-14 17:43:01,466 ==== SSA block rewrite pass on 16
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,466 on stmt: lit_start = $phi16.0
DEBUG 2023-04-14 17:43:01,466 on stmt: $18load_deref.1 = freevar(stop_value: None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $const20.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $22is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,466 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $24pred = call bool24($22is_op.3, func=bool24, args=(Var($22is_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 30
DEBUG 2023-04-14 17:43:01,466 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,466 on stmt: $phi32.0 = stop
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 32
DEBUG 2023-04-14 17:43:01,466 ==== SSA block rewrite pass on 32
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,466 on stmt: lit_stop = $phi32.0
DEBUG 2023-04-14 17:43:01,466 on stmt: $34load_deref.1 = freevar(step_value: None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $const36.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,466 on stmt: $38is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,466 on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,466 on stmt: $40pred = call bool40($38is_op.3, func=bool40, args=(Var($38is_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,466 on stmt: jump 46
DEBUG 2023-04-14 17:43:01,466 ==== SSA block rewrite pass on 46
DEBUG 2023-04-14 17:43:01,466 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,466 on stmt: $phi48.0 = step
DEBUG 2023-04-14 17:43:01,475 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,475 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,475 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,475 on stmt: lit_step = $phi48.0
DEBUG 2023-04-14 17:43:01,475 on stmt: $const52.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,475 on stmt: $54is_op.3 = lit_step is not $const52.2
DEBUG 2023-04-14 17:43:01,475 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,475 on stmt: $56pred = call bool56($54is_op.3, func=bool56, args=(Var($54is_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,475 on stmt: branch $56pred, 58, 62
DEBUG 2023-04-14 17:43:01,475 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:01,475 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,475 on stmt: $phi64.0 = lit_step
DEBUG 2023-04-14 17:43:01,475 first assign: $phi64.0
DEBUG 2023-04-14 17:43:01,475 replaced with: $phi64.0 = lit_step
DEBUG 2023-04-14 17:43:01,475 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,475 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:43:01,475 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,475 on stmt: $const62.0 = const(int, 1)
DEBUG 2023-04-14 17:43:01,475 on stmt: $phi64.0 = $const62.0
DEBUG 2023-04-14 17:43:01,475 replaced with: $phi64.0.1 = $const62.0
DEBUG 2023-04-14 17:43:01,475 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,475 ==== SSA block rewrite pass on 64
DEBUG 2023-04-14 17:43:01,475 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,476 on stmt: _step = $phi64.0
DEBUG 2023-04-14 17:43:01,476 on stmt: $const68.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,476 on stmt: $70is_op.3 = lit_stop is $const68.2
DEBUG 2023-04-14 17:43:01,476 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,476 on stmt: $72pred = call bool72($70is_op.3, func=bool72, args=(Var($70is_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,476 on stmt: branch $72pred, 74, 86
DEBUG 2023-04-14 17:43:01,476 ==== SSA block rewrite pass on 74
DEBUG 2023-04-14 17:43:01,476 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,476 on stmt: _start = const(int, 0)
DEBUG 2023-04-14 17:43:01,476 on stmt: _stop = lit_start
DEBUG 2023-04-14 17:43:01,476 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,476 ==== SSA block rewrite pass on 86
DEBUG 2023-04-14 17:43:01,476 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,476 on stmt: _start = lit_start
DEBUG 2023-04-14 17:43:01,476 on stmt: _stop = lit_stop
DEBUG 2023-04-14 17:43:01,476 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,476 ==== SSA block rewrite pass on 96
DEBUG 2023-04-14 17:43:01,476 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,476 on stmt: $const98.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,476 on stmt: $100compare_op.2 = _step == $const98.1
DEBUG 2023-04-14 17:43:01,476 on stmt: bool102 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: branch $102pred, 104, 112
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 104
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
DEBUG 2023-04-14 17:43:01,477 on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 112
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $116binary_subtract.2 = _stop - _start
DEBUG 2023-04-14 17:43:01,477 on stmt: nitems_c = $116binary_subtract.2 / _step
DEBUG 2023-04-14 17:43:01,477 on stmt: $124load_global.5 = global(int: <class 'int'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
DEBUG 2023-04-14 17:43:01,477 on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
DEBUG 2023-04-14 17:43:01,477 on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: $140load_deref.12 = freevar(use_complex: False)
DEBUG 2023-04-14 17:43:01,477 on stmt: $const142.13 = const(bool, True)
DEBUG 2023-04-14 17:43:01,477 on stmt: $144is_op.14 = const(int, 0)
DEBUG 2023-04-14 17:43:01,477 on stmt: bool146 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $146pred = call bool146($144is_op.14, func=bool146, args=(Var($144is_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 182
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 182
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $182load_global.0 = global(max: <built-in function max>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $const186.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,477 on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 192
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 192
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
DEBUG 2023-04-14 17:43:01,477 on stmt: $198load_deref.3 = freevar(true_dtype: int64)
DEBUG 2023-04-14 17:43:01,477 on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: val = _start
DEBUG 2023-04-14 17:43:01,477 on stmt: $208load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
DEBUG 2023-04-14 17:43:01,477 on stmt: $phi216.0 = $214get_iter.9
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 216
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $216for_iter.1 = iternext(value=$phi216.0)
DEBUG 2023-04-14 17:43:01,477 on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,477 on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,477 on stmt: $phi218.1 = $216for_iter.2
DEBUG 2023-04-14 17:43:01,477 on stmt: branch $216for_iter.3, 218, 238
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 218
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: i = $phi218.1
DEBUG 2023-04-14 17:43:01,477 on stmt: $226binary_multiply.5 = i * _step
DEBUG 2023-04-14 17:43:01,477 on stmt: $228binary_add.6 = val + $226binary_multiply.5
DEBUG 2023-04-14 17:43:01,477 on stmt: arr[i] = $228binary_add.6
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 238
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $240return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:01,477 on stmt: return $240return_value.1
DEBUG 2023-04-14 17:43:01,477 Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x000002661935C760>],
             62: [<numba.core.ir.Assign object at 0x000002661935C8B0>]})
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: start = arg(0, name=start)
DEBUG 2023-04-14 17:43:01,477 on stmt: stop = arg(1, name=stop)
DEBUG 2023-04-14 17:43:01,477 on stmt: step = arg(2, name=step)
DEBUG 2023-04-14 17:43:01,477 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:01,477 on stmt: $2load_deref.0 = freevar(start_value: None)
DEBUG 2023-04-14 17:43:01,477 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,477 on stmt: $6is_op.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,477 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $8pred = call bool8($6is_op.2, func=bool8, args=(Var($6is_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 14
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 14
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $phi16.0 = start
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 16
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 16
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: lit_start = $phi16.0
DEBUG 2023-04-14 17:43:01,477 on stmt: $18load_deref.1 = freevar(stop_value: None)
DEBUG 2023-04-14 17:43:01,477 on stmt: $const20.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,477 on stmt: $22is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,477 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $24pred = call bool24($22is_op.3, func=bool24, args=(Var($22is_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 30
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $phi32.0 = stop
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 32
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 32
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: lit_stop = $phi32.0
DEBUG 2023-04-14 17:43:01,477 on stmt: $34load_deref.1 = freevar(step_value: None)
DEBUG 2023-04-14 17:43:01,477 on stmt: $const36.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,477 on stmt: $38is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,477 on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $40pred = call bool40($38is_op.3, func=bool40, args=(Var($38is_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 46
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 46
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $phi48.0 = step
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: lit_step = $phi48.0
DEBUG 2023-04-14 17:43:01,477 on stmt: $const52.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,477 on stmt: $54is_op.3 = lit_step is not $const52.2
DEBUG 2023-04-14 17:43:01,477 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $56pred = call bool56($54is_op.3, func=bool56, args=(Var($54is_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: branch $56pred, 58, 62
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $phi64.0 = lit_step
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $const62.0 = const(int, 1)
DEBUG 2023-04-14 17:43:01,477 on stmt: $phi64.0.1 = $const62.0
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 64
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: _step = $phi64.0
DEBUG 2023-04-14 17:43:01,477 find_def var='$phi64.0' stmt=_step = $phi64.0
DEBUG 2023-04-14 17:43:01,477 find_def_from_top label 64
DEBUG 2023-04-14 17:43:01,477 insert phi node $phi64.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 64
DEBUG 2023-04-14 17:43:01,477 find_def_from_bottom label 58
DEBUG 2023-04-14 17:43:01,477 incoming_def $phi64.0 = lit_step
DEBUG 2023-04-14 17:43:01,477 find_def_from_bottom label 62
DEBUG 2023-04-14 17:43:01,477 incoming_def $phi64.0.1 = $const62.0
DEBUG 2023-04-14 17:43:01,477 replaced with: _step = $phi64.0.2
DEBUG 2023-04-14 17:43:01,477 on stmt: $const68.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,477 on stmt: $70is_op.3 = lit_stop is $const68.2
DEBUG 2023-04-14 17:43:01,477 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $72pred = call bool72($70is_op.3, func=bool72, args=(Var($70is_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: branch $72pred, 74, 86
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 74
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: _start = const(int, 0)
DEBUG 2023-04-14 17:43:01,477 on stmt: _stop = lit_start
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 86
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: _start = lit_start
DEBUG 2023-04-14 17:43:01,477 on stmt: _stop = lit_stop
DEBUG 2023-04-14 17:43:01,477 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 96
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $const98.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,477 on stmt: $100compare_op.2 = _step == $const98.1
DEBUG 2023-04-14 17:43:01,477 on stmt: bool102 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: branch $102pred, 104, 112
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 104
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
DEBUG 2023-04-14 17:43:01,477 on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,477 on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
DEBUG 2023-04-14 17:43:01,477 ==== SSA block rewrite pass on 112
DEBUG 2023-04-14 17:43:01,477 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,477 on stmt: $116binary_subtract.2 = _stop - _start
DEBUG 2023-04-14 17:43:01,477 on stmt: nitems_c = $116binary_subtract.2 / _step
DEBUG 2023-04-14 17:43:01,477 on stmt: $124load_global.5 = global(int: <class 'int'>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:01,477 on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
DEBUG 2023-04-14 17:43:01,477 on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
DEBUG 2023-04-14 17:43:01,477 on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,485 on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,485 on stmt: $140load_deref.12 = freevar(use_complex: False)
DEBUG 2023-04-14 17:43:01,485 on stmt: $const142.13 = const(bool, True)
DEBUG 2023-04-14 17:43:01,485 on stmt: $144is_op.14 = const(int, 0)
DEBUG 2023-04-14 17:43:01,485 on stmt: bool146 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,485 on stmt: $146pred = call bool146($144is_op.14, func=bool146, args=(Var($144is_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,485 on stmt: jump 182
DEBUG 2023-04-14 17:43:01,485 ==== SSA block rewrite pass on 182
DEBUG 2023-04-14 17:43:01,485 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,485 on stmt: $182load_global.0 = global(max: <built-in function max>)
DEBUG 2023-04-14 17:43:01,485 on stmt: $const186.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,485 on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,485 on stmt: jump 192
DEBUG 2023-04-14 17:43:01,485 ==== SSA block rewrite pass on 192
DEBUG 2023-04-14 17:43:01,485 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,485 on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,485 on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
DEBUG 2023-04-14 17:43:01,485 on stmt: $198load_deref.3 = freevar(true_dtype: int64)
DEBUG 2023-04-14 17:43:01,485 on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,485 on stmt: val = _start
DEBUG 2023-04-14 17:43:01,485 on stmt: $208load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,485 on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,485 on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
DEBUG 2023-04-14 17:43:01,485 on stmt: $phi216.0 = $214get_iter.9
DEBUG 2023-04-14 17:43:01,485 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,485 ==== SSA block rewrite pass on 216
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,487 on stmt: $216for_iter.1 = iternext(value=$phi216.0)
DEBUG 2023-04-14 17:43:01,487 on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,487 on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,487 on stmt: $phi218.1 = $216for_iter.2
DEBUG 2023-04-14 17:43:01,487 on stmt: branch $216for_iter.3, 218, 238
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 218
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,487 on stmt: i = $phi218.1
DEBUG 2023-04-14 17:43:01,487 on stmt: $226binary_multiply.5 = i * _step
DEBUG 2023-04-14 17:43:01,487 on stmt: $228binary_add.6 = val + $226binary_multiply.5
DEBUG 2023-04-14 17:43:01,487 on stmt: arr[i] = $228binary_add.6
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 238
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FixSSAVars object at 0x0000026619357D90>
DEBUG 2023-04-14 17:43:01,487 on stmt: $240return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:01,487 on stmt: return $240return_value.1
DEBUG 2023-04-14 17:43:01,487 Fix SSA violator on var _stop
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: start = arg(0, name=start)
DEBUG 2023-04-14 17:43:01,487 on stmt: stop = arg(1, name=stop)
DEBUG 2023-04-14 17:43:01,487 on stmt: step = arg(2, name=step)
DEBUG 2023-04-14 17:43:01,487 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:01,487 on stmt: $2load_deref.0 = freevar(start_value: None)
DEBUG 2023-04-14 17:43:01,487 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,487 on stmt: $6is_op.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,487 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $8pred = call bool8($6is_op.2, func=bool8, args=(Var($6is_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 14
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 14
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $phi16.0 = start
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 16
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 16
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: lit_start = $phi16.0
DEBUG 2023-04-14 17:43:01,487 on stmt: $18load_deref.1 = freevar(stop_value: None)
DEBUG 2023-04-14 17:43:01,487 on stmt: $const20.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,487 on stmt: $22is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,487 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $24pred = call bool24($22is_op.3, func=bool24, args=(Var($22is_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 30
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $phi32.0 = stop
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 32
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 32
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: lit_stop = $phi32.0
DEBUG 2023-04-14 17:43:01,487 on stmt: $34load_deref.1 = freevar(step_value: None)
DEBUG 2023-04-14 17:43:01,487 on stmt: $const36.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,487 on stmt: $38is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,487 on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $40pred = call bool40($38is_op.3, func=bool40, args=(Var($38is_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 46
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 46
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $phi48.0 = step
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: lit_step = $phi48.0
DEBUG 2023-04-14 17:43:01,487 on stmt: $const52.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,487 on stmt: $54is_op.3 = lit_step is not $const52.2
DEBUG 2023-04-14 17:43:01,487 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $56pred = call bool56($54is_op.3, func=bool56, args=(Var($54is_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: branch $56pred, 58, 62
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $phi64.0 = lit_step
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $const62.0 = const(int, 1)
DEBUG 2023-04-14 17:43:01,487 on stmt: $phi64.0.1 = $const62.0
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 64
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4520), Var($phi64.0.1, arrayobj.py:4520)], incoming_blocks=[58, 62])
DEBUG 2023-04-14 17:43:01,487 on stmt: _step = $phi64.0.2
DEBUG 2023-04-14 17:43:01,487 on stmt: $const68.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,487 on stmt: $70is_op.3 = lit_stop is $const68.2
DEBUG 2023-04-14 17:43:01,487 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $72pred = call bool72($70is_op.3, func=bool72, args=(Var($70is_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: branch $72pred, 74, 86
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 74
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: _start = const(int, 0)
DEBUG 2023-04-14 17:43:01,487 on stmt: _stop = lit_start
DEBUG 2023-04-14 17:43:01,487 first assign: _stop
DEBUG 2023-04-14 17:43:01,487 replaced with: _stop = lit_start
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 86
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: _start = lit_start
DEBUG 2023-04-14 17:43:01,487 on stmt: _stop = lit_stop
DEBUG 2023-04-14 17:43:01,487 replaced with: _stop.1 = lit_stop
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 96
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $const98.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,487 on stmt: $100compare_op.2 = _step == $const98.1
DEBUG 2023-04-14 17:43:01,487 on stmt: bool102 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: branch $102pred, 104, 112
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 104
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
DEBUG 2023-04-14 17:43:01,487 on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 112
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $116binary_subtract.2 = _stop - _start
DEBUG 2023-04-14 17:43:01,487 on stmt: nitems_c = $116binary_subtract.2 / _step
DEBUG 2023-04-14 17:43:01,487 on stmt: $124load_global.5 = global(int: <class 'int'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
DEBUG 2023-04-14 17:43:01,487 on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
DEBUG 2023-04-14 17:43:01,487 on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: $140load_deref.12 = freevar(use_complex: False)
DEBUG 2023-04-14 17:43:01,487 on stmt: $const142.13 = const(bool, True)
DEBUG 2023-04-14 17:43:01,487 on stmt: $144is_op.14 = const(int, 0)
DEBUG 2023-04-14 17:43:01,487 on stmt: bool146 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $146pred = call bool146($144is_op.14, func=bool146, args=(Var($144is_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 182
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 182
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $182load_global.0 = global(max: <built-in function max>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $const186.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,487 on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 192
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 192
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
DEBUG 2023-04-14 17:43:01,487 on stmt: $198load_deref.3 = freevar(true_dtype: int64)
DEBUG 2023-04-14 17:43:01,487 on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: val = _start
DEBUG 2023-04-14 17:43:01,487 on stmt: $208load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,487 on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,487 on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
DEBUG 2023-04-14 17:43:01,487 on stmt: $phi216.0 = $214get_iter.9
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 216
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $216for_iter.1 = iternext(value=$phi216.0)
DEBUG 2023-04-14 17:43:01,487 on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,487 on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,487 on stmt: $phi218.1 = $216for_iter.2
DEBUG 2023-04-14 17:43:01,487 on stmt: branch $216for_iter.3, 218, 238
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 218
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: i = $phi218.1
DEBUG 2023-04-14 17:43:01,487 on stmt: $226binary_multiply.5 = i * _step
DEBUG 2023-04-14 17:43:01,487 on stmt: $228binary_add.6 = val + $226binary_multiply.5
DEBUG 2023-04-14 17:43:01,487 on stmt: arr[i] = $228binary_add.6
DEBUG 2023-04-14 17:43:01,487 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 238
DEBUG 2023-04-14 17:43:01,487 Running <numba.core.ssa._FreshVarHandler object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,487 on stmt: $240return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:01,487 on stmt: return $240return_value.1
DEBUG 2023-04-14 17:43:01,487 Replaced assignments: defaultdict(<class 'list'>,
            {74: [<numba.core.ir.Assign object at 0x000002661935CE20>],
             86: [<numba.core.ir.Assign object at 0x000002661935C6A0>]})
DEBUG 2023-04-14 17:43:01,487 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,495 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,495 on stmt: start = arg(0, name=start)
DEBUG 2023-04-14 17:43:01,495 on stmt: stop = arg(1, name=stop)
DEBUG 2023-04-14 17:43:01,495 on stmt: step = arg(2, name=step)
DEBUG 2023-04-14 17:43:01,495 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:01,495 on stmt: $2load_deref.0 = freevar(start_value: None)
DEBUG 2023-04-14 17:43:01,495 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,495 on stmt: $6is_op.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,495 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,495 on stmt: $8pred = call bool8($6is_op.2, func=bool8, args=(Var($6is_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,496 on stmt: jump 14
DEBUG 2023-04-14 17:43:01,496 ==== SSA block rewrite pass on 14
DEBUG 2023-04-14 17:43:01,496 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,496 on stmt: $phi16.0 = start
DEBUG 2023-04-14 17:43:01,496 on stmt: jump 16
DEBUG 2023-04-14 17:43:01,496 ==== SSA block rewrite pass on 16
DEBUG 2023-04-14 17:43:01,496 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,496 on stmt: lit_start = $phi16.0
DEBUG 2023-04-14 17:43:01,496 on stmt: $18load_deref.1 = freevar(stop_value: None)
DEBUG 2023-04-14 17:43:01,496 on stmt: $const20.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,496 on stmt: $22is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,496 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,496 on stmt: $24pred = call bool24($22is_op.3, func=bool24, args=(Var($22is_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,496 on stmt: jump 30
DEBUG 2023-04-14 17:43:01,496 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:01,496 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,496 on stmt: $phi32.0 = stop
DEBUG 2023-04-14 17:43:01,496 on stmt: jump 32
DEBUG 2023-04-14 17:43:01,496 ==== SSA block rewrite pass on 32
DEBUG 2023-04-14 17:43:01,496 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,496 on stmt: lit_stop = $phi32.0
DEBUG 2023-04-14 17:43:01,496 on stmt: $34load_deref.1 = freevar(step_value: None)
DEBUG 2023-04-14 17:43:01,496 on stmt: $const36.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,496 on stmt: $38is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,496 on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,496 on stmt: $40pred = call bool40($38is_op.3, func=bool40, args=(Var($38is_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,496 on stmt: jump 46
DEBUG 2023-04-14 17:43:01,496 ==== SSA block rewrite pass on 46
DEBUG 2023-04-14 17:43:01,496 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,496 on stmt: $phi48.0 = step
DEBUG 2023-04-14 17:43:01,496 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: lit_step = $phi48.0
DEBUG 2023-04-14 17:43:01,497 on stmt: $const52.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $54is_op.3 = lit_step is not $const52.2
DEBUG 2023-04-14 17:43:01,497 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $56pred = call bool56($54is_op.3, func=bool56, args=(Var($54is_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: branch $56pred, 58, 62
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: $phi64.0 = lit_step
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: $const62.0 = const(int, 1)
DEBUG 2023-04-14 17:43:01,497 on stmt: $phi64.0.1 = $const62.0
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 64
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4520), Var($phi64.0.1, arrayobj.py:4520)], incoming_blocks=[58, 62])
DEBUG 2023-04-14 17:43:01,497 on stmt: _step = $phi64.0.2
DEBUG 2023-04-14 17:43:01,497 on stmt: $const68.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $70is_op.3 = lit_stop is $const68.2
DEBUG 2023-04-14 17:43:01,497 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $72pred = call bool72($70is_op.3, func=bool72, args=(Var($70is_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: branch $72pred, 74, 86
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 74
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: _start = const(int, 0)
DEBUG 2023-04-14 17:43:01,497 on stmt: _stop = lit_start
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 86
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: _start = lit_start
DEBUG 2023-04-14 17:43:01,497 on stmt: _stop.1 = lit_stop
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 96
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: $const98.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,497 on stmt: $100compare_op.2 = _step == $const98.1
DEBUG 2023-04-14 17:43:01,497 on stmt: bool102 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: branch $102pred, 104, 112
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 104
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
DEBUG 2023-04-14 17:43:01,497 on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 112
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: $116binary_subtract.2 = _stop - _start
DEBUG 2023-04-14 17:43:01,497 find_def var='_stop' stmt=$116binary_subtract.2 = _stop - _start
DEBUG 2023-04-14 17:43:01,497 find_def_from_top label 112
DEBUG 2023-04-14 17:43:01,497 idom 96 from label 112
DEBUG 2023-04-14 17:43:01,497 find_def_from_bottom label 96
DEBUG 2023-04-14 17:43:01,497 find_def_from_top label 96
DEBUG 2023-04-14 17:43:01,497 insert phi node _stop.2 = phi(incoming_values=[], incoming_blocks=[]) at 96
DEBUG 2023-04-14 17:43:01,497 find_def_from_bottom label 74
DEBUG 2023-04-14 17:43:01,497 incoming_def _stop = lit_start
DEBUG 2023-04-14 17:43:01,497 find_def_from_bottom label 86
DEBUG 2023-04-14 17:43:01,497 incoming_def _stop.1 = lit_stop
DEBUG 2023-04-14 17:43:01,497 replaced with: $116binary_subtract.2 = _stop.2 - _start
DEBUG 2023-04-14 17:43:01,497 on stmt: nitems_c = $116binary_subtract.2 / _step
DEBUG 2023-04-14 17:43:01,497 on stmt: $124load_global.5 = global(int: <class 'int'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
DEBUG 2023-04-14 17:43:01,497 on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
DEBUG 2023-04-14 17:43:01,497 on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $140load_deref.12 = freevar(use_complex: False)
DEBUG 2023-04-14 17:43:01,497 on stmt: $const142.13 = const(bool, True)
DEBUG 2023-04-14 17:43:01,497 on stmt: $144is_op.14 = const(int, 0)
DEBUG 2023-04-14 17:43:01,497 on stmt: bool146 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $146pred = call bool146($144is_op.14, func=bool146, args=(Var($144is_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 182
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 182
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: $182load_global.0 = global(max: <built-in function max>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $const186.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,497 on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 192
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 192
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
DEBUG 2023-04-14 17:43:01,497 on stmt: $198load_deref.3 = freevar(true_dtype: int64)
DEBUG 2023-04-14 17:43:01,497 on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: val = _start
DEBUG 2023-04-14 17:43:01,497 on stmt: $208load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
DEBUG 2023-04-14 17:43:01,497 on stmt: $phi216.0 = $214get_iter.9
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 216
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: $216for_iter.1 = iternext(value=$phi216.0)
DEBUG 2023-04-14 17:43:01,497 on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,497 on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,497 on stmt: $phi218.1 = $216for_iter.2
DEBUG 2023-04-14 17:43:01,497 on stmt: branch $216for_iter.3, 218, 238
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 218
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: i = $phi218.1
DEBUG 2023-04-14 17:43:01,497 on stmt: $226binary_multiply.5 = i * _step
DEBUG 2023-04-14 17:43:01,497 on stmt: $228binary_add.6 = val + $226binary_multiply.5
DEBUG 2023-04-14 17:43:01,497 on stmt: arr[i] = $228binary_add.6
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 238
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FixSSAVars object at 0x000002661936BD60>
DEBUG 2023-04-14 17:43:01,497 on stmt: $240return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:01,497 on stmt: return $240return_value.1
DEBUG 2023-04-14 17:43:01,497 Fix SSA violator on var _start
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,497 on stmt: start = arg(0, name=start)
DEBUG 2023-04-14 17:43:01,497 on stmt: stop = arg(1, name=stop)
DEBUG 2023-04-14 17:43:01,497 on stmt: step = arg(2, name=step)
DEBUG 2023-04-14 17:43:01,497 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:01,497 on stmt: $2load_deref.0 = freevar(start_value: None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $6is_op.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,497 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $8pred = call bool8($6is_op.2, func=bool8, args=(Var($6is_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 14
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 14
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,497 on stmt: $phi16.0 = start
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 16
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 16
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,497 on stmt: lit_start = $phi16.0
DEBUG 2023-04-14 17:43:01,497 on stmt: $18load_deref.1 = freevar(stop_value: None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $const20.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $22is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,497 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $24pred = call bool24($22is_op.3, func=bool24, args=(Var($22is_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 30
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,497 on stmt: $phi32.0 = stop
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 32
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 32
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,497 on stmt: lit_stop = $phi32.0
DEBUG 2023-04-14 17:43:01,497 on stmt: $34load_deref.1 = freevar(step_value: None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $const36.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $38is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,497 on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $40pred = call bool40($38is_op.3, func=bool40, args=(Var($38is_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 46
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 46
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,497 on stmt: $phi48.0 = step
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,497 on stmt: lit_step = $phi48.0
DEBUG 2023-04-14 17:43:01,497 on stmt: $const52.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,497 on stmt: $54is_op.3 = lit_step is not $const52.2
DEBUG 2023-04-14 17:43:01,497 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,497 on stmt: $56pred = call bool56($54is_op.3, func=bool56, args=(Var($54is_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,497 on stmt: branch $56pred, 58, 62
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,497 on stmt: $phi64.0 = lit_step
DEBUG 2023-04-14 17:43:01,497 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,497 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:43:01,497 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,497 on stmt: $const62.0 = const(int, 1)
DEBUG 2023-04-14 17:43:01,505 on stmt: $phi64.0.1 = $const62.0
DEBUG 2023-04-14 17:43:01,505 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,505 ==== SSA block rewrite pass on 64
DEBUG 2023-04-14 17:43:01,505 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,505 on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4520), Var($phi64.0.1, arrayobj.py:4520)], incoming_blocks=[58, 62])
DEBUG 2023-04-14 17:43:01,505 on stmt: _step = $phi64.0.2
DEBUG 2023-04-14 17:43:01,505 on stmt: $const68.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,505 on stmt: $70is_op.3 = lit_stop is $const68.2
DEBUG 2023-04-14 17:43:01,505 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,505 on stmt: $72pred = call bool72($70is_op.3, func=bool72, args=(Var($70is_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,505 on stmt: branch $72pred, 74, 86
DEBUG 2023-04-14 17:43:01,505 ==== SSA block rewrite pass on 74
DEBUG 2023-04-14 17:43:01,505 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,505 on stmt: _start = const(int, 0)
DEBUG 2023-04-14 17:43:01,505 first assign: _start
DEBUG 2023-04-14 17:43:01,505 replaced with: _start = const(int, 0)
DEBUG 2023-04-14 17:43:01,505 on stmt: _stop = lit_start
DEBUG 2023-04-14 17:43:01,505 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,505 ==== SSA block rewrite pass on 86
DEBUG 2023-04-14 17:43:01,505 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,505 on stmt: _start = lit_start
DEBUG 2023-04-14 17:43:01,505 replaced with: _start.1 = lit_start
DEBUG 2023-04-14 17:43:01,505 on stmt: _stop.1 = lit_stop
DEBUG 2023-04-14 17:43:01,505 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,505 ==== SSA block rewrite pass on 96
DEBUG 2023-04-14 17:43:01,505 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,505 on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4522), Var(_stop.1, arrayobj.py:4524)], incoming_blocks=[74, 86])
DEBUG 2023-04-14 17:43:01,507 on stmt: $const98.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,507 on stmt: $100compare_op.2 = _step == $const98.1
DEBUG 2023-04-14 17:43:01,507 on stmt: bool102 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: branch $102pred, 104, 112
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 104
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
DEBUG 2023-04-14 17:43:01,507 on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 112
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $116binary_subtract.2 = _stop.2 - _start
DEBUG 2023-04-14 17:43:01,507 on stmt: nitems_c = $116binary_subtract.2 / _step
DEBUG 2023-04-14 17:43:01,507 on stmt: $124load_global.5 = global(int: <class 'int'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
DEBUG 2023-04-14 17:43:01,507 on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
DEBUG 2023-04-14 17:43:01,507 on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: $140load_deref.12 = freevar(use_complex: False)
DEBUG 2023-04-14 17:43:01,507 on stmt: $const142.13 = const(bool, True)
DEBUG 2023-04-14 17:43:01,507 on stmt: $144is_op.14 = const(int, 0)
DEBUG 2023-04-14 17:43:01,507 on stmt: bool146 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $146pred = call bool146($144is_op.14, func=bool146, args=(Var($144is_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 182
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 182
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $182load_global.0 = global(max: <built-in function max>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $const186.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,507 on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 192
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 192
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
DEBUG 2023-04-14 17:43:01,507 on stmt: $198load_deref.3 = freevar(true_dtype: int64)
DEBUG 2023-04-14 17:43:01,507 on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: val = _start
DEBUG 2023-04-14 17:43:01,507 on stmt: $208load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
DEBUG 2023-04-14 17:43:01,507 on stmt: $phi216.0 = $214get_iter.9
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 216
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $216for_iter.1 = iternext(value=$phi216.0)
DEBUG 2023-04-14 17:43:01,507 on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,507 on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,507 on stmt: $phi218.1 = $216for_iter.2
DEBUG 2023-04-14 17:43:01,507 on stmt: branch $216for_iter.3, 218, 238
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 218
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,507 on stmt: i = $phi218.1
DEBUG 2023-04-14 17:43:01,507 on stmt: $226binary_multiply.5 = i * _step
DEBUG 2023-04-14 17:43:01,507 on stmt: $228binary_add.6 = val + $226binary_multiply.5
DEBUG 2023-04-14 17:43:01,507 on stmt: arr[i] = $228binary_add.6
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 238
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617A4DDF0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $240return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:01,507 on stmt: return $240return_value.1
DEBUG 2023-04-14 17:43:01,507 Replaced assignments: defaultdict(<class 'list'>,
            {74: [<numba.core.ir.Assign object at 0x000002661935C070>],
             86: [<numba.core.ir.Assign object at 0x000002661935CAF0>]})
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: start = arg(0, name=start)
DEBUG 2023-04-14 17:43:01,507 on stmt: stop = arg(1, name=stop)
DEBUG 2023-04-14 17:43:01,507 on stmt: step = arg(2, name=step)
DEBUG 2023-04-14 17:43:01,507 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:01,507 on stmt: $2load_deref.0 = freevar(start_value: None)
DEBUG 2023-04-14 17:43:01,507 on stmt: $const4.1 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,507 on stmt: $6is_op.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,507 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $8pred = call bool8($6is_op.2, func=bool8, args=(Var($6is_op.2, arrayobj.py:4516),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 14
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 14
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $phi16.0 = start
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 16
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 16
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: lit_start = $phi16.0
DEBUG 2023-04-14 17:43:01,507 on stmt: $18load_deref.1 = freevar(stop_value: None)
DEBUG 2023-04-14 17:43:01,507 on stmt: $const20.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,507 on stmt: $22is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,507 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $24pred = call bool24($22is_op.3, func=bool24, args=(Var($22is_op.3, arrayobj.py:4517),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 30
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $phi32.0 = stop
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 32
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 32
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: lit_stop = $phi32.0
DEBUG 2023-04-14 17:43:01,507 on stmt: $34load_deref.1 = freevar(step_value: None)
DEBUG 2023-04-14 17:43:01,507 on stmt: $const36.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,507 on stmt: $38is_op.3 = const(int, 0)
DEBUG 2023-04-14 17:43:01,507 on stmt: bool40 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $40pred = call bool40($38is_op.3, func=bool40, args=(Var($38is_op.3, arrayobj.py:4518),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 46
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 46
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $phi48.0 = step
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: lit_step = $phi48.0
DEBUG 2023-04-14 17:43:01,507 on stmt: $const52.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,507 on stmt: $54is_op.3 = lit_step is not $const52.2
DEBUG 2023-04-14 17:43:01,507 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $56pred = call bool56($54is_op.3, func=bool56, args=(Var($54is_op.3, arrayobj.py:4520),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: branch $56pred, 58, 62
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $phi64.0 = lit_step
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $const62.0 = const(int, 1)
DEBUG 2023-04-14 17:43:01,507 on stmt: $phi64.0.1 = $const62.0
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 64
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 64
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4520), Var($phi64.0.1, arrayobj.py:4520)], incoming_blocks=[58, 62])
DEBUG 2023-04-14 17:43:01,507 on stmt: _step = $phi64.0.2
DEBUG 2023-04-14 17:43:01,507 on stmt: $const68.2 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,507 on stmt: $70is_op.3 = lit_stop is $const68.2
DEBUG 2023-04-14 17:43:01,507 on stmt: bool72 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $72pred = call bool72($70is_op.3, func=bool72, args=(Var($70is_op.3, arrayobj.py:4521),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: branch $72pred, 74, 86
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 74
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: _start = const(int, 0)
DEBUG 2023-04-14 17:43:01,507 on stmt: _stop = lit_start
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 86
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: _start.1 = lit_start
DEBUG 2023-04-14 17:43:01,507 on stmt: _stop.1 = lit_stop
DEBUG 2023-04-14 17:43:01,507 on stmt: jump 96
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 96
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4522), Var(_stop.1, arrayobj.py:4524)], incoming_blocks=[74, 86])
DEBUG 2023-04-14 17:43:01,507 on stmt: $const98.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,507 on stmt: $100compare_op.2 = _step == $const98.1
DEBUG 2023-04-14 17:43:01,507 on stmt: bool102 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4526),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: branch $102pred, 104, 112
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 104
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
DEBUG 2023-04-14 17:43:01,507 on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
DEBUG 2023-04-14 17:43:01,507 on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4527)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,507 on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
DEBUG 2023-04-14 17:43:01,507 ==== SSA block rewrite pass on 112
DEBUG 2023-04-14 17:43:01,507 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,507 on stmt: $116binary_subtract.2 = _stop.2 - _start
DEBUG 2023-04-14 17:43:01,507 find_def var='_start' stmt=$116binary_subtract.2 = _stop.2 - _start
DEBUG 2023-04-14 17:43:01,507 find_def_from_top label 112
DEBUG 2023-04-14 17:43:01,515 idom 96 from label 112
DEBUG 2023-04-14 17:43:01,515 find_def_from_bottom label 96
DEBUG 2023-04-14 17:43:01,515 find_def_from_top label 96
DEBUG 2023-04-14 17:43:01,515 insert phi node _start.2 = phi(incoming_values=[], incoming_blocks=[]) at 96
DEBUG 2023-04-14 17:43:01,515 find_def_from_bottom label 74
DEBUG 2023-04-14 17:43:01,515 incoming_def _start = const(int, 0)
DEBUG 2023-04-14 17:43:01,515 find_def_from_bottom label 86
DEBUG 2023-04-14 17:43:01,515 incoming_def _start.1 = lit_start
DEBUG 2023-04-14 17:43:01,515 replaced with: $116binary_subtract.2 = _stop.2 - _start.2
DEBUG 2023-04-14 17:43:01,515 on stmt: nitems_c = $116binary_subtract.2 / _step
DEBUG 2023-04-14 17:43:01,515 on stmt: $124load_global.5 = global(int: <class 'int'>)
DEBUG 2023-04-14 17:43:01,515 on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:01,515 on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
DEBUG 2023-04-14 17:43:01,515 on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
DEBUG 2023-04-14 17:43:01,515 on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,515 on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4530)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,515 on stmt: $140load_deref.12 = freevar(use_complex: False)
DEBUG 2023-04-14 17:43:01,515 on stmt: $const142.13 = const(bool, True)
DEBUG 2023-04-14 17:43:01,515 on stmt: $144is_op.14 = const(int, 0)
DEBUG 2023-04-14 17:43:01,515 on stmt: bool146 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,515 on stmt: $146pred = call bool146($144is_op.14, func=bool146, args=(Var($144is_op.14, arrayobj.py:4533),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,515 on stmt: jump 182
DEBUG 2023-04-14 17:43:01,515 ==== SSA block rewrite pass on 182
DEBUG 2023-04-14 17:43:01,515 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,515 on stmt: $182load_global.0 = global(max: <built-in function max>)
DEBUG 2023-04-14 17:43:01,515 on stmt: $const186.2 = const(int, 0)
DEBUG 2023-04-14 17:43:01,515 on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4530), Var($const186.2, arrayobj.py:4537)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,515 on stmt: jump 192
DEBUG 2023-04-14 17:43:01,515 ==== SSA block rewrite pass on 192
DEBUG 2023-04-14 17:43:01,515 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,515 on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:01,515 on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
DEBUG 2023-04-14 17:43:01,515 on stmt: $198load_deref.3 = freevar(true_dtype: int64)
DEBUG 2023-04-14 17:43:01,515 on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4535), Var($198load_deref.3, arrayobj.py:4538)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,515 on stmt: val = _start
DEBUG 2023-04-14 17:43:01,515 find_def var='_start' stmt=val = _start
DEBUG 2023-04-14 17:43:01,515 find_def_from_top label 192
DEBUG 2023-04-14 17:43:01,515 idom 182 from label 192
DEBUG 2023-04-14 17:43:01,517 find_def_from_bottom label 182
DEBUG 2023-04-14 17:43:01,517 find_def_from_top label 182
DEBUG 2023-04-14 17:43:01,517 idom 112 from label 182
DEBUG 2023-04-14 17:43:01,517 find_def_from_bottom label 112
DEBUG 2023-04-14 17:43:01,517 find_def_from_top label 112
DEBUG 2023-04-14 17:43:01,517 idom 96 from label 112
DEBUG 2023-04-14 17:43:01,517 find_def_from_bottom label 96
DEBUG 2023-04-14 17:43:01,517 replaced with: val = _start.2
DEBUG 2023-04-14 17:43:01,517 on stmt: $208load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,517 on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4535)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,517 on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
DEBUG 2023-04-14 17:43:01,517 on stmt: $phi216.0 = $214get_iter.9
DEBUG 2023-04-14 17:43:01,517 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,517 ==== SSA block rewrite pass on 216
DEBUG 2023-04-14 17:43:01,517 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,517 on stmt: $216for_iter.1 = iternext(value=$phi216.0)
DEBUG 2023-04-14 17:43:01,517 on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,517 on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
DEBUG 2023-04-14 17:43:01,517 on stmt: $phi218.1 = $216for_iter.2
DEBUG 2023-04-14 17:43:01,517 on stmt: branch $216for_iter.3, 218, 238
DEBUG 2023-04-14 17:43:01,517 ==== SSA block rewrite pass on 218
DEBUG 2023-04-14 17:43:01,517 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,517 on stmt: i = $phi218.1
DEBUG 2023-04-14 17:43:01,517 on stmt: $226binary_multiply.5 = i * _step
DEBUG 2023-04-14 17:43:01,517 on stmt: $228binary_add.6 = val + $226binary_multiply.5
DEBUG 2023-04-14 17:43:01,517 on stmt: arr[i] = $228binary_add.6
DEBUG 2023-04-14 17:43:01,517 on stmt: jump 216
DEBUG 2023-04-14 17:43:01,517 ==== SSA block rewrite pass on 238
DEBUG 2023-04-14 17:43:01,517 Running <numba.core.ssa._FixSSAVars object at 0x000002661935CEE0>
DEBUG 2023-04-14 17:43:01,517 on stmt: $240return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:01,517 on stmt: return $240return_value.1
DEBUG 2023-04-14 17:43:01,528 bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
DEBUG 2023-04-14 17:43:01,528 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,528 stack: []
DEBUG 2023-04-14 17:43:01,528 dispatch pc=0, inst=NOP(arg=None, lineno=4101)
DEBUG 2023-04-14 17:43:01,528 stack []
DEBUG 2023-04-14 17:43:01,528 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
DEBUG 2023-04-14 17:43:01,528 stack []
DEBUG 2023-04-14 17:43:01,528 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
DEBUG 2023-04-14 17:43:01,528 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:01,528 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
DEBUG 2023-04-14 17:43:01,528 stack ['$2load_global.0', '$shape4.1']
DEBUG 2023-04-14 17:43:01,528 dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
DEBUG 2023-04-14 17:43:01,528 stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
DEBUG 2023-04-14 17:43:01,528 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
DEBUG 2023-04-14 17:43:01,528 stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
DEBUG 2023-04-14 17:43:01,528 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
DEBUG 2023-04-14 17:43:01,528 stack ['$10call_function.4']
DEBUG 2023-04-14 17:43:01,528 end state. edges=[]
DEBUG 2023-04-14 17:43:01,528 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:01,528 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:01,528 defmap: {}
DEBUG 2023-04-14 17:43:01,528 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:01,528 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:01,528 keep phismap: {}
DEBUG 2023-04-14 17:43:01,528 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:01,528 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:01,528 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:01,528 label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2023-04-14 17:43:01,536 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:01,536 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193700D0>
DEBUG 2023-04-14 17:43:01,536 on stmt: shape = arg(0, name=shape)
DEBUG 2023-04-14 17:43:01,536 on stmt: dtype = arg(1, name=dtype)
DEBUG 2023-04-14 17:43:01,536 on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
DEBUG 2023-04-14 17:43:01,536 on stmt: $8load_deref.3 = freevar(retty: array(int64, 1d, C))
DEBUG 2023-04-14 17:43:01,536 on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,536 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2023-04-14 17:43:01,536 on stmt: return $12return_value.5
DEBUG 2023-04-14 17:43:01,538 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x000002661933B9A0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x000002661933B880>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000266193769D0>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x000002661933BB80>],
             'dtype': [<numba.core.ir.Assign object at 0x0000026619376B20>],
             'shape': [<numba.core.ir.Assign object at 0x0000026619376940>]})
DEBUG 2023-04-14 17:43:01,538 SSA violators set()
DEBUG 2023-04-14 17:43:01,650 bytecode dump:
>          0	NOP(arg=None, lineno=89)
           2	LOAD_GLOBAL(arg=0, lineno=89)
           4	LOAD_FAST(arg=0, lineno=89)
           6	CALL_FUNCTION(arg=1, lineno=89)
           8	STORE_FAST(arg=1, lineno=89)
          10	LOAD_GLOBAL(arg=1, lineno=90)
          12	LOAD_FAST(arg=1, lineno=90)
          14	LOAD_CONST(arg=1, lineno=90)
          16	BINARY_ADD(arg=None, lineno=90)
          18	CALL_FUNCTION(arg=1, lineno=90)
          20	GET_ITER(arg=None, lineno=90)
>         22	FOR_ITER(arg=26, lineno=90)
          24	STORE_FAST(arg=2, lineno=90)
          26	LOAD_GLOBAL(arg=2, lineno=91)
          28	LOAD_FAST(arg=0, lineno=91)
          30	LOAD_FAST(arg=2, lineno=91)
          32	CALL_FUNCTION(arg=2, lineno=91)
          34	GET_ITER(arg=None, lineno=91)
>         36	FOR_ITER(arg=10, lineno=91)
          38	STORE_FAST(arg=3, lineno=91)
          40	LOAD_FAST(arg=3, lineno=92)
          42	YIELD_VALUE(arg=None, lineno=92)
          44	POP_TOP(arg=None, lineno=92)
          46	JUMP_ABSOLUTE(arg=36, lineno=92)
>         48	JUMP_ABSOLUTE(arg=22, lineno=92)
>         50	LOAD_CONST(arg=2, lineno=92)
          52	RETURN_VALUE(arg=None, lineno=92)
DEBUG 2023-04-14 17:43:01,650 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,650 stack: []
DEBUG 2023-04-14 17:43:01,650 dispatch pc=0, inst=NOP(arg=None, lineno=89)
DEBUG 2023-04-14 17:43:01,650 stack []
DEBUG 2023-04-14 17:43:01,650 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=89)
DEBUG 2023-04-14 17:43:01,650 stack []
DEBUG 2023-04-14 17:43:01,650 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=89)
DEBUG 2023-04-14 17:43:01,650 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=89)
DEBUG 2023-04-14 17:43:01,650 stack ['$2load_global.0', '$parent_set4.1']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=8, inst=STORE_FAST(arg=1, lineno=89)
DEBUG 2023-04-14 17:43:01,650 stack ['$6call_function.2']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=90)
DEBUG 2023-04-14 17:43:01,650 stack []
DEBUG 2023-04-14 17:43:01,650 dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=90)
DEBUG 2023-04-14 17:43:01,650 stack ['$10load_global.3']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=90)
DEBUG 2023-04-14 17:43:01,650 stack ['$10load_global.3', '$n12.4']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=16, inst=BINARY_ADD(arg=None, lineno=90)
DEBUG 2023-04-14 17:43:01,650 stack ['$10load_global.3', '$n12.4', '$const14.5']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=90)
DEBUG 2023-04-14 17:43:01,650 stack ['$10load_global.3', '$16binary_add.6']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=20, inst=GET_ITER(arg=None, lineno=90)
DEBUG 2023-04-14 17:43:01,650 stack ['$18call_function.7']
DEBUG 2023-04-14 17:43:01,650 end state. edges=[Edge(pc=22, stack=('$20get_iter.8',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,650 pending: deque([State(pc_initial=22 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,650 stack: ['$phi22.0']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=22, inst=FOR_ITER(arg=26, lineno=90)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi22.0']
DEBUG 2023-04-14 17:43:01,650 end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,650 pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=24 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,650 stack: []
DEBUG 2023-04-14 17:43:01,650 dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=92)
DEBUG 2023-04-14 17:43:01,650 stack []
DEBUG 2023-04-14 17:43:01,650 dispatch pc=52, inst=RETURN_VALUE(arg=None, lineno=92)
DEBUG 2023-04-14 17:43:01,650 stack ['$const50.0']
DEBUG 2023-04-14 17:43:01,650 end state. edges=[]
DEBUG 2023-04-14 17:43:01,650 pending: deque([State(pc_initial=24 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,650 stack: ['$phi24.0', '$phi24.1']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=24, inst=STORE_FAST(arg=2, lineno=90)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi24.0', '$phi24.1']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=26, inst=LOAD_GLOBAL(arg=2, lineno=91)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi24.0']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=91)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi24.0', '$26load_global.2']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=91)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi24.0', '$26load_global.2', '$parent_set28.3']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=32, inst=CALL_FUNCTION(arg=2, lineno=91)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi24.0', '$26load_global.2', '$parent_set28.3', '$i30.4']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=34, inst=GET_ITER(arg=None, lineno=91)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi24.0', '$32call_function.5']
DEBUG 2023-04-14 17:43:01,650 end state. edges=[Edge(pc=36, stack=('$phi24.0', '$34get_iter.6'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,650 pending: deque([State(pc_initial=36 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,650 stack: ['$phi36.0', '$phi36.1']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=36, inst=FOR_ITER(arg=10, lineno=91)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi36.0', '$phi36.1']
DEBUG 2023-04-14 17:43:01,650 end state. edges=[Edge(pc=48, stack=('$phi36.0',), blockstack=(), npush=0), Edge(pc=38, stack=('$phi36.0', '$phi36.1', '$36for_iter.3'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,650 pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=38 nstack_initial=3)])
DEBUG 2023-04-14 17:43:01,650 stack: ['$phi48.0']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=48, inst=JUMP_ABSOLUTE(arg=22, lineno=92)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi48.0']
DEBUG 2023-04-14 17:43:01,650 end state. edges=[Edge(pc=22, stack=('$phi48.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,650 pending: deque([State(pc_initial=38 nstack_initial=3), State(pc_initial=22 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,650 stack: ['$phi38.0', '$phi38.1', '$phi38.2']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=38, inst=STORE_FAST(arg=3, lineno=91)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi38.0', '$phi38.1', '$phi38.2']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=92)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi38.0', '$phi38.1']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=42, inst=YIELD_VALUE(arg=None, lineno=92)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi38.0', '$phi38.1', '$subset40.3']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=44, inst=POP_TOP(arg=None, lineno=92)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi38.0', '$phi38.1', '$42yield_value.4']
DEBUG 2023-04-14 17:43:01,650 dispatch pc=46, inst=JUMP_ABSOLUTE(arg=36, lineno=92)
DEBUG 2023-04-14 17:43:01,650 stack ['$phi38.0', '$phi38.1']
DEBUG 2023-04-14 17:43:01,650 end state. edges=[Edge(pc=36, stack=('$phi38.0', '$phi38.1'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,650 pending: deque([State(pc_initial=22 nstack_initial=1), State(pc_initial=36 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,650 pending: deque([State(pc_initial=36 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,650 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:01,650 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=24 nstack_initial=2): {'$phi24.1'},
             State(pc_initial=36 nstack_initial=2): {'$phi36.1'},
             State(pc_initial=38 nstack_initial=3): {'$phi38.2'},
             State(pc_initial=48 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:01,650 defmap: {'$phi22.0': State(pc_initial=0 nstack_initial=0),
 '$phi24.1': State(pc_initial=22 nstack_initial=1),
 '$phi36.1': State(pc_initial=24 nstack_initial=2),
 '$phi38.2': State(pc_initial=36 nstack_initial=2)}
DEBUG 2023-04-14 17:43:01,655 phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=1))},
             '$phi24.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi36.0': {('$phi24.0', State(pc_initial=24 nstack_initial=2)),
                          ('$phi38.0', State(pc_initial=38 nstack_initial=3))},
             '$phi36.1': {('$34get_iter.6',
                           State(pc_initial=24 nstack_initial=2)),
                          ('$phi38.1', State(pc_initial=38 nstack_initial=3))},
             '$phi38.0': {('$phi36.0', State(pc_initial=36 nstack_initial=2))},
             '$phi38.1': {('$phi36.1', State(pc_initial=36 nstack_initial=2))},
             '$phi38.2': {('$36for_iter.3',
                           State(pc_initial=36 nstack_initial=2))},
             '$phi48.0': {('$phi36.0', State(pc_initial=36 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:01,655 changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=2))},
             '$phi24.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=2))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi36.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=2))},
             '$phi36.1': {('$34get_iter.6',
                           State(pc_initial=24 nstack_initial=2)),
                          ('$phi36.1', State(pc_initial=36 nstack_initial=2))},
             '$phi38.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$34get_iter.6',
                           State(pc_initial=24 nstack_initial=2))},
             '$phi38.2': {('$36for_iter.3',
                           State(pc_initial=36 nstack_initial=2))},
             '$phi48.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:01,655 changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi36.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi36.1': {('$34get_iter.6',
                           State(pc_initial=24 nstack_initial=2))},
             '$phi38.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$34get_iter.6',
                           State(pc_initial=24 nstack_initial=2))},
             '$phi38.2': {('$36for_iter.3',
                           State(pc_initial=36 nstack_initial=2))},
             '$phi48.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:01,655 changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))},
             '$phi36.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi36.1': {('$34get_iter.6',
                           State(pc_initial=24 nstack_initial=2))},
             '$phi38.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi38.1': {('$34get_iter.6',
                           State(pc_initial=24 nstack_initial=2))},
             '$phi38.2': {('$36for_iter.3',
                           State(pc_initial=36 nstack_initial=2))},
             '$phi48.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:01,655 keep phismap: {'$phi22.0': {('$20get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi24.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))},
 '$phi36.1': {('$34get_iter.6', State(pc_initial=24 nstack_initial=2))},
 '$phi38.2': {('$36for_iter.3', State(pc_initial=36 nstack_initial=2))}}
DEBUG 2023-04-14 17:43:01,655 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$20get_iter.8'},
             State(pc_initial=22 nstack_initial=1): {'$phi24.1': '$22for_iter.2'},
             State(pc_initial=24 nstack_initial=2): {'$phi36.1': '$34get_iter.6'},
             State(pc_initial=36 nstack_initial=2): {'$phi38.2': '$36for_iter.3'}})
DEBUG 2023-04-14 17:43:01,655 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:01,655 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$parent_set4.1'}), (6, {'func': '$2load_global.0', 'args': ['$parent_set4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'res': '$const14.5'}), (16, {'lhs': '$n12.4', 'rhs': '$const14.5', 'res': '$16binary_add.6'}), (18, {'func': '$10load_global.3', 'args': ['$16binary_add.6'], 'res': '$18call_function.7'}), (20, {'value': '$18call_function.7', 'res': '$20get_iter.8'})), outgoing_phis={'$phi22.0': '$20get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.8',)})
DEBUG 2023-04-14 17:43:01,655 block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi24.1': '$22for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 24: ('$phi22.0', '$22for_iter.2')})
DEBUG 2023-04-14 17:43:01,655 block_infos State(pc_initial=24 nstack_initial=2):
AdaptBlockInfo(insts=((24, {'value': '$phi24.1'}), (26, {'res': '$26load_global.2'}), (28, {'res': '$parent_set28.3'}), (30, {'res': '$i30.4'}), (32, {'func': '$26load_global.2', 'args': ['$parent_set28.3', '$i30.4'], 'res': '$32call_function.5'}), (34, {'value': '$32call_function.5', 'res': '$34get_iter.6'})), outgoing_phis={'$phi36.1': '$34get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi24.0', '$34get_iter.6')})
DEBUG 2023-04-14 17:43:01,655 block_infos State(pc_initial=36 nstack_initial=2):
AdaptBlockInfo(insts=((36, {'iterator': '$phi36.1', 'pair': '$36for_iter.2', 'indval': '$36for_iter.3', 'pred': '$36for_iter.4'}),), outgoing_phis={'$phi38.2': '$36for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$phi36.0',), 38: ('$phi36.0', '$phi36.1', '$36for_iter.3')})
DEBUG 2023-04-14 17:43:01,655 block_infos State(pc_initial=38 nstack_initial=3):
AdaptBlockInfo(insts=((38, {'value': '$phi38.2'}), (40, {'res': '$subset40.3'}), (42, {'value': '$subset40.3', 'res': '$42yield_value.4'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ('$phi38.0', '$phi38.1')})
DEBUG 2023-04-14 17:43:01,655 block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi48.0',)})
DEBUG 2023-04-14 17:43:01,655 block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$const50.0'}), (52, {'retval': '$const50.0', 'castval': '$52return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:01,658 label 0:
    parent_set = arg(0, name=parent_set)     ['parent_set']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(parent_set, func=$2load_global.0, args=[Var(parent_set, _torontonian.py:89)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'n', 'parent_set']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $const14.5 = const(int, 1)               ['$const14.5']
    $16binary_add.6 = n + $const14.5         ['$16binary_add.6', '$const14.5', 'n']
    $18call_function.7 = call $10load_global.3($16binary_add.6, func=$10load_global.3, args=[Var($16binary_add.6, _torontonian.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$16binary_add.6', '$18call_function.7']
    $20get_iter.8 = getiter(value=$18call_function.7) ['$18call_function.7', '$20get_iter.8']
    $phi22.0 = $20get_iter.8                 ['$20get_iter.8', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi24.1 = $22for_iter.2                 ['$22for_iter.2', '$phi24.1']
    branch $22for_iter.3, 24, 50             ['$22for_iter.3']
label 24:
    i = $phi24.1                             ['$phi24.1', 'i']
    $26load_global.2 = global(combinations: CPUDispatcher(<function combinations at 0x000002660843F430>)) ['$26load_global.2']
    $32call_function.5 = call $26load_global.2(parent_set, i, func=$26load_global.2, args=[Var(parent_set, _torontonian.py:89), Var(i, _torontonian.py:90)], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_global.2', '$32call_function.5', 'i', 'parent_set']
    $34get_iter.6 = getiter(value=$32call_function.5) ['$32call_function.5', '$34get_iter.6']
    $phi36.1 = $34get_iter.6                 ['$34get_iter.6', '$phi36.1']
    jump 36                                  []
label 36:
    $36for_iter.2 = iternext(value=$phi36.1) ['$36for_iter.2', '$phi36.1']
    $36for_iter.3 = pair_first(value=$36for_iter.2) ['$36for_iter.2', '$36for_iter.3']
    $36for_iter.4 = pair_second(value=$36for_iter.2) ['$36for_iter.2', '$36for_iter.4']
    $phi38.2 = $36for_iter.3                 ['$36for_iter.3', '$phi38.2']
    branch $36for_iter.4, 38, 48             ['$36for_iter.4']
label 38:
    subset = $phi38.2                        ['$phi38.2', 'subset']
    $42yield_value.4 = yield subset          ['$42yield_value.4', 'subset']
    jump 36                                  []
label 48:
    jump 22                                  []
label 50:
    $const50.0 = const(NoneType, None)       ['$const50.0']
    $52return_value.1 = cast(value=$const50.0) ['$52return_value.1', '$const50.0']
    return $52return_value.1                 ['$52return_value.1']

DEBUG 2023-04-14 17:43:01,665 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:01,665 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661936B850>
DEBUG 2023-04-14 17:43:01,665 on stmt: parent_set = arg(0, name=parent_set)
DEBUG 2023-04-14 17:43:01,665 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,665 on stmt: n = call $2load_global.0(parent_set, func=$2load_global.0, args=[Var(parent_set, _torontonian.py:89)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,665 on stmt: $10load_global.3 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,665 on stmt: $const14.5 = const(int, 1)
DEBUG 2023-04-14 17:43:01,665 on stmt: $16binary_add.6 = n + $const14.5
DEBUG 2023-04-14 17:43:01,665 on stmt: $18call_function.7 = call $10load_global.3($16binary_add.6, func=$10load_global.3, args=[Var($16binary_add.6, _torontonian.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,665 on stmt: $20get_iter.8 = getiter(value=$18call_function.7)
DEBUG 2023-04-14 17:43:01,665 on stmt: $phi22.0 = $20get_iter.8
DEBUG 2023-04-14 17:43:01,665 on stmt: jump 22
DEBUG 2023-04-14 17:43:01,665 ==== SSA block analysis pass on 22
DEBUG 2023-04-14 17:43:01,665 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661936B850>
DEBUG 2023-04-14 17:43:01,665 on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG 2023-04-14 17:43:01,665 on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:01,665 on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:01,665 on stmt: $phi24.1 = $22for_iter.2
DEBUG 2023-04-14 17:43:01,665 on stmt: branch $22for_iter.3, 24, 50
DEBUG 2023-04-14 17:43:01,665 ==== SSA block analysis pass on 24
DEBUG 2023-04-14 17:43:01,665 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661936B850>
DEBUG 2023-04-14 17:43:01,665 on stmt: i = $phi24.1
DEBUG 2023-04-14 17:43:01,665 on stmt: $26load_global.2 = global(combinations: CPUDispatcher(<function combinations at 0x000002660843F430>))
DEBUG 2023-04-14 17:43:01,665 on stmt: $32call_function.5 = call $26load_global.2(parent_set, i, func=$26load_global.2, args=[Var(parent_set, _torontonian.py:89), Var(i, _torontonian.py:90)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,665 on stmt: $34get_iter.6 = getiter(value=$32call_function.5)
DEBUG 2023-04-14 17:43:01,665 on stmt: $phi36.1 = $34get_iter.6
DEBUG 2023-04-14 17:43:01,665 on stmt: jump 36
DEBUG 2023-04-14 17:43:01,665 ==== SSA block analysis pass on 36
DEBUG 2023-04-14 17:43:01,665 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661936B850>
DEBUG 2023-04-14 17:43:01,665 on stmt: $36for_iter.2 = iternext(value=$phi36.1)
DEBUG 2023-04-14 17:43:01,665 on stmt: $36for_iter.3 = pair_first(value=$36for_iter.2)
DEBUG 2023-04-14 17:43:01,665 on stmt: $36for_iter.4 = pair_second(value=$36for_iter.2)
DEBUG 2023-04-14 17:43:01,665 on stmt: $phi38.2 = $36for_iter.3
DEBUG 2023-04-14 17:43:01,665 on stmt: branch $36for_iter.4, 38, 48
DEBUG 2023-04-14 17:43:01,665 ==== SSA block analysis pass on 38
DEBUG 2023-04-14 17:43:01,665 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661936B850>
DEBUG 2023-04-14 17:43:01,665 on stmt: subset = $phi38.2
DEBUG 2023-04-14 17:43:01,665 on stmt: $42yield_value.4 = yield subset
DEBUG 2023-04-14 17:43:01,665 on stmt: jump 36
DEBUG 2023-04-14 17:43:01,665 ==== SSA block analysis pass on 48
DEBUG 2023-04-14 17:43:01,665 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661936B850>
DEBUG 2023-04-14 17:43:01,665 on stmt: jump 22
DEBUG 2023-04-14 17:43:01,665 ==== SSA block analysis pass on 50
DEBUG 2023-04-14 17:43:01,668 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661936B850>
DEBUG 2023-04-14 17:43:01,668 on stmt: $const50.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,668 on stmt: $52return_value.1 = cast(value=$const50.0)
DEBUG 2023-04-14 17:43:01,668 on stmt: return $52return_value.1
DEBUG 2023-04-14 17:43:01,668 defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x00000266192F2880>],
             '$16binary_add.6': [<numba.core.ir.Assign object at 0x0000026619340220>],
             '$18call_function.7': [<numba.core.ir.Assign object at 0x0000026619340100>],
             '$20get_iter.8': [<numba.core.ir.Assign object at 0x000002661936CDF0>],
             '$22for_iter.1': [<numba.core.ir.Assign object at 0x000002661936C6D0>],
             '$22for_iter.2': [<numba.core.ir.Assign object at 0x000002661936C940>],
             '$22for_iter.3': [<numba.core.ir.Assign object at 0x000002661936C730>],
             '$26load_global.2': [<numba.core.ir.Assign object at 0x000002661935CF70>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619362940>],
             '$32call_function.5': [<numba.core.ir.Assign object at 0x00000266193A2670>],
             '$34get_iter.6': [<numba.core.ir.Assign object at 0x00000266193122B0>],
             '$36for_iter.2': [<numba.core.ir.Assign object at 0x000002661933B040>],
             '$36for_iter.3': [<numba.core.ir.Assign object at 0x000002661932F280>],
             '$36for_iter.4': [<numba.core.ir.Assign object at 0x000002661932FA90>],
             '$42yield_value.4': [<numba.core.ir.Assign object at 0x00000266193BAF40>],
             '$52return_value.1': [<numba.core.ir.Assign object at 0x00000266193EE0D0>],
             '$const14.5': [<numba.core.ir.Assign object at 0x0000026619334790>],
             '$const50.0': [<numba.core.ir.Assign object at 0x0000026619370160>],
             '$phi22.0': [<numba.core.ir.Assign object at 0x00000266192F2790>],
             '$phi24.1': [<numba.core.ir.Assign object at 0x000002661936CA60>],
             '$phi36.1': [<numba.core.ir.Assign object at 0x0000026619330F40>],
             '$phi38.2': [<numba.core.ir.Assign object at 0x0000026619357D90>],
             'i': [<numba.core.ir.Assign object at 0x000002661935E760>],
             'n': [<numba.core.ir.Assign object at 0x0000026619362C70>],
             'parent_set': [<numba.core.ir.Assign object at 0x0000026619362550>],
             'subset': [<numba.core.ir.Assign object at 0x000002661932DEE0>]})
DEBUG 2023-04-14 17:43:01,668 SSA violators set()
DEBUG 2023-04-14 17:43:01,670 bytecode dump:
>          0	NOP(arg=None, lineno=57)
           2	LOAD_GLOBAL(arg=0, lineno=57)
           4	LOAD_DEREF(arg=0, lineno=57)
           6	CALL_FUNCTION(arg=1, lineno=57)
           8	STORE_FAST(arg=2, lineno=57)
          10	LOAD_GLOBAL(arg=1, lineno=58)
          12	LOAD_GLOBAL(arg=2, lineno=58)
          14	LOAD_FAST(arg=1, lineno=58)
          16	CALL_FUNCTION(arg=1, lineno=58)
          18	CALL_FUNCTION(arg=1, lineno=58)
          20	STORE_FAST(arg=3, lineno=58)
          22	LOAD_FAST(arg=2, lineno=59)
          24	JUMP_IF_FALSE_OR_POP(arg=48, lineno=59)
          26	LOAD_CONST(arg=1, lineno=59)
          28	LOAD_FAST(arg=1, lineno=59)
          30	DUP_TOP(arg=None, lineno=59)
          32	ROT_THREE(arg=None, lineno=59)
          34	COMPARE_OP(arg=0, lineno=59)
          36	JUMP_IF_FALSE_OR_POP(arg=44, lineno=59)
          38	LOAD_FAST(arg=2, lineno=59)
          40	COMPARE_OP(arg=1, lineno=59)
          42	JUMP_FORWARD(arg=4, lineno=59)
>         44	ROT_TWO(arg=None, lineno=59)
          46	POP_TOP(arg=None, lineno=59)
>         48	UNARY_NOT(arg=None, lineno=59)
          50	STORE_FAST(arg=4, lineno=59)
          52	LOAD_FAST(arg=4, lineno=61)
          54	POP_JUMP_IF_TRUE(arg=80, lineno=61)
          56	LOAD_CLOSURE(arg=0, lineno=62)
          58	BUILD_TUPLE(arg=1, lineno=62)
          60	LOAD_CONST(arg=2, lineno=62)
          62	LOAD_CONST(arg=3, lineno=62)
          64	MAKE_FUNCTION(arg=8, lineno=62)
          66	LOAD_FAST(arg=3, lineno=62)
          68	GET_ITER(arg=None, lineno=62)
          70	CALL_FUNCTION(arg=1, lineno=62)
          72	STORE_FAST(arg=5, lineno=62)
          74	LOAD_FAST(arg=5, lineno=63)
          76	YIELD_VALUE(arg=None, lineno=63)
          78	POP_TOP(arg=None, lineno=63)
>         80	LOAD_FAST(arg=4, lineno=65)
          82	POP_JUMP_IF_TRUE(arg=226, lineno=65)
          84	LOAD_FAST(arg=1, lineno=66)
          86	LOAD_CONST(arg=4, lineno=66)
          88	BINARY_SUBTRACT(arg=None, lineno=66)
          90	STORE_FAST(arg=6, lineno=66)
>         92	LOAD_FAST(arg=6, lineno=67)
          94	LOAD_CONST(arg=1, lineno=67)
          96	COMPARE_OP(arg=5, lineno=67)
          98	POP_JUMP_IF_FALSE(arg=130, lineno=67)
         100	LOAD_FAST(arg=3, lineno=67)
         102	LOAD_FAST(arg=6, lineno=67)
         104	BINARY_SUBSCR(arg=None, lineno=67)
         106	LOAD_FAST(arg=6, lineno=67)
         108	LOAD_FAST(arg=2, lineno=67)
         110	BINARY_ADD(arg=None, lineno=67)
         112	LOAD_FAST(arg=1, lineno=67)
         114	BINARY_SUBTRACT(arg=None, lineno=67)
         116	COMPARE_OP(arg=2, lineno=67)
         118	POP_JUMP_IF_FALSE(arg=130, lineno=67)
         120	LOAD_FAST(arg=6, lineno=68)
         122	LOAD_CONST(arg=4, lineno=68)
         124	INPLACE_SUBTRACT(arg=None, lineno=68)
         126	STORE_FAST(arg=6, lineno=68)
         128	JUMP_ABSOLUTE(arg=92, lineno=68)
>        130	LOAD_FAST(arg=6, lineno=69)
         132	LOAD_CONST(arg=1, lineno=69)
         134	COMPARE_OP(arg=0, lineno=69)
         136	POP_JUMP_IF_FALSE(arg=144, lineno=69)
         138	LOAD_CONST(arg=5, lineno=70)
         140	STORE_FAST(arg=4, lineno=70)
         142	JUMP_ABSOLUTE(arg=80, lineno=70)
>        144	LOAD_FAST(arg=3, lineno=72)
         146	LOAD_FAST(arg=6, lineno=72)
         148	DUP_TOP_TWO(arg=None, lineno=72)
         150	BINARY_SUBSCR(arg=None, lineno=72)
         152	LOAD_CONST(arg=4, lineno=72)
         154	INPLACE_ADD(arg=None, lineno=72)
         156	ROT_THREE(arg=None, lineno=72)
         158	STORE_SUBSCR(arg=None, lineno=72)
         160	LOAD_GLOBAL(arg=2, lineno=73)
         162	LOAD_FAST(arg=6, lineno=73)
         164	LOAD_CONST(arg=4, lineno=73)
         166	BINARY_ADD(arg=None, lineno=73)
         168	LOAD_FAST(arg=1, lineno=73)
         170	CALL_FUNCTION(arg=2, lineno=73)
         172	GET_ITER(arg=None, lineno=73)
>        174	FOR_ITER(arg=24, lineno=73)
         176	STORE_FAST(arg=7, lineno=73)
         178	LOAD_FAST(arg=3, lineno=74)
         180	LOAD_FAST(arg=7, lineno=74)
         182	LOAD_CONST(arg=4, lineno=74)
         184	BINARY_SUBTRACT(arg=None, lineno=74)
         186	BINARY_SUBSCR(arg=None, lineno=74)
         188	LOAD_CONST(arg=4, lineno=74)
         190	BINARY_ADD(arg=None, lineno=74)
         192	LOAD_FAST(arg=3, lineno=74)
         194	LOAD_FAST(arg=7, lineno=74)
         196	STORE_SUBSCR(arg=None, lineno=74)
         198	JUMP_ABSOLUTE(arg=174, lineno=74)
>        200	LOAD_CLOSURE(arg=0, lineno=76)
         202	BUILD_TUPLE(arg=1, lineno=76)
         204	LOAD_CONST(arg=6, lineno=76)
         206	LOAD_CONST(arg=3, lineno=76)
         208	MAKE_FUNCTION(arg=8, lineno=76)
         210	LOAD_FAST(arg=3, lineno=76)
         212	GET_ITER(arg=None, lineno=76)
         214	CALL_FUNCTION(arg=1, lineno=76)
         216	STORE_FAST(arg=5, lineno=76)
         218	LOAD_FAST(arg=5, lineno=77)
         220	YIELD_VALUE(arg=None, lineno=77)
         222	POP_TOP(arg=None, lineno=77)
         224	JUMP_ABSOLUTE(arg=80, lineno=77)
>        226	LOAD_CONST(arg=7, lineno=77)
         228	RETURN_VALUE(arg=None, lineno=77)
DEBUG 2023-04-14 17:43:01,670 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,670 stack: []
DEBUG 2023-04-14 17:43:01,670 dispatch pc=0, inst=NOP(arg=None, lineno=57)
DEBUG 2023-04-14 17:43:01,670 stack []
DEBUG 2023-04-14 17:43:01,670 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=57)
DEBUG 2023-04-14 17:43:01,670 stack []
DEBUG 2023-04-14 17:43:01,670 dispatch pc=4, inst=LOAD_DEREF(arg=0, lineno=57)
DEBUG 2023-04-14 17:43:01,670 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:01,670 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=57)
DEBUG 2023-04-14 17:43:01,670 stack ['$2load_global.0', '$4load_deref.1']
DEBUG 2023-04-14 17:43:01,670 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=57)
DEBUG 2023-04-14 17:43:01,670 stack ['$6call_function.2']
DEBUG 2023-04-14 17:43:01,670 dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=58)
DEBUG 2023-04-14 17:43:01,670 stack []
DEBUG 2023-04-14 17:43:01,670 dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=58)
DEBUG 2023-04-14 17:43:01,670 stack ['$10load_global.3']
DEBUG 2023-04-14 17:43:01,670 dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=58)
DEBUG 2023-04-14 17:43:01,670 stack ['$10load_global.3', '$12load_global.4']
DEBUG 2023-04-14 17:43:01,670 dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=58)
DEBUG 2023-04-14 17:43:01,670 stack ['$10load_global.3', '$12load_global.4', '$r14.5']
DEBUG 2023-04-14 17:43:01,670 dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=58)
DEBUG 2023-04-14 17:43:01,670 stack ['$10load_global.3', '$16call_function.6']
DEBUG 2023-04-14 17:43:01,670 dispatch pc=20, inst=STORE_FAST(arg=3, lineno=58)
DEBUG 2023-04-14 17:43:01,670 stack ['$18call_function.7']
DEBUG 2023-04-14 17:43:01,670 dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=59)
DEBUG 2023-04-14 17:43:01,670 stack []
DEBUG 2023-04-14 17:43:01,670 dispatch pc=24, inst=JUMP_IF_FALSE_OR_POP(arg=48, lineno=59)
DEBUG 2023-04-14 17:43:01,670 stack ['$n22.8']
DEBUG 2023-04-14 17:43:01,670 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=('$n22.8',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,670 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=48 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,670 stack: []
DEBUG 2023-04-14 17:43:01,670 dispatch pc=26, inst=LOAD_CONST(arg=1, lineno=59)
DEBUG 2023-04-14 17:43:01,670 stack []
DEBUG 2023-04-14 17:43:01,670 dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=59)
DEBUG 2023-04-14 17:43:01,670 stack ['$const26.0']
DEBUG 2023-04-14 17:43:01,670 dispatch pc=30, inst=DUP_TOP(arg=None, lineno=59)
DEBUG 2023-04-14 17:43:01,670 stack ['$const26.0', '$r28.1']
DEBUG 2023-04-14 17:43:01,670 dispatch pc=32, inst=ROT_THREE(arg=None, lineno=59)
DEBUG 2023-04-14 17:43:01,670 stack ['$const26.0', '$r28.1', '$30dup_top.2']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=34, inst=COMPARE_OP(arg=0, lineno=59)
DEBUG 2023-04-14 17:43:01,675 stack ['$30dup_top.2', '$const26.0', '$r28.1']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=36, inst=JUMP_IF_FALSE_OR_POP(arg=44, lineno=59)
DEBUG 2023-04-14 17:43:01,675 stack ['$30dup_top.2', '$34compare_op.3']
DEBUG 2023-04-14 17:43:01,675 end state. edges=[Edge(pc=38, stack=('$30dup_top.2',), blockstack=(), npush=0), Edge(pc=44, stack=('$30dup_top.2', '$34compare_op.3'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,675 pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=38 nstack_initial=1), State(pc_initial=44 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,675 stack: ['$phi48.0']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=48, inst=UNARY_NOT(arg=None, lineno=59)
DEBUG 2023-04-14 17:43:01,675 stack ['$phi48.0']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=50, inst=STORE_FAST(arg=4, lineno=59)
DEBUG 2023-04-14 17:43:01,675 stack ['$48unary_not.1']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=61)
DEBUG 2023-04-14 17:43:01,675 stack []
DEBUG 2023-04-14 17:43:01,675 dispatch pc=54, inst=POP_JUMP_IF_TRUE(arg=80, lineno=61)
DEBUG 2023-04-14 17:43:01,675 stack ['$empty52.2']
DEBUG 2023-04-14 17:43:01,675 end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=80, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,675 pending: deque([State(pc_initial=38 nstack_initial=1), State(pc_initial=44 nstack_initial=2), State(pc_initial=56 nstack_initial=0), State(pc_initial=80 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,675 stack: ['$phi38.0']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=59)
DEBUG 2023-04-14 17:43:01,675 stack ['$phi38.0']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=40, inst=COMPARE_OP(arg=1, lineno=59)
DEBUG 2023-04-14 17:43:01,675 stack ['$phi38.0', '$n38.1']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=42, inst=JUMP_FORWARD(arg=4, lineno=59)
DEBUG 2023-04-14 17:43:01,675 stack ['$40compare_op.2']
DEBUG 2023-04-14 17:43:01,675 end state. edges=[Edge(pc=48, stack=('$40compare_op.2',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,675 pending: deque([State(pc_initial=44 nstack_initial=2), State(pc_initial=56 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=48 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,675 stack: ['$phi44.0', '$phi44.1']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=44, inst=ROT_TWO(arg=None, lineno=59)
DEBUG 2023-04-14 17:43:01,675 stack ['$phi44.0', '$phi44.1']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=46, inst=POP_TOP(arg=None, lineno=59)
DEBUG 2023-04-14 17:43:01,675 stack ['$phi44.1', '$phi44.0']
DEBUG 2023-04-14 17:43:01,675 end state. edges=[Edge(pc=48, stack=('$phi44.1',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,675 pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=48 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,675 stack: []
DEBUG 2023-04-14 17:43:01,675 dispatch pc=56, inst=LOAD_CLOSURE(arg=0, lineno=62)
DEBUG 2023-04-14 17:43:01,675 stack []
DEBUG 2023-04-14 17:43:01,675 dispatch pc=58, inst=BUILD_TUPLE(arg=1, lineno=62)
DEBUG 2023-04-14 17:43:01,675 stack ['$56load_closure.0']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=60, inst=LOAD_CONST(arg=2, lineno=62)
DEBUG 2023-04-14 17:43:01,675 stack ['$58build_tuple.1']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=62, inst=LOAD_CONST(arg=3, lineno=62)
DEBUG 2023-04-14 17:43:01,675 stack ['$58build_tuple.1', '$const60.2']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=64, inst=MAKE_FUNCTION(arg=8, lineno=62)
DEBUG 2023-04-14 17:43:01,675 stack ['$58build_tuple.1', '$const60.2', '$const62.3']
DEBUG 2023-04-14 17:43:01,675 dispatch pc=66, inst=LOAD_FAST(arg=3, lineno=62)
DEBUG 2023-04-14 17:43:01,678 stack ['$64make_function.4']
DEBUG 2023-04-14 17:43:01,678 dispatch pc=68, inst=GET_ITER(arg=None, lineno=62)
DEBUG 2023-04-14 17:43:01,678 stack ['$64make_function.4', '$indices66.5']
DEBUG 2023-04-14 17:43:01,678 dispatch pc=70, inst=CALL_FUNCTION(arg=1, lineno=62)
DEBUG 2023-04-14 17:43:01,678 stack ['$64make_function.4', '$68get_iter.6']
DEBUG 2023-04-14 17:43:01,678 dispatch pc=72, inst=STORE_FAST(arg=5, lineno=62)
DEBUG 2023-04-14 17:43:01,678 stack ['$70call_function.7']
DEBUG 2023-04-14 17:43:01,678 dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=63)
DEBUG 2023-04-14 17:43:01,678 stack []
DEBUG 2023-04-14 17:43:01,678 dispatch pc=76, inst=YIELD_VALUE(arg=None, lineno=63)
DEBUG 2023-04-14 17:43:01,678 stack ['$result74.8']
DEBUG 2023-04-14 17:43:01,678 dispatch pc=78, inst=POP_TOP(arg=None, lineno=63)
DEBUG 2023-04-14 17:43:01,678 stack ['$76yield_value.9']
DEBUG 2023-04-14 17:43:01,678 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,678 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=48 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=80 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,678 stack: []
DEBUG 2023-04-14 17:43:01,678 dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=65)
DEBUG 2023-04-14 17:43:01,678 stack []
DEBUG 2023-04-14 17:43:01,678 dispatch pc=82, inst=POP_JUMP_IF_TRUE(arg=226, lineno=65)
DEBUG 2023-04-14 17:43:01,678 stack ['$empty80.0']
DEBUG 2023-04-14 17:43:01,678 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=226, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,678 pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=80 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=226 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,678 pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=80 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=226 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,678 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=226 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,678 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=226 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,678 stack: []
DEBUG 2023-04-14 17:43:01,678 dispatch pc=84, inst=LOAD_FAST(arg=1, lineno=66)
DEBUG 2023-04-14 17:43:01,678 stack []
DEBUG 2023-04-14 17:43:01,678 dispatch pc=86, inst=LOAD_CONST(arg=4, lineno=66)
DEBUG 2023-04-14 17:43:01,678 stack ['$r84.0']
DEBUG 2023-04-14 17:43:01,678 dispatch pc=88, inst=BINARY_SUBTRACT(arg=None, lineno=66)
DEBUG 2023-04-14 17:43:01,678 stack ['$r84.0', '$const86.1']
DEBUG 2023-04-14 17:43:01,678 dispatch pc=90, inst=STORE_FAST(arg=6, lineno=66)
DEBUG 2023-04-14 17:43:01,678 stack ['$88binary_subtract.2']
DEBUG 2023-04-14 17:43:01,678 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,678 pending: deque([State(pc_initial=226 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,678 stack: []
DEBUG 2023-04-14 17:43:01,678 dispatch pc=226, inst=LOAD_CONST(arg=7, lineno=77)
DEBUG 2023-04-14 17:43:01,678 stack []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=228, inst=RETURN_VALUE(arg=None, lineno=77)
DEBUG 2023-04-14 17:43:01,680 stack ['$const226.0']
DEBUG 2023-04-14 17:43:01,680 end state. edges=[]
DEBUG 2023-04-14 17:43:01,680 pending: deque([State(pc_initial=92 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,680 stack: []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=92, inst=LOAD_FAST(arg=6, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=94, inst=LOAD_CONST(arg=1, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$i92.0']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=96, inst=COMPARE_OP(arg=5, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$i92.0', '$const94.1']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=98, inst=POP_JUMP_IF_FALSE(arg=130, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$96compare_op.2']
DEBUG 2023-04-14 17:43:01,680 end state. edges=[Edge(pc=100, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,680 pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,680 stack: []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=100, inst=LOAD_FAST(arg=3, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$indices100.0']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$indices100.0', '$i102.1']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$104binary_subscr.2']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=108, inst=LOAD_FAST(arg=2, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$104binary_subscr.2', '$i106.3']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$104binary_subscr.2', '$i106.3', '$n108.4']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=112, inst=LOAD_FAST(arg=1, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$104binary_subscr.2', '$110binary_add.5']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=114, inst=BINARY_SUBTRACT(arg=None, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$104binary_subscr.2', '$110binary_add.5', '$r112.6']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=116, inst=COMPARE_OP(arg=2, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$104binary_subscr.2', '$114binary_subtract.7']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=118, inst=POP_JUMP_IF_FALSE(arg=130, lineno=67)
DEBUG 2023-04-14 17:43:01,680 stack ['$116compare_op.8']
DEBUG 2023-04-14 17:43:01,680 end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,680 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=120 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,680 stack: []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=130, inst=LOAD_FAST(arg=6, lineno=69)
DEBUG 2023-04-14 17:43:01,680 stack []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=69)
DEBUG 2023-04-14 17:43:01,680 stack ['$i130.0']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=134, inst=COMPARE_OP(arg=0, lineno=69)
DEBUG 2023-04-14 17:43:01,680 stack ['$i130.0', '$const132.1']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=144, lineno=69)
DEBUG 2023-04-14 17:43:01,680 stack ['$134compare_op.2']
DEBUG 2023-04-14 17:43:01,680 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=144, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,680 pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=144 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,680 stack: []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=120, inst=LOAD_FAST(arg=6, lineno=68)
DEBUG 2023-04-14 17:43:01,680 stack []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=122, inst=LOAD_CONST(arg=4, lineno=68)
DEBUG 2023-04-14 17:43:01,680 stack ['$i120.0']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=124, inst=INPLACE_SUBTRACT(arg=None, lineno=68)
DEBUG 2023-04-14 17:43:01,680 stack ['$i120.0', '$const122.1']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=126, inst=STORE_FAST(arg=6, lineno=68)
DEBUG 2023-04-14 17:43:01,680 stack ['$124inplace_subtract.2']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=128, inst=JUMP_ABSOLUTE(arg=92, lineno=68)
DEBUG 2023-04-14 17:43:01,680 stack []
DEBUG 2023-04-14 17:43:01,680 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,680 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,680 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=144 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,680 stack: []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=138, inst=LOAD_CONST(arg=5, lineno=70)
DEBUG 2023-04-14 17:43:01,680 stack []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=140, inst=STORE_FAST(arg=4, lineno=70)
DEBUG 2023-04-14 17:43:01,680 stack ['$const138.0']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=142, inst=JUMP_ABSOLUTE(arg=80, lineno=70)
DEBUG 2023-04-14 17:43:01,680 stack []
DEBUG 2023-04-14 17:43:01,680 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,680 pending: deque([State(pc_initial=144 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=80 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,680 stack: []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=144, inst=LOAD_FAST(arg=3, lineno=72)
DEBUG 2023-04-14 17:43:01,680 stack []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=146, inst=LOAD_FAST(arg=6, lineno=72)
DEBUG 2023-04-14 17:43:01,680 stack ['$indices144.0']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=148, inst=DUP_TOP_TWO(arg=None, lineno=72)
DEBUG 2023-04-14 17:43:01,680 stack ['$indices144.0', '$i146.1']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=150, inst=BINARY_SUBSCR(arg=None, lineno=72)
DEBUG 2023-04-14 17:43:01,680 stack ['$indices144.0', '$i146.1', '$148dup_top_two.2', '$148dup_top_two.3']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=152, inst=LOAD_CONST(arg=4, lineno=72)
DEBUG 2023-04-14 17:43:01,680 stack ['$indices144.0', '$i146.1', '$150binary_subscr.4']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=154, inst=INPLACE_ADD(arg=None, lineno=72)
DEBUG 2023-04-14 17:43:01,680 stack ['$indices144.0', '$i146.1', '$150binary_subscr.4', '$const152.5']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=156, inst=ROT_THREE(arg=None, lineno=72)
DEBUG 2023-04-14 17:43:01,680 stack ['$indices144.0', '$i146.1', '$154inplace_add.6']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=158, inst=STORE_SUBSCR(arg=None, lineno=72)
DEBUG 2023-04-14 17:43:01,680 stack ['$154inplace_add.6', '$indices144.0', '$i146.1']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=160, inst=LOAD_GLOBAL(arg=2, lineno=73)
DEBUG 2023-04-14 17:43:01,680 stack []
DEBUG 2023-04-14 17:43:01,680 dispatch pc=162, inst=LOAD_FAST(arg=6, lineno=73)
DEBUG 2023-04-14 17:43:01,680 stack ['$160load_global.7']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=164, inst=LOAD_CONST(arg=4, lineno=73)
DEBUG 2023-04-14 17:43:01,680 stack ['$160load_global.7', '$i162.8']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=166, inst=BINARY_ADD(arg=None, lineno=73)
DEBUG 2023-04-14 17:43:01,680 stack ['$160load_global.7', '$i162.8', '$const164.9']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=168, inst=LOAD_FAST(arg=1, lineno=73)
DEBUG 2023-04-14 17:43:01,680 stack ['$160load_global.7', '$166binary_add.10']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=170, inst=CALL_FUNCTION(arg=2, lineno=73)
DEBUG 2023-04-14 17:43:01,680 stack ['$160load_global.7', '$166binary_add.10', '$r168.11']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=172, inst=GET_ITER(arg=None, lineno=73)
DEBUG 2023-04-14 17:43:01,680 stack ['$170call_function.12']
DEBUG 2023-04-14 17:43:01,680 end state. edges=[Edge(pc=174, stack=('$172get_iter.13',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,680 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=80 nstack_initial=0), State(pc_initial=174 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,680 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=174 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,680 pending: deque([State(pc_initial=174 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,680 stack: ['$phi174.0']
DEBUG 2023-04-14 17:43:01,680 dispatch pc=174, inst=FOR_ITER(arg=24, lineno=73)
DEBUG 2023-04-14 17:43:01,686 stack ['$phi174.0']
DEBUG 2023-04-14 17:43:01,686 end state. edges=[Edge(pc=200, stack=(), blockstack=(), npush=0), Edge(pc=176, stack=('$phi174.0', '$174for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,686 pending: deque([State(pc_initial=200 nstack_initial=0), State(pc_initial=176 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,686 stack: []
DEBUG 2023-04-14 17:43:01,686 dispatch pc=200, inst=LOAD_CLOSURE(arg=0, lineno=76)
DEBUG 2023-04-14 17:43:01,686 stack []
DEBUG 2023-04-14 17:43:01,686 dispatch pc=202, inst=BUILD_TUPLE(arg=1, lineno=76)
DEBUG 2023-04-14 17:43:01,686 stack ['$200load_closure.0']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=204, inst=LOAD_CONST(arg=6, lineno=76)
DEBUG 2023-04-14 17:43:01,686 stack ['$202build_tuple.1']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=206, inst=LOAD_CONST(arg=3, lineno=76)
DEBUG 2023-04-14 17:43:01,686 stack ['$202build_tuple.1', '$const204.2']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=208, inst=MAKE_FUNCTION(arg=8, lineno=76)
DEBUG 2023-04-14 17:43:01,686 stack ['$202build_tuple.1', '$const204.2', '$const206.3']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=210, inst=LOAD_FAST(arg=3, lineno=76)
DEBUG 2023-04-14 17:43:01,686 stack ['$208make_function.4']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=212, inst=GET_ITER(arg=None, lineno=76)
DEBUG 2023-04-14 17:43:01,686 stack ['$208make_function.4', '$indices210.5']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=214, inst=CALL_FUNCTION(arg=1, lineno=76)
DEBUG 2023-04-14 17:43:01,686 stack ['$208make_function.4', '$212get_iter.6']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=216, inst=STORE_FAST(arg=5, lineno=76)
DEBUG 2023-04-14 17:43:01,686 stack ['$214call_function.7']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=218, inst=LOAD_FAST(arg=5, lineno=77)
DEBUG 2023-04-14 17:43:01,686 stack []
DEBUG 2023-04-14 17:43:01,686 dispatch pc=220, inst=YIELD_VALUE(arg=None, lineno=77)
DEBUG 2023-04-14 17:43:01,686 stack ['$result218.8']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=222, inst=POP_TOP(arg=None, lineno=77)
DEBUG 2023-04-14 17:43:01,686 stack ['$220yield_value.9']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=224, inst=JUMP_ABSOLUTE(arg=80, lineno=77)
DEBUG 2023-04-14 17:43:01,686 stack []
DEBUG 2023-04-14 17:43:01,686 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,686 pending: deque([State(pc_initial=176 nstack_initial=2), State(pc_initial=80 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,686 stack: ['$phi176.0', '$phi176.1']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=176, inst=STORE_FAST(arg=7, lineno=73)
DEBUG 2023-04-14 17:43:01,686 stack ['$phi176.0', '$phi176.1']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=178, inst=LOAD_FAST(arg=3, lineno=74)
DEBUG 2023-04-14 17:43:01,686 stack ['$phi176.0']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=180, inst=LOAD_FAST(arg=7, lineno=74)
DEBUG 2023-04-14 17:43:01,686 stack ['$phi176.0', '$indices178.2']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=182, inst=LOAD_CONST(arg=4, lineno=74)
DEBUG 2023-04-14 17:43:01,686 stack ['$phi176.0', '$indices178.2', '$j180.3']
DEBUG 2023-04-14 17:43:01,686 dispatch pc=184, inst=BINARY_SUBTRACT(arg=None, lineno=74)
DEBUG 2023-04-14 17:43:01,686 stack ['$phi176.0', '$indices178.2', '$j180.3', '$const182.4']
DEBUG 2023-04-14 17:43:01,688 dispatch pc=186, inst=BINARY_SUBSCR(arg=None, lineno=74)
DEBUG 2023-04-14 17:43:01,688 stack ['$phi176.0', '$indices178.2', '$184binary_subtract.5']
DEBUG 2023-04-14 17:43:01,688 dispatch pc=188, inst=LOAD_CONST(arg=4, lineno=74)
DEBUG 2023-04-14 17:43:01,688 stack ['$phi176.0', '$186binary_subscr.6']
DEBUG 2023-04-14 17:43:01,688 dispatch pc=190, inst=BINARY_ADD(arg=None, lineno=74)
DEBUG 2023-04-14 17:43:01,688 stack ['$phi176.0', '$186binary_subscr.6', '$const188.7']
DEBUG 2023-04-14 17:43:01,688 dispatch pc=192, inst=LOAD_FAST(arg=3, lineno=74)
DEBUG 2023-04-14 17:43:01,688 stack ['$phi176.0', '$190binary_add.8']
DEBUG 2023-04-14 17:43:01,688 dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=74)
DEBUG 2023-04-14 17:43:01,688 stack ['$phi176.0', '$190binary_add.8', '$indices192.9']
DEBUG 2023-04-14 17:43:01,688 dispatch pc=196, inst=STORE_SUBSCR(arg=None, lineno=74)
DEBUG 2023-04-14 17:43:01,688 stack ['$phi176.0', '$190binary_add.8', '$indices192.9', '$j194.10']
DEBUG 2023-04-14 17:43:01,688 dispatch pc=198, inst=JUMP_ABSOLUTE(arg=174, lineno=74)
DEBUG 2023-04-14 17:43:01,688 stack ['$phi176.0']
DEBUG 2023-04-14 17:43:01,688 end state. edges=[Edge(pc=174, stack=('$phi176.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,688 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=174 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,688 pending: deque([State(pc_initial=174 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,688 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:01,688 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=1): {'$phi38.0'},
             State(pc_initial=44 nstack_initial=2): set(),
             State(pc_initial=48 nstack_initial=1): {'$phi48.0'},
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=144 nstack_initial=0): set(),
             State(pc_initial=174 nstack_initial=1): {'$phi174.0'},
             State(pc_initial=176 nstack_initial=2): {'$phi176.1'},
             State(pc_initial=200 nstack_initial=0): set(),
             State(pc_initial=226 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:01,688 defmap: {'$phi174.0': State(pc_initial=144 nstack_initial=0),
 '$phi176.1': State(pc_initial=174 nstack_initial=1),
 '$phi38.0': State(pc_initial=26 nstack_initial=0),
 '$phi44.0': State(pc_initial=26 nstack_initial=0),
 '$phi44.1': State(pc_initial=26 nstack_initial=0),
 '$phi48.0': State(pc_initial=0 nstack_initial=0)}
DEBUG 2023-04-14 17:43:01,688 phismap: defaultdict(<class 'set'>,
            {'$phi174.0': {('$172get_iter.13',
                            State(pc_initial=144 nstack_initial=0)),
                           ('$phi176.0',
                            State(pc_initial=176 nstack_initial=2))},
             '$phi176.0': {('$phi174.0',
                            State(pc_initial=174 nstack_initial=1))},
             '$phi176.1': {('$174for_iter.2',
                            State(pc_initial=174 nstack_initial=1))},
             '$phi38.0': {('$30dup_top.2',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.0': {('$30dup_top.2',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.1': {('$34compare_op.3',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi48.0': {('$40compare_op.2',
                           State(pc_initial=38 nstack_initial=1)),
                          ('$n22.8', State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.1', State(pc_initial=44 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:01,688 changing phismap: defaultdict(<class 'set'>,
            {'$phi174.0': {('$172get_iter.13',
                            State(pc_initial=144 nstack_initial=0)),
                           ('$phi174.0',
                            State(pc_initial=174 nstack_initial=1))},
             '$phi176.0': {('$172get_iter.13',
                            State(pc_initial=144 nstack_initial=0))},
             '$phi176.1': {('$174for_iter.2',
                            State(pc_initial=174 nstack_initial=1))},
             '$phi38.0': {('$30dup_top.2',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.0': {('$30dup_top.2',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.1': {('$34compare_op.3',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi48.0': {('$34compare_op.3',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$40compare_op.2',
                           State(pc_initial=38 nstack_initial=1)),
                          ('$n22.8', State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:01,688 changing phismap: defaultdict(<class 'set'>,
            {'$phi174.0': {('$172get_iter.13',
                            State(pc_initial=144 nstack_initial=0))},
             '$phi176.0': {('$172get_iter.13',
                            State(pc_initial=144 nstack_initial=0))},
             '$phi176.1': {('$174for_iter.2',
                            State(pc_initial=174 nstack_initial=1))},
             '$phi38.0': {('$30dup_top.2',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.0': {('$30dup_top.2',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.1': {('$34compare_op.3',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi48.0': {('$34compare_op.3',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$40compare_op.2',
                           State(pc_initial=38 nstack_initial=1)),
                          ('$n22.8', State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:01,690 changing phismap: defaultdict(<class 'set'>,
            {'$phi174.0': {('$172get_iter.13',
                            State(pc_initial=144 nstack_initial=0))},
             '$phi176.0': {('$172get_iter.13',
                            State(pc_initial=144 nstack_initial=0))},
             '$phi176.1': {('$174for_iter.2',
                            State(pc_initial=174 nstack_initial=1))},
             '$phi38.0': {('$30dup_top.2',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.0': {('$30dup_top.2',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi44.1': {('$34compare_op.3',
                           State(pc_initial=26 nstack_initial=0))},
             '$phi48.0': {('$34compare_op.3',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$40compare_op.2',
                           State(pc_initial=38 nstack_initial=1)),
                          ('$n22.8', State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:01,690 keep phismap: {'$phi174.0': {('$172get_iter.13', State(pc_initial=144 nstack_initial=0))},
 '$phi176.1': {('$174for_iter.2', State(pc_initial=174 nstack_initial=1))},
 '$phi38.0': {('$30dup_top.2', State(pc_initial=26 nstack_initial=0))},
 '$phi48.0': {('$34compare_op.3', State(pc_initial=26 nstack_initial=0)),
              ('$40compare_op.2', State(pc_initial=38 nstack_initial=1)),
              ('$n22.8', State(pc_initial=0 nstack_initial=0))}}
DEBUG 2023-04-14 17:43:01,690 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi48.0': '$n22.8'},
             State(pc_initial=26 nstack_initial=0): {'$phi38.0': '$30dup_top.2',
                                                     '$phi48.0': '$34compare_op.3'},
             State(pc_initial=38 nstack_initial=1): {'$phi48.0': '$40compare_op.2'},
             State(pc_initial=144 nstack_initial=0): {'$phi174.0': '$172get_iter.13'},
             State(pc_initial=174 nstack_initial=1): {'$phi176.1': '$174for_iter.2'}})
DEBUG 2023-04-14 17:43:01,690 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$4load_deref.1'}), (6, {'func': '$2load_global.0', 'args': ['$4load_deref.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$r14.5'}), (16, {'func': '$12load_global.4', 'args': ['$r14.5'], 'res': '$16call_function.6'}), (18, {'func': '$10load_global.3', 'args': ['$16call_function.6'], 'res': '$18call_function.7'}), (20, {'value': '$18call_function.7'}), (22, {'res': '$n22.8'}), (24, {'pred': '$n22.8'})), outgoing_phis={'$phi48.0': '$n22.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 48: ('$n22.8',)})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'res': '$r28.1'}), (30, {'orig': ['$r28.1'], 'duped': ['$30dup_top.2']}), (34, {'lhs': '$const26.0', 'rhs': '$r28.1', 'res': '$34compare_op.3'}), (36, {'pred': '$34compare_op.3'})), outgoing_phis={'$phi38.0': '$30dup_top.2', '$phi48.0': '$34compare_op.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: ('$30dup_top.2',), 44: ('$30dup_top.2', '$34compare_op.3')})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=38 nstack_initial=1):
AdaptBlockInfo(insts=((38, {'res': '$n38.1'}), (40, {'lhs': '$phi38.0', 'rhs': '$n38.1', 'res': '$40compare_op.2'}), (42, {})), outgoing_phis={'$phi48.0': '$40compare_op.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$40compare_op.2',)})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=44 nstack_initial=2):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$phi44.1',)})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'value': '$phi48.0', 'res': '$48unary_not.1'}), (50, {'value': '$48unary_not.1'}), (52, {'res': '$empty52.2'}), (54, {'pred': '$empty52.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 80: ()})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$56load_closure.0'}), (58, {'items': ['$56load_closure.0'], 'res': '$58build_tuple.1'}), (60, {'res': '$const60.2'}), (62, {'res': '$const62.3'}), (64, {'name': '$const62.3', 'code': '$const60.2', 'closure': '$58build_tuple.1', 'annotations': None, 'kwdefaults': None, 'defaults': None, 'res': '$64make_function.4'}), (66, {'res': '$indices66.5'}), (68, {'value': '$indices66.5', 'res': '$68get_iter.6'}), (70, {'func': '$64make_function.4', 'args': ['$68get_iter.6'], 'res': '$70call_function.7'}), (72, {'value': '$70call_function.7'}), (74, {'res': '$result74.8'}), (76, {'value': '$result74.8', 'res': '$76yield_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ()})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$empty80.0'}), (82, {'pred': '$empty80.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 226: ()})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$r84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$r84.0', 'rhs': '$const86.1', 'res': '$88binary_subtract.2'}), (90, {'value': '$88binary_subtract.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: ()})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$i92.0'}), (94, {'res': '$const94.1'}), (96, {'lhs': '$i92.0', 'rhs': '$const94.1', 'res': '$96compare_op.2'}), (98, {'pred': '$96compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={100: (), 130: ()})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=((100, {'res': '$indices100.0'}), (102, {'res': '$i102.1'}), (104, {'index': '$i102.1', 'target': '$indices100.0', 'res': '$104binary_subscr.2'}), (106, {'res': '$i106.3'}), (108, {'res': '$n108.4'}), (110, {'lhs': '$i106.3', 'rhs': '$n108.4', 'res': '$110binary_add.5'}), (112, {'res': '$r112.6'}), (114, {'lhs': '$110binary_add.5', 'rhs': '$r112.6', 'res': '$114binary_subtract.7'}), (116, {'lhs': '$104binary_subscr.2', 'rhs': '$114binary_subtract.7', 'res': '$116compare_op.8'}), (118, {'pred': '$116compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: (), 130: ()})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$i120.0'}), (122, {'res': '$const122.1'}), (124, {'lhs': '$i120.0', 'rhs': '$const122.1', 'res': '$124inplace_subtract.2'}), (126, {'value': '$124inplace_subtract.2'}), (128, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: ()})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$i130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$i130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 144: ()})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$const138.0'}), (140, {'value': '$const138.0'}), (142, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ()})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=144 nstack_initial=0):
AdaptBlockInfo(insts=((144, {'res': '$indices144.0'}), (146, {'res': '$i146.1'}), (148, {'orig': ['$indices144.0', '$i146.1'], 'duped': ['$148dup_top_two.2', '$148dup_top_two.3']}), (150, {'index': '$148dup_top_two.3', 'target': '$148dup_top_two.2', 'res': '$150binary_subscr.4'}), (152, {'res': '$const152.5'}), (154, {'lhs': '$150binary_subscr.4', 'rhs': '$const152.5', 'res': '$154inplace_add.6'}), (158, {'target': '$indices144.0', 'index': '$i146.1', 'value': '$154inplace_add.6'}), (160, {'res': '$160load_global.7'}), (162, {'res': '$i162.8'}), (164, {'res': '$const164.9'}), (166, {'lhs': '$i162.8', 'rhs': '$const164.9', 'res': '$166binary_add.10'}), (168, {'res': '$r168.11'}), (170, {'func': '$160load_global.7', 'args': ['$166binary_add.10', '$r168.11'], 'res': '$170call_function.12'}), (172, {'value': '$170call_function.12', 'res': '$172get_iter.13'})), outgoing_phis={'$phi174.0': '$172get_iter.13'}, blockstack=(), active_try_block=None, outgoing_edgepushed={174: ('$172get_iter.13',)})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=174 nstack_initial=1):
AdaptBlockInfo(insts=((174, {'iterator': '$phi174.0', 'pair': '$174for_iter.1', 'indval': '$174for_iter.2', 'pred': '$174for_iter.3'}),), outgoing_phis={'$phi176.1': '$174for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: (), 176: ('$phi174.0', '$174for_iter.2')})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=176 nstack_initial=2):
AdaptBlockInfo(insts=((176, {'value': '$phi176.1'}), (178, {'res': '$indices178.2'}), (180, {'res': '$j180.3'}), (182, {'res': '$const182.4'}), (184, {'lhs': '$j180.3', 'rhs': '$const182.4', 'res': '$184binary_subtract.5'}), (186, {'index': '$184binary_subtract.5', 'target': '$indices178.2', 'res': '$186binary_subscr.6'}), (188, {'res': '$const188.7'}), (190, {'lhs': '$186binary_subscr.6', 'rhs': '$const188.7', 'res': '$190binary_add.8'}), (192, {'res': '$indices192.9'}), (194, {'res': '$j194.10'}), (196, {'target': '$indices192.9', 'index': '$j194.10', 'value': '$190binary_add.8'}), (198, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={174: ('$phi176.0',)})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=200 nstack_initial=0):
AdaptBlockInfo(insts=((200, {'res': '$200load_closure.0'}), (202, {'items': ['$200load_closure.0'], 'res': '$202build_tuple.1'}), (204, {'res': '$const204.2'}), (206, {'res': '$const206.3'}), (208, {'name': '$const206.3', 'code': '$const204.2', 'closure': '$202build_tuple.1', 'annotations': None, 'kwdefaults': None, 'defaults': None, 'res': '$208make_function.4'}), (210, {'res': '$indices210.5'}), (212, {'value': '$indices210.5', 'res': '$212get_iter.6'}), (214, {'func': '$208make_function.4', 'args': ['$212get_iter.6'], 'res': '$214call_function.7'}), (216, {'value': '$214call_function.7'}), (218, {'res': '$result218.8'}), (220, {'value': '$result218.8', 'res': '$220yield_value.9'}), (224, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ()})
DEBUG 2023-04-14 17:43:01,690 block_infos State(pc_initial=226 nstack_initial=0):
AdaptBlockInfo(insts=((226, {'res': '$const226.0'}), (228, {'retval': '$const226.0', 'castval': '$228return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:01,695 label 0:
    pool = arg(0, name=pool)                 ['pool']
    r = arg(1, name=r)                       ['r']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(pool, func=$2load_global.0, args=[Var(pool, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'n', 'pool']
    $10load_global.3 = global(list: <class 'list'>) ['$10load_global.3']
    $12load_global.4 = global(range: <class 'range'>) ['$12load_global.4']
    $16call_function.6 = call $12load_global.4(r, func=$12load_global.4, args=[Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.4', '$16call_function.6', 'r']
    indices = call $10load_global.3($16call_function.6, func=$10load_global.3, args=[Var($16call_function.6, _torontonian.py:58)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$16call_function.6', 'indices']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24(n, func=bool24, args=(Var(n, _torontonian.py:57),), kws=(), vararg=None, varkwarg=None, target=None) ['$24pred', 'bool24', 'n']
    $phi48.0 = n                             ['$phi48.0', 'n']
    branch $24pred, 26, 48                   ['$24pred']
label 26:
    $const26.0 = const(int, 0)               ['$const26.0']
    $34compare_op.3 = $const26.0 < r         ['$34compare_op.3', '$const26.0', 'r']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($34compare_op.3, func=bool36, args=(Var($34compare_op.3, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None) ['$34compare_op.3', '$36pred', 'bool36']
    $phi38.0 = r                             ['$phi38.0', 'r']
    $phi48.0 = $34compare_op.3               ['$34compare_op.3', '$phi48.0']
    branch $36pred, 38, 44                   ['$36pred']
label 38:
    $40compare_op.2 = $phi38.0 <= n          ['$40compare_op.2', '$phi38.0', 'n']
    $phi48.0 = $40compare_op.2               ['$40compare_op.2', '$phi48.0']
    jump 48                                  []
label 44:
    jump 48                                  []
label 48:
    empty = unary(fn=<built-in function not_>, value=$phi48.0) ['$phi48.0', 'empty']
    bool54 = global(bool: <class 'bool'>)    ['bool54']
    $54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None) ['$54pred', 'bool54', 'empty']
    branch $54pred, 80, 56                   ['$54pred']
label 56:
    $58build_tuple.1 = build_tuple(items=[Var(pool, _torontonian.py:57)]) ['$58build_tuple.1', 'pool']
    $const60.2 = const(code, <code object <listcomp> at 0x000002660843D920, file "C:\Users\em1120\Anaconda3\lib\site-packages\thewalrus\_torontonian.py", line 62>) ['$const60.2']
    $const62.3 = const(str, combinations.<locals>.<listcomp>) ['$const62.3']
    $64make_function.4 = make_function(name=$const62.3, code=<code object <listcomp> at 0x000002660843D920, file "C:\Users\em1120\Anaconda3\lib\site-packages\thewalrus\_torontonian.py", line 62>, closure=$58build_tuple.1, defaults=None) ['$58build_tuple.1', '$64make_function.4', '$const62.3']
    $68get_iter.6 = getiter(value=indices)   ['$68get_iter.6', 'indices']
    result = call $64make_function.4($68get_iter.6, func=$64make_function.4, args=[Var($68get_iter.6, _torontonian.py:62)], kws=(), vararg=None, varkwarg=None, target=None) ['$64make_function.4', '$68get_iter.6', 'result']
    $76yield_value.9 = yield result          ['$76yield_value.9', 'result']
    jump 80                                  []
label 80:
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82(empty, func=bool82, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None) ['$82pred', 'bool82', 'empty']
    branch $82pred, 226, 84                  ['$82pred']
label 84:
    $const86.1 = const(int, 1)               ['$const86.1']
    i = r - $const86.1                       ['$const86.1', 'i', 'r']
    jump 92                                  []
label 92:
    $const94.1 = const(int, 0)               ['$const94.1']
    $96compare_op.2 = i >= $const94.1        ['$96compare_op.2', '$const94.1', 'i']
    bool98 = global(bool: <class 'bool'>)    ['bool98']
    $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None) ['$96compare_op.2', '$98pred', 'bool98']
    branch $98pred, 100, 130                 ['$98pred']
label 100:
    $104binary_subscr.2 = getitem(value=indices, index=i, fn=<built-in function getitem>) ['$104binary_subscr.2', 'i', 'indices']
    $110binary_add.5 = i + n                 ['$110binary_add.5', 'i', 'n']
    $114binary_subtract.7 = $110binary_add.5 - r ['$110binary_add.5', '$114binary_subtract.7', 'r']
    $116compare_op.8 = $104binary_subscr.2 == $114binary_subtract.7 ['$104binary_subscr.2', '$114binary_subtract.7', '$116compare_op.8']
    bool118 = global(bool: <class 'bool'>)   ['bool118']
    $118pred = call bool118($116compare_op.8, func=bool118, args=(Var($116compare_op.8, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None) ['$116compare_op.8', '$118pred', 'bool118']
    branch $118pred, 120, 130                ['$118pred']
label 120:
    $const122.1 = const(int, 1)              ['$const122.1']
    $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined) ['$124inplace_subtract.2', '$const122.1', 'i']
    i = $124inplace_subtract.2               ['$124inplace_subtract.2', 'i']
    jump 92                                  []
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = i < $const132.1       ['$134compare_op.2', '$const132.1', 'i']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, _torontonian.py:69),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 144                ['$136pred']
label 138:
    empty = const(bool, True)                ['empty']
    jump 80                                  []
label 144:
    $150binary_subscr.4 = getitem(value=indices, index=i, fn=<built-in function getitem>) ['$150binary_subscr.4', 'i', 'indices']
    $const152.5 = const(int, 1)              ['$const152.5']
    $154inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.4, rhs=$const152.5, static_lhs=Undefined, static_rhs=Undefined) ['$150binary_subscr.4', '$154inplace_add.6', '$const152.5']
    indices[i] = $154inplace_add.6           ['$154inplace_add.6', 'i', 'indices']
    $160load_global.7 = global(range: <class 'range'>) ['$160load_global.7']
    $const164.9 = const(int, 1)              ['$const164.9']
    $166binary_add.10 = i + $const164.9      ['$166binary_add.10', '$const164.9', 'i']
    $170call_function.12 = call $160load_global.7($166binary_add.10, r, func=$160load_global.7, args=[Var($166binary_add.10, _torontonian.py:73), Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.7', '$166binary_add.10', '$170call_function.12', 'r']
    $172get_iter.13 = getiter(value=$170call_function.12) ['$170call_function.12', '$172get_iter.13']
    $phi174.0 = $172get_iter.13              ['$172get_iter.13', '$phi174.0']
    jump 174                                 []
label 174:
    $174for_iter.1 = iternext(value=$phi174.0) ['$174for_iter.1', '$phi174.0']
    $174for_iter.2 = pair_first(value=$174for_iter.1) ['$174for_iter.1', '$174for_iter.2']
    $174for_iter.3 = pair_second(value=$174for_iter.1) ['$174for_iter.1', '$174for_iter.3']
    $phi176.1 = $174for_iter.2               ['$174for_iter.2', '$phi176.1']
    branch $174for_iter.3, 176, 200          ['$174for_iter.3']
label 176:
    j = $phi176.1                            ['$phi176.1', 'j']
    $const182.4 = const(int, 1)              ['$const182.4']
    $184binary_subtract.5 = j - $const182.4  ['$184binary_subtract.5', '$const182.4', 'j']
    $186binary_subscr.6 = getitem(value=indices, index=$184binary_subtract.5, fn=<built-in function getitem>) ['$184binary_subtract.5', '$186binary_subscr.6', 'indices']
    $const188.7 = const(int, 1)              ['$const188.7']
    $190binary_add.8 = $186binary_subscr.6 + $const188.7 ['$186binary_subscr.6', '$190binary_add.8', '$const188.7']
    indices[j] = $190binary_add.8            ['$190binary_add.8', 'indices', 'j']
    jump 174                                 []
label 200:
    $202build_tuple.1 = build_tuple(items=[Var(pool, _torontonian.py:57)]) ['$202build_tuple.1', 'pool']
    $const204.2 = const(code, <code object <listcomp> at 0x000002660843D9D0, file "C:\Users\em1120\Anaconda3\lib\site-packages\thewalrus\_torontonian.py", line 76>) ['$const204.2']
    $const206.3 = const(str, combinations.<locals>.<listcomp>) ['$const206.3']
    $208make_function.4 = make_function(name=$const206.3, code=<code object <listcomp> at 0x000002660843D9D0, file "C:\Users\em1120\Anaconda3\lib\site-packages\thewalrus\_torontonian.py", line 76>, closure=$202build_tuple.1, defaults=None) ['$202build_tuple.1', '$208make_function.4', '$const206.3']
    $212get_iter.6 = getiter(value=indices)  ['$212get_iter.6', 'indices']
    result = call $208make_function.4($212get_iter.6, func=$208make_function.4, args=[Var($212get_iter.6, _torontonian.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$208make_function.4', '$212get_iter.6', 'result']
    $220yield_value.9 = yield result         ['$220yield_value.9', 'result']
    jump 80                                  []
label 226:
    $const226.0 = const(NoneType, None)      ['$const226.0']
    $228return_value.1 = cast(value=$const226.0) ['$228return_value.1', '$const226.0']
    return $228return_value.1                ['$228return_value.1']

DEBUG 2023-04-14 17:43:01,700 bytecode dump:
>          0	NOP(arg=None, lineno=76)
           2	BUILD_LIST(arg=0, lineno=76)
           4	LOAD_FAST(arg=0, lineno=76)
>          6	FOR_ITER(arg=12, lineno=76)
           8	STORE_FAST(arg=1, lineno=76)
          10	LOAD_DEREF(arg=0, lineno=76)
          12	LOAD_FAST(arg=1, lineno=76)
          14	BINARY_SUBSCR(arg=None, lineno=76)
          16	LIST_APPEND(arg=2, lineno=76)
          18	JUMP_ABSOLUTE(arg=6, lineno=76)
>         20	RETURN_VALUE(arg=None, lineno=76)
DEBUG 2023-04-14 17:43:01,700 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,700 stack: []
DEBUG 2023-04-14 17:43:01,700 dispatch pc=0, inst=NOP(arg=None, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack []
DEBUG 2023-04-14 17:43:01,700 dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack []
DEBUG 2023-04-14 17:43:01,700 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack ['$2build_list.0']
DEBUG 2023-04-14 17:43:01,700 end state. edges=[Edge(pc=6, stack=('$2build_list.0', '$.04.1'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,700 pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,700 stack: ['$phi6.0', '$phi6.1']
DEBUG 2023-04-14 17:43:01,700 dispatch pc=6, inst=FOR_ITER(arg=12, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack ['$phi6.0', '$phi6.1']
DEBUG 2023-04-14 17:43:01,700 end state. edges=[Edge(pc=20, stack=('$phi6.0',), blockstack=(), npush=0), Edge(pc=8, stack=('$phi6.0', '$phi6.1', '$6for_iter.3'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,700 pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=8 nstack_initial=3)])
DEBUG 2023-04-14 17:43:01,700 stack: ['$phi20.0']
DEBUG 2023-04-14 17:43:01,700 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack ['$phi20.0']
DEBUG 2023-04-14 17:43:01,700 end state. edges=[]
DEBUG 2023-04-14 17:43:01,700 pending: deque([State(pc_initial=8 nstack_initial=3)])
DEBUG 2023-04-14 17:43:01,700 stack: ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG 2023-04-14 17:43:01,700 dispatch pc=8, inst=STORE_FAST(arg=1, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG 2023-04-14 17:43:01,700 dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack ['$phi8.0', '$phi8.1']
DEBUG 2023-04-14 17:43:01,700 dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack ['$phi8.0', '$phi8.1', '$10load_deref.3']
DEBUG 2023-04-14 17:43:01,700 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack ['$phi8.0', '$phi8.1', '$10load_deref.3', '$i12.4']
DEBUG 2023-04-14 17:43:01,700 dispatch pc=16, inst=LIST_APPEND(arg=2, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5']
DEBUG 2023-04-14 17:43:01,700 dispatch pc=18, inst=JUMP_ABSOLUTE(arg=6, lineno=76)
DEBUG 2023-04-14 17:43:01,700 stack ['$phi8.0', '$phi8.1']
DEBUG 2023-04-14 17:43:01,700 end state. edges=[Edge(pc=6, stack=('$phi8.0', '$phi8.1'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,700 pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,700 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:01,700 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=2): {'$phi6.1'},
             State(pc_initial=8 nstack_initial=3): {'$phi8.0', '$phi8.2'},
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'}})
DEBUG 2023-04-14 17:43:01,700 defmap: {'$phi6.0': State(pc_initial=0 nstack_initial=0),
 '$phi6.1': State(pc_initial=0 nstack_initial=0),
 '$phi8.2': State(pc_initial=6 nstack_initial=2)}
DEBUG 2023-04-14 17:43:01,700 phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.1', State(pc_initial=8 nstack_initial=3))},
             '$phi8.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi8.1': {('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:01,700 changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:01,700 changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:01,705 changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:01,705 keep phismap: {'$phi20.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
 '$phi8.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi8.2': {('$6for_iter.3', State(pc_initial=6 nstack_initial=2))}}
DEBUG 2023-04-14 17:43:01,705 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi20.0': '$2build_list.0',
                                                    '$phi6.1': '$.04.1',
                                                    '$phi8.0': '$2build_list.0'},
             State(pc_initial=6 nstack_initial=2): {'$phi8.2': '$6for_iter.3'}})
DEBUG 2023-04-14 17:43:01,705 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:01,705 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'res': '$.04.1'})), outgoing_phis={'$phi20.0': '$2build_list.0', '$phi8.0': '$2build_list.0', '$phi6.1': '$.04.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$2build_list.0', '$.04.1')})
DEBUG 2023-04-14 17:43:01,705 block_infos State(pc_initial=6 nstack_initial=2):
AdaptBlockInfo(insts=((6, {'iterator': '$phi6.1', 'pair': '$6for_iter.2', 'indval': '$6for_iter.3', 'pred': '$6for_iter.4'}),), outgoing_phis={'$phi8.2': '$6for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$phi6.0',), 8: ('$phi6.0', '$phi6.1', '$6for_iter.3')})
DEBUG 2023-04-14 17:43:01,705 block_infos State(pc_initial=8 nstack_initial=3):
AdaptBlockInfo(insts=((8, {'value': '$phi8.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$i12.4'}), (14, {'index': '$i12.4', 'target': '$10load_deref.3', 'res': '$14binary_subscr.5'}), (16, {'target': '$phi8.0', 'value': '$14binary_subscr.5', 'appendvar': '$16list_append.6', 'res': '$16list_append.7'}), (18, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$phi8.0', '$phi8.1')})
DEBUG 2023-04-14 17:43:01,705 block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'retval': '$phi20.0', 'castval': '$20return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:01,705 label 0:
    implicit0 = arg(0, name=implicit0)       ['implicit0']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    $phi20.0 = $2build_list.0                ['$2build_list.0', '$phi20.0']
    $phi8.0 = $2build_list.0                 ['$2build_list.0', '$phi8.0']
    $phi6.1 = implicit0                      ['$phi6.1', 'implicit0']
    jump 6                                   []
label 6:
    $6for_iter.2 = iternext(value=$phi6.1)   ['$6for_iter.2', '$phi6.1']
    $6for_iter.3 = pair_first(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.3']
    $6for_iter.4 = pair_second(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.4']
    $phi8.2 = $6for_iter.3                   ['$6for_iter.3', '$phi8.2']
    branch $6for_iter.4, 8, 20               ['$6for_iter.4']
label 8:
    i = $phi8.2                              ['$phi8.2', 'i']
    $10load_deref.3 = freevar(pool: None)    ['$10load_deref.3']
    $14binary_subscr.5 = getitem(value=$10load_deref.3, index=i, fn=<built-in function getitem>) ['$10load_deref.3', '$14binary_subscr.5', 'i']
    $16list_append.6 = getattr(value=$phi8.0, attr=append) ['$16list_append.6', '$phi8.0']
    $16list_append.7 = call $16list_append.6($14binary_subscr.5, func=$16list_append.6, args=(Var($14binary_subscr.5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None) ['$14binary_subscr.5', '$16list_append.6', '$16list_append.7']
    jump 6                                   []
label 20:
    $20return_value.1 = cast(value=$phi20.0) ['$20return_value.1', '$phi20.0']
    return $20return_value.1                 ['$20return_value.1']

DEBUG 2023-04-14 17:43:01,710 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:01,711 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619432AC0>
DEBUG 2023-04-14 17:43:01,711 on stmt: implicit0 = arg(0, name=implicit0)
DEBUG 2023-04-14 17:43:01,711 on stmt: $2build_list.0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,711 on stmt: $phi20.0 = $2build_list.0
DEBUG 2023-04-14 17:43:01,711 on stmt: $phi8.0 = $2build_list.0
DEBUG 2023-04-14 17:43:01,711 on stmt: $phi6.1 = implicit0
DEBUG 2023-04-14 17:43:01,711 on stmt: jump 6
DEBUG 2023-04-14 17:43:01,711 ==== SSA block analysis pass on 6
DEBUG 2023-04-14 17:43:01,711 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619432AC0>
DEBUG 2023-04-14 17:43:01,711 on stmt: $6for_iter.2 = iternext(value=$phi6.1)
DEBUG 2023-04-14 17:43:01,711 on stmt: $6for_iter.3 = pair_first(value=$6for_iter.2)
DEBUG 2023-04-14 17:43:01,711 on stmt: $6for_iter.4 = pair_second(value=$6for_iter.2)
DEBUG 2023-04-14 17:43:01,711 on stmt: $phi8.2 = $6for_iter.3
DEBUG 2023-04-14 17:43:01,711 on stmt: branch $6for_iter.4, 8, 20
DEBUG 2023-04-14 17:43:01,711 ==== SSA block analysis pass on 8
DEBUG 2023-04-14 17:43:01,711 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619432AC0>
DEBUG 2023-04-14 17:43:01,711 on stmt: i = $phi8.2
DEBUG 2023-04-14 17:43:01,711 on stmt: $10load_deref.3 = freevar(pool: None)
DEBUG 2023-04-14 17:43:01,711 on stmt: $14binary_subscr.5 = getitem(value=$10load_deref.3, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,711 on stmt: $16list_append.6 = getattr(value=$phi8.0, attr=append)
DEBUG 2023-04-14 17:43:01,711 on stmt: $16list_append.7 = call $16list_append.6($14binary_subscr.5, func=$16list_append.6, args=(Var($14binary_subscr.5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,711 on stmt: jump 6
DEBUG 2023-04-14 17:43:01,711 ==== SSA block analysis pass on 20
DEBUG 2023-04-14 17:43:01,711 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619432AC0>
DEBUG 2023-04-14 17:43:01,711 on stmt: $20return_value.1 = cast(value=$phi20.0)
DEBUG 2023-04-14 17:43:01,711 on stmt: return $20return_value.1
DEBUG 2023-04-14 17:43:01,711 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x0000026619423880>],
             '$14binary_subscr.5': [<numba.core.ir.Assign object at 0x0000026619423B50>],
             '$16list_append.6': [<numba.core.ir.Assign object at 0x0000026619423CD0>],
             '$16list_append.7': [<numba.core.ir.Assign object at 0x0000026619423DF0>],
             '$20return_value.1': [<numba.core.ir.Assign object at 0x000002661942D0A0>],
             '$2build_list.0': [<numba.core.ir.Assign object at 0x0000026619424C10>],
             '$6for_iter.2': [<numba.core.ir.Assign object at 0x00000266194231F0>],
             '$6for_iter.3': [<numba.core.ir.Assign object at 0x0000026619423310>],
             '$6for_iter.4': [<numba.core.ir.Assign object at 0x0000026619423430>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x0000026619424D90>],
             '$phi6.1': [<numba.core.ir.Assign object at 0x0000026619424EB0>],
             '$phi8.0': [<numba.core.ir.Assign object at 0x0000026619424DF0>],
             '$phi8.2': [<numba.core.ir.Assign object at 0x0000026619423130>],
             'i': [<numba.core.ir.Assign object at 0x0000026619423700>],
             'implicit0': [<numba.core.ir.Assign object at 0x0000026619424A60>]})
DEBUG 2023-04-14 17:43:01,711 SSA violators set()
DEBUG 2023-04-14 17:43:01,711 bytecode dump:
>          0	NOP(arg=None, lineno=62)
           2	BUILD_LIST(arg=0, lineno=62)
           4	LOAD_FAST(arg=0, lineno=62)
>          6	FOR_ITER(arg=12, lineno=62)
           8	STORE_FAST(arg=1, lineno=62)
          10	LOAD_DEREF(arg=0, lineno=62)
          12	LOAD_FAST(arg=1, lineno=62)
          14	BINARY_SUBSCR(arg=None, lineno=62)
          16	LIST_APPEND(arg=2, lineno=62)
          18	JUMP_ABSOLUTE(arg=6, lineno=62)
>         20	RETURN_VALUE(arg=None, lineno=62)
DEBUG 2023-04-14 17:43:01,711 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,711 stack: []
DEBUG 2023-04-14 17:43:01,711 dispatch pc=0, inst=NOP(arg=None, lineno=62)
DEBUG 2023-04-14 17:43:01,711 stack []
DEBUG 2023-04-14 17:43:01,711 dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=62)
DEBUG 2023-04-14 17:43:01,711 stack []
DEBUG 2023-04-14 17:43:01,711 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=62)
DEBUG 2023-04-14 17:43:01,711 stack ['$2build_list.0']
DEBUG 2023-04-14 17:43:01,711 end state. edges=[Edge(pc=6, stack=('$2build_list.0', '$.04.1'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,711 pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,711 stack: ['$phi6.0', '$phi6.1']
DEBUG 2023-04-14 17:43:01,711 dispatch pc=6, inst=FOR_ITER(arg=12, lineno=62)
DEBUG 2023-04-14 17:43:01,711 stack ['$phi6.0', '$phi6.1']
DEBUG 2023-04-14 17:43:01,711 end state. edges=[Edge(pc=20, stack=('$phi6.0',), blockstack=(), npush=0), Edge(pc=8, stack=('$phi6.0', '$phi6.1', '$6for_iter.3'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,711 pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=8 nstack_initial=3)])
DEBUG 2023-04-14 17:43:01,711 stack: ['$phi20.0']
DEBUG 2023-04-14 17:43:01,711 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=62)
DEBUG 2023-04-14 17:43:01,711 stack ['$phi20.0']
DEBUG 2023-04-14 17:43:01,711 end state. edges=[]
DEBUG 2023-04-14 17:43:01,711 pending: deque([State(pc_initial=8 nstack_initial=3)])
DEBUG 2023-04-14 17:43:01,711 stack: ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG 2023-04-14 17:43:01,711 dispatch pc=8, inst=STORE_FAST(arg=1, lineno=62)
DEBUG 2023-04-14 17:43:01,711 stack ['$phi8.0', '$phi8.1', '$phi8.2']
DEBUG 2023-04-14 17:43:01,711 dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=62)
DEBUG 2023-04-14 17:43:01,711 stack ['$phi8.0', '$phi8.1']
DEBUG 2023-04-14 17:43:01,711 dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=62)
DEBUG 2023-04-14 17:43:01,711 stack ['$phi8.0', '$phi8.1', '$10load_deref.3']
DEBUG 2023-04-14 17:43:01,716 dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=62)
DEBUG 2023-04-14 17:43:01,716 stack ['$phi8.0', '$phi8.1', '$10load_deref.3', '$i12.4']
DEBUG 2023-04-14 17:43:01,716 dispatch pc=16, inst=LIST_APPEND(arg=2, lineno=62)
DEBUG 2023-04-14 17:43:01,716 stack ['$phi8.0', '$phi8.1', '$14binary_subscr.5']
DEBUG 2023-04-14 17:43:01,716 dispatch pc=18, inst=JUMP_ABSOLUTE(arg=6, lineno=62)
DEBUG 2023-04-14 17:43:01,716 stack ['$phi8.0', '$phi8.1']
DEBUG 2023-04-14 17:43:01,716 end state. edges=[Edge(pc=6, stack=('$phi8.0', '$phi8.1'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,716 pending: deque([State(pc_initial=6 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,716 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:01,716 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=2): {'$phi6.1'},
             State(pc_initial=8 nstack_initial=3): {'$phi8.0', '$phi8.2'},
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'}})
DEBUG 2023-04-14 17:43:01,716 defmap: {'$phi6.0': State(pc_initial=0 nstack_initial=0),
 '$phi6.1': State(pc_initial=0 nstack_initial=0),
 '$phi8.2': State(pc_initial=6 nstack_initial=2)}
DEBUG 2023-04-14 17:43:01,716 phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi8.1', State(pc_initial=8 nstack_initial=3))},
             '$phi8.0': {('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi8.1': {('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:01,716 changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi8.0', State(pc_initial=8 nstack_initial=3))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.0', State(pc_initial=6 nstack_initial=2))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0)),
                         ('$phi6.1', State(pc_initial=6 nstack_initial=2))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:01,716 changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:01,716 changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$2build_list.0',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi6.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.0': {('$2build_list.0',
                          State(pc_initial=0 nstack_initial=0))},
             '$phi8.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
             '$phi8.2': {('$6for_iter.3',
                          State(pc_initial=6 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:01,716 keep phismap: {'$phi20.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi6.1': {('$.04.1', State(pc_initial=0 nstack_initial=0))},
 '$phi8.0': {('$2build_list.0', State(pc_initial=0 nstack_initial=0))},
 '$phi8.2': {('$6for_iter.3', State(pc_initial=6 nstack_initial=2))}}
DEBUG 2023-04-14 17:43:01,716 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi20.0': '$2build_list.0',
                                                    '$phi6.1': '$.04.1',
                                                    '$phi8.0': '$2build_list.0'},
             State(pc_initial=6 nstack_initial=2): {'$phi8.2': '$6for_iter.3'}})
DEBUG 2023-04-14 17:43:01,716 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:01,716 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'res': '$.04.1'})), outgoing_phis={'$phi20.0': '$2build_list.0', '$phi8.0': '$2build_list.0', '$phi6.1': '$.04.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$2build_list.0', '$.04.1')})
DEBUG 2023-04-14 17:43:01,716 block_infos State(pc_initial=6 nstack_initial=2):
AdaptBlockInfo(insts=((6, {'iterator': '$phi6.1', 'pair': '$6for_iter.2', 'indval': '$6for_iter.3', 'pred': '$6for_iter.4'}),), outgoing_phis={'$phi8.2': '$6for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$phi6.0',), 8: ('$phi6.0', '$phi6.1', '$6for_iter.3')})
DEBUG 2023-04-14 17:43:01,716 block_infos State(pc_initial=8 nstack_initial=3):
AdaptBlockInfo(insts=((8, {'value': '$phi8.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$i12.4'}), (14, {'index': '$i12.4', 'target': '$10load_deref.3', 'res': '$14binary_subscr.5'}), (16, {'target': '$phi8.0', 'value': '$14binary_subscr.5', 'appendvar': '$16list_append.6', 'res': '$16list_append.7'}), (18, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ('$phi8.0', '$phi8.1')})
DEBUG 2023-04-14 17:43:01,716 block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'retval': '$phi20.0', 'castval': '$20return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:01,716 label 0:
    implicit0 = arg(0, name=implicit0)       ['implicit0']
    $2build_list.0 = build_list(items=[])    ['$2build_list.0']
    $phi20.0 = $2build_list.0                ['$2build_list.0', '$phi20.0']
    $phi8.0 = $2build_list.0                 ['$2build_list.0', '$phi8.0']
    $phi6.1 = implicit0                      ['$phi6.1', 'implicit0']
    jump 6                                   []
label 6:
    $6for_iter.2 = iternext(value=$phi6.1)   ['$6for_iter.2', '$phi6.1']
    $6for_iter.3 = pair_first(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.3']
    $6for_iter.4 = pair_second(value=$6for_iter.2) ['$6for_iter.2', '$6for_iter.4']
    $phi8.2 = $6for_iter.3                   ['$6for_iter.3', '$phi8.2']
    branch $6for_iter.4, 8, 20               ['$6for_iter.4']
label 8:
    i = $phi8.2                              ['$phi8.2', 'i']
    $10load_deref.3 = freevar(pool: None)    ['$10load_deref.3']
    $14binary_subscr.5 = getitem(value=$10load_deref.3, index=i, fn=<built-in function getitem>) ['$10load_deref.3', '$14binary_subscr.5', 'i']
    $16list_append.6 = getattr(value=$phi8.0, attr=append) ['$16list_append.6', '$phi8.0']
    $16list_append.7 = call $16list_append.6($14binary_subscr.5, func=$16list_append.6, args=(Var($14binary_subscr.5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None) ['$14binary_subscr.5', '$16list_append.6', '$16list_append.7']
    jump 6                                   []
label 20:
    $20return_value.1 = cast(value=$phi20.0) ['$20return_value.1', '$phi20.0']
    return $20return_value.1                 ['$20return_value.1']

DEBUG 2023-04-14 17:43:01,719 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:01,719 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266194246A0>
DEBUG 2023-04-14 17:43:01,719 on stmt: implicit0 = arg(0, name=implicit0)
DEBUG 2023-04-14 17:43:01,719 on stmt: $2build_list.0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,719 on stmt: $phi20.0 = $2build_list.0
DEBUG 2023-04-14 17:43:01,721 on stmt: $phi8.0 = $2build_list.0
DEBUG 2023-04-14 17:43:01,721 on stmt: $phi6.1 = implicit0
DEBUG 2023-04-14 17:43:01,721 on stmt: jump 6
DEBUG 2023-04-14 17:43:01,721 ==== SSA block analysis pass on 6
DEBUG 2023-04-14 17:43:01,721 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266194246A0>
DEBUG 2023-04-14 17:43:01,721 on stmt: $6for_iter.2 = iternext(value=$phi6.1)
DEBUG 2023-04-14 17:43:01,721 on stmt: $6for_iter.3 = pair_first(value=$6for_iter.2)
DEBUG 2023-04-14 17:43:01,721 on stmt: $6for_iter.4 = pair_second(value=$6for_iter.2)
DEBUG 2023-04-14 17:43:01,721 on stmt: $phi8.2 = $6for_iter.3
DEBUG 2023-04-14 17:43:01,721 on stmt: branch $6for_iter.4, 8, 20
DEBUG 2023-04-14 17:43:01,721 ==== SSA block analysis pass on 8
DEBUG 2023-04-14 17:43:01,721 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266194246A0>
DEBUG 2023-04-14 17:43:01,721 on stmt: i = $phi8.2
DEBUG 2023-04-14 17:43:01,721 on stmt: $10load_deref.3 = freevar(pool: None)
DEBUG 2023-04-14 17:43:01,721 on stmt: $14binary_subscr.5 = getitem(value=$10load_deref.3, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,721 on stmt: $16list_append.6 = getattr(value=$phi8.0, attr=append)
DEBUG 2023-04-14 17:43:01,721 on stmt: $16list_append.7 = call $16list_append.6($14binary_subscr.5, func=$16list_append.6, args=(Var($14binary_subscr.5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,721 on stmt: jump 6
DEBUG 2023-04-14 17:43:01,721 ==== SSA block analysis pass on 20
DEBUG 2023-04-14 17:43:01,721 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266194246A0>
DEBUG 2023-04-14 17:43:01,721 on stmt: $20return_value.1 = cast(value=$phi20.0)
DEBUG 2023-04-14 17:43:01,721 on stmt: return $20return_value.1
DEBUG 2023-04-14 17:43:01,721 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x000002661943C370>],
             '$14binary_subscr.5': [<numba.core.ir.Assign object at 0x000002661943C640>],
             '$16list_append.6': [<numba.core.ir.Assign object at 0x000002661943C7C0>],
             '$16list_append.7': [<numba.core.ir.Assign object at 0x000002661943C8E0>],
             '$20return_value.1': [<numba.core.ir.Assign object at 0x000002661943CB50>],
             '$2build_list.0': [<numba.core.ir.Assign object at 0x0000026619438700>],
             '$6for_iter.2': [<numba.core.ir.Assign object at 0x0000026619438CA0>],
             '$6for_iter.3': [<numba.core.ir.Assign object at 0x0000026619438DC0>],
             '$6for_iter.4': [<numba.core.ir.Assign object at 0x0000026619438EE0>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x0000026619438880>],
             '$phi6.1': [<numba.core.ir.Assign object at 0x00000266194389A0>],
             '$phi8.0': [<numba.core.ir.Assign object at 0x00000266194388E0>],
             '$phi8.2': [<numba.core.ir.Assign object at 0x0000026619438BE0>],
             'i': [<numba.core.ir.Assign object at 0x000002661943C1F0>],
             'implicit0': [<numba.core.ir.Assign object at 0x0000026619438550>]})
DEBUG 2023-04-14 17:43:01,721 SSA violators set()
DEBUG 2023-04-14 17:43:01,750 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:01,750 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,750 on stmt: pool = arg(0, name=pool)
DEBUG 2023-04-14 17:43:01,750 on stmt: r = arg(1, name=r)
DEBUG 2023-04-14 17:43:01,750 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,750 on stmt: n = call $2load_global.0(pool, func=$2load_global.0, args=[Var(pool, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,750 on stmt: $10load_global.3 = global(list: <class 'list'>)
DEBUG 2023-04-14 17:43:01,750 on stmt: $12load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,750 on stmt: $16call_function.6 = call $12load_global.4(r, func=$12load_global.4, args=[Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,750 on stmt: indices = call $10load_global.3($16call_function.6, func=$10load_global.3, args=[Var($16call_function.6, _torontonian.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,750 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,750 on stmt: $24pred = call bool24(n, func=bool24, args=(Var(n, _torontonian.py:57),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,750 on stmt: $phi48.0 = n
DEBUG 2023-04-14 17:43:01,750 on stmt: branch $24pred, 26, 48
DEBUG 2023-04-14 17:43:01,750 ==== SSA block analysis pass on 26
DEBUG 2023-04-14 17:43:01,750 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,750 on stmt: $const26.0 = const(int, 0)
DEBUG 2023-04-14 17:43:01,750 on stmt: $34compare_op.3 = $const26.0 < r
DEBUG 2023-04-14 17:43:01,750 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,750 on stmt: $36pred = call bool36($34compare_op.3, func=bool36, args=(Var($34compare_op.3, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,752 on stmt: $phi38.0 = r
DEBUG 2023-04-14 17:43:01,752 on stmt: $phi48.0 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,752 on stmt: branch $36pred, 38, 44
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 38
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: $40compare_op.2 = $phi38.0 <= n
DEBUG 2023-04-14 17:43:01,752 on stmt: $phi48.0 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,752 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 44
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 48
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,752 on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,752 on stmt: $54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,752 on stmt: branch $54pred, 100, 56
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 56
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: $68get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,752 on stmt: closure__locals___listcomp__v27_implicit0 = $68get_iter.6
DEBUG 2023-04-14 17:43:01,752 on stmt: closure__locals___listcomp__v27__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,752 on stmt: closure__locals___listcomp__v27__vphi20_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,752 on stmt: closure__locals___listcomp__v27__vphi8_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,752 on stmt: closure__locals___listcomp__v27__vphi6_1 = closure__locals___listcomp__v27_implicit0
DEBUG 2023-04-14 17:43:01,752 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 100
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,752 on stmt: $82pred = call bool82(empty, func=bool82, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,752 on stmt: branch $82pred, 271, 120
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 120
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: $const86.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,752 on stmt: i = r - $const86.1
DEBUG 2023-04-14 17:43:01,752 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 130
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: $const94.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,752 on stmt: $96compare_op.2 = i >= $const94.1
DEBUG 2023-04-14 17:43:01,752 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,752 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,752 on stmt: branch $98pred, 138, 174
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 138
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: $104binary_subscr.2 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,752 on stmt: $110binary_add.5 = i + n
DEBUG 2023-04-14 17:43:01,752 on stmt: $114binary_subtract.7 = $110binary_add.5 - r
DEBUG 2023-04-14 17:43:01,752 on stmt: $116compare_op.8 = $104binary_subscr.2 == $114binary_subtract.7
DEBUG 2023-04-14 17:43:01,752 on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,752 on stmt: $118pred = call bool118($116compare_op.8, func=bool118, args=(Var($116compare_op.8, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,752 on stmt: branch $118pred, 144, 174
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 144
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: $const122.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,752 on stmt: $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,752 on stmt: i = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,752 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 174
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,752 on stmt: $134compare_op.2 = i < $const132.1
DEBUG 2023-04-14 17:43:01,752 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,752 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, _torontonian.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,752 on stmt: branch $136pred, 176, 200
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 176
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: empty = const(bool, True)
DEBUG 2023-04-14 17:43:01,752 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,752 ==== SSA block analysis pass on 200
DEBUG 2023-04-14 17:43:01,752 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,752 on stmt: $150binary_subscr.4 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,752 on stmt: $const152.5 = const(int, 1)
DEBUG 2023-04-14 17:43:01,752 on stmt: $154inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.4, rhs=$const152.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,752 on stmt: indices[i] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,752 on stmt: $160load_global.7 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,752 on stmt: $const164.9 = const(int, 1)
DEBUG 2023-04-14 17:43:01,755 on stmt: $166binary_add.10 = i + $const164.9
DEBUG 2023-04-14 17:43:01,755 on stmt: $170call_function.12 = call $160load_global.7($166binary_add.10, r, func=$160load_global.7, args=[Var($166binary_add.10, _torontonian.py:73), Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,756 on stmt: $172get_iter.13 = getiter(value=$170call_function.12)
DEBUG 2023-04-14 17:43:01,756 on stmt: $phi174.0 = $172get_iter.13
DEBUG 2023-04-14 17:43:01,756 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 226
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: $174for_iter.1 = iternext(value=$phi174.0)
DEBUG 2023-04-14 17:43:01,756 on stmt: $174for_iter.2 = pair_first(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,756 on stmt: $174for_iter.3 = pair_second(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,756 on stmt: $phi176.1 = $174for_iter.2
DEBUG 2023-04-14 17:43:01,756 on stmt: branch $174for_iter.3, 227, 234
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 227
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: j = $phi176.1
DEBUG 2023-04-14 17:43:01,756 on stmt: $const182.4 = const(int, 1)
DEBUG 2023-04-14 17:43:01,756 on stmt: $184binary_subtract.5 = j - $const182.4
DEBUG 2023-04-14 17:43:01,756 on stmt: $186binary_subscr.6 = getitem(value=indices, index=$184binary_subtract.5, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,756 on stmt: $const188.7 = const(int, 1)
DEBUG 2023-04-14 17:43:01,756 on stmt: $190binary_add.8 = $186binary_subscr.6 + $const188.7
DEBUG 2023-04-14 17:43:01,756 on stmt: indices[j] = $190binary_add.8
DEBUG 2023-04-14 17:43:01,756 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 234
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: $212get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26_implicit0 = $212get_iter.6
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__vphi20_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__vphi8_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__vphi6_1 = closure__locals___listcomp__v26_implicit0
DEBUG 2023-04-14 17:43:01,756 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 271
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: $const226.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,756 on stmt: $228return_value.1 = cast(value=$const226.0)
DEBUG 2023-04-14 17:43:01,756 on stmt: return $228return_value.1
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 259
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 236
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__v6for_iter_2 = iternext(value=closure__locals___listcomp__v26__vphi6_1)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__vphi8_2 = closure__locals___listcomp__v26__v6for_iter_3
DEBUG 2023-04-14 17:43:01,756 on stmt: branch closure__locals___listcomp__v26__v6for_iter_4, 248, 257
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 248
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26_i = closure__locals___listcomp__v26__vphi8_2
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v26__v10load_deref_3, index=closure__locals___listcomp__v26_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__v16list_append_6 = getattr(value=closure__locals___listcomp__v26__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__v16list_append_7 = call closure__locals___listcomp__v26__v16list_append_6(closure__locals___listcomp__v26__v14binary_subscr_5, func=closure__locals___listcomp__v26__v16list_append_6, args=(Var(closure__locals___listcomp__v26__v14binary_subscr_5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,756 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 257
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v26__v20return_value_1 = closure__locals___listcomp__v26__vphi20_0
DEBUG 2023-04-14 17:43:01,756 on stmt: result = closure__locals___listcomp__v26__v20return_value_1
DEBUG 2023-04-14 17:43:01,756 on stmt: $220yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,756 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 80
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v27__v6for_iter_2 = iternext(value=closure__locals___listcomp__v27__vphi6_1)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v27__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v27__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v27__vphi8_2 = closure__locals___listcomp__v27__v6for_iter_3
DEBUG 2023-04-14 17:43:01,756 on stmt: branch closure__locals___listcomp__v27__v6for_iter_4, 84, 92
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 84
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v27_i = closure__locals___listcomp__v27__vphi8_2
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v27__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v27__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v27__v10load_deref_3, index=closure__locals___listcomp__v27_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v27__v16list_append_6 = getattr(value=closure__locals___listcomp__v27__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v27__v16list_append_7 = call closure__locals___listcomp__v27__v16list_append_6(closure__locals___listcomp__v27__v14binary_subscr_5, func=closure__locals___listcomp__v27__v16list_append_6, args=(Var(closure__locals___listcomp__v27__v14binary_subscr_5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,756 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,756 ==== SSA block analysis pass on 92
DEBUG 2023-04-14 17:43:01,756 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193FE100>
DEBUG 2023-04-14 17:43:01,756 on stmt: closure__locals___listcomp__v27__v20return_value_1 = closure__locals___listcomp__v27__vphi20_0
DEBUG 2023-04-14 17:43:01,756 on stmt: result = closure__locals___listcomp__v27__v20return_value_1
DEBUG 2023-04-14 17:43:01,756 on stmt: $76yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,756 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,760 defs defaultdict(<class 'list'>,
            {'$104binary_subscr.2': [<numba.core.ir.Assign object at 0x0000026619402190>],
             '$10load_global.3': [<numba.core.ir.Assign object at 0x00000266193CF790>],
             '$110binary_add.5': [<numba.core.ir.Assign object at 0x0000026619402550>],
             '$114binary_subtract.7': [<numba.core.ir.Assign object at 0x00000266194027F0>],
             '$116compare_op.8': [<numba.core.ir.Assign object at 0x0000026619402970>],
             '$118pred': [<numba.core.ir.Assign object at 0x0000026619402BE0>],
             '$124inplace_subtract.2': [<numba.core.ir.Assign object at 0x0000026619402F70>],
             '$12load_global.4': [<numba.core.ir.Assign object at 0x00000266191A9B50>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x00000266194045B0>],
             '$136pred': [<numba.core.ir.Assign object at 0x0000026619404820>],
             '$150binary_subscr.4': [<numba.core.ir.Assign object at 0x00000266194061F0>],
             '$154inplace_add.6': [<numba.core.ir.Assign object at 0x00000266194064F0>],
             '$160load_global.7': [<numba.core.ir.Assign object at 0x0000026619406700>],
             '$166binary_add.10': [<numba.core.ir.Assign object at 0x0000026619406B50>],
             '$16call_function.6': [<numba.core.ir.Assign object at 0x00000266193FB280>],
             '$170call_function.12': [<numba.core.ir.Assign object at 0x0000026619406E20>],
             '$172get_iter.13': [<numba.core.ir.Assign object at 0x0000026619406F40>],
             '$174for_iter.1': [<numba.core.ir.Assign object at 0x00000266194080D0>],
             '$174for_iter.2': [<numba.core.ir.Assign object at 0x00000266194081F0>],
             '$174for_iter.3': [<numba.core.ir.Assign object at 0x0000026619408310>],
             '$184binary_subtract.5': [<numba.core.ir.Assign object at 0x0000026619408B50>],
             '$186binary_subscr.6': [<numba.core.ir.Assign object at 0x0000026619408CD0>],
             '$190binary_add.8': [<numba.core.ir.Assign object at 0x0000026619408FD0>],
             '$212get_iter.6': [<numba.core.ir.Assign object at 0x000002661940BCA0>],
             '$220yield_value.9': [<numba.core.ir.Assign object at 0x000002661940D1C0>],
             '$228return_value.1': [<numba.core.ir.Assign object at 0x000002661940D460>],
             '$24pred': [<numba.core.ir.Assign object at 0x00000266193FB880>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619369460>],
             '$34compare_op.3': [<numba.core.ir.Assign object at 0x00000266193FBDF0>],
             '$36pred': [<numba.core.ir.Assign object at 0x00000266193FC0A0>],
             '$40compare_op.2': [<numba.core.ir.Assign object at 0x00000266193FC4F0>],
             '$54pred': [<numba.core.ir.Assign object at 0x00000266193FCDC0>],
             '$68get_iter.6': [<numba.core.ir.Assign object at 0x0000026619371E50>],
             '$76yield_value.9': [<numba.core.ir.Assign object at 0x00000266193FEBE0>],
             '$82pred': [<numba.core.ir.Assign object at 0x00000266193FEF40>],
             '$96compare_op.2': [<numba.core.ir.Assign object at 0x0000026619400A30>],
             '$98pred': [<numba.core.ir.Assign object at 0x0000026619400CA0>],
             '$const122.1': [<numba.core.ir.Assign object at 0x0000026619402DC0>],
             '$const132.1': [<numba.core.ir.Assign object at 0x0000026619404400>],
             '$const152.5': [<numba.core.ir.Assign object at 0x0000026619406340>],
             '$const164.9': [<numba.core.ir.Assign object at 0x00000266194069A0>],
             '$const182.4': [<numba.core.ir.Assign object at 0x00000266194089A0>],
             '$const188.7': [<numba.core.ir.Assign object at 0x0000026619408E20>],
             '$const226.0': [<numba.core.ir.Assign object at 0x000002661940D0D0>],
             '$const26.0': [<numba.core.ir.Assign object at 0x00000266193FBA00>],
             '$const86.1': [<numba.core.ir.Assign object at 0x00000266194002E0>],
             '$const94.1': [<numba.core.ir.Assign object at 0x0000026619400880>],
             '$phi174.0': [<numba.core.ir.Assign object at 0x0000026619404D90>],
             '$phi176.1': [<numba.core.ir.Assign object at 0x0000026619406FA0>],
             '$phi38.0': [<numba.core.ir.Assign object at 0x00000266193FBBB0>],
             '$phi48.0': [<numba.core.ir.Assign object at 0x0000026619366CA0>,
                          <numba.core.ir.Assign object at 0x00000266193FBD30>,
                          <numba.core.ir.Assign object at 0x00000266193FB550>],
             'bool118': [<numba.core.ir.Assign object at 0x0000026619402AC0>],
             'bool136': [<numba.core.ir.Assign object at 0x0000026619404700>],
             'bool24': [<numba.core.ir.Assign object at 0x00000266193FB760>],
             'bool36': [<numba.core.ir.Assign object at 0x00000266193FBF40>],
             'bool54': [<numba.core.ir.Assign object at 0x00000266193FCCA0>],
             'bool82': [<numba.core.ir.Assign object at 0x00000266193FEE20>],
             'bool98': [<numba.core.ir.Assign object at 0x0000026619400B80>],
             'closure__locals___listcomp__v26__v10load_deref_3': [<numba.core.ir.Assign object at 0x0000026619423880>],
             'closure__locals___listcomp__v26__v14binary_subscr_5': [<numba.core.ir.Assign object at 0x0000026619423B50>],
             'closure__locals___listcomp__v26__v16list_append_6': [<numba.core.ir.Assign object at 0x0000026619423CD0>],
             'closure__locals___listcomp__v26__v16list_append_7': [<numba.core.ir.Assign object at 0x0000026619423DF0>],
             'closure__locals___listcomp__v26__v20return_value_1': [<numba.core.ir.Assign object at 0x000002661942D0A0>],
             'closure__locals___listcomp__v26__v2build_list_0': [<numba.core.ir.Assign object at 0x0000026619424C10>],
             'closure__locals___listcomp__v26__v6for_iter_2': [<numba.core.ir.Assign object at 0x00000266194231F0>],
             'closure__locals___listcomp__v26__v6for_iter_3': [<numba.core.ir.Assign object at 0x0000026619423310>],
             'closure__locals___listcomp__v26__v6for_iter_4': [<numba.core.ir.Assign object at 0x0000026619423430>],
             'closure__locals___listcomp__v26__vphi20_0': [<numba.core.ir.Assign object at 0x0000026619424D90>],
             'closure__locals___listcomp__v26__vphi6_1': [<numba.core.ir.Assign object at 0x0000026619424EB0>],
             'closure__locals___listcomp__v26__vphi8_0': [<numba.core.ir.Assign object at 0x0000026619424DF0>],
             'closure__locals___listcomp__v26__vphi8_2': [<numba.core.ir.Assign object at 0x0000026619423130>],
             'closure__locals___listcomp__v26_i': [<numba.core.ir.Assign object at 0x0000026619423700>],
             'closure__locals___listcomp__v26_implicit0': [<numba.core.ir.Assign object at 0x0000026619424A60>],
             'closure__locals___listcomp__v27__v10load_deref_3': [<numba.core.ir.Assign object at 0x000002661943C370>],
             'closure__locals___listcomp__v27__v14binary_subscr_5': [<numba.core.ir.Assign object at 0x000002661943C640>],
             'closure__locals___listcomp__v27__v16list_append_6': [<numba.core.ir.Assign object at 0x000002661943C7C0>],
             'closure__locals___listcomp__v27__v16list_append_7': [<numba.core.ir.Assign object at 0x000002661943C8E0>],
             'closure__locals___listcomp__v27__v20return_value_1': [<numba.core.ir.Assign object at 0x000002661943CB50>],
             'closure__locals___listcomp__v27__v2build_list_0': [<numba.core.ir.Assign object at 0x0000026619438700>],
             'closure__locals___listcomp__v27__v6for_iter_2': [<numba.core.ir.Assign object at 0x0000026619438CA0>],
             'closure__locals___listcomp__v27__v6for_iter_3': [<numba.core.ir.Assign object at 0x0000026619438DC0>],
             'closure__locals___listcomp__v27__v6for_iter_4': [<numba.core.ir.Assign object at 0x0000026619438EE0>],
             'closure__locals___listcomp__v27__vphi20_0': [<numba.core.ir.Assign object at 0x0000026619438880>],
             'closure__locals___listcomp__v27__vphi6_1': [<numba.core.ir.Assign object at 0x00000266194389A0>],
             'closure__locals___listcomp__v27__vphi8_0': [<numba.core.ir.Assign object at 0x00000266194388E0>],
             'closure__locals___listcomp__v27__vphi8_2': [<numba.core.ir.Assign object at 0x0000026619438BE0>],
             'closure__locals___listcomp__v27_i': [<numba.core.ir.Assign object at 0x000002661943C1F0>],
             'closure__locals___listcomp__v27_implicit0': [<numba.core.ir.Assign object at 0x0000026619438550>],
             'empty': [<numba.core.ir.Assign object at 0x00000266193FC8E0>,
                       <numba.core.ir.Assign object at 0x0000026619404A60>],
             'i': [<numba.core.ir.Assign object at 0x0000026619400490>,
                   <numba.core.ir.Assign object at 0x0000026619404070>],
             'indices': [<numba.core.ir.Assign object at 0x00000266193FB400>],
             'j': [<numba.core.ir.Assign object at 0x00000266194085E0>],
             'n': [<numba.core.ir.Assign object at 0x00000266193688E0>],
             'pool': [<numba.core.ir.Assign object at 0x00000266193EEF40>],
             'r': [<numba.core.ir.Assign object at 0x00000266193EEEE0>],
             'result': [<numba.core.ir.Assign object at 0x0000026619438370>,
                        <numba.core.ir.Assign object at 0x0000026619440610>]})
DEBUG 2023-04-14 17:43:01,760 SSA violators {'empty', 'i', 'result', '$phi48.0'}
DEBUG 2023-04-14 17:43:01,760 Fix SSA violator on var empty
DEBUG 2023-04-14 17:43:01,760 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,760 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,760 on stmt: pool = arg(0, name=pool)
DEBUG 2023-04-14 17:43:01,760 on stmt: r = arg(1, name=r)
DEBUG 2023-04-14 17:43:01,760 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,760 on stmt: n = call $2load_global.0(pool, func=$2load_global.0, args=[Var(pool, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,760 on stmt: $10load_global.3 = global(list: <class 'list'>)
DEBUG 2023-04-14 17:43:01,760 on stmt: $12load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,760 on stmt: $16call_function.6 = call $12load_global.4(r, func=$12load_global.4, args=[Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,760 on stmt: indices = call $10load_global.3($16call_function.6, func=$10load_global.3, args=[Var($16call_function.6, _torontonian.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,760 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,760 on stmt: $24pred = call bool24(n, func=bool24, args=(Var(n, _torontonian.py:57),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,760 on stmt: $phi48.0 = n
DEBUG 2023-04-14 17:43:01,760 on stmt: branch $24pred, 26, 48
DEBUG 2023-04-14 17:43:01,760 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:01,760 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,760 on stmt: $const26.0 = const(int, 0)
DEBUG 2023-04-14 17:43:01,760 on stmt: $34compare_op.3 = $const26.0 < r
DEBUG 2023-04-14 17:43:01,760 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,760 on stmt: $36pred = call bool36($34compare_op.3, func=bool36, args=(Var($34compare_op.3, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,760 on stmt: $phi38.0 = r
DEBUG 2023-04-14 17:43:01,760 on stmt: $phi48.0 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,760 on stmt: branch $36pred, 38, 44
DEBUG 2023-04-14 17:43:01,760 ==== SSA block rewrite pass on 38
DEBUG 2023-04-14 17:43:01,760 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,760 on stmt: $40compare_op.2 = $phi38.0 <= n
DEBUG 2023-04-14 17:43:01,760 on stmt: $phi48.0 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,760 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,760 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:01,760 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,762 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,762 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,762 first assign: empty
DEBUG 2023-04-14 17:43:01,762 replaced with: empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,762 on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,762 on stmt: $54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,762 on stmt: branch $54pred, 100, 56
DEBUG 2023-04-14 17:43:01,762 ==== SSA block rewrite pass on 56
DEBUG 2023-04-14 17:43:01,762 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: $68get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,762 on stmt: closure__locals___listcomp__v27_implicit0 = $68get_iter.6
DEBUG 2023-04-14 17:43:01,762 on stmt: closure__locals___listcomp__v27__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,762 on stmt: closure__locals___listcomp__v27__vphi20_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,762 on stmt: closure__locals___listcomp__v27__vphi8_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,762 on stmt: closure__locals___listcomp__v27__vphi6_1 = closure__locals___listcomp__v27_implicit0
DEBUG 2023-04-14 17:43:01,762 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,762 ==== SSA block rewrite pass on 100
DEBUG 2023-04-14 17:43:01,762 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,762 on stmt: $82pred = call bool82(empty, func=bool82, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,762 on stmt: branch $82pred, 271, 120
DEBUG 2023-04-14 17:43:01,762 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:43:01,762 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: $const86.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,762 on stmt: i = r - $const86.1
DEBUG 2023-04-14 17:43:01,762 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,762 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:01,762 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: $const94.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,762 on stmt: $96compare_op.2 = i >= $const94.1
DEBUG 2023-04-14 17:43:01,762 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,762 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,762 on stmt: branch $98pred, 138, 174
DEBUG 2023-04-14 17:43:01,762 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:01,762 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: $104binary_subscr.2 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,762 on stmt: $110binary_add.5 = i + n
DEBUG 2023-04-14 17:43:01,762 on stmt: $114binary_subtract.7 = $110binary_add.5 - r
DEBUG 2023-04-14 17:43:01,762 on stmt: $116compare_op.8 = $104binary_subscr.2 == $114binary_subtract.7
DEBUG 2023-04-14 17:43:01,762 on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,762 on stmt: $118pred = call bool118($116compare_op.8, func=bool118, args=(Var($116compare_op.8, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,762 on stmt: branch $118pred, 144, 174
DEBUG 2023-04-14 17:43:01,762 ==== SSA block rewrite pass on 144
DEBUG 2023-04-14 17:43:01,762 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: $const122.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,762 on stmt: $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,762 on stmt: i = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,762 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,762 ==== SSA block rewrite pass on 174
DEBUG 2023-04-14 17:43:01,762 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,762 on stmt: $134compare_op.2 = i < $const132.1
DEBUG 2023-04-14 17:43:01,762 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,762 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, _torontonian.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,762 on stmt: branch $136pred, 176, 200
DEBUG 2023-04-14 17:43:01,762 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:01,762 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: empty = const(bool, True)
DEBUG 2023-04-14 17:43:01,762 replaced with: empty.1 = const(bool, True)
DEBUG 2023-04-14 17:43:01,762 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,762 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:01,762 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,762 on stmt: $150binary_subscr.4 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,765 on stmt: $const152.5 = const(int, 1)
DEBUG 2023-04-14 17:43:01,765 on stmt: $154inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.4, rhs=$const152.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,765 on stmt: indices[i] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,765 on stmt: $160load_global.7 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,765 on stmt: $const164.9 = const(int, 1)
DEBUG 2023-04-14 17:43:01,765 on stmt: $166binary_add.10 = i + $const164.9
DEBUG 2023-04-14 17:43:01,765 on stmt: $170call_function.12 = call $160load_global.7($166binary_add.10, r, func=$160load_global.7, args=[Var($166binary_add.10, _torontonian.py:73), Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,765 on stmt: $172get_iter.13 = getiter(value=$170call_function.12)
DEBUG 2023-04-14 17:43:01,765 on stmt: $phi174.0 = $172get_iter.13
DEBUG 2023-04-14 17:43:01,765 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 226
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: $174for_iter.1 = iternext(value=$phi174.0)
DEBUG 2023-04-14 17:43:01,765 on stmt: $174for_iter.2 = pair_first(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,765 on stmt: $174for_iter.3 = pair_second(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,765 on stmt: $phi176.1 = $174for_iter.2
DEBUG 2023-04-14 17:43:01,765 on stmt: branch $174for_iter.3, 227, 234
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 227
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: j = $phi176.1
DEBUG 2023-04-14 17:43:01,765 on stmt: $const182.4 = const(int, 1)
DEBUG 2023-04-14 17:43:01,765 on stmt: $184binary_subtract.5 = j - $const182.4
DEBUG 2023-04-14 17:43:01,765 on stmt: $186binary_subscr.6 = getitem(value=indices, index=$184binary_subtract.5, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,765 on stmt: $const188.7 = const(int, 1)
DEBUG 2023-04-14 17:43:01,765 on stmt: $190binary_add.8 = $186binary_subscr.6 + $const188.7
DEBUG 2023-04-14 17:43:01,765 on stmt: indices[j] = $190binary_add.8
DEBUG 2023-04-14 17:43:01,765 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 234
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: $212get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26_implicit0 = $212get_iter.6
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__vphi20_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__vphi8_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__vphi6_1 = closure__locals___listcomp__v26_implicit0
DEBUG 2023-04-14 17:43:01,765 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 271
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: $const226.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,765 on stmt: $228return_value.1 = cast(value=$const226.0)
DEBUG 2023-04-14 17:43:01,765 on stmt: return $228return_value.1
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 259
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 236
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__v6for_iter_2 = iternext(value=closure__locals___listcomp__v26__vphi6_1)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__vphi8_2 = closure__locals___listcomp__v26__v6for_iter_3
DEBUG 2023-04-14 17:43:01,765 on stmt: branch closure__locals___listcomp__v26__v6for_iter_4, 248, 257
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 248
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26_i = closure__locals___listcomp__v26__vphi8_2
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v26__v10load_deref_3, index=closure__locals___listcomp__v26_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__v16list_append_6 = getattr(value=closure__locals___listcomp__v26__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__v16list_append_7 = call closure__locals___listcomp__v26__v16list_append_6(closure__locals___listcomp__v26__v14binary_subscr_5, func=closure__locals___listcomp__v26__v16list_append_6, args=(Var(closure__locals___listcomp__v26__v14binary_subscr_5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,765 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 257
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v26__v20return_value_1 = closure__locals___listcomp__v26__vphi20_0
DEBUG 2023-04-14 17:43:01,765 on stmt: result = closure__locals___listcomp__v26__v20return_value_1
DEBUG 2023-04-14 17:43:01,765 on stmt: $220yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,765 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v27__v6for_iter_2 = iternext(value=closure__locals___listcomp__v27__vphi6_1)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v27__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v27__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v27__vphi8_2 = closure__locals___listcomp__v27__v6for_iter_3
DEBUG 2023-04-14 17:43:01,765 on stmt: branch closure__locals___listcomp__v27__v6for_iter_4, 84, 92
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v27_i = closure__locals___listcomp__v27__vphi8_2
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v27__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v27__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v27__v10load_deref_3, index=closure__locals___listcomp__v27_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v27__v16list_append_6 = getattr(value=closure__locals___listcomp__v27__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v27__v16list_append_7 = call closure__locals___listcomp__v27__v16list_append_6(closure__locals___listcomp__v27__v14binary_subscr_5, func=closure__locals___listcomp__v27__v16list_append_6, args=(Var(closure__locals___listcomp__v27__v14binary_subscr_5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,765 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: closure__locals___listcomp__v27__v20return_value_1 = closure__locals___listcomp__v27__vphi20_0
DEBUG 2023-04-14 17:43:01,765 on stmt: result = closure__locals___listcomp__v27__v20return_value_1
DEBUG 2023-04-14 17:43:01,765 on stmt: $76yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,765 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,765 Replaced assignments: defaultdict(<class 'list'>,
            {48: [<numba.core.ir.Assign object at 0x00000266193FE1F0>],
             176: [<numba.core.ir.Assign object at 0x0000026619423820>]})
DEBUG 2023-04-14 17:43:01,765 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,765 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,765 on stmt: pool = arg(0, name=pool)
DEBUG 2023-04-14 17:43:01,765 on stmt: r = arg(1, name=r)
DEBUG 2023-04-14 17:43:01,765 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,765 on stmt: n = call $2load_global.0(pool, func=$2load_global.0, args=[Var(pool, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,765 on stmt: $10load_global.3 = global(list: <class 'list'>)
DEBUG 2023-04-14 17:43:01,765 on stmt: $12load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,765 on stmt: $16call_function.6 = call $12load_global.4(r, func=$12load_global.4, args=[Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,765 on stmt: indices = call $10load_global.3($16call_function.6, func=$10load_global.3, args=[Var($16call_function.6, _torontonian.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,765 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,765 on stmt: $24pred = call bool24(n, func=bool24, args=(Var(n, _torontonian.py:57),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,765 on stmt: $phi48.0 = n
DEBUG 2023-04-14 17:43:01,770 on stmt: branch $24pred, 26, 48
DEBUG 2023-04-14 17:43:01,771 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:01,771 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,771 on stmt: $const26.0 = const(int, 0)
DEBUG 2023-04-14 17:43:01,771 on stmt: $34compare_op.3 = $const26.0 < r
DEBUG 2023-04-14 17:43:01,771 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,771 on stmt: $36pred = call bool36($34compare_op.3, func=bool36, args=(Var($34compare_op.3, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,771 on stmt: $phi38.0 = r
DEBUG 2023-04-14 17:43:01,771 on stmt: $phi48.0 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,771 on stmt: branch $36pred, 38, 44
DEBUG 2023-04-14 17:43:01,771 ==== SSA block rewrite pass on 38
DEBUG 2023-04-14 17:43:01,771 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,771 on stmt: $40compare_op.2 = $phi38.0 <= n
DEBUG 2023-04-14 17:43:01,771 on stmt: $phi48.0 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,771 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,771 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:01,771 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,771 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,771 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,771 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,771 on stmt: empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,771 on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,771 on stmt: $54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,771 find_def var='empty' stmt=$54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,771 on stmt: branch $54pred, 100, 56
DEBUG 2023-04-14 17:43:01,771 ==== SSA block rewrite pass on 56
DEBUG 2023-04-14 17:43:01,771 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,771 on stmt: $68get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,771 on stmt: closure__locals___listcomp__v27_implicit0 = $68get_iter.6
DEBUG 2023-04-14 17:43:01,771 on stmt: closure__locals___listcomp__v27__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,771 on stmt: closure__locals___listcomp__v27__vphi20_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,771 on stmt: closure__locals___listcomp__v27__vphi8_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,771 on stmt: closure__locals___listcomp__v27__vphi6_1 = closure__locals___listcomp__v27_implicit0
DEBUG 2023-04-14 17:43:01,771 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,771 ==== SSA block rewrite pass on 100
DEBUG 2023-04-14 17:43:01,771 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,771 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,771 on stmt: $82pred = call bool82(empty, func=bool82, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,771 find_def var='empty' stmt=$82pred = call bool82(empty, func=bool82, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,771 find_def_from_top label 100
DEBUG 2023-04-14 17:43:01,771 insert phi node empty.2 = phi(incoming_values=[], incoming_blocks=[]) at 100
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 48
DEBUG 2023-04-14 17:43:01,773 incoming_def empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 259
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 259
DEBUG 2023-04-14 17:43:01,773 insert phi node empty.3 = phi(incoming_values=[], incoming_blocks=[]) at 259
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 176
DEBUG 2023-04-14 17:43:01,773 incoming_def empty.1 = const(bool, True)
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 257
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 257
DEBUG 2023-04-14 17:43:01,773 idom 236 from label 257
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 236
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 236
DEBUG 2023-04-14 17:43:01,773 idom 234 from label 236
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 234
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 234
DEBUG 2023-04-14 17:43:01,773 idom 226 from label 234
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 226
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 226
DEBUG 2023-04-14 17:43:01,773 idom 200 from label 226
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 200
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 200
DEBUG 2023-04-14 17:43:01,773 idom 174 from label 200
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 174
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 174
DEBUG 2023-04-14 17:43:01,773 idom 130 from label 174
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 130
DEBUG 2023-04-14 17:43:01,773 idom 120 from label 130
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 120
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 120
DEBUG 2023-04-14 17:43:01,773 idom 100 from label 120
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 100
DEBUG 2023-04-14 17:43:01,773 incoming_def empty.2 = phi(incoming_values=[Var(empty, _torontonian.py:59)], incoming_blocks=[48])
DEBUG 2023-04-14 17:43:01,773 incoming_def empty.3 = phi(incoming_values=[Var(empty.1, _torontonian.py:70), Var(empty.2, _torontonian.py:65)], incoming_blocks=[176, 257])
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 92
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 92
DEBUG 2023-04-14 17:43:01,773 idom 80 from label 92
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 80
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 80
DEBUG 2023-04-14 17:43:01,773 idom 56 from label 80
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 56
DEBUG 2023-04-14 17:43:01,773 find_def_from_top label 56
DEBUG 2023-04-14 17:43:01,773 idom 48 from label 56
DEBUG 2023-04-14 17:43:01,773 find_def_from_bottom label 48
DEBUG 2023-04-14 17:43:01,773 incoming_def empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,773 replaced with: $82pred = call bool82(empty.2, func=bool82, args=(Var(empty.2, _torontonian.py:65),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,773 on stmt: branch $82pred, 271, 120
DEBUG 2023-04-14 17:43:01,773 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:43:01,773 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,773 on stmt: $const86.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,773 on stmt: i = r - $const86.1
DEBUG 2023-04-14 17:43:01,773 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,773 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:01,773 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,773 on stmt: $const94.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,773 on stmt: $96compare_op.2 = i >= $const94.1
DEBUG 2023-04-14 17:43:01,773 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,776 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,776 on stmt: branch $98pred, 138, 174
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: $104binary_subscr.2 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,776 on stmt: $110binary_add.5 = i + n
DEBUG 2023-04-14 17:43:01,776 on stmt: $114binary_subtract.7 = $110binary_add.5 - r
DEBUG 2023-04-14 17:43:01,776 on stmt: $116compare_op.8 = $104binary_subscr.2 == $114binary_subtract.7
DEBUG 2023-04-14 17:43:01,776 on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,776 on stmt: $118pred = call bool118($116compare_op.8, func=bool118, args=(Var($116compare_op.8, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,776 on stmt: branch $118pred, 144, 174
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 144
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: $const122.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,776 on stmt: $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,776 on stmt: i = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,776 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 174
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,776 on stmt: $134compare_op.2 = i < $const132.1
DEBUG 2023-04-14 17:43:01,776 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,776 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, _torontonian.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,776 on stmt: branch $136pred, 176, 200
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: empty.1 = const(bool, True)
DEBUG 2023-04-14 17:43:01,776 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: $150binary_subscr.4 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,776 on stmt: $const152.5 = const(int, 1)
DEBUG 2023-04-14 17:43:01,776 on stmt: $154inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.4, rhs=$const152.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,776 on stmt: indices[i] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,776 on stmt: $160load_global.7 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,776 on stmt: $const164.9 = const(int, 1)
DEBUG 2023-04-14 17:43:01,776 on stmt: $166binary_add.10 = i + $const164.9
DEBUG 2023-04-14 17:43:01,776 on stmt: $170call_function.12 = call $160load_global.7($166binary_add.10, r, func=$160load_global.7, args=[Var($166binary_add.10, _torontonian.py:73), Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,776 on stmt: $172get_iter.13 = getiter(value=$170call_function.12)
DEBUG 2023-04-14 17:43:01,776 on stmt: $phi174.0 = $172get_iter.13
DEBUG 2023-04-14 17:43:01,776 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 226
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: $174for_iter.1 = iternext(value=$phi174.0)
DEBUG 2023-04-14 17:43:01,776 on stmt: $174for_iter.2 = pair_first(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,776 on stmt: $174for_iter.3 = pair_second(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,776 on stmt: $phi176.1 = $174for_iter.2
DEBUG 2023-04-14 17:43:01,776 on stmt: branch $174for_iter.3, 227, 234
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 227
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: j = $phi176.1
DEBUG 2023-04-14 17:43:01,776 on stmt: $const182.4 = const(int, 1)
DEBUG 2023-04-14 17:43:01,776 on stmt: $184binary_subtract.5 = j - $const182.4
DEBUG 2023-04-14 17:43:01,776 on stmt: $186binary_subscr.6 = getitem(value=indices, index=$184binary_subtract.5, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,776 on stmt: $const188.7 = const(int, 1)
DEBUG 2023-04-14 17:43:01,776 on stmt: $190binary_add.8 = $186binary_subscr.6 + $const188.7
DEBUG 2023-04-14 17:43:01,776 on stmt: indices[j] = $190binary_add.8
DEBUG 2023-04-14 17:43:01,776 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 234
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: $212get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26_implicit0 = $212get_iter.6
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__vphi20_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__vphi8_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__vphi6_1 = closure__locals___listcomp__v26_implicit0
DEBUG 2023-04-14 17:43:01,776 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 271
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: $const226.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,776 on stmt: $228return_value.1 = cast(value=$const226.0)
DEBUG 2023-04-14 17:43:01,776 on stmt: return $228return_value.1
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 259
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 236
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__v6for_iter_2 = iternext(value=closure__locals___listcomp__v26__vphi6_1)
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__vphi8_2 = closure__locals___listcomp__v26__v6for_iter_3
DEBUG 2023-04-14 17:43:01,776 on stmt: branch closure__locals___listcomp__v26__v6for_iter_4, 248, 257
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 248
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26_i = closure__locals___listcomp__v26__vphi8_2
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v26__v10load_deref_3, index=closure__locals___listcomp__v26_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__v16list_append_6 = getattr(value=closure__locals___listcomp__v26__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__v16list_append_7 = call closure__locals___listcomp__v26__v16list_append_6(closure__locals___listcomp__v26__v14binary_subscr_5, func=closure__locals___listcomp__v26__v16list_append_6, args=(Var(closure__locals___listcomp__v26__v14binary_subscr_5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,776 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,776 ==== SSA block rewrite pass on 257
DEBUG 2023-04-14 17:43:01,776 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,776 on stmt: closure__locals___listcomp__v26__v20return_value_1 = closure__locals___listcomp__v26__vphi20_0
DEBUG 2023-04-14 17:43:01,776 on stmt: result = closure__locals___listcomp__v26__v20return_value_1
DEBUG 2023-04-14 17:43:01,776 on stmt: $220yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,776 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,781 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:01,781 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,781 on stmt: closure__locals___listcomp__v27__v6for_iter_2 = iternext(value=closure__locals___listcomp__v27__vphi6_1)
DEBUG 2023-04-14 17:43:01,781 on stmt: closure__locals___listcomp__v27__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,781 on stmt: closure__locals___listcomp__v27__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,781 on stmt: closure__locals___listcomp__v27__vphi8_2 = closure__locals___listcomp__v27__v6for_iter_3
DEBUG 2023-04-14 17:43:01,781 on stmt: branch closure__locals___listcomp__v27__v6for_iter_4, 84, 92
DEBUG 2023-04-14 17:43:01,781 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:01,781 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,781 on stmt: closure__locals___listcomp__v27_i = closure__locals___listcomp__v27__vphi8_2
DEBUG 2023-04-14 17:43:01,781 on stmt: closure__locals___listcomp__v27__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,781 on stmt: closure__locals___listcomp__v27__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v27__v10load_deref_3, index=closure__locals___listcomp__v27_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,781 on stmt: closure__locals___listcomp__v27__v16list_append_6 = getattr(value=closure__locals___listcomp__v27__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,781 on stmt: closure__locals___listcomp__v27__v16list_append_7 = call closure__locals___listcomp__v27__v16list_append_6(closure__locals___listcomp__v27__v14binary_subscr_5, func=closure__locals___listcomp__v27__v16list_append_6, args=(Var(closure__locals___listcomp__v27__v14binary_subscr_5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,781 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,781 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:01,781 Running <numba.core.ssa._FixSSAVars object at 0x00000266193FE550>
DEBUG 2023-04-14 17:43:01,781 on stmt: closure__locals___listcomp__v27__v20return_value_1 = closure__locals___listcomp__v27__vphi20_0
DEBUG 2023-04-14 17:43:01,781 on stmt: result = closure__locals___listcomp__v27__v20return_value_1
DEBUG 2023-04-14 17:43:01,781 on stmt: $76yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,781 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,781 Fix SSA violator on var i
DEBUG 2023-04-14 17:43:01,781 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,781 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,781 on stmt: pool = arg(0, name=pool)
DEBUG 2023-04-14 17:43:01,781 on stmt: r = arg(1, name=r)
DEBUG 2023-04-14 17:43:01,781 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,781 on stmt: n = call $2load_global.0(pool, func=$2load_global.0, args=[Var(pool, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,781 on stmt: $10load_global.3 = global(list: <class 'list'>)
DEBUG 2023-04-14 17:43:01,781 on stmt: $12load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,781 on stmt: $16call_function.6 = call $12load_global.4(r, func=$12load_global.4, args=[Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,781 on stmt: indices = call $10load_global.3($16call_function.6, func=$10load_global.3, args=[Var($16call_function.6, _torontonian.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,781 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,781 on stmt: $24pred = call bool24(n, func=bool24, args=(Var(n, _torontonian.py:57),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,781 on stmt: $phi48.0 = n
DEBUG 2023-04-14 17:43:01,781 on stmt: branch $24pred, 26, 48
DEBUG 2023-04-14 17:43:01,781 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:01,781 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,781 on stmt: $const26.0 = const(int, 0)
DEBUG 2023-04-14 17:43:01,781 on stmt: $34compare_op.3 = $const26.0 < r
DEBUG 2023-04-14 17:43:01,781 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,783 on stmt: $36pred = call bool36($34compare_op.3, func=bool36, args=(Var($34compare_op.3, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,783 on stmt: $phi38.0 = r
DEBUG 2023-04-14 17:43:01,783 on stmt: $phi48.0 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,783 on stmt: branch $36pred, 38, 44
DEBUG 2023-04-14 17:43:01,783 ==== SSA block rewrite pass on 38
DEBUG 2023-04-14 17:43:01,783 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,783 on stmt: $40compare_op.2 = $phi38.0 <= n
DEBUG 2023-04-14 17:43:01,783 on stmt: $phi48.0 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,783 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,783 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:01,783 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,783 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,783 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,783 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,783 on stmt: empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,783 on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,783 on stmt: $54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,783 on stmt: branch $54pred, 100, 56
DEBUG 2023-04-14 17:43:01,783 ==== SSA block rewrite pass on 56
DEBUG 2023-04-14 17:43:01,783 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,783 on stmt: $68get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,783 on stmt: closure__locals___listcomp__v27_implicit0 = $68get_iter.6
DEBUG 2023-04-14 17:43:01,783 on stmt: closure__locals___listcomp__v27__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,783 on stmt: closure__locals___listcomp__v27__vphi20_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,783 on stmt: closure__locals___listcomp__v27__vphi8_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,783 on stmt: closure__locals___listcomp__v27__vphi6_1 = closure__locals___listcomp__v27_implicit0
DEBUG 2023-04-14 17:43:01,783 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,783 ==== SSA block rewrite pass on 100
DEBUG 2023-04-14 17:43:01,783 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,783 on stmt: empty.2 = phi(incoming_values=[Var(empty, _torontonian.py:59), Var(empty.3, _torontonian.py:65), Var(empty, _torontonian.py:59)], incoming_blocks=[48, 259, 92])
DEBUG 2023-04-14 17:43:01,783 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,783 on stmt: $82pred = call bool82(empty.2, func=bool82, args=(Var(empty.2, _torontonian.py:65),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,783 on stmt: branch $82pred, 271, 120
DEBUG 2023-04-14 17:43:01,783 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:43:01,783 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,783 on stmt: $const86.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,783 on stmt: i = r - $const86.1
DEBUG 2023-04-14 17:43:01,783 first assign: i
DEBUG 2023-04-14 17:43:01,783 replaced with: i = r - $const86.1
DEBUG 2023-04-14 17:43:01,783 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,783 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:01,783 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,783 on stmt: $const94.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,783 on stmt: $96compare_op.2 = i >= $const94.1
DEBUG 2023-04-14 17:43:01,783 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,783 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,783 on stmt: branch $98pred, 138, 174
DEBUG 2023-04-14 17:43:01,783 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:01,783 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,783 on stmt: $104binary_subscr.2 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,783 on stmt: $110binary_add.5 = i + n
DEBUG 2023-04-14 17:43:01,783 on stmt: $114binary_subtract.7 = $110binary_add.5 - r
DEBUG 2023-04-14 17:43:01,783 on stmt: $116compare_op.8 = $104binary_subscr.2 == $114binary_subtract.7
DEBUG 2023-04-14 17:43:01,783 on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,783 on stmt: $118pred = call bool118($116compare_op.8, func=bool118, args=(Var($116compare_op.8, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,785 on stmt: branch $118pred, 144, 174
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 144
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: $const122.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,785 on stmt: $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,785 on stmt: i = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,785 replaced with: i.1 = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,785 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 174
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,785 on stmt: $134compare_op.2 = i < $const132.1
DEBUG 2023-04-14 17:43:01,785 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,785 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, _torontonian.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,785 on stmt: branch $136pred, 176, 200
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: empty.1 = const(bool, True)
DEBUG 2023-04-14 17:43:01,785 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: $150binary_subscr.4 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,785 on stmt: $const152.5 = const(int, 1)
DEBUG 2023-04-14 17:43:01,785 on stmt: $154inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.4, rhs=$const152.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,785 on stmt: indices[i] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,785 on stmt: $160load_global.7 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,785 on stmt: $const164.9 = const(int, 1)
DEBUG 2023-04-14 17:43:01,785 on stmt: $166binary_add.10 = i + $const164.9
DEBUG 2023-04-14 17:43:01,785 on stmt: $170call_function.12 = call $160load_global.7($166binary_add.10, r, func=$160load_global.7, args=[Var($166binary_add.10, _torontonian.py:73), Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,785 on stmt: $172get_iter.13 = getiter(value=$170call_function.12)
DEBUG 2023-04-14 17:43:01,785 on stmt: $phi174.0 = $172get_iter.13
DEBUG 2023-04-14 17:43:01,785 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 226
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: $174for_iter.1 = iternext(value=$phi174.0)
DEBUG 2023-04-14 17:43:01,785 on stmt: $174for_iter.2 = pair_first(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,785 on stmt: $174for_iter.3 = pair_second(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,785 on stmt: $phi176.1 = $174for_iter.2
DEBUG 2023-04-14 17:43:01,785 on stmt: branch $174for_iter.3, 227, 234
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 227
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: j = $phi176.1
DEBUG 2023-04-14 17:43:01,785 on stmt: $const182.4 = const(int, 1)
DEBUG 2023-04-14 17:43:01,785 on stmt: $184binary_subtract.5 = j - $const182.4
DEBUG 2023-04-14 17:43:01,785 on stmt: $186binary_subscr.6 = getitem(value=indices, index=$184binary_subtract.5, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,785 on stmt: $const188.7 = const(int, 1)
DEBUG 2023-04-14 17:43:01,785 on stmt: $190binary_add.8 = $186binary_subscr.6 + $const188.7
DEBUG 2023-04-14 17:43:01,785 on stmt: indices[j] = $190binary_add.8
DEBUG 2023-04-14 17:43:01,785 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 234
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: $212get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26_implicit0 = $212get_iter.6
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__vphi20_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__vphi8_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__vphi6_1 = closure__locals___listcomp__v26_implicit0
DEBUG 2023-04-14 17:43:01,785 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 271
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: $const226.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,785 on stmt: $228return_value.1 = cast(value=$const226.0)
DEBUG 2023-04-14 17:43:01,785 on stmt: return $228return_value.1
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 259
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: empty.3 = phi(incoming_values=[Var(empty.1, _torontonian.py:70), Var(empty.2, _torontonian.py:65)], incoming_blocks=[176, 257])
DEBUG 2023-04-14 17:43:01,785 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 236
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__v6for_iter_2 = iternext(value=closure__locals___listcomp__v26__vphi6_1)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__vphi8_2 = closure__locals___listcomp__v26__v6for_iter_3
DEBUG 2023-04-14 17:43:01,785 on stmt: branch closure__locals___listcomp__v26__v6for_iter_4, 248, 257
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 248
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26_i = closure__locals___listcomp__v26__vphi8_2
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v26__v10load_deref_3, index=closure__locals___listcomp__v26_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__v16list_append_6 = getattr(value=closure__locals___listcomp__v26__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__v16list_append_7 = call closure__locals___listcomp__v26__v16list_append_6(closure__locals___listcomp__v26__v14binary_subscr_5, func=closure__locals___listcomp__v26__v16list_append_6, args=(Var(closure__locals___listcomp__v26__v14binary_subscr_5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,785 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 257
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v26__v20return_value_1 = closure__locals___listcomp__v26__vphi20_0
DEBUG 2023-04-14 17:43:01,785 on stmt: result = closure__locals___listcomp__v26__v20return_value_1
DEBUG 2023-04-14 17:43:01,785 on stmt: $220yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,785 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v27__v6for_iter_2 = iternext(value=closure__locals___listcomp__v27__vphi6_1)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v27__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v27__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v27__vphi8_2 = closure__locals___listcomp__v27__v6for_iter_3
DEBUG 2023-04-14 17:43:01,785 on stmt: branch closure__locals___listcomp__v27__v6for_iter_4, 84, 92
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v27_i = closure__locals___listcomp__v27__vphi8_2
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v27__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v27__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v27__v10load_deref_3, index=closure__locals___listcomp__v27_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v27__v16list_append_6 = getattr(value=closure__locals___listcomp__v27__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v27__v16list_append_7 = call closure__locals___listcomp__v27__v16list_append_6(closure__locals___listcomp__v27__v14binary_subscr_5, func=closure__locals___listcomp__v27__v16list_append_6, args=(Var(closure__locals___listcomp__v27__v14binary_subscr_5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,785 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,785 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:01,785 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423FD0>
DEBUG 2023-04-14 17:43:01,785 on stmt: closure__locals___listcomp__v27__v20return_value_1 = closure__locals___listcomp__v27__vphi20_0
DEBUG 2023-04-14 17:43:01,785 on stmt: result = closure__locals___listcomp__v27__v20return_value_1
DEBUG 2023-04-14 17:43:01,791 on stmt: $76yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,791 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,791 Replaced assignments: defaultdict(<class 'list'>,
            {120: [<numba.core.ir.Assign object at 0x0000026619423E20>],
             144: [<numba.core.ir.Assign object at 0x00000266193FE220>]})
DEBUG 2023-04-14 17:43:01,791 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,791 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,791 on stmt: pool = arg(0, name=pool)
DEBUG 2023-04-14 17:43:01,791 on stmt: r = arg(1, name=r)
DEBUG 2023-04-14 17:43:01,791 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,791 on stmt: n = call $2load_global.0(pool, func=$2load_global.0, args=[Var(pool, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,791 on stmt: $10load_global.3 = global(list: <class 'list'>)
DEBUG 2023-04-14 17:43:01,791 on stmt: $12load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,791 on stmt: $16call_function.6 = call $12load_global.4(r, func=$12load_global.4, args=[Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,791 on stmt: indices = call $10load_global.3($16call_function.6, func=$10load_global.3, args=[Var($16call_function.6, _torontonian.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,791 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,791 on stmt: $24pred = call bool24(n, func=bool24, args=(Var(n, _torontonian.py:57),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,791 on stmt: $phi48.0 = n
DEBUG 2023-04-14 17:43:01,791 on stmt: branch $24pred, 26, 48
DEBUG 2023-04-14 17:43:01,791 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:01,791 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,791 on stmt: $const26.0 = const(int, 0)
DEBUG 2023-04-14 17:43:01,791 on stmt: $34compare_op.3 = $const26.0 < r
DEBUG 2023-04-14 17:43:01,791 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,791 on stmt: $36pred = call bool36($34compare_op.3, func=bool36, args=(Var($34compare_op.3, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,791 on stmt: $phi38.0 = r
DEBUG 2023-04-14 17:43:01,791 on stmt: $phi48.0 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,793 on stmt: branch $36pred, 38, 44
DEBUG 2023-04-14 17:43:01,793 ==== SSA block rewrite pass on 38
DEBUG 2023-04-14 17:43:01,793 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,793 on stmt: $40compare_op.2 = $phi38.0 <= n
DEBUG 2023-04-14 17:43:01,793 on stmt: $phi48.0 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,793 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,793 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:01,793 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,793 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,793 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,793 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,793 on stmt: empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,793 on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,793 on stmt: $54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,793 on stmt: branch $54pred, 100, 56
DEBUG 2023-04-14 17:43:01,793 ==== SSA block rewrite pass on 56
DEBUG 2023-04-14 17:43:01,793 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,793 on stmt: $68get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,793 on stmt: closure__locals___listcomp__v27_implicit0 = $68get_iter.6
DEBUG 2023-04-14 17:43:01,793 on stmt: closure__locals___listcomp__v27__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,793 on stmt: closure__locals___listcomp__v27__vphi20_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,793 on stmt: closure__locals___listcomp__v27__vphi8_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,793 on stmt: closure__locals___listcomp__v27__vphi6_1 = closure__locals___listcomp__v27_implicit0
DEBUG 2023-04-14 17:43:01,793 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,793 ==== SSA block rewrite pass on 100
DEBUG 2023-04-14 17:43:01,793 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,793 on stmt: empty.2 = phi(incoming_values=[Var(empty, _torontonian.py:59), Var(empty.3, _torontonian.py:65), Var(empty, _torontonian.py:59)], incoming_blocks=[48, 259, 92])
DEBUG 2023-04-14 17:43:01,793 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,793 on stmt: $82pred = call bool82(empty.2, func=bool82, args=(Var(empty.2, _torontonian.py:65),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,793 on stmt: branch $82pred, 271, 120
DEBUG 2023-04-14 17:43:01,793 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:43:01,793 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,793 on stmt: $const86.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,793 on stmt: i = r - $const86.1
DEBUG 2023-04-14 17:43:01,793 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,793 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:01,793 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,793 on stmt: $const94.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,793 on stmt: $96compare_op.2 = i >= $const94.1
DEBUG 2023-04-14 17:43:01,793 find_def var='i' stmt=$96compare_op.2 = i >= $const94.1
DEBUG 2023-04-14 17:43:01,793 find_def_from_top label 130
DEBUG 2023-04-14 17:43:01,793 insert phi node i.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2023-04-14 17:43:01,793 find_def_from_bottom label 120
DEBUG 2023-04-14 17:43:01,793 incoming_def i = r - $const86.1
DEBUG 2023-04-14 17:43:01,793 find_def_from_bottom label 144
DEBUG 2023-04-14 17:43:01,793 incoming_def i.1 = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,793 replaced with: $96compare_op.2 = i.2 >= $const94.1
DEBUG 2023-04-14 17:43:01,793 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,793 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,793 on stmt: branch $98pred, 138, 174
DEBUG 2023-04-14 17:43:01,793 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:01,793 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,795 on stmt: $104binary_subscr.2 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,795 find_def var='i' stmt=$104binary_subscr.2 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 138
DEBUG 2023-04-14 17:43:01,795 idom 130 from label 138
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:01,795 replaced with: $104binary_subscr.2 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,795 on stmt: $110binary_add.5 = i + n
DEBUG 2023-04-14 17:43:01,795 find_def var='i' stmt=$110binary_add.5 = i + n
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 138
DEBUG 2023-04-14 17:43:01,795 idom 130 from label 138
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:01,795 replaced with: $110binary_add.5 = i.2 + n
DEBUG 2023-04-14 17:43:01,795 on stmt: $114binary_subtract.7 = $110binary_add.5 - r
DEBUG 2023-04-14 17:43:01,795 on stmt: $116compare_op.8 = $104binary_subscr.2 == $114binary_subtract.7
DEBUG 2023-04-14 17:43:01,795 on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,795 on stmt: $118pred = call bool118($116compare_op.8, func=bool118, args=(Var($116compare_op.8, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,795 on stmt: branch $118pred, 144, 174
DEBUG 2023-04-14 17:43:01,795 ==== SSA block rewrite pass on 144
DEBUG 2023-04-14 17:43:01,795 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,795 on stmt: $const122.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,795 on stmt: $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,795 find_def var='i' stmt=$124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 144
DEBUG 2023-04-14 17:43:01,795 idom 138 from label 144
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 138
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 138
DEBUG 2023-04-14 17:43:01,795 idom 130 from label 138
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:01,795 replaced with: $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i.2, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,795 on stmt: i.1 = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,795 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,795 ==== SSA block rewrite pass on 174
DEBUG 2023-04-14 17:43:01,795 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,795 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,795 on stmt: $134compare_op.2 = i < $const132.1
DEBUG 2023-04-14 17:43:01,795 find_def var='i' stmt=$134compare_op.2 = i < $const132.1
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 174
DEBUG 2023-04-14 17:43:01,795 idom 130 from label 174
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:01,795 replaced with: $134compare_op.2 = i.2 < $const132.1
DEBUG 2023-04-14 17:43:01,795 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,795 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, _torontonian.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,795 on stmt: branch $136pred, 176, 200
DEBUG 2023-04-14 17:43:01,795 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:01,795 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,795 on stmt: empty.1 = const(bool, True)
DEBUG 2023-04-14 17:43:01,795 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,795 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:01,795 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,795 on stmt: $150binary_subscr.4 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,795 find_def var='i' stmt=$150binary_subscr.4 = getitem(value=indices, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 200
DEBUG 2023-04-14 17:43:01,795 idom 174 from label 200
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 174
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 174
DEBUG 2023-04-14 17:43:01,795 idom 130 from label 174
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:01,795 replaced with: $150binary_subscr.4 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,795 on stmt: $const152.5 = const(int, 1)
DEBUG 2023-04-14 17:43:01,795 on stmt: $154inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.4, rhs=$const152.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,795 on stmt: indices[i] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,795 find_def var='i' stmt=indices[i] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 200
DEBUG 2023-04-14 17:43:01,795 idom 174 from label 200
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 174
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 174
DEBUG 2023-04-14 17:43:01,795 idom 130 from label 174
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:01,795 replaced with: indices[i.2] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,795 on stmt: $160load_global.7 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,795 on stmt: $const164.9 = const(int, 1)
DEBUG 2023-04-14 17:43:01,795 on stmt: $166binary_add.10 = i + $const164.9
DEBUG 2023-04-14 17:43:01,795 find_def var='i' stmt=$166binary_add.10 = i + $const164.9
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 200
DEBUG 2023-04-14 17:43:01,795 idom 174 from label 200
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 174
DEBUG 2023-04-14 17:43:01,795 find_def_from_top label 174
DEBUG 2023-04-14 17:43:01,795 idom 130 from label 174
DEBUG 2023-04-14 17:43:01,795 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:01,795 replaced with: $166binary_add.10 = i.2 + $const164.9
DEBUG 2023-04-14 17:43:01,795 on stmt: $170call_function.12 = call $160load_global.7($166binary_add.10, r, func=$160load_global.7, args=[Var($166binary_add.10, _torontonian.py:73), Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,795 on stmt: $172get_iter.13 = getiter(value=$170call_function.12)
DEBUG 2023-04-14 17:43:01,795 on stmt: $phi174.0 = $172get_iter.13
DEBUG 2023-04-14 17:43:01,795 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,795 ==== SSA block rewrite pass on 226
DEBUG 2023-04-14 17:43:01,795 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,795 on stmt: $174for_iter.1 = iternext(value=$phi174.0)
DEBUG 2023-04-14 17:43:01,795 on stmt: $174for_iter.2 = pair_first(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,795 on stmt: $174for_iter.3 = pair_second(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,795 on stmt: $phi176.1 = $174for_iter.2
DEBUG 2023-04-14 17:43:01,795 on stmt: branch $174for_iter.3, 227, 234
DEBUG 2023-04-14 17:43:01,795 ==== SSA block rewrite pass on 227
DEBUG 2023-04-14 17:43:01,795 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,795 on stmt: j = $phi176.1
DEBUG 2023-04-14 17:43:01,795 on stmt: $const182.4 = const(int, 1)
DEBUG 2023-04-14 17:43:01,795 on stmt: $184binary_subtract.5 = j - $const182.4
DEBUG 2023-04-14 17:43:01,795 on stmt: $186binary_subscr.6 = getitem(value=indices, index=$184binary_subtract.5, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,795 on stmt: $const188.7 = const(int, 1)
DEBUG 2023-04-14 17:43:01,795 on stmt: $190binary_add.8 = $186binary_subscr.6 + $const188.7
DEBUG 2023-04-14 17:43:01,795 on stmt: indices[j] = $190binary_add.8
DEBUG 2023-04-14 17:43:01,795 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,795 ==== SSA block rewrite pass on 234
DEBUG 2023-04-14 17:43:01,795 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,800 on stmt: $212get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,800 on stmt: closure__locals___listcomp__v26_implicit0 = $212get_iter.6
DEBUG 2023-04-14 17:43:01,800 on stmt: closure__locals___listcomp__v26__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,800 on stmt: closure__locals___listcomp__v26__vphi20_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,800 on stmt: closure__locals___listcomp__v26__vphi8_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,800 on stmt: closure__locals___listcomp__v26__vphi6_1 = closure__locals___listcomp__v26_implicit0
DEBUG 2023-04-14 17:43:01,800 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,800 ==== SSA block rewrite pass on 271
DEBUG 2023-04-14 17:43:01,800 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,800 on stmt: $const226.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,801 on stmt: $228return_value.1 = cast(value=$const226.0)
DEBUG 2023-04-14 17:43:01,801 on stmt: return $228return_value.1
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 259
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,801 on stmt: empty.3 = phi(incoming_values=[Var(empty.1, _torontonian.py:70), Var(empty.2, _torontonian.py:65)], incoming_blocks=[176, 257])
DEBUG 2023-04-14 17:43:01,801 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 236
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v26__v6for_iter_2 = iternext(value=closure__locals___listcomp__v26__vphi6_1)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v26__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v26__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v26__vphi8_2 = closure__locals___listcomp__v26__v6for_iter_3
DEBUG 2023-04-14 17:43:01,801 on stmt: branch closure__locals___listcomp__v26__v6for_iter_4, 248, 257
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 248
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v26_i = closure__locals___listcomp__v26__vphi8_2
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v26__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v26__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v26__v10load_deref_3, index=closure__locals___listcomp__v26_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v26__v16list_append_6 = getattr(value=closure__locals___listcomp__v26__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v26__v16list_append_7 = call closure__locals___listcomp__v26__v16list_append_6(closure__locals___listcomp__v26__v14binary_subscr_5, func=closure__locals___listcomp__v26__v16list_append_6, args=(Var(closure__locals___listcomp__v26__v14binary_subscr_5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,801 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 257
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v26__v20return_value_1 = closure__locals___listcomp__v26__vphi20_0
DEBUG 2023-04-14 17:43:01,801 on stmt: result = closure__locals___listcomp__v26__v20return_value_1
DEBUG 2023-04-14 17:43:01,801 on stmt: $220yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,801 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__v6for_iter_2 = iternext(value=closure__locals___listcomp__v27__vphi6_1)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__vphi8_2 = closure__locals___listcomp__v27__v6for_iter_3
DEBUG 2023-04-14 17:43:01,801 on stmt: branch closure__locals___listcomp__v27__v6for_iter_4, 84, 92
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27_i = closure__locals___listcomp__v27__vphi8_2
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v27__v10load_deref_3, index=closure__locals___listcomp__v27_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__v16list_append_6 = getattr(value=closure__locals___listcomp__v27__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__v16list_append_7 = call closure__locals___listcomp__v27__v16list_append_6(closure__locals___listcomp__v27__v14binary_subscr_5, func=closure__locals___listcomp__v27__v16list_append_6, args=(Var(closure__locals___listcomp__v27__v14binary_subscr_5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,801 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FixSSAVars object at 0x0000026619426430>
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__v20return_value_1 = closure__locals___listcomp__v27__vphi20_0
DEBUG 2023-04-14 17:43:01,801 on stmt: result = closure__locals___listcomp__v27__v20return_value_1
DEBUG 2023-04-14 17:43:01,801 on stmt: $76yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,801 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,801 Fix SSA violator on var result
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,801 on stmt: pool = arg(0, name=pool)
DEBUG 2023-04-14 17:43:01,801 on stmt: r = arg(1, name=r)
DEBUG 2023-04-14 17:43:01,801 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,801 on stmt: n = call $2load_global.0(pool, func=$2load_global.0, args=[Var(pool, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,801 on stmt: $10load_global.3 = global(list: <class 'list'>)
DEBUG 2023-04-14 17:43:01,801 on stmt: $12load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,801 on stmt: $16call_function.6 = call $12load_global.4(r, func=$12load_global.4, args=[Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,801 on stmt: indices = call $10load_global.3($16call_function.6, func=$10load_global.3, args=[Var($16call_function.6, _torontonian.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,801 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,801 on stmt: $24pred = call bool24(n, func=bool24, args=(Var(n, _torontonian.py:57),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,801 on stmt: $phi48.0 = n
DEBUG 2023-04-14 17:43:01,801 on stmt: branch $24pred, 26, 48
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,801 on stmt: $const26.0 = const(int, 0)
DEBUG 2023-04-14 17:43:01,801 on stmt: $34compare_op.3 = $const26.0 < r
DEBUG 2023-04-14 17:43:01,801 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,801 on stmt: $36pred = call bool36($34compare_op.3, func=bool36, args=(Var($34compare_op.3, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,801 on stmt: $phi38.0 = r
DEBUG 2023-04-14 17:43:01,801 on stmt: $phi48.0 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,801 on stmt: branch $36pred, 38, 44
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 38
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,801 on stmt: $40compare_op.2 = $phi38.0 <= n
DEBUG 2023-04-14 17:43:01,801 on stmt: $phi48.0 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,801 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,801 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,801 on stmt: empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,801 on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,801 on stmt: $54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,801 on stmt: branch $54pred, 100, 56
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 56
DEBUG 2023-04-14 17:43:01,801 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,801 on stmt: $68get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27_implicit0 = $68get_iter.6
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__vphi20_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__vphi8_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,801 on stmt: closure__locals___listcomp__v27__vphi6_1 = closure__locals___listcomp__v27_implicit0
DEBUG 2023-04-14 17:43:01,801 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,801 ==== SSA block rewrite pass on 100
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: empty.2 = phi(incoming_values=[Var(empty, _torontonian.py:59), Var(empty.3, _torontonian.py:65), Var(empty, _torontonian.py:59)], incoming_blocks=[48, 259, 92])
DEBUG 2023-04-14 17:43:01,806 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,806 on stmt: $82pred = call bool82(empty.2, func=bool82, args=(Var(empty.2, _torontonian.py:65),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,806 on stmt: branch $82pred, 271, 120
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: $const86.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,806 on stmt: i = r - $const86.1
DEBUG 2023-04-14 17:43:01,806 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: i.2 = phi(incoming_values=[Var(i, _torontonian.py:66), Var(i.1, _torontonian.py:68)], incoming_blocks=[120, 144])
DEBUG 2023-04-14 17:43:01,806 on stmt: $const94.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,806 on stmt: $96compare_op.2 = i.2 >= $const94.1
DEBUG 2023-04-14 17:43:01,806 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,806 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,806 on stmt: branch $98pred, 138, 174
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: $104binary_subscr.2 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,806 on stmt: $110binary_add.5 = i.2 + n
DEBUG 2023-04-14 17:43:01,806 on stmt: $114binary_subtract.7 = $110binary_add.5 - r
DEBUG 2023-04-14 17:43:01,806 on stmt: $116compare_op.8 = $104binary_subscr.2 == $114binary_subtract.7
DEBUG 2023-04-14 17:43:01,806 on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,806 on stmt: $118pred = call bool118($116compare_op.8, func=bool118, args=(Var($116compare_op.8, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,806 on stmt: branch $118pred, 144, 174
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 144
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: $const122.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,806 on stmt: $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i.2, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,806 on stmt: i.1 = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,806 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 174
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,806 on stmt: $134compare_op.2 = i.2 < $const132.1
DEBUG 2023-04-14 17:43:01,806 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,806 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, _torontonian.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,806 on stmt: branch $136pred, 176, 200
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: empty.1 = const(bool, True)
DEBUG 2023-04-14 17:43:01,806 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: $150binary_subscr.4 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,806 on stmt: $const152.5 = const(int, 1)
DEBUG 2023-04-14 17:43:01,806 on stmt: $154inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.4, rhs=$const152.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,806 on stmt: indices[i.2] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,806 on stmt: $160load_global.7 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,806 on stmt: $const164.9 = const(int, 1)
DEBUG 2023-04-14 17:43:01,806 on stmt: $166binary_add.10 = i.2 + $const164.9
DEBUG 2023-04-14 17:43:01,806 on stmt: $170call_function.12 = call $160load_global.7($166binary_add.10, r, func=$160load_global.7, args=[Var($166binary_add.10, _torontonian.py:73), Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,806 on stmt: $172get_iter.13 = getiter(value=$170call_function.12)
DEBUG 2023-04-14 17:43:01,806 on stmt: $phi174.0 = $172get_iter.13
DEBUG 2023-04-14 17:43:01,806 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 226
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: $174for_iter.1 = iternext(value=$phi174.0)
DEBUG 2023-04-14 17:43:01,806 on stmt: $174for_iter.2 = pair_first(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,806 on stmt: $174for_iter.3 = pair_second(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,806 on stmt: $phi176.1 = $174for_iter.2
DEBUG 2023-04-14 17:43:01,806 on stmt: branch $174for_iter.3, 227, 234
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 227
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: j = $phi176.1
DEBUG 2023-04-14 17:43:01,806 on stmt: $const182.4 = const(int, 1)
DEBUG 2023-04-14 17:43:01,806 on stmt: $184binary_subtract.5 = j - $const182.4
DEBUG 2023-04-14 17:43:01,806 on stmt: $186binary_subscr.6 = getitem(value=indices, index=$184binary_subtract.5, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,806 on stmt: $const188.7 = const(int, 1)
DEBUG 2023-04-14 17:43:01,806 on stmt: $190binary_add.8 = $186binary_subscr.6 + $const188.7
DEBUG 2023-04-14 17:43:01,806 on stmt: indices[j] = $190binary_add.8
DEBUG 2023-04-14 17:43:01,806 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 234
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: $212get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,806 on stmt: closure__locals___listcomp__v26_implicit0 = $212get_iter.6
DEBUG 2023-04-14 17:43:01,806 on stmt: closure__locals___listcomp__v26__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,806 on stmt: closure__locals___listcomp__v26__vphi20_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,806 on stmt: closure__locals___listcomp__v26__vphi8_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,806 on stmt: closure__locals___listcomp__v26__vphi6_1 = closure__locals___listcomp__v26_implicit0
DEBUG 2023-04-14 17:43:01,806 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 271
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: $const226.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,806 on stmt: $228return_value.1 = cast(value=$const226.0)
DEBUG 2023-04-14 17:43:01,806 on stmt: return $228return_value.1
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 259
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: empty.3 = phi(incoming_values=[Var(empty.1, _torontonian.py:70), Var(empty.2, _torontonian.py:65)], incoming_blocks=[176, 257])
DEBUG 2023-04-14 17:43:01,806 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,806 ==== SSA block rewrite pass on 236
DEBUG 2023-04-14 17:43:01,806 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,806 on stmt: closure__locals___listcomp__v26__v6for_iter_2 = iternext(value=closure__locals___listcomp__v26__vphi6_1)
DEBUG 2023-04-14 17:43:01,810 on stmt: closure__locals___listcomp__v26__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,810 on stmt: closure__locals___listcomp__v26__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,810 on stmt: closure__locals___listcomp__v26__vphi8_2 = closure__locals___listcomp__v26__v6for_iter_3
DEBUG 2023-04-14 17:43:01,810 on stmt: branch closure__locals___listcomp__v26__v6for_iter_4, 248, 257
DEBUG 2023-04-14 17:43:01,810 ==== SSA block rewrite pass on 248
DEBUG 2023-04-14 17:43:01,810 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,810 on stmt: closure__locals___listcomp__v26_i = closure__locals___listcomp__v26__vphi8_2
DEBUG 2023-04-14 17:43:01,810 on stmt: closure__locals___listcomp__v26__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,810 on stmt: closure__locals___listcomp__v26__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v26__v10load_deref_3, index=closure__locals___listcomp__v26_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,810 on stmt: closure__locals___listcomp__v26__v16list_append_6 = getattr(value=closure__locals___listcomp__v26__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,810 on stmt: closure__locals___listcomp__v26__v16list_append_7 = call closure__locals___listcomp__v26__v16list_append_6(closure__locals___listcomp__v26__v14binary_subscr_5, func=closure__locals___listcomp__v26__v16list_append_6, args=(Var(closure__locals___listcomp__v26__v14binary_subscr_5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,810 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,810 ==== SSA block rewrite pass on 257
DEBUG 2023-04-14 17:43:01,810 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,810 on stmt: closure__locals___listcomp__v26__v20return_value_1 = closure__locals___listcomp__v26__vphi20_0
DEBUG 2023-04-14 17:43:01,810 on stmt: result = closure__locals___listcomp__v26__v20return_value_1
DEBUG 2023-04-14 17:43:01,810 first assign: result
DEBUG 2023-04-14 17:43:01,810 replaced with: result = closure__locals___listcomp__v26__v20return_value_1
DEBUG 2023-04-14 17:43:01,810 on stmt: $220yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,811 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,811 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:01,811 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,811 on stmt: closure__locals___listcomp__v27__v6for_iter_2 = iternext(value=closure__locals___listcomp__v27__vphi6_1)
DEBUG 2023-04-14 17:43:01,811 on stmt: closure__locals___listcomp__v27__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,811 on stmt: closure__locals___listcomp__v27__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,811 on stmt: closure__locals___listcomp__v27__vphi8_2 = closure__locals___listcomp__v27__v6for_iter_3
DEBUG 2023-04-14 17:43:01,811 on stmt: branch closure__locals___listcomp__v27__v6for_iter_4, 84, 92
DEBUG 2023-04-14 17:43:01,811 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:01,811 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,811 on stmt: closure__locals___listcomp__v27_i = closure__locals___listcomp__v27__vphi8_2
DEBUG 2023-04-14 17:43:01,811 on stmt: closure__locals___listcomp__v27__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,811 on stmt: closure__locals___listcomp__v27__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v27__v10load_deref_3, index=closure__locals___listcomp__v27_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,811 on stmt: closure__locals___listcomp__v27__v16list_append_6 = getattr(value=closure__locals___listcomp__v27__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,811 on stmt: closure__locals___listcomp__v27__v16list_append_7 = call closure__locals___listcomp__v27__v16list_append_6(closure__locals___listcomp__v27__v14binary_subscr_5, func=closure__locals___listcomp__v27__v16list_append_6, args=(Var(closure__locals___listcomp__v27__v14binary_subscr_5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,811 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,811 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:01,811 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619371C10>
DEBUG 2023-04-14 17:43:01,811 on stmt: closure__locals___listcomp__v27__v20return_value_1 = closure__locals___listcomp__v27__vphi20_0
DEBUG 2023-04-14 17:43:01,811 on stmt: result = closure__locals___listcomp__v27__v20return_value_1
DEBUG 2023-04-14 17:43:01,811 replaced with: result.1 = closure__locals___listcomp__v27__v20return_value_1
DEBUG 2023-04-14 17:43:01,811 on stmt: $76yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,811 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,811 Replaced assignments: defaultdict(<class 'list'>,
            {92: [<numba.core.ir.Assign object at 0x00000266194327F0>],
             257: [<numba.core.ir.Assign object at 0x00000266194233D0>]})
DEBUG 2023-04-14 17:43:01,811 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,811 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,811 on stmt: pool = arg(0, name=pool)
DEBUG 2023-04-14 17:43:01,811 on stmt: r = arg(1, name=r)
DEBUG 2023-04-14 17:43:01,811 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,811 on stmt: n = call $2load_global.0(pool, func=$2load_global.0, args=[Var(pool, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,811 on stmt: $10load_global.3 = global(list: <class 'list'>)
DEBUG 2023-04-14 17:43:01,811 on stmt: $12load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,811 on stmt: $16call_function.6 = call $12load_global.4(r, func=$12load_global.4, args=[Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,811 on stmt: indices = call $10load_global.3($16call_function.6, func=$10load_global.3, args=[Var($16call_function.6, _torontonian.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,811 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,811 on stmt: $24pred = call bool24(n, func=bool24, args=(Var(n, _torontonian.py:57),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,811 on stmt: $phi48.0 = n
DEBUG 2023-04-14 17:43:01,811 on stmt: branch $24pred, 26, 48
DEBUG 2023-04-14 17:43:01,811 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:01,811 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,811 on stmt: $const26.0 = const(int, 0)
DEBUG 2023-04-14 17:43:01,811 on stmt: $34compare_op.3 = $const26.0 < r
DEBUG 2023-04-14 17:43:01,813 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,813 on stmt: $36pred = call bool36($34compare_op.3, func=bool36, args=(Var($34compare_op.3, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,813 on stmt: $phi38.0 = r
DEBUG 2023-04-14 17:43:01,813 on stmt: $phi48.0 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,813 on stmt: branch $36pred, 38, 44
DEBUG 2023-04-14 17:43:01,813 ==== SSA block rewrite pass on 38
DEBUG 2023-04-14 17:43:01,813 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,813 on stmt: $40compare_op.2 = $phi38.0 <= n
DEBUG 2023-04-14 17:43:01,813 on stmt: $phi48.0 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,813 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,813 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:01,813 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,813 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,813 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,813 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,813 on stmt: empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,813 on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,813 on stmt: $54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,813 on stmt: branch $54pred, 100, 56
DEBUG 2023-04-14 17:43:01,813 ==== SSA block rewrite pass on 56
DEBUG 2023-04-14 17:43:01,813 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,813 on stmt: $68get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,813 on stmt: closure__locals___listcomp__v27_implicit0 = $68get_iter.6
DEBUG 2023-04-14 17:43:01,813 on stmt: closure__locals___listcomp__v27__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,813 on stmt: closure__locals___listcomp__v27__vphi20_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,813 on stmt: closure__locals___listcomp__v27__vphi8_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,813 on stmt: closure__locals___listcomp__v27__vphi6_1 = closure__locals___listcomp__v27_implicit0
DEBUG 2023-04-14 17:43:01,813 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,813 ==== SSA block rewrite pass on 100
DEBUG 2023-04-14 17:43:01,813 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,813 on stmt: empty.2 = phi(incoming_values=[Var(empty, _torontonian.py:59), Var(empty.3, _torontonian.py:65), Var(empty, _torontonian.py:59)], incoming_blocks=[48, 259, 92])
DEBUG 2023-04-14 17:43:01,813 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,813 on stmt: $82pred = call bool82(empty.2, func=bool82, args=(Var(empty.2, _torontonian.py:65),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,813 on stmt: branch $82pred, 271, 120
DEBUG 2023-04-14 17:43:01,813 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:43:01,813 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,813 on stmt: $const86.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,813 on stmt: i = r - $const86.1
DEBUG 2023-04-14 17:43:01,813 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,813 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:01,813 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,813 on stmt: i.2 = phi(incoming_values=[Var(i, _torontonian.py:66), Var(i.1, _torontonian.py:68)], incoming_blocks=[120, 144])
DEBUG 2023-04-14 17:43:01,816 on stmt: $const94.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,816 on stmt: $96compare_op.2 = i.2 >= $const94.1
DEBUG 2023-04-14 17:43:01,816 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,816 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,816 on stmt: branch $98pred, 138, 174
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: $104binary_subscr.2 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,816 on stmt: $110binary_add.5 = i.2 + n
DEBUG 2023-04-14 17:43:01,816 on stmt: $114binary_subtract.7 = $110binary_add.5 - r
DEBUG 2023-04-14 17:43:01,816 on stmt: $116compare_op.8 = $104binary_subscr.2 == $114binary_subtract.7
DEBUG 2023-04-14 17:43:01,816 on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,816 on stmt: $118pred = call bool118($116compare_op.8, func=bool118, args=(Var($116compare_op.8, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,816 on stmt: branch $118pred, 144, 174
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 144
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: $const122.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,816 on stmt: $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i.2, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,816 on stmt: i.1 = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,816 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 174
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,816 on stmt: $134compare_op.2 = i.2 < $const132.1
DEBUG 2023-04-14 17:43:01,816 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,816 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, _torontonian.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,816 on stmt: branch $136pred, 176, 200
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: empty.1 = const(bool, True)
DEBUG 2023-04-14 17:43:01,816 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: $150binary_subscr.4 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,816 on stmt: $const152.5 = const(int, 1)
DEBUG 2023-04-14 17:43:01,816 on stmt: $154inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.4, rhs=$const152.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,816 on stmt: indices[i.2] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,816 on stmt: $160load_global.7 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,816 on stmt: $const164.9 = const(int, 1)
DEBUG 2023-04-14 17:43:01,816 on stmt: $166binary_add.10 = i.2 + $const164.9
DEBUG 2023-04-14 17:43:01,816 on stmt: $170call_function.12 = call $160load_global.7($166binary_add.10, r, func=$160load_global.7, args=[Var($166binary_add.10, _torontonian.py:73), Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,816 on stmt: $172get_iter.13 = getiter(value=$170call_function.12)
DEBUG 2023-04-14 17:43:01,816 on stmt: $phi174.0 = $172get_iter.13
DEBUG 2023-04-14 17:43:01,816 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 226
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: $174for_iter.1 = iternext(value=$phi174.0)
DEBUG 2023-04-14 17:43:01,816 on stmt: $174for_iter.2 = pair_first(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,816 on stmt: $174for_iter.3 = pair_second(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,816 on stmt: $phi176.1 = $174for_iter.2
DEBUG 2023-04-14 17:43:01,816 on stmt: branch $174for_iter.3, 227, 234
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 227
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: j = $phi176.1
DEBUG 2023-04-14 17:43:01,816 on stmt: $const182.4 = const(int, 1)
DEBUG 2023-04-14 17:43:01,816 on stmt: $184binary_subtract.5 = j - $const182.4
DEBUG 2023-04-14 17:43:01,816 on stmt: $186binary_subscr.6 = getitem(value=indices, index=$184binary_subtract.5, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,816 on stmt: $const188.7 = const(int, 1)
DEBUG 2023-04-14 17:43:01,816 on stmt: $190binary_add.8 = $186binary_subscr.6 + $const188.7
DEBUG 2023-04-14 17:43:01,816 on stmt: indices[j] = $190binary_add.8
DEBUG 2023-04-14 17:43:01,816 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 234
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: $212get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26_implicit0 = $212get_iter.6
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__vphi20_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__vphi8_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__vphi6_1 = closure__locals___listcomp__v26_implicit0
DEBUG 2023-04-14 17:43:01,816 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 271
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: $const226.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,816 on stmt: $228return_value.1 = cast(value=$const226.0)
DEBUG 2023-04-14 17:43:01,816 on stmt: return $228return_value.1
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 259
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: empty.3 = phi(incoming_values=[Var(empty.1, _torontonian.py:70), Var(empty.2, _torontonian.py:65)], incoming_blocks=[176, 257])
DEBUG 2023-04-14 17:43:01,816 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 236
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__v6for_iter_2 = iternext(value=closure__locals___listcomp__v26__vphi6_1)
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__vphi8_2 = closure__locals___listcomp__v26__v6for_iter_3
DEBUG 2023-04-14 17:43:01,816 on stmt: branch closure__locals___listcomp__v26__v6for_iter_4, 248, 257
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 248
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26_i = closure__locals___listcomp__v26__vphi8_2
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v26__v10load_deref_3, index=closure__locals___listcomp__v26_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__v16list_append_6 = getattr(value=closure__locals___listcomp__v26__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__v16list_append_7 = call closure__locals___listcomp__v26__v16list_append_6(closure__locals___listcomp__v26__v14binary_subscr_5, func=closure__locals___listcomp__v26__v16list_append_6, args=(Var(closure__locals___listcomp__v26__v14binary_subscr_5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,816 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 257
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v26__v20return_value_1 = closure__locals___listcomp__v26__vphi20_0
DEBUG 2023-04-14 17:43:01,816 on stmt: result = closure__locals___listcomp__v26__v20return_value_1
DEBUG 2023-04-14 17:43:01,816 on stmt: $220yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,816 find_def var='result' stmt=$220yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,816 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,816 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:01,816 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,816 on stmt: closure__locals___listcomp__v27__v6for_iter_2 = iternext(value=closure__locals___listcomp__v27__vphi6_1)
DEBUG 2023-04-14 17:43:01,821 on stmt: closure__locals___listcomp__v27__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,821 on stmt: closure__locals___listcomp__v27__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,821 on stmt: closure__locals___listcomp__v27__vphi8_2 = closure__locals___listcomp__v27__v6for_iter_3
DEBUG 2023-04-14 17:43:01,821 on stmt: branch closure__locals___listcomp__v27__v6for_iter_4, 84, 92
DEBUG 2023-04-14 17:43:01,821 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:01,821 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,821 on stmt: closure__locals___listcomp__v27_i = closure__locals___listcomp__v27__vphi8_2
DEBUG 2023-04-14 17:43:01,821 on stmt: closure__locals___listcomp__v27__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,821 on stmt: closure__locals___listcomp__v27__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v27__v10load_deref_3, index=closure__locals___listcomp__v27_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,821 on stmt: closure__locals___listcomp__v27__v16list_append_6 = getattr(value=closure__locals___listcomp__v27__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,821 on stmt: closure__locals___listcomp__v27__v16list_append_7 = call closure__locals___listcomp__v27__v16list_append_6(closure__locals___listcomp__v27__v14binary_subscr_5, func=closure__locals___listcomp__v27__v16list_append_6, args=(Var(closure__locals___listcomp__v27__v14binary_subscr_5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,821 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,821 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:01,821 Running <numba.core.ssa._FixSSAVars object at 0x00000266193CF8B0>
DEBUG 2023-04-14 17:43:01,821 on stmt: closure__locals___listcomp__v27__v20return_value_1 = closure__locals___listcomp__v27__vphi20_0
DEBUG 2023-04-14 17:43:01,821 on stmt: result.1 = closure__locals___listcomp__v27__v20return_value_1
DEBUG 2023-04-14 17:43:01,821 on stmt: $76yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,821 find_def var='result' stmt=$76yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,821 replaced with: $76yield_value.9 = yield result.1
DEBUG 2023-04-14 17:43:01,821 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,821 Fix SSA violator on var $phi48.0
DEBUG 2023-04-14 17:43:01,822 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,822 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,822 on stmt: pool = arg(0, name=pool)
DEBUG 2023-04-14 17:43:01,822 on stmt: r = arg(1, name=r)
DEBUG 2023-04-14 17:43:01,822 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,822 on stmt: n = call $2load_global.0(pool, func=$2load_global.0, args=[Var(pool, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,822 on stmt: $10load_global.3 = global(list: <class 'list'>)
DEBUG 2023-04-14 17:43:01,822 on stmt: $12load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,822 on stmt: $16call_function.6 = call $12load_global.4(r, func=$12load_global.4, args=[Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,822 on stmt: indices = call $10load_global.3($16call_function.6, func=$10load_global.3, args=[Var($16call_function.6, _torontonian.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,822 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,822 on stmt: $24pred = call bool24(n, func=bool24, args=(Var(n, _torontonian.py:57),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,822 on stmt: $phi48.0 = n
DEBUG 2023-04-14 17:43:01,822 first assign: $phi48.0
DEBUG 2023-04-14 17:43:01,822 replaced with: $phi48.0 = n
DEBUG 2023-04-14 17:43:01,822 on stmt: branch $24pred, 26, 48
DEBUG 2023-04-14 17:43:01,822 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:01,822 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,822 on stmt: $const26.0 = const(int, 0)
DEBUG 2023-04-14 17:43:01,822 on stmt: $34compare_op.3 = $const26.0 < r
DEBUG 2023-04-14 17:43:01,822 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,822 on stmt: $36pred = call bool36($34compare_op.3, func=bool36, args=(Var($34compare_op.3, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,822 on stmt: $phi38.0 = r
DEBUG 2023-04-14 17:43:01,822 on stmt: $phi48.0 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,822 replaced with: $phi48.0.1 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,822 on stmt: branch $36pred, 38, 44
DEBUG 2023-04-14 17:43:01,822 ==== SSA block rewrite pass on 38
DEBUG 2023-04-14 17:43:01,822 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,822 on stmt: $40compare_op.2 = $phi38.0 <= n
DEBUG 2023-04-14 17:43:01,822 on stmt: $phi48.0 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,822 replaced with: $phi48.0.2 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,822 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,822 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:01,822 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,822 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,822 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,822 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,822 on stmt: empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,822 on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,822 on stmt: $54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,822 on stmt: branch $54pred, 100, 56
DEBUG 2023-04-14 17:43:01,822 ==== SSA block rewrite pass on 56
DEBUG 2023-04-14 17:43:01,822 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,824 on stmt: $68get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,824 on stmt: closure__locals___listcomp__v27_implicit0 = $68get_iter.6
DEBUG 2023-04-14 17:43:01,824 on stmt: closure__locals___listcomp__v27__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,824 on stmt: closure__locals___listcomp__v27__vphi20_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,824 on stmt: closure__locals___listcomp__v27__vphi8_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,824 on stmt: closure__locals___listcomp__v27__vphi6_1 = closure__locals___listcomp__v27_implicit0
DEBUG 2023-04-14 17:43:01,824 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,824 ==== SSA block rewrite pass on 100
DEBUG 2023-04-14 17:43:01,824 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,824 on stmt: empty.2 = phi(incoming_values=[Var(empty, _torontonian.py:59), Var(empty.3, _torontonian.py:65), Var(empty, _torontonian.py:59)], incoming_blocks=[48, 259, 92])
DEBUG 2023-04-14 17:43:01,824 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,824 on stmt: $82pred = call bool82(empty.2, func=bool82, args=(Var(empty.2, _torontonian.py:65),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,824 on stmt: branch $82pred, 271, 120
DEBUG 2023-04-14 17:43:01,824 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:43:01,824 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,824 on stmt: $const86.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,824 on stmt: i = r - $const86.1
DEBUG 2023-04-14 17:43:01,824 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,824 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:01,824 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,824 on stmt: i.2 = phi(incoming_values=[Var(i, _torontonian.py:66), Var(i.1, _torontonian.py:68)], incoming_blocks=[120, 144])
DEBUG 2023-04-14 17:43:01,824 on stmt: $const94.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,824 on stmt: $96compare_op.2 = i.2 >= $const94.1
DEBUG 2023-04-14 17:43:01,824 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,824 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,824 on stmt: branch $98pred, 138, 174
DEBUG 2023-04-14 17:43:01,824 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:01,824 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,824 on stmt: $104binary_subscr.2 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,824 on stmt: $110binary_add.5 = i.2 + n
DEBUG 2023-04-14 17:43:01,824 on stmt: $114binary_subtract.7 = $110binary_add.5 - r
DEBUG 2023-04-14 17:43:01,824 on stmt: $116compare_op.8 = $104binary_subscr.2 == $114binary_subtract.7
DEBUG 2023-04-14 17:43:01,825 on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,825 on stmt: $118pred = call bool118($116compare_op.8, func=bool118, args=(Var($116compare_op.8, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,825 on stmt: branch $118pred, 144, 174
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 144
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: $const122.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,825 on stmt: $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i.2, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,825 on stmt: i.1 = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,825 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 174
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,825 on stmt: $134compare_op.2 = i.2 < $const132.1
DEBUG 2023-04-14 17:43:01,825 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,825 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, _torontonian.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,825 on stmt: branch $136pred, 176, 200
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: empty.1 = const(bool, True)
DEBUG 2023-04-14 17:43:01,825 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: $150binary_subscr.4 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,825 on stmt: $const152.5 = const(int, 1)
DEBUG 2023-04-14 17:43:01,825 on stmt: $154inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.4, rhs=$const152.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,825 on stmt: indices[i.2] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,825 on stmt: $160load_global.7 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,825 on stmt: $const164.9 = const(int, 1)
DEBUG 2023-04-14 17:43:01,825 on stmt: $166binary_add.10 = i.2 + $const164.9
DEBUG 2023-04-14 17:43:01,825 on stmt: $170call_function.12 = call $160load_global.7($166binary_add.10, r, func=$160load_global.7, args=[Var($166binary_add.10, _torontonian.py:73), Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,825 on stmt: $172get_iter.13 = getiter(value=$170call_function.12)
DEBUG 2023-04-14 17:43:01,825 on stmt: $phi174.0 = $172get_iter.13
DEBUG 2023-04-14 17:43:01,825 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 226
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: $174for_iter.1 = iternext(value=$phi174.0)
DEBUG 2023-04-14 17:43:01,825 on stmt: $174for_iter.2 = pair_first(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,825 on stmt: $174for_iter.3 = pair_second(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,825 on stmt: $phi176.1 = $174for_iter.2
DEBUG 2023-04-14 17:43:01,825 on stmt: branch $174for_iter.3, 227, 234
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 227
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: j = $phi176.1
DEBUG 2023-04-14 17:43:01,825 on stmt: $const182.4 = const(int, 1)
DEBUG 2023-04-14 17:43:01,825 on stmt: $184binary_subtract.5 = j - $const182.4
DEBUG 2023-04-14 17:43:01,825 on stmt: $186binary_subscr.6 = getitem(value=indices, index=$184binary_subtract.5, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,825 on stmt: $const188.7 = const(int, 1)
DEBUG 2023-04-14 17:43:01,825 on stmt: $190binary_add.8 = $186binary_subscr.6 + $const188.7
DEBUG 2023-04-14 17:43:01,825 on stmt: indices[j] = $190binary_add.8
DEBUG 2023-04-14 17:43:01,825 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 234
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: $212get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26_implicit0 = $212get_iter.6
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__vphi20_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__vphi8_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__vphi6_1 = closure__locals___listcomp__v26_implicit0
DEBUG 2023-04-14 17:43:01,825 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 271
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: $const226.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,825 on stmt: $228return_value.1 = cast(value=$const226.0)
DEBUG 2023-04-14 17:43:01,825 on stmt: return $228return_value.1
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 259
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: empty.3 = phi(incoming_values=[Var(empty.1, _torontonian.py:70), Var(empty.2, _torontonian.py:65)], incoming_blocks=[176, 257])
DEBUG 2023-04-14 17:43:01,825 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 236
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__v6for_iter_2 = iternext(value=closure__locals___listcomp__v26__vphi6_1)
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__vphi8_2 = closure__locals___listcomp__v26__v6for_iter_3
DEBUG 2023-04-14 17:43:01,825 on stmt: branch closure__locals___listcomp__v26__v6for_iter_4, 248, 257
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 248
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26_i = closure__locals___listcomp__v26__vphi8_2
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v26__v10load_deref_3, index=closure__locals___listcomp__v26_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__v16list_append_6 = getattr(value=closure__locals___listcomp__v26__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__v16list_append_7 = call closure__locals___listcomp__v26__v16list_append_6(closure__locals___listcomp__v26__v14binary_subscr_5, func=closure__locals___listcomp__v26__v16list_append_6, args=(Var(closure__locals___listcomp__v26__v14binary_subscr_5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,825 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 257
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v26__v20return_value_1 = closure__locals___listcomp__v26__vphi20_0
DEBUG 2023-04-14 17:43:01,825 on stmt: result = closure__locals___listcomp__v26__v20return_value_1
DEBUG 2023-04-14 17:43:01,825 on stmt: $220yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,825 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v27__v6for_iter_2 = iternext(value=closure__locals___listcomp__v27__vphi6_1)
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v27__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v27__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v27__vphi8_2 = closure__locals___listcomp__v27__v6for_iter_3
DEBUG 2023-04-14 17:43:01,825 on stmt: branch closure__locals___listcomp__v27__v6for_iter_4, 84, 92
DEBUG 2023-04-14 17:43:01,825 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:01,825 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v27_i = closure__locals___listcomp__v27__vphi8_2
DEBUG 2023-04-14 17:43:01,825 on stmt: closure__locals___listcomp__v27__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,830 on stmt: closure__locals___listcomp__v27__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v27__v10load_deref_3, index=closure__locals___listcomp__v27_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,830 on stmt: closure__locals___listcomp__v27__v16list_append_6 = getattr(value=closure__locals___listcomp__v27__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,830 on stmt: closure__locals___listcomp__v27__v16list_append_7 = call closure__locals___listcomp__v27__v16list_append_6(closure__locals___listcomp__v27__v14binary_subscr_5, func=closure__locals___listcomp__v27__v16list_append_6, args=(Var(closure__locals___listcomp__v27__v14binary_subscr_5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,830 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,830 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:01,830 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619423C70>
DEBUG 2023-04-14 17:43:01,830 on stmt: closure__locals___listcomp__v27__v20return_value_1 = closure__locals___listcomp__v27__vphi20_0
DEBUG 2023-04-14 17:43:01,830 on stmt: result.1 = closure__locals___listcomp__v27__v20return_value_1
DEBUG 2023-04-14 17:43:01,830 on stmt: $76yield_value.9 = yield result.1
DEBUG 2023-04-14 17:43:01,830 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,830 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026619423D00>],
             26: [<numba.core.ir.Assign object at 0x00000266194232B0>],
             38: [<numba.core.ir.Assign object at 0x0000026619423850>]})
DEBUG 2023-04-14 17:43:01,830 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:01,830 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,830 on stmt: pool = arg(0, name=pool)
DEBUG 2023-04-14 17:43:01,830 on stmt: r = arg(1, name=r)
DEBUG 2023-04-14 17:43:01,830 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:01,830 on stmt: n = call $2load_global.0(pool, func=$2load_global.0, args=[Var(pool, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,830 on stmt: $10load_global.3 = global(list: <class 'list'>)
DEBUG 2023-04-14 17:43:01,830 on stmt: $12load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,830 on stmt: $16call_function.6 = call $12load_global.4(r, func=$12load_global.4, args=[Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,830 on stmt: indices = call $10load_global.3($16call_function.6, func=$10load_global.3, args=[Var($16call_function.6, _torontonian.py:58)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,830 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,830 on stmt: $24pred = call bool24(n, func=bool24, args=(Var(n, _torontonian.py:57),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,830 on stmt: $phi48.0 = n
DEBUG 2023-04-14 17:43:01,830 on stmt: branch $24pred, 26, 48
DEBUG 2023-04-14 17:43:01,830 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:01,830 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,830 on stmt: $const26.0 = const(int, 0)
DEBUG 2023-04-14 17:43:01,830 on stmt: $34compare_op.3 = $const26.0 < r
DEBUG 2023-04-14 17:43:01,830 on stmt: bool36 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,832 on stmt: $36pred = call bool36($34compare_op.3, func=bool36, args=(Var($34compare_op.3, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,832 on stmt: $phi38.0 = r
DEBUG 2023-04-14 17:43:01,832 on stmt: $phi48.0.1 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,832 on stmt: branch $36pred, 38, 44
DEBUG 2023-04-14 17:43:01,832 ==== SSA block rewrite pass on 38
DEBUG 2023-04-14 17:43:01,832 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,832 on stmt: $40compare_op.2 = $phi38.0 <= n
DEBUG 2023-04-14 17:43:01,832 on stmt: $phi48.0.2 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,832 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,832 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:01,832 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,832 on stmt: jump 48
DEBUG 2023-04-14 17:43:01,832 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:01,832 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,832 on stmt: empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,832 find_def var='$phi48.0' stmt=empty = unary(fn=<built-in function not_>, value=$phi48.0)
DEBUG 2023-04-14 17:43:01,832 find_def_from_top label 48
DEBUG 2023-04-14 17:43:01,832 insert phi node $phi48.0.3 = phi(incoming_values=[], incoming_blocks=[]) at 48
DEBUG 2023-04-14 17:43:01,832 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:01,832 incoming_def $phi48.0 = n
DEBUG 2023-04-14 17:43:01,832 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:01,832 find_def_from_top label 44
DEBUG 2023-04-14 17:43:01,832 idom 26 from label 44
DEBUG 2023-04-14 17:43:01,832 find_def_from_bottom label 26
DEBUG 2023-04-14 17:43:01,832 incoming_def $phi48.0.1 = $34compare_op.3
DEBUG 2023-04-14 17:43:01,832 find_def_from_bottom label 38
DEBUG 2023-04-14 17:43:01,832 incoming_def $phi48.0.2 = $40compare_op.2
DEBUG 2023-04-14 17:43:01,832 replaced with: empty = unary(fn=<built-in function not_>, value=$phi48.0.3)
DEBUG 2023-04-14 17:43:01,832 on stmt: bool54 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,832 on stmt: $54pred = call bool54(empty, func=bool54, args=(Var(empty, _torontonian.py:59),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,832 on stmt: branch $54pred, 100, 56
DEBUG 2023-04-14 17:43:01,832 ==== SSA block rewrite pass on 56
DEBUG 2023-04-14 17:43:01,832 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,832 on stmt: $68get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,832 on stmt: closure__locals___listcomp__v27_implicit0 = $68get_iter.6
DEBUG 2023-04-14 17:43:01,832 on stmt: closure__locals___listcomp__v27__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,832 on stmt: closure__locals___listcomp__v27__vphi20_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,832 on stmt: closure__locals___listcomp__v27__vphi8_0 = closure__locals___listcomp__v27__v2build_list_0
DEBUG 2023-04-14 17:43:01,832 on stmt: closure__locals___listcomp__v27__vphi6_1 = closure__locals___listcomp__v27_implicit0
DEBUG 2023-04-14 17:43:01,832 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,832 ==== SSA block rewrite pass on 100
DEBUG 2023-04-14 17:43:01,832 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,834 on stmt: empty.2 = phi(incoming_values=[Var(empty, _torontonian.py:59), Var(empty.3, _torontonian.py:65), Var(empty, _torontonian.py:59)], incoming_blocks=[48, 259, 92])
DEBUG 2023-04-14 17:43:01,834 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,834 on stmt: $82pred = call bool82(empty.2, func=bool82, args=(Var(empty.2, _torontonian.py:65),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,834 on stmt: branch $82pred, 271, 120
DEBUG 2023-04-14 17:43:01,834 ==== SSA block rewrite pass on 120
DEBUG 2023-04-14 17:43:01,834 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,834 on stmt: $const86.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,834 on stmt: i = r - $const86.1
DEBUG 2023-04-14 17:43:01,834 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,834 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:01,834 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,834 on stmt: i.2 = phi(incoming_values=[Var(i, _torontonian.py:66), Var(i.1, _torontonian.py:68)], incoming_blocks=[120, 144])
DEBUG 2023-04-14 17:43:01,834 on stmt: $const94.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,834 on stmt: $96compare_op.2 = i.2 >= $const94.1
DEBUG 2023-04-14 17:43:01,834 on stmt: bool98 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,834 on stmt: $98pred = call bool98($96compare_op.2, func=bool98, args=(Var($96compare_op.2, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,834 on stmt: branch $98pred, 138, 174
DEBUG 2023-04-14 17:43:01,834 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:01,834 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,834 on stmt: $104binary_subscr.2 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,834 on stmt: $110binary_add.5 = i.2 + n
DEBUG 2023-04-14 17:43:01,835 on stmt: $114binary_subtract.7 = $110binary_add.5 - r
DEBUG 2023-04-14 17:43:01,835 on stmt: $116compare_op.8 = $104binary_subscr.2 == $114binary_subtract.7
DEBUG 2023-04-14 17:43:01,835 on stmt: bool118 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,835 on stmt: $118pred = call bool118($116compare_op.8, func=bool118, args=(Var($116compare_op.8, _torontonian.py:67),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,835 on stmt: branch $118pred, 144, 174
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 144
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: $const122.1 = const(int, 1)
DEBUG 2023-04-14 17:43:01,835 on stmt: $124inplace_subtract.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=i.2, rhs=$const122.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,835 on stmt: i.1 = $124inplace_subtract.2
DEBUG 2023-04-14 17:43:01,835 on stmt: jump 130
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 174
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:01,835 on stmt: $134compare_op.2 = i.2 < $const132.1
DEBUG 2023-04-14 17:43:01,835 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:01,835 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, _torontonian.py:69),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,835 on stmt: branch $136pred, 176, 200
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: empty.1 = const(bool, True)
DEBUG 2023-04-14 17:43:01,835 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: $150binary_subscr.4 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,835 on stmt: $const152.5 = const(int, 1)
DEBUG 2023-04-14 17:43:01,835 on stmt: $154inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.4, rhs=$const152.5, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:01,835 on stmt: indices[i.2] = $154inplace_add.6
DEBUG 2023-04-14 17:43:01,835 on stmt: $160load_global.7 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:01,835 on stmt: $const164.9 = const(int, 1)
DEBUG 2023-04-14 17:43:01,835 on stmt: $166binary_add.10 = i.2 + $const164.9
DEBUG 2023-04-14 17:43:01,835 on stmt: $170call_function.12 = call $160load_global.7($166binary_add.10, r, func=$160load_global.7, args=[Var($166binary_add.10, _torontonian.py:73), Var(r, _torontonian.py:57)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,835 on stmt: $172get_iter.13 = getiter(value=$170call_function.12)
DEBUG 2023-04-14 17:43:01,835 on stmt: $phi174.0 = $172get_iter.13
DEBUG 2023-04-14 17:43:01,835 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 226
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: $174for_iter.1 = iternext(value=$phi174.0)
DEBUG 2023-04-14 17:43:01,835 on stmt: $174for_iter.2 = pair_first(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,835 on stmt: $174for_iter.3 = pair_second(value=$174for_iter.1)
DEBUG 2023-04-14 17:43:01,835 on stmt: $phi176.1 = $174for_iter.2
DEBUG 2023-04-14 17:43:01,835 on stmt: branch $174for_iter.3, 227, 234
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 227
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: j = $phi176.1
DEBUG 2023-04-14 17:43:01,835 on stmt: $const182.4 = const(int, 1)
DEBUG 2023-04-14 17:43:01,835 on stmt: $184binary_subtract.5 = j - $const182.4
DEBUG 2023-04-14 17:43:01,835 on stmt: $186binary_subscr.6 = getitem(value=indices, index=$184binary_subtract.5, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,835 on stmt: $const188.7 = const(int, 1)
DEBUG 2023-04-14 17:43:01,835 on stmt: $190binary_add.8 = $186binary_subscr.6 + $const188.7
DEBUG 2023-04-14 17:43:01,835 on stmt: indices[j] = $190binary_add.8
DEBUG 2023-04-14 17:43:01,835 on stmt: jump 226
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 234
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: $212get_iter.6 = getiter(value=indices)
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26_implicit0 = $212get_iter.6
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__v2build_list_0 = build_list(items=[])
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__vphi20_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__vphi8_0 = closure__locals___listcomp__v26__v2build_list_0
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__vphi6_1 = closure__locals___listcomp__v26_implicit0
DEBUG 2023-04-14 17:43:01,835 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 271
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: $const226.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,835 on stmt: $228return_value.1 = cast(value=$const226.0)
DEBUG 2023-04-14 17:43:01,835 on stmt: return $228return_value.1
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 259
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: empty.3 = phi(incoming_values=[Var(empty.1, _torontonian.py:70), Var(empty.2, _torontonian.py:65)], incoming_blocks=[176, 257])
DEBUG 2023-04-14 17:43:01,835 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 236
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__v6for_iter_2 = iternext(value=closure__locals___listcomp__v26__vphi6_1)
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v26__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__vphi8_2 = closure__locals___listcomp__v26__v6for_iter_3
DEBUG 2023-04-14 17:43:01,835 on stmt: branch closure__locals___listcomp__v26__v6for_iter_4, 248, 257
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 248
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26_i = closure__locals___listcomp__v26__vphi8_2
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v26__v10load_deref_3, index=closure__locals___listcomp__v26_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__v16list_append_6 = getattr(value=closure__locals___listcomp__v26__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__v16list_append_7 = call closure__locals___listcomp__v26__v16list_append_6(closure__locals___listcomp__v26__v14binary_subscr_5, func=closure__locals___listcomp__v26__v16list_append_6, args=(Var(closure__locals___listcomp__v26__v14binary_subscr_5, _torontonian.py:76),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,835 on stmt: jump 236
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 257
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v26__v20return_value_1 = closure__locals___listcomp__v26__vphi20_0
DEBUG 2023-04-14 17:43:01,835 on stmt: result = closure__locals___listcomp__v26__v20return_value_1
DEBUG 2023-04-14 17:43:01,835 on stmt: $220yield_value.9 = yield result
DEBUG 2023-04-14 17:43:01,835 on stmt: jump 259
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v27__v6for_iter_2 = iternext(value=closure__locals___listcomp__v27__vphi6_1)
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v27__v6for_iter_3 = pair_first(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v27__v6for_iter_4 = pair_second(value=closure__locals___listcomp__v27__v6for_iter_2)
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v27__vphi8_2 = closure__locals___listcomp__v27__v6for_iter_3
DEBUG 2023-04-14 17:43:01,835 on stmt: branch closure__locals___listcomp__v27__v6for_iter_4, 84, 92
DEBUG 2023-04-14 17:43:01,835 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:01,835 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v27_i = closure__locals___listcomp__v27__vphi8_2
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v27__v10load_deref_3 = pool
DEBUG 2023-04-14 17:43:01,835 on stmt: closure__locals___listcomp__v27__v14binary_subscr_5 = getitem(value=closure__locals___listcomp__v27__v10load_deref_3, index=closure__locals___listcomp__v27_i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:01,840 on stmt: closure__locals___listcomp__v27__v16list_append_6 = getattr(value=closure__locals___listcomp__v27__vphi8_0, attr=append)
DEBUG 2023-04-14 17:43:01,840 on stmt: closure__locals___listcomp__v27__v16list_append_7 = call closure__locals___listcomp__v27__v16list_append_6(closure__locals___listcomp__v27__v14binary_subscr_5, func=closure__locals___listcomp__v27__v16list_append_6, args=(Var(closure__locals___listcomp__v27__v14binary_subscr_5, _torontonian.py:62),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,840 on stmt: jump 80
DEBUG 2023-04-14 17:43:01,840 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:01,840 Running <numba.core.ssa._FixSSAVars object at 0x0000026619371250>
DEBUG 2023-04-14 17:43:01,840 on stmt: closure__locals___listcomp__v27__v20return_value_1 = closure__locals___listcomp__v27__vphi20_0
DEBUG 2023-04-14 17:43:01,840 on stmt: result.1 = closure__locals___listcomp__v27__v20return_value_1
DEBUG 2023-04-14 17:43:01,840 on stmt: $76yield_value.9 = yield result.1
DEBUG 2023-04-14 17:43:01,840 on stmt: jump 100
DEBUG 2023-04-14 17:43:01,904 bytecode dump:
>          0	NOP(arg=None, lineno=469)
           2	BUILD_LIST(arg=0, lineno=469)
           4	STORE_FAST(arg=1, lineno=469)
           6	LOAD_FAST(arg=1, lineno=470)
           8	LOAD_METHOD(arg=0, lineno=470)
          10	LOAD_FAST(arg=0, lineno=470)
          12	CALL_METHOD(arg=1, lineno=470)
          14	POP_TOP(arg=None, lineno=470)
          16	LOAD_FAST(arg=1, lineno=471)
          18	RETURN_VALUE(arg=None, lineno=471)
DEBUG 2023-04-14 17:43:01,904 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,904 stack: []
DEBUG 2023-04-14 17:43:01,904 dispatch pc=0, inst=NOP(arg=None, lineno=469)
DEBUG 2023-04-14 17:43:01,904 stack []
DEBUG 2023-04-14 17:43:01,904 dispatch pc=2, inst=BUILD_LIST(arg=0, lineno=469)
DEBUG 2023-04-14 17:43:01,906 stack []
DEBUG 2023-04-14 17:43:01,906 dispatch pc=4, inst=STORE_FAST(arg=1, lineno=469)
DEBUG 2023-04-14 17:43:01,906 stack ['$2build_list.0']
DEBUG 2023-04-14 17:43:01,906 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=470)
DEBUG 2023-04-14 17:43:01,906 stack []
DEBUG 2023-04-14 17:43:01,906 dispatch pc=8, inst=LOAD_METHOD(arg=0, lineno=470)
DEBUG 2023-04-14 17:43:01,906 stack ['$res6.1']
DEBUG 2023-04-14 17:43:01,906 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=470)
DEBUG 2023-04-14 17:43:01,906 stack ['$8load_method.2']
DEBUG 2023-04-14 17:43:01,906 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=470)
DEBUG 2023-04-14 17:43:01,906 stack ['$8load_method.2', '$iterable10.3']
DEBUG 2023-04-14 17:43:01,906 dispatch pc=14, inst=POP_TOP(arg=None, lineno=470)
DEBUG 2023-04-14 17:43:01,906 stack ['$12call_method.4']
DEBUG 2023-04-14 17:43:01,906 dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=471)
DEBUG 2023-04-14 17:43:01,906 stack []
DEBUG 2023-04-14 17:43:01,906 dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=471)
DEBUG 2023-04-14 17:43:01,906 stack ['$res16.5']
DEBUG 2023-04-14 17:43:01,906 end state. edges=[]
DEBUG 2023-04-14 17:43:01,906 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:01,906 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:01,906 defmap: {}
DEBUG 2023-04-14 17:43:01,906 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:01,906 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:01,906 keep phismap: {}
DEBUG 2023-04-14 17:43:01,906 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:01,906 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:01,906 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'items': [], 'res': '$2build_list.0'}), (4, {'value': '$2build_list.0'}), (6, {'res': '$res6.1'}), (8, {'item': '$res6.1', 'res': '$8load_method.2'}), (10, {'res': '$iterable10.3'}), (12, {'func': '$8load_method.2', 'args': ['$iterable10.3'], 'res': '$12call_method.4'}), (16, {'res': '$res16.5'}), (18, {'retval': '$res16.5', 'castval': '$18return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:01,906 label 0:
    iterable = arg(0, name=iterable)         ['iterable']
    res = build_list(items=[])               ['res']
    $8load_method.2 = getattr(value=res, attr=extend) ['$8load_method.2', 'res']
    $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:469)], kws=(), vararg=None, varkwarg=None, target=None) ['$12call_method.4', '$8load_method.2', 'iterable']
    $18return_value.6 = cast(value=res)      ['$18return_value.6', 'res']
    return $18return_value.6                 ['$18return_value.6']

DEBUG 2023-04-14 17:43:01,906 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:01,906 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661948A8E0>
DEBUG 2023-04-14 17:43:01,906 on stmt: iterable = arg(0, name=iterable)
DEBUG 2023-04-14 17:43:01,906 on stmt: res = build_list(items=[])
DEBUG 2023-04-14 17:43:01,906 on stmt: $8load_method.2 = getattr(value=res, attr=extend)
DEBUG 2023-04-14 17:43:01,906 on stmt: $12call_method.4 = call $8load_method.2(iterable, func=$8load_method.2, args=[Var(iterable, listobj.py:469)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,906 on stmt: $18return_value.6 = cast(value=res)
DEBUG 2023-04-14 17:43:01,906 on stmt: return $18return_value.6
DEBUG 2023-04-14 17:43:01,906 defs defaultdict(<class 'list'>,
            {'$12call_method.4': [<numba.core.ir.Assign object at 0x000002661947C3D0>],
             '$18return_value.6': [<numba.core.ir.Assign object at 0x000002661947C5E0>],
             '$8load_method.2': [<numba.core.ir.Assign object at 0x000002661947C0A0>],
             'iterable': [<numba.core.ir.Assign object at 0x0000026619479910>],
             'res': [<numba.core.ir.Assign object at 0x0000026619479CD0>]})
DEBUG 2023-04-14 17:43:01,906 SSA violators set()
DEBUG 2023-04-14 17:43:01,917 bytecode dump:
>          0	NOP(arg=None, lineno=918)
           2	LOAD_FAST(arg=0, lineno=918)
           4	LOAD_ATTR(arg=0, lineno=918)
           6	STORE_FAST(arg=2, lineno=918)
           8	LOAD_FAST(arg=1, lineno=919)
          10	GET_ITER(arg=None, lineno=919)
>         12	FOR_ITER(arg=12, lineno=919)
          14	STORE_FAST(arg=3, lineno=919)
          16	LOAD_FAST(arg=2, lineno=920)
          18	LOAD_FAST(arg=3, lineno=920)
          20	CALL_FUNCTION(arg=1, lineno=920)
          22	POP_TOP(arg=None, lineno=920)
          24	JUMP_ABSOLUTE(arg=12, lineno=920)
>         26	LOAD_CONST(arg=0, lineno=920)
          28	RETURN_VALUE(arg=None, lineno=920)
DEBUG 2023-04-14 17:43:01,917 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:01,917 stack: []
DEBUG 2023-04-14 17:43:01,917 dispatch pc=0, inst=NOP(arg=None, lineno=918)
DEBUG 2023-04-14 17:43:01,917 stack []
DEBUG 2023-04-14 17:43:01,925 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=918)
DEBUG 2023-04-14 17:43:01,925 stack []
DEBUG 2023-04-14 17:43:01,925 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=918)
DEBUG 2023-04-14 17:43:01,925 stack ['$lst2.0']
DEBUG 2023-04-14 17:43:01,925 dispatch pc=6, inst=STORE_FAST(arg=2, lineno=918)
DEBUG 2023-04-14 17:43:01,925 stack ['$4load_attr.1']
DEBUG 2023-04-14 17:43:01,925 dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=919)
DEBUG 2023-04-14 17:43:01,925 stack []
DEBUG 2023-04-14 17:43:01,925 dispatch pc=10, inst=GET_ITER(arg=None, lineno=919)
DEBUG 2023-04-14 17:43:01,925 stack ['$iterable8.2']
DEBUG 2023-04-14 17:43:01,925 end state. edges=[Edge(pc=12, stack=('$10get_iter.3',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,925 pending: deque([State(pc_initial=12 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,925 stack: ['$phi12.0']
DEBUG 2023-04-14 17:43:01,925 dispatch pc=12, inst=FOR_ITER(arg=12, lineno=919)
DEBUG 2023-04-14 17:43:01,925 stack ['$phi12.0']
DEBUG 2023-04-14 17:43:01,925 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,925 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,925 stack: []
DEBUG 2023-04-14 17:43:01,925 dispatch pc=26, inst=LOAD_CONST(arg=0, lineno=920)
DEBUG 2023-04-14 17:43:01,925 stack []
DEBUG 2023-04-14 17:43:01,925 dispatch pc=28, inst=RETURN_VALUE(arg=None, lineno=920)
DEBUG 2023-04-14 17:43:01,925 stack ['$const26.0']
DEBUG 2023-04-14 17:43:01,925 end state. edges=[]
DEBUG 2023-04-14 17:43:01,925 pending: deque([State(pc_initial=14 nstack_initial=2)])
DEBUG 2023-04-14 17:43:01,925 stack: ['$phi14.0', '$phi14.1']
DEBUG 2023-04-14 17:43:01,925 dispatch pc=14, inst=STORE_FAST(arg=3, lineno=919)
DEBUG 2023-04-14 17:43:01,925 stack ['$phi14.0', '$phi14.1']
DEBUG 2023-04-14 17:43:01,925 dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=920)
DEBUG 2023-04-14 17:43:01,925 stack ['$phi14.0']
DEBUG 2023-04-14 17:43:01,925 dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=920)
DEBUG 2023-04-14 17:43:01,925 stack ['$phi14.0', '$meth16.2']
DEBUG 2023-04-14 17:43:01,925 dispatch pc=20, inst=CALL_FUNCTION(arg=1, lineno=920)
DEBUG 2023-04-14 17:43:01,925 stack ['$phi14.0', '$meth16.2', '$v18.3']
DEBUG 2023-04-14 17:43:01,925 dispatch pc=22, inst=POP_TOP(arg=None, lineno=920)
DEBUG 2023-04-14 17:43:01,925 stack ['$phi14.0', '$20call_function.4']
DEBUG 2023-04-14 17:43:01,925 dispatch pc=24, inst=JUMP_ABSOLUTE(arg=12, lineno=920)
DEBUG 2023-04-14 17:43:01,925 stack ['$phi14.0']
DEBUG 2023-04-14 17:43:01,925 end state. edges=[Edge(pc=12, stack=('$phi14.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:01,927 pending: deque([State(pc_initial=12 nstack_initial=1)])
DEBUG 2023-04-14 17:43:01,927 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:01,927 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=26 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:01,927 defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1)}
DEBUG 2023-04-14 17:43:01,927 phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:01,927 changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:01,927 changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:01,927 changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.3',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:01,927 keep phismap: {'$phi12.0': {('$10get_iter.3', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))}}
DEBUG 2023-04-14 17:43:01,927 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.3'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'}})
DEBUG 2023-04-14 17:43:01,927 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:01,927 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$lst2.0'}), (4, {'item': '$lst2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$iterable8.2'}), (10, {'value': '$iterable8.2', 'res': '$10get_iter.3'})), outgoing_phis={'$phi12.0': '$10get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.3',)})
DEBUG 2023-04-14 17:43:01,927 block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 14: ('$phi12.0', '$12for_iter.2')})
DEBUG 2023-04-14 17:43:01,927 block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'value': '$phi14.1'}), (16, {'res': '$meth16.2'}), (18, {'res': '$v18.3'}), (20, {'func': '$meth16.2', 'args': ['$v18.3'], 'res': '$20call_function.4'}), (24, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$phi14.0',)})
DEBUG 2023-04-14 17:43:01,927 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'retval': '$const26.0', 'castval': '$28return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:01,927 label 0:
    lst = arg(0, name=lst)                   ['lst']
    iterable = arg(1, name=iterable)         ['iterable']
    meth = getattr(value=lst, attr=append)   ['lst', 'meth']
    $10get_iter.3 = getiter(value=iterable)  ['$10get_iter.3', 'iterable']
    $phi12.0 = $10get_iter.3                 ['$10get_iter.3', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 26             ['$12for_iter.3']
label 14:
    v = $phi14.1                             ['$phi14.1', 'v']
    $20call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:919)], kws=(), vararg=None, varkwarg=None, target=None) ['$20call_function.4', 'meth', 'v']
    jump 12                                  []
label 26:
    $const26.0 = const(NoneType, None)       ['$const26.0']
    $28return_value.1 = cast(value=$const26.0) ['$28return_value.1', '$const26.0']
    return $28return_value.1                 ['$28return_value.1']

DEBUG 2023-04-14 17:43:01,927 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:01,927 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266194AF700>
DEBUG 2023-04-14 17:43:01,927 on stmt: lst = arg(0, name=lst)
DEBUG 2023-04-14 17:43:01,927 on stmt: iterable = arg(1, name=iterable)
DEBUG 2023-04-14 17:43:01,927 on stmt: meth = getattr(value=lst, attr=append)
DEBUG 2023-04-14 17:43:01,927 on stmt: $10get_iter.3 = getiter(value=iterable)
DEBUG 2023-04-14 17:43:01,927 on stmt: $phi12.0 = $10get_iter.3
DEBUG 2023-04-14 17:43:01,927 on stmt: jump 12
DEBUG 2023-04-14 17:43:01,927 ==== SSA block analysis pass on 12
DEBUG 2023-04-14 17:43:01,935 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266194AF700>
DEBUG 2023-04-14 17:43:01,935 on stmt: $12for_iter.1 = iternext(value=$phi12.0)
DEBUG 2023-04-14 17:43:01,935 on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
DEBUG 2023-04-14 17:43:01,935 on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
DEBUG 2023-04-14 17:43:01,935 on stmt: $phi14.1 = $12for_iter.2
DEBUG 2023-04-14 17:43:01,935 on stmt: branch $12for_iter.3, 14, 26
DEBUG 2023-04-14 17:43:01,935 ==== SSA block analysis pass on 14
DEBUG 2023-04-14 17:43:01,935 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266194AF700>
DEBUG 2023-04-14 17:43:01,936 on stmt: v = $phi14.1
DEBUG 2023-04-14 17:43:01,936 on stmt: $20call_function.4 = call meth(v, func=meth, args=[Var(v, listobj.py:919)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:01,936 on stmt: jump 12
DEBUG 2023-04-14 17:43:01,936 ==== SSA block analysis pass on 26
DEBUG 2023-04-14 17:43:01,936 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266194AF700>
DEBUG 2023-04-14 17:43:01,936 on stmt: $const26.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:01,936 on stmt: $28return_value.1 = cast(value=$const26.0)
DEBUG 2023-04-14 17:43:01,936 on stmt: return $28return_value.1
DEBUG 2023-04-14 17:43:01,936 defs defaultdict(<class 'list'>,
            {'$10get_iter.3': [<numba.core.ir.Assign object at 0x00000266194B7790>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x00000266194B7A00>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x00000266194B7B20>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x00000266194B7C40>],
             '$20call_function.4': [<numba.core.ir.Assign object at 0x00000266194BB370>],
             '$28return_value.1': [<numba.core.ir.Assign object at 0x00000266194BB6D0>],
             '$const26.0': [<numba.core.ir.Assign object at 0x00000266194BB550>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x00000266194B71F0>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x00000266194B7940>],
             'iterable': [<numba.core.ir.Assign object at 0x00000266194B7130>],
             'lst': [<numba.core.ir.Assign object at 0x000002661940B820>],
             'meth': [<numba.core.ir.Assign object at 0x00000266194B73D0>],
             'v': [<numba.core.ir.Assign object at 0x00000266194B7F10>]})
DEBUG 2023-04-14 17:43:01,936 SSA violators set()
DEBUG 2023-04-14 17:43:02,408 bytecode dump:
>          0	NOP(arg=None, lineno=4438)
           2	LOAD_GLOBAL(arg=0, lineno=4438)
           4	LOAD_METHOD(arg=1, lineno=4438)
           6	LOAD_FAST(arg=0, lineno=4438)
           8	CALL_METHOD(arg=1, lineno=4438)
          10	RETURN_VALUE(arg=None, lineno=4438)
DEBUG 2023-04-14 17:43:02,408 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,408 stack: []
DEBUG 2023-04-14 17:43:02,408 dispatch pc=0, inst=NOP(arg=None, lineno=4438)
DEBUG 2023-04-14 17:43:02,408 stack []
DEBUG 2023-04-14 17:43:02,408 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4438)
DEBUG 2023-04-14 17:43:02,408 stack []
DEBUG 2023-04-14 17:43:02,408 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=4438)
DEBUG 2023-04-14 17:43:02,408 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:02,408 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4438)
DEBUG 2023-04-14 17:43:02,408 stack ['$4load_method.1']
DEBUG 2023-04-14 17:43:02,408 dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=4438)
DEBUG 2023-04-14 17:43:02,408 stack ['$4load_method.1', '$a6.2']
DEBUG 2023-04-14 17:43:02,408 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=4438)
DEBUG 2023-04-14 17:43:02,408 stack ['$8call_method.3']
DEBUG 2023-04-14 17:43:02,408 end state. edges=[]
DEBUG 2023-04-14 17:43:02,408 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:02,408 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:02,408 defmap: {}
DEBUG 2023-04-14 17:43:02,408 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,408 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,408 keep phismap: {}
DEBUG 2023-04-14 17:43:02,408 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:02,408 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:02,408 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'retval': '$8call_method.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:02,408 label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=array) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:4438)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'a']
    $10return_value.4 = cast(value=$8call_method.3) ['$10return_value.4', '$8call_method.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2023-04-14 17:43:02,416 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:02,416 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266197B4250>
DEBUG 2023-04-14 17:43:02,416 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:02,416 on stmt: dtype = arg(1, name=dtype)
DEBUG 2023-04-14 17:43:02,416 on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:02,416 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=array)
DEBUG 2023-04-14 17:43:02,416 on stmt: $8call_method.3 = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, arraymath.py:4438)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,416 on stmt: $10return_value.4 = cast(value=$8call_method.3)
DEBUG 2023-04-14 17:43:02,416 on stmt: return $10return_value.4
DEBUG 2023-04-14 17:43:02,416 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x00000266197B4A30>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000266197B4490>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x00000266197B4610>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x00000266197B4940>],
             'a': [<numba.core.ir.Assign object at 0x00000266197ACA60>],
             'dtype': [<numba.core.ir.Assign object at 0x00000266197B4310>]})
DEBUG 2023-04-14 17:43:02,416 SSA violators set()
DEBUG 2023-04-14 17:43:02,418 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2023-04-14 17:43:02,418 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,418 stack: []
DEBUG 2023-04-14 17:43:02,418 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2023-04-14 17:43:02,418 stack []
DEBUG 2023-04-14 17:43:02,418 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2023-04-14 17:43:02,418 stack []
DEBUG 2023-04-14 17:43:02,418 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2023-04-14 17:43:02,418 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:02,418 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2023-04-14 17:43:02,418 stack ['$2load_global.0', '$object4.1']
DEBUG 2023-04-14 17:43:02,418 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2023-04-14 17:43:02,418 stack ['$6call_function.2']
DEBUG 2023-04-14 17:43:02,418 end state. edges=[]
DEBUG 2023-04-14 17:43:02,418 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:02,418 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:02,418 defmap: {}
DEBUG 2023-04-14 17:43:02,418 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,418 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,418 keep phismap: {}
DEBUG 2023-04-14 17:43:02,418 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:02,418 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:02,418 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$object4.1'}), (6, {'func': '$2load_global.0', 'args': ['$object4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:02,418 label 0:
    object = arg(0, name=object)             ['object']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(object, func=$2load_global.0, args=[Var(object, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'object']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:43:02,425 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:02,425 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661976B6A0>
DEBUG 2023-04-14 17:43:02,425 on stmt: object = arg(0, name=object)
DEBUG 2023-04-14 17:43:02,426 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2023-04-14 17:43:02,426 on stmt: $6call_function.2 = call $2load_global.0(object, func=$2load_global.0, args=[Var(object, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,426 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2023-04-14 17:43:02,426 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:43:02,426 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619751F10>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x00000266197FD700>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x00000266197FDA30>],
             'object': [<numba.core.ir.Assign object at 0x000002661976B5B0>]})
DEBUG 2023-04-14 17:43:02,426 SSA violators set()
DEBUG 2023-04-14 17:43:02,490 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	LOAD_FAST(arg=1, lineno=3)
           8	CALL_FUNCTION(arg=2, lineno=3)
          10	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2023-04-14 17:43:02,490 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,490 stack: []
DEBUG 2023-04-14 17:43:02,490 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2023-04-14 17:43:02,490 stack []
DEBUG 2023-04-14 17:43:02,490 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2023-04-14 17:43:02,490 stack []
DEBUG 2023-04-14 17:43:02,490 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2023-04-14 17:43:02,490 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:02,490 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3)
DEBUG 2023-04-14 17:43:02,490 stack ['$2load_global.0', '$arrays4.1']
DEBUG 2023-04-14 17:43:02,490 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3)
DEBUG 2023-04-14 17:43:02,490 stack ['$2load_global.0', '$arrays4.1', '$axis6.2']
DEBUG 2023-04-14 17:43:02,490 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2023-04-14 17:43:02,490 stack ['$8call_function.3']
DEBUG 2023-04-14 17:43:02,490 end state. edges=[]
DEBUG 2023-04-14 17:43:02,490 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:02,490 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:02,490 defmap: {}
DEBUG 2023-04-14 17:43:02,490 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,490 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,490 keep phismap: {}
DEBUG 2023-04-14 17:43:02,490 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:02,490 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:02,490 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$arrays4.1'}), (6, {'res': '$axis6.2'}), (8, {'func': '$2load_global.0', 'args': ['$arrays4.1', '$axis6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:02,490 label 0:
    arrays = arg(0, name=arrays)             ['arrays']
    axis = arg(1, name=axis)                 ['axis']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(arrays, axis, func=$2load_global.0, args=[Var(arrays, <string>:3), Var(axis, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'arrays', 'axis']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2023-04-14 17:43:02,495 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:02,495 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661978A400>
DEBUG 2023-04-14 17:43:02,495 on stmt: arrays = arg(0, name=arrays)
DEBUG 2023-04-14 17:43:02,495 on stmt: axis = arg(1, name=axis)
DEBUG 2023-04-14 17:43:02,495 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2023-04-14 17:43:02,495 on stmt: $8call_function.3 = call $2load_global.0(arrays, axis, func=$2load_global.0, args=[Var(arrays, <string>:3), Var(axis, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,495 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2023-04-14 17:43:02,495 on stmt: return $10return_value.4
DEBUG 2023-04-14 17:43:02,495 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x00000266197709A0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619770D60>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x0000026619770730>],
             'arrays': [<numba.core.ir.Assign object at 0x000002661978A940>],
             'axis': [<numba.core.ir.Assign object at 0x0000026619770A30>]})
DEBUG 2023-04-14 17:43:02,495 SSA violators set()
DEBUG 2023-04-14 17:43:02,595 bytecode dump:
>          0	NOP(arg=None, lineno=126)
           2	LOAD_FAST(arg=0, lineno=126)
           4	LOAD_FAST(arg=1, lineno=126)
           6	BINARY_SUBSCR(arg=None, lineno=126)
           8	LOAD_CONST(arg=1, lineno=126)
          10	LOAD_CONST(arg=1, lineno=126)
          12	BUILD_SLICE(arg=2, lineno=126)
          14	LOAD_FAST(arg=2, lineno=126)
          16	BUILD_TUPLE(arg=2, lineno=126)
          18	BINARY_SUBSCR(arg=None, lineno=126)
          20	RETURN_VALUE(arg=None, lineno=126)
DEBUG 2023-04-14 17:43:02,595 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,595 stack: []
DEBUG 2023-04-14 17:43:02,595 dispatch pc=0, inst=NOP(arg=None, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack []
DEBUG 2023-04-14 17:43:02,595 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack []
DEBUG 2023-04-14 17:43:02,595 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack ['$arr2.0']
DEBUG 2023-04-14 17:43:02,595 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack ['$arr2.0', '$rows4.1']
DEBUG 2023-04-14 17:43:02,595 dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack ['$6binary_subscr.2']
DEBUG 2023-04-14 17:43:02,595 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack ['$6binary_subscr.2', '$const8.3']
DEBUG 2023-04-14 17:43:02,595 dispatch pc=12, inst=BUILD_SLICE(arg=2, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack ['$6binary_subscr.2', '$const8.3', '$const10.4']
DEBUG 2023-04-14 17:43:02,595 dispatch pc=14, inst=LOAD_FAST(arg=2, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack ['$6binary_subscr.2', '$12build_slice.6']
DEBUG 2023-04-14 17:43:02,595 dispatch pc=16, inst=BUILD_TUPLE(arg=2, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack ['$6binary_subscr.2', '$12build_slice.6', '$cols14.7']
DEBUG 2023-04-14 17:43:02,595 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack ['$6binary_subscr.2', '$16build_tuple.8']
DEBUG 2023-04-14 17:43:02,595 dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=126)
DEBUG 2023-04-14 17:43:02,595 stack ['$18binary_subscr.9']
DEBUG 2023-04-14 17:43:02,595 end state. edges=[]
DEBUG 2023-04-14 17:43:02,595 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:02,595 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:02,595 defmap: {}
DEBUG 2023-04-14 17:43:02,595 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,595 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,595 keep phismap: {}
DEBUG 2023-04-14 17:43:02,595 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:02,595 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:02,595 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arr2.0'}), (4, {'res': '$rows4.1'}), (6, {'index': '$rows4.1', 'target': '$arr2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$const8.3'}), (10, {'res': '$const10.4'}), (12, {'start': '$const8.3', 'stop': '$const10.4', 'step': None, 'res': '$12build_slice.6', 'slicevar': '$12build_slice.5'}), (14, {'res': '$cols14.7'}), (16, {'items': ['$12build_slice.6', '$cols14.7'], 'res': '$16build_tuple.8'}), (18, {'index': '$16build_tuple.8', 'target': '$6binary_subscr.2', 'res': '$18binary_subscr.9'}), (20, {'retval': '$18binary_subscr.9', 'castval': '$20return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:02,595 label 0:
    arr = arg(0, name=arr)                   ['arr']
    rows = arg(1, name=rows)                 ['rows']
    cols = arg(2, name=cols)                 ['cols']
    $6binary_subscr.2 = getitem(value=arr, index=rows, fn=<built-in function getitem>) ['$6binary_subscr.2', 'arr', 'rows']
    $const8.3 = const(NoneType, None)        ['$const8.3']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $12build_slice.5 = global(slice: <class 'slice'>) ['$12build_slice.5']
    $12build_slice.6 = call $12build_slice.5($const8.3, $const10.4, func=$12build_slice.5, args=(Var($const8.3, _torontonian.py:126), Var($const10.4, _torontonian.py:126)), kws=(), vararg=None, varkwarg=None, target=None) ['$12build_slice.5', '$12build_slice.6', '$const10.4', '$const8.3']
    $16build_tuple.8 = build_tuple(items=[Var($12build_slice.6, _torontonian.py:126), Var(cols, _torontonian.py:126)]) ['$12build_slice.6', '$16build_tuple.8', 'cols']
    $18binary_subscr.9 = getitem(value=$6binary_subscr.2, index=$16build_tuple.8, fn=<built-in function getitem>) ['$16build_tuple.8', '$18binary_subscr.9', '$6binary_subscr.2']
    $20return_value.10 = cast(value=$18binary_subscr.9) ['$18binary_subscr.9', '$20return_value.10']
    return $20return_value.10                ['$20return_value.10']

DEBUG 2023-04-14 17:43:02,606 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:02,606 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619792A60>
DEBUG 2023-04-14 17:43:02,606 on stmt: arr = arg(0, name=arr)
DEBUG 2023-04-14 17:43:02,606 on stmt: rows = arg(1, name=rows)
DEBUG 2023-04-14 17:43:02,606 on stmt: cols = arg(2, name=cols)
DEBUG 2023-04-14 17:43:02,606 on stmt: $6binary_subscr.2 = getitem(value=arr, index=rows, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:02,606 on stmt: $const8.3 = const(NoneType, None)
DEBUG 2023-04-14 17:43:02,606 on stmt: $const10.4 = const(NoneType, None)
DEBUG 2023-04-14 17:43:02,606 on stmt: $12build_slice.5 = global(slice: <class 'slice'>)
DEBUG 2023-04-14 17:43:02,606 on stmt: $12build_slice.6 = call $12build_slice.5($const8.3, $const10.4, func=$12build_slice.5, args=(Var($const8.3, _torontonian.py:126), Var($const10.4, _torontonian.py:126)), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,606 on stmt: $16build_tuple.8 = build_tuple(items=[Var($12build_slice.6, _torontonian.py:126), Var(cols, _torontonian.py:126)])
DEBUG 2023-04-14 17:43:02,606 on stmt: $18binary_subscr.9 = getitem(value=$6binary_subscr.2, index=$16build_tuple.8, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:02,606 on stmt: $20return_value.10 = cast(value=$18binary_subscr.9)
DEBUG 2023-04-14 17:43:02,606 on stmt: return $20return_value.10
DEBUG 2023-04-14 17:43:02,606 defs defaultdict(<class 'list'>,
            {'$12build_slice.5': [<numba.core.ir.Assign object at 0x000002661978A490>],
             '$12build_slice.6': [<numba.core.ir.Assign object at 0x000002661978A250>],
             '$16build_tuple.8': [<numba.core.ir.Assign object at 0x000002661978ACD0>],
             '$18binary_subscr.9': [<numba.core.ir.Assign object at 0x000002661978A820>],
             '$20return_value.10': [<numba.core.ir.Assign object at 0x000002661978A160>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0x0000026619820430>],
             '$const10.4': [<numba.core.ir.Assign object at 0x000002661978A580>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000002661978AAF0>],
             'arr': [<numba.core.ir.Assign object at 0x0000026619823A30>],
             'cols': [<numba.core.ir.Assign object at 0x0000026619820A60>],
             'rows': [<numba.core.ir.Assign object at 0x0000026619820AF0>]})
DEBUG 2023-04-14 17:43:02,606 SSA violators set()
DEBUG 2023-04-14 17:43:02,734 bytecode dump:
>          0	NOP(arg=None, lineno=4328)
           2	LOAD_GLOBAL(arg=0, lineno=4328)
           4	LOAD_FAST(arg=0, lineno=4328)
           6	LOAD_FAST(arg=1, lineno=4328)
           8	CALL_FUNCTION(arg=2, lineno=4328)
          10	STORE_FAST(arg=4, lineno=4328)
          12	LOAD_GLOBAL(arg=1, lineno=4329)
          14	LOAD_METHOD(arg=2, lineno=4329)
          16	LOAD_FAST(arg=0, lineno=4329)
          18	LOAD_FAST(arg=4, lineno=4329)
          20	BUILD_TUPLE(arg=2, lineno=4329)
          22	LOAD_DEREF(arg=0, lineno=4329)
          24	CALL_METHOD(arg=2, lineno=4329)
          26	STORE_FAST(arg=5, lineno=4329)
          28	LOAD_FAST(arg=2, lineno=4330)
          30	LOAD_CONST(arg=1, lineno=4330)
          32	COMPARE_OP(arg=5, lineno=4330)
          34	POP_JUMP_IF_FALSE(arg=82, lineno=4330)
          36	LOAD_GLOBAL(arg=3, lineno=4331)
          38	LOAD_FAST(arg=0, lineno=4331)
          40	LOAD_FAST(arg=4, lineno=4331)
          42	LOAD_FAST(arg=2, lineno=4331)
          44	BINARY_SUBTRACT(arg=None, lineno=4331)
          46	CALL_FUNCTION(arg=2, lineno=4331)
          48	STORE_FAST(arg=6, lineno=4331)
          50	LOAD_GLOBAL(arg=4, lineno=4332)
          52	LOAD_FAST(arg=6, lineno=4332)
          54	CALL_FUNCTION(arg=1, lineno=4332)
          56	GET_ITER(arg=None, lineno=4332)
>         58	FOR_ITER(arg=20, lineno=4332)
          60	STORE_FAST(arg=7, lineno=4332)
          62	LOAD_CONST(arg=2, lineno=4333)
          64	LOAD_FAST(arg=5, lineno=4333)
          66	LOAD_FAST(arg=7, lineno=4333)
          68	LOAD_FAST(arg=7, lineno=4333)
          70	LOAD_FAST(arg=2, lineno=4333)
          72	BINARY_ADD(arg=None, lineno=4333)
          74	BUILD_TUPLE(arg=2, lineno=4333)
          76	STORE_SUBSCR(arg=None, lineno=4333)
          78	JUMP_ABSOLUTE(arg=58, lineno=4333)
>         80	JUMP_FORWARD(arg=44, lineno=4333)
>         82	LOAD_GLOBAL(arg=3, lineno=4335)
          84	LOAD_FAST(arg=0, lineno=4335)
          86	LOAD_FAST(arg=2, lineno=4335)
          88	BINARY_ADD(arg=None, lineno=4335)
          90	LOAD_FAST(arg=4, lineno=4335)
          92	CALL_FUNCTION(arg=2, lineno=4335)
          94	STORE_FAST(arg=6, lineno=4335)
          96	LOAD_GLOBAL(arg=4, lineno=4336)
          98	LOAD_FAST(arg=6, lineno=4336)
         100	CALL_FUNCTION(arg=1, lineno=4336)
         102	GET_ITER(arg=None, lineno=4336)
>        104	FOR_ITER(arg=20, lineno=4336)
         106	STORE_FAST(arg=7, lineno=4336)
         108	LOAD_CONST(arg=2, lineno=4337)
         110	LOAD_FAST(arg=5, lineno=4337)
         112	LOAD_FAST(arg=7, lineno=4337)
         114	LOAD_FAST(arg=2, lineno=4337)
         116	BINARY_SUBTRACT(arg=None, lineno=4337)
         118	LOAD_FAST(arg=7, lineno=4337)
         120	BUILD_TUPLE(arg=2, lineno=4337)
         122	STORE_SUBSCR(arg=None, lineno=4337)
         124	JUMP_ABSOLUTE(arg=104, lineno=4337)
>        126	LOAD_FAST(arg=5, lineno=4338)
         128	RETURN_VALUE(arg=None, lineno=4338)
DEBUG 2023-04-14 17:43:02,734 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,734 stack: []
DEBUG 2023-04-14 17:43:02,734 dispatch pc=0, inst=NOP(arg=None, lineno=4328)
DEBUG 2023-04-14 17:43:02,734 stack []
DEBUG 2023-04-14 17:43:02,734 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4328)
DEBUG 2023-04-14 17:43:02,734 stack []
DEBUG 2023-04-14 17:43:02,734 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4328)
DEBUG 2023-04-14 17:43:02,734 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:02,734 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4328)
DEBUG 2023-04-14 17:43:02,734 stack ['$2load_global.0', '$N4.1']
DEBUG 2023-04-14 17:43:02,734 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=4328)
DEBUG 2023-04-14 17:43:02,734 stack ['$2load_global.0', '$N4.1', '$M6.2']
DEBUG 2023-04-14 17:43:02,734 dispatch pc=10, inst=STORE_FAST(arg=4, lineno=4328)
DEBUG 2023-04-14 17:43:02,734 stack ['$8call_function.3']
DEBUG 2023-04-14 17:43:02,734 dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=4329)
DEBUG 2023-04-14 17:43:02,734 stack []
DEBUG 2023-04-14 17:43:02,734 dispatch pc=14, inst=LOAD_METHOD(arg=2, lineno=4329)
DEBUG 2023-04-14 17:43:02,734 stack ['$12load_global.4']
DEBUG 2023-04-14 17:43:02,734 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4329)
DEBUG 2023-04-14 17:43:02,734 stack ['$14load_method.5']
DEBUG 2023-04-14 17:43:02,734 dispatch pc=18, inst=LOAD_FAST(arg=4, lineno=4329)
DEBUG 2023-04-14 17:43:02,734 stack ['$14load_method.5', '$N16.6']
DEBUG 2023-04-14 17:43:02,734 dispatch pc=20, inst=BUILD_TUPLE(arg=2, lineno=4329)
DEBUG 2023-04-14 17:43:02,735 stack ['$14load_method.5', '$N16.6', '$_M18.7']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=22, inst=LOAD_DEREF(arg=0, lineno=4329)
DEBUG 2023-04-14 17:43:02,736 stack ['$14load_method.5', '$20build_tuple.8']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=24, inst=CALL_METHOD(arg=2, lineno=4329)
DEBUG 2023-04-14 17:43:02,736 stack ['$14load_method.5', '$20build_tuple.8', '$22load_deref.9']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=26, inst=STORE_FAST(arg=5, lineno=4329)
DEBUG 2023-04-14 17:43:02,736 stack ['$24call_method.10']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=4330)
DEBUG 2023-04-14 17:43:02,736 stack []
DEBUG 2023-04-14 17:43:02,736 dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=4330)
DEBUG 2023-04-14 17:43:02,736 stack ['$k28.11']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=32, inst=COMPARE_OP(arg=5, lineno=4330)
DEBUG 2023-04-14 17:43:02,736 stack ['$k28.11', '$const30.12']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=82, lineno=4330)
DEBUG 2023-04-14 17:43:02,736 stack ['$32compare_op.13']
DEBUG 2023-04-14 17:43:02,736 end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:02,736 pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=82 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,736 stack: []
DEBUG 2023-04-14 17:43:02,736 dispatch pc=36, inst=LOAD_GLOBAL(arg=3, lineno=4331)
DEBUG 2023-04-14 17:43:02,736 stack []
DEBUG 2023-04-14 17:43:02,736 dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=4331)
DEBUG 2023-04-14 17:43:02,736 stack ['$36load_global.0']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=40, inst=LOAD_FAST(arg=4, lineno=4331)
DEBUG 2023-04-14 17:43:02,736 stack ['$36load_global.0', '$N38.1']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=4331)
DEBUG 2023-04-14 17:43:02,736 stack ['$36load_global.0', '$N38.1', '$_M40.2']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=44, inst=BINARY_SUBTRACT(arg=None, lineno=4331)
DEBUG 2023-04-14 17:43:02,736 stack ['$36load_global.0', '$N38.1', '$_M40.2', '$k42.3']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=46, inst=CALL_FUNCTION(arg=2, lineno=4331)
DEBUG 2023-04-14 17:43:02,736 stack ['$36load_global.0', '$N38.1', '$44binary_subtract.4']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4331)
DEBUG 2023-04-14 17:43:02,736 stack ['$46call_function.5']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=50, inst=LOAD_GLOBAL(arg=4, lineno=4332)
DEBUG 2023-04-14 17:43:02,736 stack []
DEBUG 2023-04-14 17:43:02,736 dispatch pc=52, inst=LOAD_FAST(arg=6, lineno=4332)
DEBUG 2023-04-14 17:43:02,736 stack ['$50load_global.6']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=4332)
DEBUG 2023-04-14 17:43:02,736 stack ['$50load_global.6', '$d52.7']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=56, inst=GET_ITER(arg=None, lineno=4332)
DEBUG 2023-04-14 17:43:02,736 stack ['$54call_function.8']
DEBUG 2023-04-14 17:43:02,736 end state. edges=[Edge(pc=58, stack=('$56get_iter.9',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:02,736 pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=58 nstack_initial=1)])
DEBUG 2023-04-14 17:43:02,736 stack: []
DEBUG 2023-04-14 17:43:02,736 dispatch pc=82, inst=LOAD_GLOBAL(arg=3, lineno=4335)
DEBUG 2023-04-14 17:43:02,736 stack []
DEBUG 2023-04-14 17:43:02,736 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=4335)
DEBUG 2023-04-14 17:43:02,736 stack ['$82load_global.0']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=86, inst=LOAD_FAST(arg=2, lineno=4335)
DEBUG 2023-04-14 17:43:02,736 stack ['$82load_global.0', '$N84.1']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=4335)
DEBUG 2023-04-14 17:43:02,736 stack ['$82load_global.0', '$N84.1', '$k86.2']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=4335)
DEBUG 2023-04-14 17:43:02,736 stack ['$82load_global.0', '$88binary_add.3']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=92, inst=CALL_FUNCTION(arg=2, lineno=4335)
DEBUG 2023-04-14 17:43:02,736 stack ['$82load_global.0', '$88binary_add.3', '$_M90.4']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=94, inst=STORE_FAST(arg=6, lineno=4335)
DEBUG 2023-04-14 17:43:02,736 stack ['$92call_function.5']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=96, inst=LOAD_GLOBAL(arg=4, lineno=4336)
DEBUG 2023-04-14 17:43:02,736 stack []
DEBUG 2023-04-14 17:43:02,736 dispatch pc=98, inst=LOAD_FAST(arg=6, lineno=4336)
DEBUG 2023-04-14 17:43:02,736 stack ['$96load_global.6']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=100, inst=CALL_FUNCTION(arg=1, lineno=4336)
DEBUG 2023-04-14 17:43:02,736 stack ['$96load_global.6', '$d98.7']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=102, inst=GET_ITER(arg=None, lineno=4336)
DEBUG 2023-04-14 17:43:02,736 stack ['$100call_function.8']
DEBUG 2023-04-14 17:43:02,736 end state. edges=[Edge(pc=104, stack=('$102get_iter.9',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:02,736 pending: deque([State(pc_initial=58 nstack_initial=1), State(pc_initial=104 nstack_initial=1)])
DEBUG 2023-04-14 17:43:02,736 stack: ['$phi58.0']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=58, inst=FOR_ITER(arg=20, lineno=4332)
DEBUG 2023-04-14 17:43:02,736 stack ['$phi58.0']
DEBUG 2023-04-14 17:43:02,736 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=60, stack=('$phi58.0', '$58for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:02,736 pending: deque([State(pc_initial=104 nstack_initial=1), State(pc_initial=80 nstack_initial=0), State(pc_initial=60 nstack_initial=2)])
DEBUG 2023-04-14 17:43:02,736 stack: ['$phi104.0']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=104, inst=FOR_ITER(arg=20, lineno=4336)
DEBUG 2023-04-14 17:43:02,736 stack ['$phi104.0']
DEBUG 2023-04-14 17:43:02,736 end state. edges=[Edge(pc=126, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=('$phi104.0', '$104for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:02,736 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=60 nstack_initial=2), State(pc_initial=126 nstack_initial=0), State(pc_initial=106 nstack_initial=2)])
DEBUG 2023-04-14 17:43:02,736 stack: []
DEBUG 2023-04-14 17:43:02,736 dispatch pc=80, inst=JUMP_FORWARD(arg=44, lineno=4333)
DEBUG 2023-04-14 17:43:02,736 stack []
DEBUG 2023-04-14 17:43:02,736 end state. edges=[Edge(pc=126, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:02,736 pending: deque([State(pc_initial=60 nstack_initial=2), State(pc_initial=126 nstack_initial=0), State(pc_initial=106 nstack_initial=2), State(pc_initial=126 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,736 stack: ['$phi60.0', '$phi60.1']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=60, inst=STORE_FAST(arg=7, lineno=4332)
DEBUG 2023-04-14 17:43:02,736 stack ['$phi60.0', '$phi60.1']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=4333)
DEBUG 2023-04-14 17:43:02,736 stack ['$phi60.0']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=4333)
DEBUG 2023-04-14 17:43:02,736 stack ['$phi60.0', '$const62.2']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=66, inst=LOAD_FAST(arg=7, lineno=4333)
DEBUG 2023-04-14 17:43:02,736 stack ['$phi60.0', '$const62.2', '$arr64.3']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=68, inst=LOAD_FAST(arg=7, lineno=4333)
DEBUG 2023-04-14 17:43:02,736 stack ['$phi60.0', '$const62.2', '$arr64.3', '$i66.4']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=70, inst=LOAD_FAST(arg=2, lineno=4333)
DEBUG 2023-04-14 17:43:02,736 stack ['$phi60.0', '$const62.2', '$arr64.3', '$i66.4', '$i68.5']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=72, inst=BINARY_ADD(arg=None, lineno=4333)
DEBUG 2023-04-14 17:43:02,736 stack ['$phi60.0', '$const62.2', '$arr64.3', '$i66.4', '$i68.5', '$k70.6']
DEBUG 2023-04-14 17:43:02,736 dispatch pc=74, inst=BUILD_TUPLE(arg=2, lineno=4333)
DEBUG 2023-04-14 17:43:02,736 stack ['$phi60.0', '$const62.2', '$arr64.3', '$i66.4', '$72binary_add.7']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=76, inst=STORE_SUBSCR(arg=None, lineno=4333)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi60.0', '$const62.2', '$arr64.3', '$74build_tuple.8']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=78, inst=JUMP_ABSOLUTE(arg=58, lineno=4333)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi60.0']
DEBUG 2023-04-14 17:43:02,741 end state. edges=[Edge(pc=58, stack=('$phi60.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:02,741 pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=106 nstack_initial=2), State(pc_initial=126 nstack_initial=0), State(pc_initial=58 nstack_initial=1)])
DEBUG 2023-04-14 17:43:02,741 stack: []
DEBUG 2023-04-14 17:43:02,741 dispatch pc=126, inst=LOAD_FAST(arg=5, lineno=4338)
DEBUG 2023-04-14 17:43:02,741 stack []
DEBUG 2023-04-14 17:43:02,741 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=4338)
DEBUG 2023-04-14 17:43:02,741 stack ['$arr126.0']
DEBUG 2023-04-14 17:43:02,741 end state. edges=[]
DEBUG 2023-04-14 17:43:02,741 pending: deque([State(pc_initial=106 nstack_initial=2), State(pc_initial=126 nstack_initial=0), State(pc_initial=58 nstack_initial=1)])
DEBUG 2023-04-14 17:43:02,741 stack: ['$phi106.0', '$phi106.1']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=106, inst=STORE_FAST(arg=7, lineno=4336)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi106.0', '$phi106.1']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=108, inst=LOAD_CONST(arg=2, lineno=4337)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi106.0']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=4337)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi106.0', '$const108.2']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=112, inst=LOAD_FAST(arg=7, lineno=4337)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi106.0', '$const108.2', '$arr110.3']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=114, inst=LOAD_FAST(arg=2, lineno=4337)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi106.0', '$const108.2', '$arr110.3', '$i112.4']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=116, inst=BINARY_SUBTRACT(arg=None, lineno=4337)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi106.0', '$const108.2', '$arr110.3', '$i112.4', '$k114.5']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=4337)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi106.0', '$const108.2', '$arr110.3', '$116binary_subtract.6']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=120, inst=BUILD_TUPLE(arg=2, lineno=4337)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi106.0', '$const108.2', '$arr110.3', '$116binary_subtract.6', '$i118.7']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=122, inst=STORE_SUBSCR(arg=None, lineno=4337)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi106.0', '$const108.2', '$arr110.3', '$120build_tuple.8']
DEBUG 2023-04-14 17:43:02,741 dispatch pc=124, inst=JUMP_ABSOLUTE(arg=104, lineno=4337)
DEBUG 2023-04-14 17:43:02,741 stack ['$phi106.0']
DEBUG 2023-04-14 17:43:02,741 end state. edges=[Edge(pc=104, stack=('$phi106.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:02,741 pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=58 nstack_initial=1), State(pc_initial=104 nstack_initial=1)])
DEBUG 2023-04-14 17:43:02,741 pending: deque([State(pc_initial=58 nstack_initial=1), State(pc_initial=104 nstack_initial=1)])
DEBUG 2023-04-14 17:43:02,741 pending: deque([State(pc_initial=104 nstack_initial=1)])
DEBUG 2023-04-14 17:43:02,741 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:02,741 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=1): {'$phi58.0'},
             State(pc_initial=60 nstack_initial=2): {'$phi60.1'},
             State(pc_initial=80 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=1): {'$phi104.0'},
             State(pc_initial=106 nstack_initial=2): {'$phi106.1'},
             State(pc_initial=126 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:02,744 defmap: {'$phi104.0': State(pc_initial=82 nstack_initial=0),
 '$phi106.1': State(pc_initial=104 nstack_initial=1),
 '$phi58.0': State(pc_initial=36 nstack_initial=0),
 '$phi60.1': State(pc_initial=58 nstack_initial=1)}
DEBUG 2023-04-14 17:43:02,744 phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$102get_iter.9',
                            State(pc_initial=82 nstack_initial=0)),
                           ('$phi106.0',
                            State(pc_initial=106 nstack_initial=2))},
             '$phi106.0': {('$phi104.0',
                            State(pc_initial=104 nstack_initial=1))},
             '$phi106.1': {('$104for_iter.2',
                            State(pc_initial=104 nstack_initial=1))},
             '$phi58.0': {('$56get_iter.9',
                           State(pc_initial=36 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=2))},
             '$phi60.0': {('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:02,744 changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$102get_iter.9',
                            State(pc_initial=82 nstack_initial=0)),
                           ('$phi104.0',
                            State(pc_initial=104 nstack_initial=1))},
             '$phi106.0': {('$102get_iter.9',
                            State(pc_initial=82 nstack_initial=0))},
             '$phi106.1': {('$104for_iter.2',
                            State(pc_initial=104 nstack_initial=1))},
             '$phi58.0': {('$56get_iter.9',
                           State(pc_initial=36 nstack_initial=0)),
                          ('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi60.0': {('$56get_iter.9',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:02,745 changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$102get_iter.9',
                            State(pc_initial=82 nstack_initial=0))},
             '$phi106.0': {('$102get_iter.9',
                            State(pc_initial=82 nstack_initial=0))},
             '$phi106.1': {('$104for_iter.2',
                            State(pc_initial=104 nstack_initial=1))},
             '$phi58.0': {('$56get_iter.9',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi60.0': {('$56get_iter.9',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:02,745 changing phismap: defaultdict(<class 'set'>,
            {'$phi104.0': {('$102get_iter.9',
                            State(pc_initial=82 nstack_initial=0))},
             '$phi106.0': {('$102get_iter.9',
                            State(pc_initial=82 nstack_initial=0))},
             '$phi106.1': {('$104for_iter.2',
                            State(pc_initial=104 nstack_initial=1))},
             '$phi58.0': {('$56get_iter.9',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi60.0': {('$56get_iter.9',
                           State(pc_initial=36 nstack_initial=0))},
             '$phi60.1': {('$58for_iter.2',
                           State(pc_initial=58 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:02,746 keep phismap: {'$phi104.0': {('$102get_iter.9', State(pc_initial=82 nstack_initial=0))},
 '$phi106.1': {('$104for_iter.2', State(pc_initial=104 nstack_initial=1))},
 '$phi58.0': {('$56get_iter.9', State(pc_initial=36 nstack_initial=0))},
 '$phi60.1': {('$58for_iter.2', State(pc_initial=58 nstack_initial=1))}}
DEBUG 2023-04-14 17:43:02,746 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=36 nstack_initial=0): {'$phi58.0': '$56get_iter.9'},
             State(pc_initial=58 nstack_initial=1): {'$phi60.1': '$58for_iter.2'},
             State(pc_initial=82 nstack_initial=0): {'$phi104.0': '$102get_iter.9'},
             State(pc_initial=104 nstack_initial=1): {'$phi106.1': '$104for_iter.2'}})
DEBUG 2023-04-14 17:43:02,746 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:02,746 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$N4.1'}), (6, {'res': '$M6.2'}), (8, {'func': '$2load_global.0', 'args': ['$N4.1', '$M6.2'], 'res': '$8call_function.3'}), (10, {'value': '$8call_function.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_method.5'}), (16, {'res': '$N16.6'}), (18, {'res': '$_M18.7'}), (20, {'items': ['$N16.6', '$_M18.7'], 'res': '$20build_tuple.8'}), (22, {'res': '$22load_deref.9'}), (24, {'func': '$14load_method.5', 'args': ['$20build_tuple.8', '$22load_deref.9'], 'res': '$24call_method.10'}), (26, {'value': '$24call_method.10'}), (28, {'res': '$k28.11'}), (30, {'res': '$const30.12'}), (32, {'lhs': '$k28.11', 'rhs': '$const30.12', 'res': '$32compare_op.13'}), (34, {'pred': '$32compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: (), 82: ()})
DEBUG 2023-04-14 17:43:02,746 block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$36load_global.0'}), (38, {'res': '$N38.1'}), (40, {'res': '$_M40.2'}), (42, {'res': '$k42.3'}), (44, {'lhs': '$_M40.2', 'rhs': '$k42.3', 'res': '$44binary_subtract.4'}), (46, {'func': '$36load_global.0', 'args': ['$N38.1', '$44binary_subtract.4'], 'res': '$46call_function.5'}), (48, {'value': '$46call_function.5'}), (50, {'res': '$50load_global.6'}), (52, {'res': '$d52.7'}), (54, {'func': '$50load_global.6', 'args': ['$d52.7'], 'res': '$54call_function.8'}), (56, {'value': '$54call_function.8', 'res': '$56get_iter.9'})), outgoing_phis={'$phi58.0': '$56get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ('$56get_iter.9',)})
DEBUG 2023-04-14 17:43:02,746 block_infos State(pc_initial=58 nstack_initial=1):
AdaptBlockInfo(insts=((58, {'iterator': '$phi58.0', 'pair': '$58for_iter.1', 'indval': '$58for_iter.2', 'pred': '$58for_iter.3'}),), outgoing_phis={'$phi60.1': '$58for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 60: ('$phi58.0', '$58for_iter.2')})
DEBUG 2023-04-14 17:43:02,746 block_infos State(pc_initial=60 nstack_initial=2):
AdaptBlockInfo(insts=((60, {'value': '$phi60.1'}), (62, {'res': '$const62.2'}), (64, {'res': '$arr64.3'}), (66, {'res': '$i66.4'}), (68, {'res': '$i68.5'}), (70, {'res': '$k70.6'}), (72, {'lhs': '$i68.5', 'rhs': '$k70.6', 'res': '$72binary_add.7'}), (74, {'items': ['$i66.4', '$72binary_add.7'], 'res': '$74build_tuple.8'}), (76, {'target': '$arr64.3', 'index': '$74build_tuple.8', 'value': '$const62.2'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: ('$phi60.0',)})
DEBUG 2023-04-14 17:43:02,746 block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={126: ()})
DEBUG 2023-04-14 17:43:02,746 block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'res': '$N84.1'}), (86, {'res': '$k86.2'}), (88, {'lhs': '$N84.1', 'rhs': '$k86.2', 'res': '$88binary_add.3'}), (90, {'res': '$_M90.4'}), (92, {'func': '$82load_global.0', 'args': ['$88binary_add.3', '$_M90.4'], 'res': '$92call_function.5'}), (94, {'value': '$92call_function.5'}), (96, {'res': '$96load_global.6'}), (98, {'res': '$d98.7'}), (100, {'func': '$96load_global.6', 'args': ['$d98.7'], 'res': '$100call_function.8'}), (102, {'value': '$100call_function.8', 'res': '$102get_iter.9'})), outgoing_phis={'$phi104.0': '$102get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: ('$102get_iter.9',)})
DEBUG 2023-04-14 17:43:02,746 block_infos State(pc_initial=104 nstack_initial=1):
AdaptBlockInfo(insts=((104, {'iterator': '$phi104.0', 'pair': '$104for_iter.1', 'indval': '$104for_iter.2', 'pred': '$104for_iter.3'}),), outgoing_phis={'$phi106.1': '$104for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={126: (), 106: ('$phi104.0', '$104for_iter.2')})
DEBUG 2023-04-14 17:43:02,746 block_infos State(pc_initial=106 nstack_initial=2):
AdaptBlockInfo(insts=((106, {'value': '$phi106.1'}), (108, {'res': '$const108.2'}), (110, {'res': '$arr110.3'}), (112, {'res': '$i112.4'}), (114, {'res': '$k114.5'}), (116, {'lhs': '$i112.4', 'rhs': '$k114.5', 'res': '$116binary_subtract.6'}), (118, {'res': '$i118.7'}), (120, {'items': ['$116binary_subtract.6', '$i118.7'], 'res': '$120build_tuple.8'}), (122, {'target': '$arr110.3', 'index': '$120build_tuple.8', 'value': '$const108.2'}), (124, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: ('$phi106.0',)})
DEBUG 2023-04-14 17:43:02,746 block_infos State(pc_initial=126 nstack_initial=0):
AdaptBlockInfo(insts=((126, {'res': '$arr126.0'}), (128, {'retval': '$arr126.0', 'castval': '$128return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:02,746 label 0:
    N = arg(0, name=N)                       ['N']
    M = arg(1, name=M)                       ['M']
    k = arg(2, name=k)                       ['k']
    dtype = arg(3, name=dtype)               ['dtype']
    $2load_global.0 = global(_eye_none_handler: <function _eye_none_handler at 0x0000026617543DC0>) ['$2load_global.0']
    _M = call $2load_global.0(N, M, func=$2load_global.0, args=[Var(N, arrayobj.py:4328), Var(M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'M', 'N', '_M']
    $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$12load_global.4']
    $14load_method.5 = getattr(value=$12load_global.4, attr=zeros) ['$12load_global.4', '$14load_method.5']
    $20build_tuple.8 = build_tuple(items=[Var(N, arrayobj.py:4328), Var(_M, arrayobj.py:4328)]) ['$20build_tuple.8', 'N', '_M']
    $22load_deref.9 = freevar(dt: float64)   ['$22load_deref.9']
    arr = call $14load_method.5($20build_tuple.8, $22load_deref.9, func=$14load_method.5, args=[Var($20build_tuple.8, arrayobj.py:4329), Var($22load_deref.9, arrayobj.py:4329)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_method.5', '$20build_tuple.8', '$22load_deref.9', 'arr']
    $const30.12 = const(int, 0)              ['$const30.12']
    $32compare_op.13 = k >= $const30.12      ['$32compare_op.13', '$const30.12', 'k']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.13, func=bool34, args=(Var($32compare_op.13, arrayobj.py:4330),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.13', '$34pred', 'bool34']
    branch $34pred, 36, 82                   ['$34pred']
label 36:
    $36load_global.0 = global(min: <built-in function min>) ['$36load_global.0']
    $44binary_subtract.4 = _M - k            ['$44binary_subtract.4', '_M', 'k']
    d = call $36load_global.0(N, $44binary_subtract.4, func=$36load_global.0, args=[Var(N, arrayobj.py:4328), Var($44binary_subtract.4, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.0', '$44binary_subtract.4', 'N', 'd']
    $50load_global.6 = global(range: <class 'range'>) ['$50load_global.6']
    $54call_function.8 = call $50load_global.6(d, func=$50load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.6', '$54call_function.8', 'd']
    $56get_iter.9 = getiter(value=$54call_function.8) ['$54call_function.8', '$56get_iter.9']
    $phi58.0 = $56get_iter.9                 ['$56get_iter.9', '$phi58.0']
    jump 58                                  []
label 58:
    $58for_iter.1 = iternext(value=$phi58.0) ['$58for_iter.1', '$phi58.0']
    $58for_iter.2 = pair_first(value=$58for_iter.1) ['$58for_iter.1', '$58for_iter.2']
    $58for_iter.3 = pair_second(value=$58for_iter.1) ['$58for_iter.1', '$58for_iter.3']
    $phi60.1 = $58for_iter.2                 ['$58for_iter.2', '$phi60.1']
    branch $58for_iter.3, 60, 80             ['$58for_iter.3']
label 60:
    i = $phi60.1                             ['$phi60.1', 'i']
    $const62.2 = const(int, 1)               ['$const62.2']
    $72binary_add.7 = i + k                  ['$72binary_add.7', 'i', 'k']
    $74build_tuple.8 = build_tuple(items=[Var(i, arrayobj.py:4332), Var($72binary_add.7, arrayobj.py:4333)]) ['$72binary_add.7', '$74build_tuple.8', 'i']
    arr[$74build_tuple.8] = $const62.2       ['$74build_tuple.8', '$const62.2', 'arr']
    jump 58                                  []
label 80:
    jump 126                                 []
label 82:
    $82load_global.0 = global(min: <built-in function min>) ['$82load_global.0']
    $88binary_add.3 = N + k                  ['$88binary_add.3', 'N', 'k']
    d = call $82load_global.0($88binary_add.3, _M, func=$82load_global.0, args=[Var($88binary_add.3, arrayobj.py:4335), Var(_M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None) ['$82load_global.0', '$88binary_add.3', '_M', 'd']
    $96load_global.6 = global(range: <class 'range'>) ['$96load_global.6']
    $100call_function.8 = call $96load_global.6(d, func=$96load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None) ['$100call_function.8', '$96load_global.6', 'd']
    $102get_iter.9 = getiter(value=$100call_function.8) ['$100call_function.8', '$102get_iter.9']
    $phi104.0 = $102get_iter.9               ['$102get_iter.9', '$phi104.0']
    jump 104                                 []
label 104:
    $104for_iter.1 = iternext(value=$phi104.0) ['$104for_iter.1', '$phi104.0']
    $104for_iter.2 = pair_first(value=$104for_iter.1) ['$104for_iter.1', '$104for_iter.2']
    $104for_iter.3 = pair_second(value=$104for_iter.1) ['$104for_iter.1', '$104for_iter.3']
    $phi106.1 = $104for_iter.2               ['$104for_iter.2', '$phi106.1']
    branch $104for_iter.3, 106, 126          ['$104for_iter.3']
label 106:
    i = $phi106.1                            ['$phi106.1', 'i']
    $const108.2 = const(int, 1)              ['$const108.2']
    $116binary_subtract.6 = i - k            ['$116binary_subtract.6', 'i', 'k']
    $120build_tuple.8 = build_tuple(items=[Var($116binary_subtract.6, arrayobj.py:4337), Var(i, arrayobj.py:4332)]) ['$116binary_subtract.6', '$120build_tuple.8', 'i']
    arr[$120build_tuple.8] = $const108.2     ['$120build_tuple.8', '$const108.2', 'arr']
    jump 104                                 []
label 126:
    $128return_value.1 = cast(value=arr)     ['$128return_value.1', 'arr']
    return $128return_value.1                ['$128return_value.1']

DEBUG 2023-04-14 17:43:02,767 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266198FC250>
DEBUG 2023-04-14 17:43:02,767 on stmt: N = arg(0, name=N)
DEBUG 2023-04-14 17:43:02,767 on stmt: M = arg(1, name=M)
DEBUG 2023-04-14 17:43:02,767 on stmt: k = arg(2, name=k)
DEBUG 2023-04-14 17:43:02,767 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:02,767 on stmt: $2load_global.0 = global(_eye_none_handler: <function _eye_none_handler at 0x0000026617543DC0>)
DEBUG 2023-04-14 17:43:02,767 on stmt: _M = call $2load_global.0(N, M, func=$2load_global.0, args=[Var(N, arrayobj.py:4328), Var(M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:02,767 on stmt: $14load_method.5 = getattr(value=$12load_global.4, attr=zeros)
DEBUG 2023-04-14 17:43:02,767 on stmt: $20build_tuple.8 = build_tuple(items=[Var(N, arrayobj.py:4328), Var(_M, arrayobj.py:4328)])
DEBUG 2023-04-14 17:43:02,767 on stmt: $22load_deref.9 = freevar(dt: float64)
DEBUG 2023-04-14 17:43:02,767 on stmt: arr = call $14load_method.5($20build_tuple.8, $22load_deref.9, func=$14load_method.5, args=[Var($20build_tuple.8, arrayobj.py:4329), Var($22load_deref.9, arrayobj.py:4329)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: $const30.12 = const(int, 0)
DEBUG 2023-04-14 17:43:02,767 on stmt: $32compare_op.13 = k >= $const30.12
DEBUG 2023-04-14 17:43:02,767 on stmt: bool34 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:02,767 on stmt: $34pred = call bool34($32compare_op.13, func=bool34, args=(Var($32compare_op.13, arrayobj.py:4330),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: branch $34pred, 36, 82
DEBUG 2023-04-14 17:43:02,767 ==== SSA block analysis pass on 36
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266198FC250>
DEBUG 2023-04-14 17:43:02,767 on stmt: $36load_global.0 = global(min: <built-in function min>)
DEBUG 2023-04-14 17:43:02,767 on stmt: $44binary_subtract.4 = _M - k
DEBUG 2023-04-14 17:43:02,767 on stmt: d = call $36load_global.0(N, $44binary_subtract.4, func=$36load_global.0, args=[Var(N, arrayobj.py:4328), Var($44binary_subtract.4, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: $50load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:02,767 on stmt: $54call_function.8 = call $50load_global.6(d, func=$50load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: $56get_iter.9 = getiter(value=$54call_function.8)
DEBUG 2023-04-14 17:43:02,767 on stmt: $phi58.0 = $56get_iter.9
DEBUG 2023-04-14 17:43:02,767 on stmt: jump 58
DEBUG 2023-04-14 17:43:02,767 ==== SSA block analysis pass on 58
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266198FC250>
DEBUG 2023-04-14 17:43:02,767 on stmt: $58for_iter.1 = iternext(value=$phi58.0)
DEBUG 2023-04-14 17:43:02,767 on stmt: $58for_iter.2 = pair_first(value=$58for_iter.1)
DEBUG 2023-04-14 17:43:02,767 on stmt: $58for_iter.3 = pair_second(value=$58for_iter.1)
DEBUG 2023-04-14 17:43:02,767 on stmt: $phi60.1 = $58for_iter.2
DEBUG 2023-04-14 17:43:02,767 on stmt: branch $58for_iter.3, 60, 80
DEBUG 2023-04-14 17:43:02,767 ==== SSA block analysis pass on 60
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266198FC250>
DEBUG 2023-04-14 17:43:02,767 on stmt: i = $phi60.1
DEBUG 2023-04-14 17:43:02,767 on stmt: $const62.2 = const(int, 1)
DEBUG 2023-04-14 17:43:02,767 on stmt: $72binary_add.7 = i + k
DEBUG 2023-04-14 17:43:02,767 on stmt: $74build_tuple.8 = build_tuple(items=[Var(i, arrayobj.py:4332), Var($72binary_add.7, arrayobj.py:4333)])
DEBUG 2023-04-14 17:43:02,767 on stmt: arr[$74build_tuple.8] = $const62.2
DEBUG 2023-04-14 17:43:02,767 on stmt: jump 58
DEBUG 2023-04-14 17:43:02,767 ==== SSA block analysis pass on 80
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266198FC250>
DEBUG 2023-04-14 17:43:02,767 on stmt: jump 126
DEBUG 2023-04-14 17:43:02,767 ==== SSA block analysis pass on 82
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266198FC250>
DEBUG 2023-04-14 17:43:02,767 on stmt: $82load_global.0 = global(min: <built-in function min>)
DEBUG 2023-04-14 17:43:02,767 on stmt: $88binary_add.3 = N + k
DEBUG 2023-04-14 17:43:02,767 on stmt: d = call $82load_global.0($88binary_add.3, _M, func=$82load_global.0, args=[Var($88binary_add.3, arrayobj.py:4335), Var(_M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: $96load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:02,767 on stmt: $100call_function.8 = call $96load_global.6(d, func=$96load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: $102get_iter.9 = getiter(value=$100call_function.8)
DEBUG 2023-04-14 17:43:02,767 on stmt: $phi104.0 = $102get_iter.9
DEBUG 2023-04-14 17:43:02,767 on stmt: jump 104
DEBUG 2023-04-14 17:43:02,767 ==== SSA block analysis pass on 104
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266198FC250>
DEBUG 2023-04-14 17:43:02,767 on stmt: $104for_iter.1 = iternext(value=$phi104.0)
DEBUG 2023-04-14 17:43:02,767 on stmt: $104for_iter.2 = pair_first(value=$104for_iter.1)
DEBUG 2023-04-14 17:43:02,767 on stmt: $104for_iter.3 = pair_second(value=$104for_iter.1)
DEBUG 2023-04-14 17:43:02,767 on stmt: $phi106.1 = $104for_iter.2
DEBUG 2023-04-14 17:43:02,767 on stmt: branch $104for_iter.3, 106, 126
DEBUG 2023-04-14 17:43:02,767 ==== SSA block analysis pass on 106
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266198FC250>
DEBUG 2023-04-14 17:43:02,767 on stmt: i = $phi106.1
DEBUG 2023-04-14 17:43:02,767 on stmt: $const108.2 = const(int, 1)
DEBUG 2023-04-14 17:43:02,767 on stmt: $116binary_subtract.6 = i - k
DEBUG 2023-04-14 17:43:02,767 on stmt: $120build_tuple.8 = build_tuple(items=[Var($116binary_subtract.6, arrayobj.py:4337), Var(i, arrayobj.py:4332)])
DEBUG 2023-04-14 17:43:02,767 on stmt: arr[$120build_tuple.8] = $const108.2
DEBUG 2023-04-14 17:43:02,767 on stmt: jump 104
DEBUG 2023-04-14 17:43:02,767 ==== SSA block analysis pass on 126
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266198FC250>
DEBUG 2023-04-14 17:43:02,767 on stmt: $128return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:02,767 on stmt: return $128return_value.1
DEBUG 2023-04-14 17:43:02,767 defs defaultdict(<class 'list'>,
            {'$100call_function.8': [<numba.core.ir.Assign object at 0x00000266198DB8B0>],
             '$102get_iter.9': [<numba.core.ir.Assign object at 0x00000266198DB9D0>],
             '$104for_iter.1': [<numba.core.ir.Assign object at 0x00000266198DBB20>],
             '$104for_iter.2': [<numba.core.ir.Assign object at 0x00000266198DBC40>],
             '$104for_iter.3': [<numba.core.ir.Assign object at 0x00000266198DBD60>],
             '$116binary_subtract.6': [<numba.core.ir.Assign object at 0x00000266198F36A0>],
             '$120build_tuple.8': [<numba.core.ir.Assign object at 0x00000266198F3940>],
             '$128return_value.1': [<numba.core.ir.Assign object at 0x00000266198F3C70>],
             '$12load_global.4': [<numba.core.ir.Assign object at 0x00000266198EA490>],
             '$14load_method.5': [<numba.core.ir.Assign object at 0x00000266198EA610>],
             '$20build_tuple.8': [<numba.core.ir.Assign object at 0x00000266198EAA00>],
             '$22load_deref.9': [<numba.core.ir.Assign object at 0x00000266198EAB50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000266198DEDF0>],
             '$32compare_op.13': [<numba.core.ir.Assign object at 0x00000266198EC280>],
             '$34pred': [<numba.core.ir.Assign object at 0x00000266198EC4F0>],
             '$36load_global.0': [<numba.core.ir.Assign object at 0x00000266198DE6D0>],
             '$44binary_subtract.4': [<numba.core.ir.Assign object at 0x00000266198ECA00>],
             '$50load_global.6': [<numba.core.ir.Assign object at 0x00000266198ECDF0>],
             '$54call_function.8': [<numba.core.ir.Assign object at 0x00000266198EF130>],
             '$56get_iter.9': [<numba.core.ir.Assign object at 0x00000266198EF250>],
             '$58for_iter.1': [<numba.core.ir.Assign object at 0x00000266198EF400>],
             '$58for_iter.2': [<numba.core.ir.Assign object at 0x00000266198EF520>],
             '$58for_iter.3': [<numba.core.ir.Assign object at 0x00000266198EF640>],
             '$72binary_add.7': [<numba.core.ir.Assign object at 0x00000266198DE370>],
             '$74build_tuple.8': [<numba.core.ir.Assign object at 0x00000266198D2C40>],
             '$82load_global.0': [<numba.core.ir.Assign object at 0x00000266198EF880>],
             '$88binary_add.3': [<numba.core.ir.Assign object at 0x00000266198DB100>],
             '$96load_global.6': [<numba.core.ir.Assign object at 0x00000266198DB5B0>],
             '$const108.2': [<numba.core.ir.Assign object at 0x00000266198F3190>],
             '$const30.12': [<numba.core.ir.Assign object at 0x00000266198EC0D0>],
             '$const62.2': [<numba.core.ir.Assign object at 0x00000266198EFA90>],
             '$phi104.0': [<numba.core.ir.Assign object at 0x00000266198EFE80>],
             '$phi106.1': [<numba.core.ir.Assign object at 0x00000266198DBA30>],
             '$phi58.0': [<numba.core.ir.Assign object at 0x00000266198EC6A0>],
             '$phi60.1': [<numba.core.ir.Assign object at 0x00000266198EF340>],
             'M': [<numba.core.ir.Assign object at 0x00000266198DEA30>],
             'N': [<numba.core.ir.Assign object at 0x00000266198DE910>],
             '_M': [<numba.core.ir.Assign object at 0x00000266198EA250>],
             'arr': [<numba.core.ir.Assign object at 0x00000266198EAD60>],
             'bool34': [<numba.core.ir.Assign object at 0x00000266198EC3D0>],
             'd': [<numba.core.ir.Assign object at 0x00000266198ECBB0>,
                   <numba.core.ir.Assign object at 0x00000266198DB3D0>],
             'dtype': [<numba.core.ir.Assign object at 0x00000266198DEC70>],
             'i': [<numba.core.ir.Assign object at 0x00000266198EF910>,
                   <numba.core.ir.Assign object at 0x00000266198F3040>],
             'k': [<numba.core.ir.Assign object at 0x00000266198DEB50>]})
DEBUG 2023-04-14 17:43:02,767 SSA violators {'i', 'd'}
DEBUG 2023-04-14 17:43:02,767 Fix SSA violator on var i
DEBUG 2023-04-14 17:43:02,767 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,767 on stmt: N = arg(0, name=N)
DEBUG 2023-04-14 17:43:02,767 on stmt: M = arg(1, name=M)
DEBUG 2023-04-14 17:43:02,767 on stmt: k = arg(2, name=k)
DEBUG 2023-04-14 17:43:02,767 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:02,767 on stmt: $2load_global.0 = global(_eye_none_handler: <function _eye_none_handler at 0x0000026617543DC0>)
DEBUG 2023-04-14 17:43:02,767 on stmt: _M = call $2load_global.0(N, M, func=$2load_global.0, args=[Var(N, arrayobj.py:4328), Var(M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:02,767 on stmt: $14load_method.5 = getattr(value=$12load_global.4, attr=zeros)
DEBUG 2023-04-14 17:43:02,767 on stmt: $20build_tuple.8 = build_tuple(items=[Var(N, arrayobj.py:4328), Var(_M, arrayobj.py:4328)])
DEBUG 2023-04-14 17:43:02,767 on stmt: $22load_deref.9 = freevar(dt: float64)
DEBUG 2023-04-14 17:43:02,767 on stmt: arr = call $14load_method.5($20build_tuple.8, $22load_deref.9, func=$14load_method.5, args=[Var($20build_tuple.8, arrayobj.py:4329), Var($22load_deref.9, arrayobj.py:4329)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: $const30.12 = const(int, 0)
DEBUG 2023-04-14 17:43:02,767 on stmt: $32compare_op.13 = k >= $const30.12
DEBUG 2023-04-14 17:43:02,767 on stmt: bool34 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:02,767 on stmt: $34pred = call bool34($32compare_op.13, func=bool34, args=(Var($32compare_op.13, arrayobj.py:4330),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: branch $34pred, 36, 82
DEBUG 2023-04-14 17:43:02,767 ==== SSA block rewrite pass on 36
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,767 on stmt: $36load_global.0 = global(min: <built-in function min>)
DEBUG 2023-04-14 17:43:02,767 on stmt: $44binary_subtract.4 = _M - k
DEBUG 2023-04-14 17:43:02,767 on stmt: d = call $36load_global.0(N, $44binary_subtract.4, func=$36load_global.0, args=[Var(N, arrayobj.py:4328), Var($44binary_subtract.4, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: $50load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:02,767 on stmt: $54call_function.8 = call $50load_global.6(d, func=$50load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,767 on stmt: $56get_iter.9 = getiter(value=$54call_function.8)
DEBUG 2023-04-14 17:43:02,767 on stmt: $phi58.0 = $56get_iter.9
DEBUG 2023-04-14 17:43:02,767 on stmt: jump 58
DEBUG 2023-04-14 17:43:02,767 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,767 on stmt: $58for_iter.1 = iternext(value=$phi58.0)
DEBUG 2023-04-14 17:43:02,767 on stmt: $58for_iter.2 = pair_first(value=$58for_iter.1)
DEBUG 2023-04-14 17:43:02,767 on stmt: $58for_iter.3 = pair_second(value=$58for_iter.1)
DEBUG 2023-04-14 17:43:02,767 on stmt: $phi60.1 = $58for_iter.2
DEBUG 2023-04-14 17:43:02,767 on stmt: branch $58for_iter.3, 60, 80
DEBUG 2023-04-14 17:43:02,767 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:02,767 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,775 on stmt: i = $phi60.1
DEBUG 2023-04-14 17:43:02,775 first assign: i
DEBUG 2023-04-14 17:43:02,775 replaced with: i = $phi60.1
DEBUG 2023-04-14 17:43:02,775 on stmt: $const62.2 = const(int, 1)
DEBUG 2023-04-14 17:43:02,775 on stmt: $72binary_add.7 = i + k
DEBUG 2023-04-14 17:43:02,775 on stmt: $74build_tuple.8 = build_tuple(items=[Var(i, arrayobj.py:4332), Var($72binary_add.7, arrayobj.py:4333)])
DEBUG 2023-04-14 17:43:02,775 on stmt: arr[$74build_tuple.8] = $const62.2
DEBUG 2023-04-14 17:43:02,775 on stmt: jump 58
DEBUG 2023-04-14 17:43:02,775 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:02,775 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,775 on stmt: jump 126
DEBUG 2023-04-14 17:43:02,775 ==== SSA block rewrite pass on 82
DEBUG 2023-04-14 17:43:02,775 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,775 on stmt: $82load_global.0 = global(min: <built-in function min>)
DEBUG 2023-04-14 17:43:02,775 on stmt: $88binary_add.3 = N + k
DEBUG 2023-04-14 17:43:02,775 on stmt: d = call $82load_global.0($88binary_add.3, _M, func=$82load_global.0, args=[Var($88binary_add.3, arrayobj.py:4335), Var(_M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,775 on stmt: $96load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:02,775 on stmt: $100call_function.8 = call $96load_global.6(d, func=$96load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,775 on stmt: $102get_iter.9 = getiter(value=$100call_function.8)
DEBUG 2023-04-14 17:43:02,775 on stmt: $phi104.0 = $102get_iter.9
DEBUG 2023-04-14 17:43:02,775 on stmt: jump 104
DEBUG 2023-04-14 17:43:02,775 ==== SSA block rewrite pass on 104
DEBUG 2023-04-14 17:43:02,775 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,775 on stmt: $104for_iter.1 = iternext(value=$phi104.0)
DEBUG 2023-04-14 17:43:02,775 on stmt: $104for_iter.2 = pair_first(value=$104for_iter.1)
DEBUG 2023-04-14 17:43:02,775 on stmt: $104for_iter.3 = pair_second(value=$104for_iter.1)
DEBUG 2023-04-14 17:43:02,775 on stmt: $phi106.1 = $104for_iter.2
DEBUG 2023-04-14 17:43:02,775 on stmt: branch $104for_iter.3, 106, 126
DEBUG 2023-04-14 17:43:02,775 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:02,775 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,775 on stmt: i = $phi106.1
DEBUG 2023-04-14 17:43:02,775 replaced with: i.1 = $phi106.1
DEBUG 2023-04-14 17:43:02,775 on stmt: $const108.2 = const(int, 1)
DEBUG 2023-04-14 17:43:02,775 on stmt: $116binary_subtract.6 = i - k
DEBUG 2023-04-14 17:43:02,775 on stmt: $120build_tuple.8 = build_tuple(items=[Var($116binary_subtract.6, arrayobj.py:4337), Var(i, arrayobj.py:4332)])
DEBUG 2023-04-14 17:43:02,775 on stmt: arr[$120build_tuple.8] = $const108.2
DEBUG 2023-04-14 17:43:02,775 on stmt: jump 104
DEBUG 2023-04-14 17:43:02,775 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:43:02,775 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,775 on stmt: $128return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:02,775 on stmt: return $128return_value.1
DEBUG 2023-04-14 17:43:02,777 Replaced assignments: defaultdict(<class 'list'>,
            {60: [<numba.core.ir.Assign object at 0x00000266198D2FA0>],
             106: [<numba.core.ir.Assign object at 0x00000266198F3EE0>]})
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,777 on stmt: N = arg(0, name=N)
DEBUG 2023-04-14 17:43:02,777 on stmt: M = arg(1, name=M)
DEBUG 2023-04-14 17:43:02,777 on stmt: k = arg(2, name=k)
DEBUG 2023-04-14 17:43:02,777 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:02,777 on stmt: $2load_global.0 = global(_eye_none_handler: <function _eye_none_handler at 0x0000026617543DC0>)
DEBUG 2023-04-14 17:43:02,777 on stmt: _M = call $2load_global.0(N, M, func=$2load_global.0, args=[Var(N, arrayobj.py:4328), Var(M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $14load_method.5 = getattr(value=$12load_global.4, attr=zeros)
DEBUG 2023-04-14 17:43:02,777 on stmt: $20build_tuple.8 = build_tuple(items=[Var(N, arrayobj.py:4328), Var(_M, arrayobj.py:4328)])
DEBUG 2023-04-14 17:43:02,777 on stmt: $22load_deref.9 = freevar(dt: float64)
DEBUG 2023-04-14 17:43:02,777 on stmt: arr = call $14load_method.5($20build_tuple.8, $22load_deref.9, func=$14load_method.5, args=[Var($20build_tuple.8, arrayobj.py:4329), Var($22load_deref.9, arrayobj.py:4329)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $const30.12 = const(int, 0)
DEBUG 2023-04-14 17:43:02,777 on stmt: $32compare_op.13 = k >= $const30.12
DEBUG 2023-04-14 17:43:02,777 on stmt: bool34 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $34pred = call bool34($32compare_op.13, func=bool34, args=(Var($32compare_op.13, arrayobj.py:4330),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: branch $34pred, 36, 82
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 36
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,777 on stmt: $36load_global.0 = global(min: <built-in function min>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $44binary_subtract.4 = _M - k
DEBUG 2023-04-14 17:43:02,777 on stmt: d = call $36load_global.0(N, $44binary_subtract.4, func=$36load_global.0, args=[Var(N, arrayobj.py:4328), Var($44binary_subtract.4, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $50load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $54call_function.8 = call $50load_global.6(d, func=$50load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $56get_iter.9 = getiter(value=$54call_function.8)
DEBUG 2023-04-14 17:43:02,777 on stmt: $phi58.0 = $56get_iter.9
DEBUG 2023-04-14 17:43:02,777 on stmt: jump 58
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,777 on stmt: $58for_iter.1 = iternext(value=$phi58.0)
DEBUG 2023-04-14 17:43:02,777 on stmt: $58for_iter.2 = pair_first(value=$58for_iter.1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $58for_iter.3 = pair_second(value=$58for_iter.1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $phi60.1 = $58for_iter.2
DEBUG 2023-04-14 17:43:02,777 on stmt: branch $58for_iter.3, 60, 80
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,777 on stmt: i = $phi60.1
DEBUG 2023-04-14 17:43:02,777 on stmt: $const62.2 = const(int, 1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $72binary_add.7 = i + k
DEBUG 2023-04-14 17:43:02,777 find_def var='i' stmt=$72binary_add.7 = i + k
DEBUG 2023-04-14 17:43:02,777 on stmt: $74build_tuple.8 = build_tuple(items=[Var(i, arrayobj.py:4332), Var($72binary_add.7, arrayobj.py:4333)])
DEBUG 2023-04-14 17:43:02,777 find_def var='i' stmt=$74build_tuple.8 = build_tuple(items=[Var(i, arrayobj.py:4332), Var($72binary_add.7, arrayobj.py:4333)])
DEBUG 2023-04-14 17:43:02,777 on stmt: arr[$74build_tuple.8] = $const62.2
DEBUG 2023-04-14 17:43:02,777 on stmt: jump 58
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,777 on stmt: jump 126
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 82
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,777 on stmt: $82load_global.0 = global(min: <built-in function min>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $88binary_add.3 = N + k
DEBUG 2023-04-14 17:43:02,777 on stmt: d = call $82load_global.0($88binary_add.3, _M, func=$82load_global.0, args=[Var($88binary_add.3, arrayobj.py:4335), Var(_M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $96load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $100call_function.8 = call $96load_global.6(d, func=$96load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $102get_iter.9 = getiter(value=$100call_function.8)
DEBUG 2023-04-14 17:43:02,777 on stmt: $phi104.0 = $102get_iter.9
DEBUG 2023-04-14 17:43:02,777 on stmt: jump 104
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 104
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,777 on stmt: $104for_iter.1 = iternext(value=$phi104.0)
DEBUG 2023-04-14 17:43:02,777 on stmt: $104for_iter.2 = pair_first(value=$104for_iter.1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $104for_iter.3 = pair_second(value=$104for_iter.1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $phi106.1 = $104for_iter.2
DEBUG 2023-04-14 17:43:02,777 on stmt: branch $104for_iter.3, 106, 126
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,777 on stmt: i.1 = $phi106.1
DEBUG 2023-04-14 17:43:02,777 on stmt: $const108.2 = const(int, 1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $116binary_subtract.6 = i - k
DEBUG 2023-04-14 17:43:02,777 find_def var='i' stmt=$116binary_subtract.6 = i - k
DEBUG 2023-04-14 17:43:02,777 replaced with: $116binary_subtract.6 = i.1 - k
DEBUG 2023-04-14 17:43:02,777 on stmt: $120build_tuple.8 = build_tuple(items=[Var($116binary_subtract.6, arrayobj.py:4337), Var(i, arrayobj.py:4332)])
DEBUG 2023-04-14 17:43:02,777 find_def var='i' stmt=$120build_tuple.8 = build_tuple(items=[Var($116binary_subtract.6, arrayobj.py:4337), Var(i, arrayobj.py:4332)])
DEBUG 2023-04-14 17:43:02,777 replaced with: $120build_tuple.8 = build_tuple(items=[Var($116binary_subtract.6, arrayobj.py:4337), Var(i.1, arrayobj.py:4336)])
DEBUG 2023-04-14 17:43:02,777 on stmt: arr[$120build_tuple.8] = $const108.2
DEBUG 2023-04-14 17:43:02,777 on stmt: jump 104
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,777 on stmt: $128return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:02,777 on stmt: return $128return_value.1
DEBUG 2023-04-14 17:43:02,777 Fix SSA violator on var d
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198F3D60>
DEBUG 2023-04-14 17:43:02,777 on stmt: N = arg(0, name=N)
DEBUG 2023-04-14 17:43:02,777 on stmt: M = arg(1, name=M)
DEBUG 2023-04-14 17:43:02,777 on stmt: k = arg(2, name=k)
DEBUG 2023-04-14 17:43:02,777 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:02,777 on stmt: $2load_global.0 = global(_eye_none_handler: <function _eye_none_handler at 0x0000026617543DC0>)
DEBUG 2023-04-14 17:43:02,777 on stmt: _M = call $2load_global.0(N, M, func=$2load_global.0, args=[Var(N, arrayobj.py:4328), Var(M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $14load_method.5 = getattr(value=$12load_global.4, attr=zeros)
DEBUG 2023-04-14 17:43:02,777 on stmt: $20build_tuple.8 = build_tuple(items=[Var(N, arrayobj.py:4328), Var(_M, arrayobj.py:4328)])
DEBUG 2023-04-14 17:43:02,777 on stmt: $22load_deref.9 = freevar(dt: float64)
DEBUG 2023-04-14 17:43:02,777 on stmt: arr = call $14load_method.5($20build_tuple.8, $22load_deref.9, func=$14load_method.5, args=[Var($20build_tuple.8, arrayobj.py:4329), Var($22load_deref.9, arrayobj.py:4329)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $const30.12 = const(int, 0)
DEBUG 2023-04-14 17:43:02,777 on stmt: $32compare_op.13 = k >= $const30.12
DEBUG 2023-04-14 17:43:02,777 on stmt: bool34 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $34pred = call bool34($32compare_op.13, func=bool34, args=(Var($32compare_op.13, arrayobj.py:4330),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: branch $34pred, 36, 82
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 36
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198F3D60>
DEBUG 2023-04-14 17:43:02,777 on stmt: $36load_global.0 = global(min: <built-in function min>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $44binary_subtract.4 = _M - k
DEBUG 2023-04-14 17:43:02,777 on stmt: d = call $36load_global.0(N, $44binary_subtract.4, func=$36load_global.0, args=[Var(N, arrayobj.py:4328), Var($44binary_subtract.4, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 first assign: d
DEBUG 2023-04-14 17:43:02,777 replaced with: d = call $36load_global.0(N, $44binary_subtract.4, func=$36load_global.0, args=[Var(N, arrayobj.py:4328), Var($44binary_subtract.4, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $50load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $54call_function.8 = call $50load_global.6(d, func=$50load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $56get_iter.9 = getiter(value=$54call_function.8)
DEBUG 2023-04-14 17:43:02,777 on stmt: $phi58.0 = $56get_iter.9
DEBUG 2023-04-14 17:43:02,777 on stmt: jump 58
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198F3D60>
DEBUG 2023-04-14 17:43:02,777 on stmt: $58for_iter.1 = iternext(value=$phi58.0)
DEBUG 2023-04-14 17:43:02,777 on stmt: $58for_iter.2 = pair_first(value=$58for_iter.1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $58for_iter.3 = pair_second(value=$58for_iter.1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $phi60.1 = $58for_iter.2
DEBUG 2023-04-14 17:43:02,777 on stmt: branch $58for_iter.3, 60, 80
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198F3D60>
DEBUG 2023-04-14 17:43:02,777 on stmt: i = $phi60.1
DEBUG 2023-04-14 17:43:02,777 on stmt: $const62.2 = const(int, 1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $72binary_add.7 = i + k
DEBUG 2023-04-14 17:43:02,777 on stmt: $74build_tuple.8 = build_tuple(items=[Var(i, arrayobj.py:4332), Var($72binary_add.7, arrayobj.py:4333)])
DEBUG 2023-04-14 17:43:02,777 on stmt: arr[$74build_tuple.8] = $const62.2
DEBUG 2023-04-14 17:43:02,777 on stmt: jump 58
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198F3D60>
DEBUG 2023-04-14 17:43:02,777 on stmt: jump 126
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 82
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198F3D60>
DEBUG 2023-04-14 17:43:02,777 on stmt: $82load_global.0 = global(min: <built-in function min>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $88binary_add.3 = N + k
DEBUG 2023-04-14 17:43:02,777 on stmt: d = call $82load_global.0($88binary_add.3, _M, func=$82load_global.0, args=[Var($88binary_add.3, arrayobj.py:4335), Var(_M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 replaced with: d.1 = call $82load_global.0($88binary_add.3, _M, func=$82load_global.0, args=[Var($88binary_add.3, arrayobj.py:4335), Var(_M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $96load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:02,777 on stmt: $100call_function.8 = call $96load_global.6(d, func=$96load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,777 on stmt: $102get_iter.9 = getiter(value=$100call_function.8)
DEBUG 2023-04-14 17:43:02,777 on stmt: $phi104.0 = $102get_iter.9
DEBUG 2023-04-14 17:43:02,777 on stmt: jump 104
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 104
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198F3D60>
DEBUG 2023-04-14 17:43:02,777 on stmt: $104for_iter.1 = iternext(value=$phi104.0)
DEBUG 2023-04-14 17:43:02,777 on stmt: $104for_iter.2 = pair_first(value=$104for_iter.1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $104for_iter.3 = pair_second(value=$104for_iter.1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $phi106.1 = $104for_iter.2
DEBUG 2023-04-14 17:43:02,777 on stmt: branch $104for_iter.3, 106, 126
DEBUG 2023-04-14 17:43:02,777 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:02,777 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198F3D60>
DEBUG 2023-04-14 17:43:02,777 on stmt: i.1 = $phi106.1
DEBUG 2023-04-14 17:43:02,777 on stmt: $const108.2 = const(int, 1)
DEBUG 2023-04-14 17:43:02,777 on stmt: $116binary_subtract.6 = i.1 - k
DEBUG 2023-04-14 17:43:02,777 on stmt: $120build_tuple.8 = build_tuple(items=[Var($116binary_subtract.6, arrayobj.py:4337), Var(i.1, arrayobj.py:4336)])
DEBUG 2023-04-14 17:43:02,785 on stmt: arr[$120build_tuple.8] = $const108.2
DEBUG 2023-04-14 17:43:02,785 on stmt: jump 104
DEBUG 2023-04-14 17:43:02,785 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:43:02,785 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198F3D60>
DEBUG 2023-04-14 17:43:02,785 on stmt: $128return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:02,785 on stmt: return $128return_value.1
DEBUG 2023-04-14 17:43:02,785 Replaced assignments: defaultdict(<class 'list'>,
            {36: [<numba.core.ir.Assign object at 0x00000266198D2B80>],
             82: [<numba.core.ir.Assign object at 0x00000266198DE1F0>]})
DEBUG 2023-04-14 17:43:02,785 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:02,785 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,785 on stmt: N = arg(0, name=N)
DEBUG 2023-04-14 17:43:02,785 on stmt: M = arg(1, name=M)
DEBUG 2023-04-14 17:43:02,785 on stmt: k = arg(2, name=k)
DEBUG 2023-04-14 17:43:02,785 on stmt: dtype = arg(3, name=dtype)
DEBUG 2023-04-14 17:43:02,785 on stmt: $2load_global.0 = global(_eye_none_handler: <function _eye_none_handler at 0x0000026617543DC0>)
DEBUG 2023-04-14 17:43:02,785 on stmt: _M = call $2load_global.0(N, M, func=$2load_global.0, args=[Var(N, arrayobj.py:4328), Var(M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,785 on stmt: $12load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:02,785 on stmt: $14load_method.5 = getattr(value=$12load_global.4, attr=zeros)
DEBUG 2023-04-14 17:43:02,785 on stmt: $20build_tuple.8 = build_tuple(items=[Var(N, arrayobj.py:4328), Var(_M, arrayobj.py:4328)])
DEBUG 2023-04-14 17:43:02,785 on stmt: $22load_deref.9 = freevar(dt: float64)
DEBUG 2023-04-14 17:43:02,785 on stmt: arr = call $14load_method.5($20build_tuple.8, $22load_deref.9, func=$14load_method.5, args=[Var($20build_tuple.8, arrayobj.py:4329), Var($22load_deref.9, arrayobj.py:4329)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,785 on stmt: $const30.12 = const(int, 0)
DEBUG 2023-04-14 17:43:02,785 on stmt: $32compare_op.13 = k >= $const30.12
DEBUG 2023-04-14 17:43:02,785 on stmt: bool34 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:02,785 on stmt: $34pred = call bool34($32compare_op.13, func=bool34, args=(Var($32compare_op.13, arrayobj.py:4330),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,785 on stmt: branch $34pred, 36, 82
DEBUG 2023-04-14 17:43:02,785 ==== SSA block rewrite pass on 36
DEBUG 2023-04-14 17:43:02,785 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,785 on stmt: $36load_global.0 = global(min: <built-in function min>)
DEBUG 2023-04-14 17:43:02,785 on stmt: $44binary_subtract.4 = _M - k
DEBUG 2023-04-14 17:43:02,785 on stmt: d = call $36load_global.0(N, $44binary_subtract.4, func=$36load_global.0, args=[Var(N, arrayobj.py:4328), Var($44binary_subtract.4, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,787 on stmt: $50load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:02,787 on stmt: $54call_function.8 = call $50load_global.6(d, func=$50load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,787 find_def var='d' stmt=$54call_function.8 = call $50load_global.6(d, func=$50load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,787 on stmt: $56get_iter.9 = getiter(value=$54call_function.8)
DEBUG 2023-04-14 17:43:02,787 on stmt: $phi58.0 = $56get_iter.9
DEBUG 2023-04-14 17:43:02,787 on stmt: jump 58
DEBUG 2023-04-14 17:43:02,787 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:02,787 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,787 on stmt: $58for_iter.1 = iternext(value=$phi58.0)
DEBUG 2023-04-14 17:43:02,787 on stmt: $58for_iter.2 = pair_first(value=$58for_iter.1)
DEBUG 2023-04-14 17:43:02,787 on stmt: $58for_iter.3 = pair_second(value=$58for_iter.1)
DEBUG 2023-04-14 17:43:02,787 on stmt: $phi60.1 = $58for_iter.2
DEBUG 2023-04-14 17:43:02,787 on stmt: branch $58for_iter.3, 60, 80
DEBUG 2023-04-14 17:43:02,787 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:02,787 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,787 on stmt: i = $phi60.1
DEBUG 2023-04-14 17:43:02,787 on stmt: $const62.2 = const(int, 1)
DEBUG 2023-04-14 17:43:02,787 on stmt: $72binary_add.7 = i + k
DEBUG 2023-04-14 17:43:02,787 on stmt: $74build_tuple.8 = build_tuple(items=[Var(i, arrayobj.py:4332), Var($72binary_add.7, arrayobj.py:4333)])
DEBUG 2023-04-14 17:43:02,787 on stmt: arr[$74build_tuple.8] = $const62.2
DEBUG 2023-04-14 17:43:02,787 on stmt: jump 58
DEBUG 2023-04-14 17:43:02,787 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:02,787 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,787 on stmt: jump 126
DEBUG 2023-04-14 17:43:02,787 ==== SSA block rewrite pass on 82
DEBUG 2023-04-14 17:43:02,787 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,787 on stmt: $82load_global.0 = global(min: <built-in function min>)
DEBUG 2023-04-14 17:43:02,787 on stmt: $88binary_add.3 = N + k
DEBUG 2023-04-14 17:43:02,787 on stmt: d.1 = call $82load_global.0($88binary_add.3, _M, func=$82load_global.0, args=[Var($88binary_add.3, arrayobj.py:4335), Var(_M, arrayobj.py:4328)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,787 on stmt: $96load_global.6 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:02,787 on stmt: $100call_function.8 = call $96load_global.6(d, func=$96load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,787 find_def var='d' stmt=$100call_function.8 = call $96load_global.6(d, func=$96load_global.6, args=[Var(d, arrayobj.py:4331)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,787 replaced with: $100call_function.8 = call $96load_global.6(d.1, func=$96load_global.6, args=[Var(d.1, arrayobj.py:4335)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,787 on stmt: $102get_iter.9 = getiter(value=$100call_function.8)
DEBUG 2023-04-14 17:43:02,787 on stmt: $phi104.0 = $102get_iter.9
DEBUG 2023-04-14 17:43:02,787 on stmt: jump 104
DEBUG 2023-04-14 17:43:02,787 ==== SSA block rewrite pass on 104
DEBUG 2023-04-14 17:43:02,787 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,787 on stmt: $104for_iter.1 = iternext(value=$phi104.0)
DEBUG 2023-04-14 17:43:02,787 on stmt: $104for_iter.2 = pair_first(value=$104for_iter.1)
DEBUG 2023-04-14 17:43:02,787 on stmt: $104for_iter.3 = pair_second(value=$104for_iter.1)
DEBUG 2023-04-14 17:43:02,787 on stmt: $phi106.1 = $104for_iter.2
DEBUG 2023-04-14 17:43:02,787 on stmt: branch $104for_iter.3, 106, 126
DEBUG 2023-04-14 17:43:02,787 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:02,787 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,787 on stmt: i.1 = $phi106.1
DEBUG 2023-04-14 17:43:02,787 on stmt: $const108.2 = const(int, 1)
DEBUG 2023-04-14 17:43:02,787 on stmt: $116binary_subtract.6 = i.1 - k
DEBUG 2023-04-14 17:43:02,787 on stmt: $120build_tuple.8 = build_tuple(items=[Var($116binary_subtract.6, arrayobj.py:4337), Var(i.1, arrayobj.py:4336)])
DEBUG 2023-04-14 17:43:02,787 on stmt: arr[$120build_tuple.8] = $const108.2
DEBUG 2023-04-14 17:43:02,787 on stmt: jump 104
DEBUG 2023-04-14 17:43:02,787 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:43:02,787 Running <numba.core.ssa._FixSSAVars object at 0x00000266198DE220>
DEBUG 2023-04-14 17:43:02,787 on stmt: $128return_value.1 = cast(value=arr)
DEBUG 2023-04-14 17:43:02,787 on stmt: return $128return_value.1
DEBUG 2023-04-14 17:43:02,787 bytecode dump:
>          0	NOP(arg=None, lineno=4309)
           2	LOAD_FAST(arg=0, lineno=4309)
           4	RETURN_VALUE(arg=None, lineno=4309)
DEBUG 2023-04-14 17:43:02,787 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,787 stack: []
DEBUG 2023-04-14 17:43:02,795 dispatch pc=0, inst=NOP(arg=None, lineno=4309)
DEBUG 2023-04-14 17:43:02,795 stack []
DEBUG 2023-04-14 17:43:02,795 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4309)
DEBUG 2023-04-14 17:43:02,795 stack []
DEBUG 2023-04-14 17:43:02,795 dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4309)
DEBUG 2023-04-14 17:43:02,795 stack ['$N2.0']
DEBUG 2023-04-14 17:43:02,795 end state. edges=[]
DEBUG 2023-04-14 17:43:02,795 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:02,795 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:02,795 defmap: {}
DEBUG 2023-04-14 17:43:02,795 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,795 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,795 keep phismap: {}
DEBUG 2023-04-14 17:43:02,795 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:02,795 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:02,795 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$N2.0'}), (4, {'retval': '$N2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:02,795 label 0:
    N = arg(0, name=N)                       ['N']
    M = arg(1, name=M)                       ['M']
    $4return_value.1 = cast(value=N)         ['$4return_value.1', 'N']
    return $4return_value.1                  ['$4return_value.1']

DEBUG 2023-04-14 17:43:02,797 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:02,797 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619904880>
DEBUG 2023-04-14 17:43:02,797 on stmt: N = arg(0, name=N)
DEBUG 2023-04-14 17:43:02,797 on stmt: M = arg(1, name=M)
DEBUG 2023-04-14 17:43:02,797 on stmt: $4return_value.1 = cast(value=N)
DEBUG 2023-04-14 17:43:02,797 on stmt: return $4return_value.1
DEBUG 2023-04-14 17:43:02,797 defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x000002661990D580>],
             'M': [<numba.core.ir.Assign object at 0x000002661990D2E0>],
             'N': [<numba.core.ir.Assign object at 0x0000026619904A00>]})
DEBUG 2023-04-14 17:43:02,797 SSA violators set()
DEBUG 2023-04-14 17:43:02,818 bytecode dump:
>          0	NOP(arg=None, lineno=4169)
           2	LOAD_GLOBAL(arg=0, lineno=4169)
           4	LOAD_ATTR(arg=1, lineno=4169)
           6	LOAD_FAST(arg=0, lineno=4169)
           8	LOAD_FAST(arg=1, lineno=4169)
          10	LOAD_CONST(arg=1, lineno=4169)
          12	CALL_FUNCTION_KW(arg=2, lineno=4169)
          14	STORE_FAST(arg=2, lineno=4169)
          16	LOAD_FAST(arg=2, lineno=4170)
          18	LOAD_METHOD(arg=2, lineno=4170)
          20	CALL_METHOD(arg=0, lineno=4170)
          22	POP_TOP(arg=None, lineno=4170)
          24	LOAD_FAST(arg=2, lineno=4171)
          26	RETURN_VALUE(arg=None, lineno=4171)
DEBUG 2023-04-14 17:43:02,818 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,818 stack: []
DEBUG 2023-04-14 17:43:02,818 dispatch pc=0, inst=NOP(arg=None, lineno=4169)
DEBUG 2023-04-14 17:43:02,818 stack []
DEBUG 2023-04-14 17:43:02,818 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4169)
DEBUG 2023-04-14 17:43:02,818 stack []
DEBUG 2023-04-14 17:43:02,818 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=4169)
DEBUG 2023-04-14 17:43:02,818 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:02,818 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4169)
DEBUG 2023-04-14 17:43:02,818 stack ['$4load_attr.1']
DEBUG 2023-04-14 17:43:02,818 dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=4169)
DEBUG 2023-04-14 17:43:02,818 stack ['$4load_attr.1', '$shape6.2']
DEBUG 2023-04-14 17:43:02,818 dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=4169)
DEBUG 2023-04-14 17:43:02,818 stack ['$4load_attr.1', '$shape6.2', '$dtype8.3']
DEBUG 2023-04-14 17:43:02,818 dispatch pc=12, inst=CALL_FUNCTION_KW(arg=2, lineno=4169)
DEBUG 2023-04-14 17:43:02,818 stack ['$4load_attr.1', '$shape6.2', '$dtype8.3', '$const10.4']
DEBUG 2023-04-14 17:43:02,818 dispatch pc=14, inst=STORE_FAST(arg=2, lineno=4169)
DEBUG 2023-04-14 17:43:02,826 stack ['$12call_function_kw.5']
DEBUG 2023-04-14 17:43:02,826 dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=4170)
DEBUG 2023-04-14 17:43:02,826 stack []
DEBUG 2023-04-14 17:43:02,826 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=4170)
DEBUG 2023-04-14 17:43:02,826 stack ['$arr16.6']
DEBUG 2023-04-14 17:43:02,826 dispatch pc=20, inst=CALL_METHOD(arg=0, lineno=4170)
DEBUG 2023-04-14 17:43:02,826 stack ['$18load_method.7']
DEBUG 2023-04-14 17:43:02,826 dispatch pc=22, inst=POP_TOP(arg=None, lineno=4170)
DEBUG 2023-04-14 17:43:02,826 stack ['$20call_method.8']
DEBUG 2023-04-14 17:43:02,826 dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=4171)
DEBUG 2023-04-14 17:43:02,826 stack []
DEBUG 2023-04-14 17:43:02,826 dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=4171)
DEBUG 2023-04-14 17:43:02,826 stack ['$arr24.9']
DEBUG 2023-04-14 17:43:02,826 end state. edges=[]
DEBUG 2023-04-14 17:43:02,826 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:02,826 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:02,826 defmap: {}
DEBUG 2023-04-14 17:43:02,826 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,826 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,826 keep phismap: {}
DEBUG 2023-04-14 17:43:02,826 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:02,828 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:02,828 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'res': '$const10.4'}), (12, {'func': '$4load_attr.1', 'args': ['$shape6.2', '$dtype8.3'], 'names': '$const10.4', 'res': '$12call_function_kw.5'}), (14, {'value': '$12call_function_kw.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_method.7'}), (20, {'func': '$18load_method.7', 'args': [], 'res': '$20call_method.8'}), (24, {'res': '$arr24.9'}), (26, {'retval': '$arr24.9', 'castval': '$26return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:02,828 label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
    arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None) ['$4load_attr.1', 'arr', 'dtype', 'shape']
    $18load_method.7 = getattr(value=arr, attr=_zero_fill) ['$18load_method.7', 'arr']
    $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_method.7', '$20call_method.8']
    $26return_value.10 = cast(value=arr)     ['$26return_value.10', 'arr']
    return $26return_value.10                ['$26return_value.10']

DEBUG 2023-04-14 17:43:02,836 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:02,836 Running <numba.core.ssa._GatherDefsHandler object at 0x000002661992F1C0>
DEBUG 2023-04-14 17:43:02,836 on stmt: shape = arg(0, name=shape)
DEBUG 2023-04-14 17:43:02,836 on stmt: dtype = arg(1, name=dtype)
DEBUG 2023-04-14 17:43:02,836 on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:02,836 on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
DEBUG 2023-04-14 17:43:02,836 on stmt: arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,836 on stmt: $18load_method.7 = getattr(value=arr, attr=_zero_fill)
DEBUG 2023-04-14 17:43:02,836 on stmt: $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,836 on stmt: $26return_value.10 = cast(value=arr)
DEBUG 2023-04-14 17:43:02,836 on stmt: return $26return_value.10
DEBUG 2023-04-14 17:43:02,836 defs defaultdict(<class 'list'>,
            {'$18load_method.7': [<numba.core.ir.Assign object at 0x000002661992CB80>],
             '$20call_method.8': [<numba.core.ir.Assign object at 0x000002661992CD90>],
             '$26return_value.10': [<numba.core.ir.Assign object at 0x000002661992CFA0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000002661992C0A0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x000002661992C220>],
             'arr': [<numba.core.ir.Assign object at 0x000002661992C8E0>],
             'dtype': [<numba.core.ir.Assign object at 0x0000026619927EE0>],
             'shape': [<numba.core.ir.Assign object at 0x00000266199278E0>]})
DEBUG 2023-04-14 17:43:02,836 SSA violators set()
DEBUG 2023-04-14 17:43:02,840 bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
DEBUG 2023-04-14 17:43:02,840 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,840 stack: []
DEBUG 2023-04-14 17:43:02,840 dispatch pc=0, inst=NOP(arg=None, lineno=4101)
DEBUG 2023-04-14 17:43:02,840 stack []
DEBUG 2023-04-14 17:43:02,840 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
DEBUG 2023-04-14 17:43:02,840 stack []
DEBUG 2023-04-14 17:43:02,840 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
DEBUG 2023-04-14 17:43:02,840 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:02,840 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
DEBUG 2023-04-14 17:43:02,840 stack ['$2load_global.0', '$shape4.1']
DEBUG 2023-04-14 17:43:02,840 dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
DEBUG 2023-04-14 17:43:02,840 stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
DEBUG 2023-04-14 17:43:02,840 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
DEBUG 2023-04-14 17:43:02,840 stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
DEBUG 2023-04-14 17:43:02,840 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
DEBUG 2023-04-14 17:43:02,840 stack ['$10call_function.4']
DEBUG 2023-04-14 17:43:02,840 end state. edges=[]
DEBUG 2023-04-14 17:43:02,840 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:02,840 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:02,840 defmap: {}
DEBUG 2023-04-14 17:43:02,840 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,840 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,840 keep phismap: {}
DEBUG 2023-04-14 17:43:02,840 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:02,840 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:02,840 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:02,840 label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 2d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2023-04-14 17:43:02,846 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:02,846 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266199361F0>
DEBUG 2023-04-14 17:43:02,846 on stmt: shape = arg(0, name=shape)
DEBUG 2023-04-14 17:43:02,846 on stmt: dtype = arg(1, name=dtype)
DEBUG 2023-04-14 17:43:02,846 on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
DEBUG 2023-04-14 17:43:02,846 on stmt: $8load_deref.3 = freevar(retty: array(float64, 2d, C))
DEBUG 2023-04-14 17:43:02,846 on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:02,846 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2023-04-14 17:43:02,846 on stmt: return $12return_value.5
DEBUG 2023-04-14 17:43:02,846 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000026619941460>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000026619941580>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619936E80>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x0000026619941280>],
             'dtype': [<numba.core.ir.Assign object at 0x0000026619936D00>],
             'shape': [<numba.core.ir.Assign object at 0x00000266199367C0>]})
DEBUG 2023-04-14 17:43:02,846 SSA violators set()
DEBUG 2023-04-14 17:43:02,999 bytecode dump:
>          0	NOP(arg=None, lineno=2025)
           2	LOAD_GLOBAL(arg=0, lineno=2025)
           4	LOAD_ATTR(arg=1, lineno=2025)
           6	LOAD_METHOD(arg=2, lineno=2025)
           8	LOAD_FAST(arg=0, lineno=2025)
          10	CALL_METHOD(arg=1, lineno=2025)
          12	UNPACK_SEQUENCE(arg=2, lineno=2025)
          14	STORE_FAST(arg=1, lineno=2025)
          16	STORE_FAST(arg=2, lineno=2025)
          18	LOAD_FAST(arg=1, lineno=2026)
          20	LOAD_GLOBAL(arg=0, lineno=2026)
          22	LOAD_METHOD(arg=3, lineno=2026)
          24	LOAD_FAST(arg=2, lineno=2026)
          26	CALL_METHOD(arg=1, lineno=2026)
          28	BINARY_MULTIPLY(arg=None, lineno=2026)
          30	RETURN_VALUE(arg=None, lineno=2026)
DEBUG 2023-04-14 17:43:02,999 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:02,999 stack: []
DEBUG 2023-04-14 17:43:02,999 dispatch pc=0, inst=NOP(arg=None, lineno=2025)
DEBUG 2023-04-14 17:43:02,999 stack []
DEBUG 2023-04-14 17:43:02,999 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2025)
DEBUG 2023-04-14 17:43:02,999 stack []
DEBUG 2023-04-14 17:43:02,999 dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=2025)
DEBUG 2023-04-14 17:43:02,999 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=6, inst=LOAD_METHOD(arg=2, lineno=2025)
DEBUG 2023-04-14 17:43:02,999 stack ['$4load_attr.1']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=2025)
DEBUG 2023-04-14 17:43:02,999 stack ['$6load_method.2']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2025)
DEBUG 2023-04-14 17:43:02,999 stack ['$6load_method.2', '$a8.3']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=12, inst=UNPACK_SEQUENCE(arg=2, lineno=2025)
DEBUG 2023-04-14 17:43:02,999 stack ['$10call_method.4']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=14, inst=STORE_FAST(arg=1, lineno=2025)
DEBUG 2023-04-14 17:43:02,999 stack ['$12unpack_sequence.6', '$12unpack_sequence.5']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=16, inst=STORE_FAST(arg=2, lineno=2025)
DEBUG 2023-04-14 17:43:02,999 stack ['$12unpack_sequence.6']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=2026)
DEBUG 2023-04-14 17:43:02,999 stack []
DEBUG 2023-04-14 17:43:02,999 dispatch pc=20, inst=LOAD_GLOBAL(arg=0, lineno=2026)
DEBUG 2023-04-14 17:43:02,999 stack ['$sgn18.8']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=2026)
DEBUG 2023-04-14 17:43:02,999 stack ['$sgn18.8', '$20load_global.9']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=2026)
DEBUG 2023-04-14 17:43:02,999 stack ['$sgn18.8', '$22load_method.10']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=2026)
DEBUG 2023-04-14 17:43:02,999 stack ['$sgn18.8', '$22load_method.10', '$slogdet24.11']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=28, inst=BINARY_MULTIPLY(arg=None, lineno=2026)
DEBUG 2023-04-14 17:43:02,999 stack ['$sgn18.8', '$26call_method.12']
DEBUG 2023-04-14 17:43:02,999 dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=2026)
DEBUG 2023-04-14 17:43:02,999 stack ['$28binary_multiply.13']
DEBUG 2023-04-14 17:43:02,999 end state. edges=[]
DEBUG 2023-04-14 17:43:02,999 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:02,999 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:02,999 defmap: {}
DEBUG 2023-04-14 17:43:02,999 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,999 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:02,999 keep phismap: {}
DEBUG 2023-04-14 17:43:02,999 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:02,999 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:02,999 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'item': '$4load_attr.1', 'res': '$6load_method.2'}), (8, {'res': '$a8.3'}), (10, {'func': '$6load_method.2', 'args': ['$a8.3'], 'res': '$10call_method.4'}), (12, {'iterable': '$10call_method.4', 'stores': ['$12unpack_sequence.5', '$12unpack_sequence.6'], 'tupleobj': '$12unpack_sequence.7'}), (14, {'value': '$12unpack_sequence.5'}), (16, {'value': '$12unpack_sequence.6'}), (18, {'res': '$sgn18.8'}), (20, {'res': '$20load_global.9'}), (22, {'item': '$20load_global.9', 'res': '$22load_method.10'}), (24, {'res': '$slogdet24.11'}), (26, {'func': '$22load_method.10', 'args': ['$slogdet24.11'], 'res': '$26call_method.12'}), (28, {'lhs': '$sgn18.8', 'rhs': '$26call_method.12', 'res': '$28binary_multiply.13'}), (30, {'retval': '$28binary_multiply.13', 'castval': '$30return_value.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:02,999 label 0:
    a = arg(0, name=a)                       ['a']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=linalg) ['$2load_global.0', '$4load_attr.1']
    $6load_method.2 = getattr(value=$4load_attr.1, attr=slogdet) ['$4load_attr.1', '$6load_method.2']
    $10call_method.4 = call $6load_method.2(a, func=$6load_method.2, args=[Var(a, linalg.py:2025)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$6load_method.2', 'a']
    $12unpack_sequence.7 = exhaust_iter(value=$10call_method.4, count=2) ['$10call_method.4', '$12unpack_sequence.7']
    $12unpack_sequence.5 = static_getitem(value=$12unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>) ['$12unpack_sequence.5', '$12unpack_sequence.7']
    $12unpack_sequence.6 = static_getitem(value=$12unpack_sequence.7, index=1, index_var=None, fn=<built-in function getitem>) ['$12unpack_sequence.6', '$12unpack_sequence.7']
    sgn = $12unpack_sequence.5               ['$12unpack_sequence.5', 'sgn']
    slogdet = $12unpack_sequence.6           ['$12unpack_sequence.6', 'slogdet']
    $20load_global.9 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$20load_global.9']
    $22load_method.10 = getattr(value=$20load_global.9, attr=exp) ['$20load_global.9', '$22load_method.10']
    $26call_method.12 = call $22load_method.10(slogdet, func=$22load_method.10, args=[Var(slogdet, linalg.py:2025)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.10', '$26call_method.12', 'slogdet']
    $28binary_multiply.13 = sgn * $26call_method.12 ['$26call_method.12', '$28binary_multiply.13', 'sgn']
    $30return_value.14 = cast(value=$28binary_multiply.13) ['$28binary_multiply.13', '$30return_value.14']
    return $30return_value.14                ['$30return_value.14']

DEBUG 2023-04-14 17:43:03,010 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,010 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619927CD0>
DEBUG 2023-04-14 17:43:03,010 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,010 on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,010 on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=linalg)
DEBUG 2023-04-14 17:43:03,010 on stmt: $6load_method.2 = getattr(value=$4load_attr.1, attr=slogdet)
DEBUG 2023-04-14 17:43:03,010 on stmt: $10call_method.4 = call $6load_method.2(a, func=$6load_method.2, args=[Var(a, linalg.py:2025)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,010 on stmt: $12unpack_sequence.7 = exhaust_iter(value=$10call_method.4, count=2)
DEBUG 2023-04-14 17:43:03,010 on stmt: $12unpack_sequence.5 = static_getitem(value=$12unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,010 on stmt: $12unpack_sequence.6 = static_getitem(value=$12unpack_sequence.7, index=1, index_var=None, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,010 on stmt: sgn = $12unpack_sequence.5
DEBUG 2023-04-14 17:43:03,010 on stmt: slogdet = $12unpack_sequence.6
DEBUG 2023-04-14 17:43:03,010 on stmt: $20load_global.9 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,010 on stmt: $22load_method.10 = getattr(value=$20load_global.9, attr=exp)
DEBUG 2023-04-14 17:43:03,010 on stmt: $26call_method.12 = call $22load_method.10(slogdet, func=$22load_method.10, args=[Var(slogdet, linalg.py:2025)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,010 on stmt: $28binary_multiply.13 = sgn * $26call_method.12
DEBUG 2023-04-14 17:43:03,010 on stmt: $30return_value.14 = cast(value=$28binary_multiply.13)
DEBUG 2023-04-14 17:43:03,010 on stmt: return $30return_value.14
DEBUG 2023-04-14 17:43:03,010 defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x0000026619975910>],
             '$12unpack_sequence.5': [<numba.core.ir.Assign object at 0x0000026619901550>],
             '$12unpack_sequence.6': [<numba.core.ir.Assign object at 0x00000266199019D0>],
             '$12unpack_sequence.7': [<numba.core.ir.Assign object at 0x00000266199750D0>],
             '$20load_global.9': [<numba.core.ir.Assign object at 0x0000026619934190>],
             '$22load_method.10': [<numba.core.ir.Assign object at 0x000002661992F700>],
             '$26call_method.12': [<numba.core.ir.Assign object at 0x000002661995AE50>],
             '$28binary_multiply.13': [<numba.core.ir.Assign object at 0x000002661995A9D0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619975A60>],
             '$30return_value.14': [<numba.core.ir.Assign object at 0x000002661995AD00>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000026619975880>],
             '$6load_method.2': [<numba.core.ir.Assign object at 0x0000026619975640>],
             'a': [<numba.core.ir.Assign object at 0x0000026619975EB0>],
             'sgn': [<numba.core.ir.Assign object at 0x0000026619901D00>],
             'slogdet': [<numba.core.ir.Assign object at 0x0000026619934250>]})
DEBUG 2023-04-14 17:43:03,010 SSA violators set()
DEBUG 2023-04-14 17:43:03,018 bytecode dump:
>          0	NOP(arg=None, lineno=1974)
           2	LOAD_FAST(arg=0, lineno=1974)
           4	LOAD_ATTR(arg=0, lineno=1974)
           6	LOAD_CONST(arg=1, lineno=1974)
           8	BINARY_SUBSCR(arg=None, lineno=1974)
          10	STORE_FAST(arg=1, lineno=1974)
          12	LOAD_FAST(arg=0, lineno=1975)
          14	LOAD_ATTR(arg=0, lineno=1975)
          16	LOAD_CONST(arg=2, lineno=1975)
          18	BINARY_SUBSCR(arg=None, lineno=1975)
          20	LOAD_FAST(arg=1, lineno=1975)
          22	COMPARE_OP(arg=3, lineno=1975)
          24	POP_JUMP_IF_FALSE(arg=42, lineno=1975)
          26	LOAD_CONST(arg=3, lineno=1976)
          28	STORE_FAST(arg=2, lineno=1976)
          30	LOAD_GLOBAL(arg=1, lineno=1977)
          32	LOAD_ATTR(arg=2, lineno=1977)
          34	LOAD_METHOD(arg=3, lineno=1977)
          36	LOAD_FAST(arg=2, lineno=1977)
          38	CALL_METHOD(arg=1, lineno=1977)
          40	RAISE_VARARGS(arg=1, lineno=1977)
>         42	LOAD_FAST(arg=1, lineno=1979)
          44	LOAD_CONST(arg=4, lineno=1979)
          46	COMPARE_OP(arg=2, lineno=1979)
          48	POP_JUMP_IF_FALSE(arg=58, lineno=1979)
          50	LOAD_DEREF(arg=0, lineno=1980)
          52	LOAD_DEREF(arg=1, lineno=1980)
          54	BUILD_TUPLE(arg=2, lineno=1980)
          56	RETURN_VALUE(arg=None, lineno=1980)
>         58	LOAD_GLOBAL(arg=4, lineno=1982)
          60	LOAD_FAST(arg=0, lineno=1982)
          62	CALL_FUNCTION(arg=1, lineno=1982)
          64	POP_TOP(arg=None, lineno=1982)
          66	LOAD_GLOBAL(arg=5, lineno=1984)
          68	LOAD_FAST(arg=0, lineno=1984)
          70	CALL_FUNCTION(arg=1, lineno=1984)
          72	STORE_FAST(arg=3, lineno=1984)
          74	LOAD_GLOBAL(arg=1, lineno=1986)
          76	LOAD_ATTR(arg=6, lineno=1986)
          78	LOAD_FAST(arg=1, lineno=1986)
          80	LOAD_GLOBAL(arg=7, lineno=1986)
          82	LOAD_CONST(arg=5, lineno=1986)
          84	CALL_FUNCTION_KW(arg=2, lineno=1986)
          86	STORE_FAST(arg=4, lineno=1986)
          88	LOAD_DEREF(arg=4, lineno=1988)
          90	LOAD_DEREF(arg=3, lineno=1988)
          92	LOAD_FAST(arg=1, lineno=1988)
          94	LOAD_FAST(arg=1, lineno=1988)
          96	LOAD_FAST(arg=3, lineno=1988)
          98	LOAD_ATTR(arg=8, lineno=1988)
         100	LOAD_FAST(arg=1, lineno=1988)
         102	LOAD_FAST(arg=4, lineno=1988)
         104	LOAD_ATTR(arg=8, lineno=1988)
         106	CALL_FUNCTION(arg=6, lineno=1988)
         108	STORE_FAST(arg=5, lineno=1988)
         110	LOAD_FAST(arg=5, lineno=1990)
         112	LOAD_CONST(arg=4, lineno=1990)
         114	COMPARE_OP(arg=4, lineno=1990)
         116	POP_JUMP_IF_FALSE(arg=130, lineno=1990)
         118	LOAD_CONST(arg=6, lineno=1992)
         120	LOAD_GLOBAL(arg=1, lineno=1992)
         122	LOAD_ATTR(arg=9, lineno=1992)
         124	UNARY_NEGATIVE(arg=None, lineno=1992)
         126	BUILD_TUPLE(arg=2, lineno=1992)
         128	RETURN_VALUE(arg=None, lineno=1992)
>        130	LOAD_GLOBAL(arg=10, lineno=1993)
         132	LOAD_FAST(arg=5, lineno=1993)
         134	CALL_FUNCTION(arg=1, lineno=1993)
         136	POP_TOP(arg=None, lineno=1993)
         138	LOAD_CONST(arg=7, lineno=2002)
         140	STORE_FAST(arg=6, lineno=2002)
         142	LOAD_GLOBAL(arg=11, lineno=2003)
         144	LOAD_FAST(arg=1, lineno=2003)
         146	CALL_FUNCTION(arg=1, lineno=2003)
         148	GET_ITER(arg=None, lineno=2003)
>        150	FOR_ITER(arg=24, lineno=2003)
         152	STORE_FAST(arg=7, lineno=2003)
         154	LOAD_FAST(arg=6, lineno=2004)
         156	LOAD_FAST(arg=4, lineno=2004)
         158	LOAD_FAST(arg=7, lineno=2004)
         160	BINARY_SUBSCR(arg=None, lineno=2004)
         162	LOAD_FAST(arg=7, lineno=2004)
         164	LOAD_CONST(arg=7, lineno=2004)
         166	BINARY_ADD(arg=None, lineno=2004)
         168	COMPARE_OP(arg=3, lineno=2004)
         170	BINARY_ADD(arg=None, lineno=2004)
         172	STORE_FAST(arg=6, lineno=2004)
         174	JUMP_ABSOLUTE(arg=150, lineno=2004)
>        176	LOAD_FAST(arg=6, lineno=2006)
         178	LOAD_CONST(arg=7, lineno=2006)
         180	BINARY_AND(arg=None, lineno=2006)
         182	STORE_FAST(arg=6, lineno=2006)
         184	LOAD_FAST(arg=6, lineno=2007)
         186	LOAD_CONST(arg=4, lineno=2007)
         188	COMPARE_OP(arg=2, lineno=2007)
         190	POP_JUMP_IF_FALSE(arg=196, lineno=2007)
         192	LOAD_CONST(arg=1, lineno=2008)
         194	STORE_FAST(arg=6, lineno=2008)
>        196	LOAD_GLOBAL(arg=12, lineno=2011)
         198	LOAD_FAST(arg=4, lineno=2011)
         200	LOAD_ATTR(arg=13, lineno=2011)
         202	BUILD_LIST(arg=1, lineno=2011)
         204	CALL_FUNCTION(arg=1, lineno=2011)
         206	POP_TOP(arg=None, lineno=2011)
         208	LOAD_DEREF(arg=2, lineno=2012)
         210	LOAD_FAST(arg=1, lineno=2012)
         212	LOAD_FAST(arg=3, lineno=2012)
         214	LOAD_FAST(arg=6, lineno=2012)
         216	CALL_FUNCTION(arg=3, lineno=2012)
         218	RETURN_VALUE(arg=None, lineno=2012)
DEBUG 2023-04-14 17:43:03,018 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,018 stack: []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=0, inst=NOP(arg=None, lineno=1974)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1974)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=1974)
DEBUG 2023-04-14 17:43:03,018 stack ['$a2.0']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1974)
DEBUG 2023-04-14 17:43:03,018 stack ['$4load_attr.1']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=1974)
DEBUG 2023-04-14 17:43:03,018 stack ['$4load_attr.1', '$const6.2']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=10, inst=STORE_FAST(arg=1, lineno=1974)
DEBUG 2023-04-14 17:43:03,018 stack ['$8binary_subscr.3']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1975)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=1975)
DEBUG 2023-04-14 17:43:03,018 stack ['$a12.4']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=1975)
DEBUG 2023-04-14 17:43:03,018 stack ['$14load_attr.5']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=1975)
DEBUG 2023-04-14 17:43:03,018 stack ['$14load_attr.5', '$const16.6']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=1975)
DEBUG 2023-04-14 17:43:03,018 stack ['$18binary_subscr.7']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=22, inst=COMPARE_OP(arg=3, lineno=1975)
DEBUG 2023-04-14 17:43:03,018 stack ['$18binary_subscr.7', '$n20.8']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=42, lineno=1975)
DEBUG 2023-04-14 17:43:03,018 stack ['$22compare_op.9']
DEBUG 2023-04-14 17:43:03,018 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,018 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,018 stack: []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=1976)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=28, inst=STORE_FAST(arg=2, lineno=1976)
DEBUG 2023-04-14 17:43:03,018 stack ['$const26.0']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=30, inst=LOAD_GLOBAL(arg=1, lineno=1977)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=32, inst=LOAD_ATTR(arg=2, lineno=1977)
DEBUG 2023-04-14 17:43:03,018 stack ['$30load_global.1']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=34, inst=LOAD_METHOD(arg=3, lineno=1977)
DEBUG 2023-04-14 17:43:03,018 stack ['$32load_attr.2']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1977)
DEBUG 2023-04-14 17:43:03,018 stack ['$34load_method.3']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=1977)
DEBUG 2023-04-14 17:43:03,018 stack ['$34load_method.3', '$msg36.4']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=40, inst=RAISE_VARARGS(arg=1, lineno=1977)
DEBUG 2023-04-14 17:43:03,018 stack ['$38call_method.5']
DEBUG 2023-04-14 17:43:03,018 end state. edges=[]
DEBUG 2023-04-14 17:43:03,018 pending: deque([State(pc_initial=42 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,018 stack: []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=1979)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=44, inst=LOAD_CONST(arg=4, lineno=1979)
DEBUG 2023-04-14 17:43:03,018 stack ['$n42.0']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=46, inst=COMPARE_OP(arg=2, lineno=1979)
DEBUG 2023-04-14 17:43:03,018 stack ['$n42.0', '$const44.1']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=58, lineno=1979)
DEBUG 2023-04-14 17:43:03,018 stack ['$46compare_op.2']
DEBUG 2023-04-14 17:43:03,018 end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,018 pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,018 stack: []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=50, inst=LOAD_DEREF(arg=0, lineno=1980)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=52, inst=LOAD_DEREF(arg=1, lineno=1980)
DEBUG 2023-04-14 17:43:03,018 stack ['$50load_deref.0']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=54, inst=BUILD_TUPLE(arg=2, lineno=1980)
DEBUG 2023-04-14 17:43:03,018 stack ['$50load_deref.0', '$52load_deref.1']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=1980)
DEBUG 2023-04-14 17:43:03,018 stack ['$54build_tuple.2']
DEBUG 2023-04-14 17:43:03,018 end state. edges=[]
DEBUG 2023-04-14 17:43:03,018 pending: deque([State(pc_initial=58 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,018 stack: []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=58, inst=LOAD_GLOBAL(arg=4, lineno=1982)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=60, inst=LOAD_FAST(arg=0, lineno=1982)
DEBUG 2023-04-14 17:43:03,018 stack ['$58load_global.0']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=62, inst=CALL_FUNCTION(arg=1, lineno=1982)
DEBUG 2023-04-14 17:43:03,018 stack ['$58load_global.0', '$a60.1']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=64, inst=POP_TOP(arg=None, lineno=1982)
DEBUG 2023-04-14 17:43:03,018 stack ['$62call_function.2']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=66, inst=LOAD_GLOBAL(arg=5, lineno=1984)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=1984)
DEBUG 2023-04-14 17:43:03,018 stack ['$66load_global.3']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=70, inst=CALL_FUNCTION(arg=1, lineno=1984)
DEBUG 2023-04-14 17:43:03,018 stack ['$66load_global.3', '$a68.4']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=72, inst=STORE_FAST(arg=3, lineno=1984)
DEBUG 2023-04-14 17:43:03,018 stack ['$70call_function.5']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=74, inst=LOAD_GLOBAL(arg=1, lineno=1986)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,018 dispatch pc=76, inst=LOAD_ATTR(arg=6, lineno=1986)
DEBUG 2023-04-14 17:43:03,018 stack ['$74load_global.6']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=1986)
DEBUG 2023-04-14 17:43:03,018 stack ['$76load_attr.7']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=80, inst=LOAD_GLOBAL(arg=7, lineno=1986)
DEBUG 2023-04-14 17:43:03,018 stack ['$76load_attr.7', '$n78.8']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=82, inst=LOAD_CONST(arg=5, lineno=1986)
DEBUG 2023-04-14 17:43:03,018 stack ['$76load_attr.7', '$n78.8', '$80load_global.9']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=84, inst=CALL_FUNCTION_KW(arg=2, lineno=1986)
DEBUG 2023-04-14 17:43:03,018 stack ['$76load_attr.7', '$n78.8', '$80load_global.9', '$const82.10']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=86, inst=STORE_FAST(arg=4, lineno=1986)
DEBUG 2023-04-14 17:43:03,018 stack ['$84call_function_kw.11']
DEBUG 2023-04-14 17:43:03,018 dispatch pc=88, inst=LOAD_DEREF(arg=4, lineno=1988)
DEBUG 2023-04-14 17:43:03,018 stack []
DEBUG 2023-04-14 17:43:03,026 dispatch pc=90, inst=LOAD_DEREF(arg=3, lineno=1988)
DEBUG 2023-04-14 17:43:03,026 stack ['$88load_deref.12']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=92, inst=LOAD_FAST(arg=1, lineno=1988)
DEBUG 2023-04-14 17:43:03,026 stack ['$88load_deref.12', '$90load_deref.13']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=94, inst=LOAD_FAST(arg=1, lineno=1988)
DEBUG 2023-04-14 17:43:03,026 stack ['$88load_deref.12', '$90load_deref.13', '$n92.14']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1988)
DEBUG 2023-04-14 17:43:03,026 stack ['$88load_deref.12', '$90load_deref.13', '$n92.14', '$n94.15']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=98, inst=LOAD_ATTR(arg=8, lineno=1988)
DEBUG 2023-04-14 17:43:03,026 stack ['$88load_deref.12', '$90load_deref.13', '$n92.14', '$n94.15', '$acpy96.16']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=100, inst=LOAD_FAST(arg=1, lineno=1988)
DEBUG 2023-04-14 17:43:03,026 stack ['$88load_deref.12', '$90load_deref.13', '$n92.14', '$n94.15', '$98load_attr.17']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=1988)
DEBUG 2023-04-14 17:43:03,026 stack ['$88load_deref.12', '$90load_deref.13', '$n92.14', '$n94.15', '$98load_attr.17', '$n100.18']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=104, inst=LOAD_ATTR(arg=8, lineno=1988)
DEBUG 2023-04-14 17:43:03,026 stack ['$88load_deref.12', '$90load_deref.13', '$n92.14', '$n94.15', '$98load_attr.17', '$n100.18', '$ipiv102.19']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=106, inst=CALL_FUNCTION(arg=6, lineno=1988)
DEBUG 2023-04-14 17:43:03,026 stack ['$88load_deref.12', '$90load_deref.13', '$n92.14', '$n94.15', '$98load_attr.17', '$n100.18', '$104load_attr.20']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=108, inst=STORE_FAST(arg=5, lineno=1988)
DEBUG 2023-04-14 17:43:03,026 stack ['$106call_function.21']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=1990)
DEBUG 2023-04-14 17:43:03,026 stack []
DEBUG 2023-04-14 17:43:03,026 dispatch pc=112, inst=LOAD_CONST(arg=4, lineno=1990)
DEBUG 2023-04-14 17:43:03,026 stack ['$r110.22']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=114, inst=COMPARE_OP(arg=4, lineno=1990)
DEBUG 2023-04-14 17:43:03,026 stack ['$r110.22', '$const112.23']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=116, inst=POP_JUMP_IF_FALSE(arg=130, lineno=1990)
DEBUG 2023-04-14 17:43:03,026 stack ['$114compare_op.24']
DEBUG 2023-04-14 17:43:03,026 end state. edges=[Edge(pc=118, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,026 pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,026 stack: []
DEBUG 2023-04-14 17:43:03,026 dispatch pc=118, inst=LOAD_CONST(arg=6, lineno=1992)
DEBUG 2023-04-14 17:43:03,026 stack []
DEBUG 2023-04-14 17:43:03,026 dispatch pc=120, inst=LOAD_GLOBAL(arg=1, lineno=1992)
DEBUG 2023-04-14 17:43:03,026 stack ['$const118.0']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=122, inst=LOAD_ATTR(arg=9, lineno=1992)
DEBUG 2023-04-14 17:43:03,026 stack ['$const118.0', '$120load_global.1']
DEBUG 2023-04-14 17:43:03,026 dispatch pc=124, inst=UNARY_NEGATIVE(arg=None, lineno=1992)
DEBUG 2023-04-14 17:43:03,028 stack ['$const118.0', '$122load_attr.2']
DEBUG 2023-04-14 17:43:03,028 dispatch pc=126, inst=BUILD_TUPLE(arg=2, lineno=1992)
DEBUG 2023-04-14 17:43:03,028 stack ['$const118.0', '$124unary_negative.3']
DEBUG 2023-04-14 17:43:03,028 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=1992)
DEBUG 2023-04-14 17:43:03,028 stack ['$126build_tuple.4']
DEBUG 2023-04-14 17:43:03,028 end state. edges=[]
DEBUG 2023-04-14 17:43:03,028 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,028 stack: []
DEBUG 2023-04-14 17:43:03,028 dispatch pc=130, inst=LOAD_GLOBAL(arg=10, lineno=1993)
DEBUG 2023-04-14 17:43:03,028 stack []
DEBUG 2023-04-14 17:43:03,028 dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=1993)
DEBUG 2023-04-14 17:43:03,028 stack ['$130load_global.0']
DEBUG 2023-04-14 17:43:03,028 dispatch pc=134, inst=CALL_FUNCTION(arg=1, lineno=1993)
DEBUG 2023-04-14 17:43:03,028 stack ['$130load_global.0', '$r132.1']
DEBUG 2023-04-14 17:43:03,028 dispatch pc=136, inst=POP_TOP(arg=None, lineno=1993)
DEBUG 2023-04-14 17:43:03,028 stack ['$134call_function.2']
DEBUG 2023-04-14 17:43:03,028 dispatch pc=138, inst=LOAD_CONST(arg=7, lineno=2002)
DEBUG 2023-04-14 17:43:03,028 stack []
DEBUG 2023-04-14 17:43:03,028 dispatch pc=140, inst=STORE_FAST(arg=6, lineno=2002)
DEBUG 2023-04-14 17:43:03,028 stack ['$const138.3']
DEBUG 2023-04-14 17:43:03,028 dispatch pc=142, inst=LOAD_GLOBAL(arg=11, lineno=2003)
DEBUG 2023-04-14 17:43:03,028 stack []
DEBUG 2023-04-14 17:43:03,028 dispatch pc=144, inst=LOAD_FAST(arg=1, lineno=2003)
DEBUG 2023-04-14 17:43:03,028 stack ['$142load_global.4']
DEBUG 2023-04-14 17:43:03,028 dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=2003)
DEBUG 2023-04-14 17:43:03,028 stack ['$142load_global.4', '$n144.5']
DEBUG 2023-04-14 17:43:03,028 dispatch pc=148, inst=GET_ITER(arg=None, lineno=2003)
DEBUG 2023-04-14 17:43:03,028 stack ['$146call_function.6']
DEBUG 2023-04-14 17:43:03,028 end state. edges=[Edge(pc=150, stack=('$148get_iter.7',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,028 pending: deque([State(pc_initial=150 nstack_initial=1)])
DEBUG 2023-04-14 17:43:03,028 stack: ['$phi150.0']
DEBUG 2023-04-14 17:43:03,028 dispatch pc=150, inst=FOR_ITER(arg=24, lineno=2003)
DEBUG 2023-04-14 17:43:03,028 stack ['$phi150.0']
DEBUG 2023-04-14 17:43:03,028 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=152, stack=('$phi150.0', '$150for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,028 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=152 nstack_initial=2)])
DEBUG 2023-04-14 17:43:03,028 stack: []
DEBUG 2023-04-14 17:43:03,028 dispatch pc=176, inst=LOAD_FAST(arg=6, lineno=2006)
DEBUG 2023-04-14 17:43:03,028 stack []
DEBUG 2023-04-14 17:43:03,028 dispatch pc=178, inst=LOAD_CONST(arg=7, lineno=2006)
DEBUG 2023-04-14 17:43:03,028 stack ['$sgn176.0']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=180, inst=BINARY_AND(arg=None, lineno=2006)
DEBUG 2023-04-14 17:43:03,030 stack ['$sgn176.0', '$const178.1']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=182, inst=STORE_FAST(arg=6, lineno=2006)
DEBUG 2023-04-14 17:43:03,030 stack ['$180binary_and.2']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=184, inst=LOAD_FAST(arg=6, lineno=2007)
DEBUG 2023-04-14 17:43:03,030 stack []
DEBUG 2023-04-14 17:43:03,030 dispatch pc=186, inst=LOAD_CONST(arg=4, lineno=2007)
DEBUG 2023-04-14 17:43:03,030 stack ['$sgn184.3']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=188, inst=COMPARE_OP(arg=2, lineno=2007)
DEBUG 2023-04-14 17:43:03,030 stack ['$sgn184.3', '$const186.4']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=190, inst=POP_JUMP_IF_FALSE(arg=196, lineno=2007)
DEBUG 2023-04-14 17:43:03,030 stack ['$188compare_op.5']
DEBUG 2023-04-14 17:43:03,030 end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0), Edge(pc=196, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,030 pending: deque([State(pc_initial=152 nstack_initial=2), State(pc_initial=192 nstack_initial=0), State(pc_initial=196 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,030 stack: ['$phi152.0', '$phi152.1']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=152, inst=STORE_FAST(arg=7, lineno=2003)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0', '$phi152.1']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=156, inst=LOAD_FAST(arg=4, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0', '$sgn154.2']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=158, inst=LOAD_FAST(arg=7, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0', '$sgn154.2', '$ipiv156.3']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=160, inst=BINARY_SUBSCR(arg=None, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0', '$sgn154.2', '$ipiv156.3', '$k158.4']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=162, inst=LOAD_FAST(arg=7, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0', '$sgn154.2', '$160binary_subscr.5']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=164, inst=LOAD_CONST(arg=7, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0', '$sgn154.2', '$160binary_subscr.5', '$k162.6']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=166, inst=BINARY_ADD(arg=None, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0', '$sgn154.2', '$160binary_subscr.5', '$k162.6', '$const164.7']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=168, inst=COMPARE_OP(arg=3, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0', '$sgn154.2', '$160binary_subscr.5', '$166binary_add.8']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=170, inst=BINARY_ADD(arg=None, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0', '$sgn154.2', '$168compare_op.9']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=172, inst=STORE_FAST(arg=6, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0', '$170binary_add.10']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=174, inst=JUMP_ABSOLUTE(arg=150, lineno=2004)
DEBUG 2023-04-14 17:43:03,030 stack ['$phi152.0']
DEBUG 2023-04-14 17:43:03,030 end state. edges=[Edge(pc=150, stack=('$phi152.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,030 pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=196 nstack_initial=0), State(pc_initial=150 nstack_initial=1)])
DEBUG 2023-04-14 17:43:03,030 stack: []
DEBUG 2023-04-14 17:43:03,030 dispatch pc=192, inst=LOAD_CONST(arg=1, lineno=2008)
DEBUG 2023-04-14 17:43:03,030 stack []
DEBUG 2023-04-14 17:43:03,030 dispatch pc=194, inst=STORE_FAST(arg=6, lineno=2008)
DEBUG 2023-04-14 17:43:03,030 stack ['$const192.0']
DEBUG 2023-04-14 17:43:03,030 end state. edges=[Edge(pc=196, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,030 pending: deque([State(pc_initial=196 nstack_initial=0), State(pc_initial=150 nstack_initial=1), State(pc_initial=196 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,030 stack: []
DEBUG 2023-04-14 17:43:03,030 dispatch pc=196, inst=LOAD_GLOBAL(arg=12, lineno=2011)
DEBUG 2023-04-14 17:43:03,030 stack []
DEBUG 2023-04-14 17:43:03,030 dispatch pc=198, inst=LOAD_FAST(arg=4, lineno=2011)
DEBUG 2023-04-14 17:43:03,030 stack ['$196load_global.0']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=200, inst=LOAD_ATTR(arg=13, lineno=2011)
DEBUG 2023-04-14 17:43:03,030 stack ['$196load_global.0', '$ipiv198.1']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=202, inst=BUILD_LIST(arg=1, lineno=2011)
DEBUG 2023-04-14 17:43:03,030 stack ['$196load_global.0', '$200load_attr.2']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=204, inst=CALL_FUNCTION(arg=1, lineno=2011)
DEBUG 2023-04-14 17:43:03,030 stack ['$196load_global.0', '$202build_list.3']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=206, inst=POP_TOP(arg=None, lineno=2011)
DEBUG 2023-04-14 17:43:03,030 stack ['$204call_function.4']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=208, inst=LOAD_DEREF(arg=2, lineno=2012)
DEBUG 2023-04-14 17:43:03,030 stack []
DEBUG 2023-04-14 17:43:03,030 dispatch pc=210, inst=LOAD_FAST(arg=1, lineno=2012)
DEBUG 2023-04-14 17:43:03,030 stack ['$208load_deref.5']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=212, inst=LOAD_FAST(arg=3, lineno=2012)
DEBUG 2023-04-14 17:43:03,030 stack ['$208load_deref.5', '$n210.6']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=214, inst=LOAD_FAST(arg=6, lineno=2012)
DEBUG 2023-04-14 17:43:03,030 stack ['$208load_deref.5', '$n210.6', '$acpy212.7']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=216, inst=CALL_FUNCTION(arg=3, lineno=2012)
DEBUG 2023-04-14 17:43:03,030 stack ['$208load_deref.5', '$n210.6', '$acpy212.7', '$sgn214.8']
DEBUG 2023-04-14 17:43:03,030 dispatch pc=218, inst=RETURN_VALUE(arg=None, lineno=2012)
DEBUG 2023-04-14 17:43:03,030 stack ['$216call_function.9']
DEBUG 2023-04-14 17:43:03,030 end state. edges=[]
DEBUG 2023-04-14 17:43:03,030 pending: deque([State(pc_initial=150 nstack_initial=1), State(pc_initial=196 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,030 pending: deque([State(pc_initial=196 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,030 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,030 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=1): {'$phi150.0'},
             State(pc_initial=152 nstack_initial=2): {'$phi152.1'},
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=196 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,030 defmap: {'$phi150.0': State(pc_initial=130 nstack_initial=0),
 '$phi152.1': State(pc_initial=150 nstack_initial=1)}
DEBUG 2023-04-14 17:43:03,030 phismap: defaultdict(<class 'set'>,
            {'$phi150.0': {('$148get_iter.7',
                            State(pc_initial=130 nstack_initial=0)),
                           ('$phi152.0',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi152.0': {('$phi150.0',
                            State(pc_initial=150 nstack_initial=1))},
             '$phi152.1': {('$150for_iter.2',
                            State(pc_initial=150 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:03,030 changing phismap: defaultdict(<class 'set'>,
            {'$phi150.0': {('$148get_iter.7',
                            State(pc_initial=130 nstack_initial=0)),
                           ('$phi150.0',
                            State(pc_initial=150 nstack_initial=1))},
             '$phi152.0': {('$148get_iter.7',
                            State(pc_initial=130 nstack_initial=0))},
             '$phi152.1': {('$150for_iter.2',
                            State(pc_initial=150 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:03,030 changing phismap: defaultdict(<class 'set'>,
            {'$phi150.0': {('$148get_iter.7',
                            State(pc_initial=130 nstack_initial=0))},
             '$phi152.0': {('$148get_iter.7',
                            State(pc_initial=130 nstack_initial=0))},
             '$phi152.1': {('$150for_iter.2',
                            State(pc_initial=150 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:03,030 changing phismap: defaultdict(<class 'set'>,
            {'$phi150.0': {('$148get_iter.7',
                            State(pc_initial=130 nstack_initial=0))},
             '$phi152.0': {('$148get_iter.7',
                            State(pc_initial=130 nstack_initial=0))},
             '$phi152.1': {('$150for_iter.2',
                            State(pc_initial=150 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:03,030 keep phismap: {'$phi150.0': {('$148get_iter.7', State(pc_initial=130 nstack_initial=0))},
 '$phi152.1': {('$150for_iter.2', State(pc_initial=150 nstack_initial=1))}}
DEBUG 2023-04-14 17:43:03,035 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=130 nstack_initial=0): {'$phi150.0': '$148get_iter.7'},
             State(pc_initial=150 nstack_initial=1): {'$phi152.1': '$150for_iter.2'}})
DEBUG 2023-04-14 17:43:03,035 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$a12.4'}), (14, {'item': '$a12.4', 'res': '$14load_attr.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$14load_attr.5', 'res': '$18binary_subscr.7'}), (20, {'res': '$n20.8'}), (22, {'lhs': '$18binary_subscr.7', 'rhs': '$n20.8', 'res': '$22compare_op.9'}), (24, {'pred': '$22compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 42: ()})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$30load_global.1'}), (32, {'item': '$30load_global.1', 'res': '$32load_attr.2'}), (34, {'item': '$32load_attr.2', 'res': '$34load_method.3'}), (36, {'res': '$msg36.4'}), (38, {'func': '$34load_method.3', 'args': ['$msg36.4'], 'res': '$38call_method.5'}), (40, {'exc': '$38call_method.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$n42.0'}), (44, {'res': '$const44.1'}), (46, {'lhs': '$n42.0', 'rhs': '$const44.1', 'res': '$46compare_op.2'}), (48, {'pred': '$46compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 58: ()})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$50load_deref.0'}), (52, {'res': '$52load_deref.1'}), (54, {'items': ['$50load_deref.0', '$52load_deref.1'], 'res': '$54build_tuple.2'}), (56, {'retval': '$54build_tuple.2', 'castval': '$56return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$58load_global.0'}), (60, {'res': '$a60.1'}), (62, {'func': '$58load_global.0', 'args': ['$a60.1'], 'res': '$62call_function.2'}), (66, {'res': '$66load_global.3'}), (68, {'res': '$a68.4'}), (70, {'func': '$66load_global.3', 'args': ['$a68.4'], 'res': '$70call_function.5'}), (72, {'value': '$70call_function.5'}), (74, {'res': '$74load_global.6'}), (76, {'item': '$74load_global.6', 'res': '$76load_attr.7'}), (78, {'res': '$n78.8'}), (80, {'res': '$80load_global.9'}), (82, {'res': '$const82.10'}), (84, {'func': '$76load_attr.7', 'args': ['$n78.8', '$80load_global.9'], 'names': '$const82.10', 'res': '$84call_function_kw.11'}), (86, {'value': '$84call_function_kw.11'}), (88, {'res': '$88load_deref.12'}), (90, {'res': '$90load_deref.13'}), (92, {'res': '$n92.14'}), (94, {'res': '$n94.15'}), (96, {'res': '$acpy96.16'}), (98, {'item': '$acpy96.16', 'res': '$98load_attr.17'}), (100, {'res': '$n100.18'}), (102, {'res': '$ipiv102.19'}), (104, {'item': '$ipiv102.19', 'res': '$104load_attr.20'}), (106, {'func': '$88load_deref.12', 'args': ['$90load_deref.13', '$n92.14', '$n94.15', '$98load_attr.17', '$n100.18', '$104load_attr.20'], 'res': '$106call_function.21'}), (108, {'value': '$106call_function.21'}), (110, {'res': '$r110.22'}), (112, {'res': '$const112.23'}), (114, {'lhs': '$r110.22', 'rhs': '$const112.23', 'res': '$114compare_op.24'}), (116, {'pred': '$114compare_op.24'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={118: (), 130: ()})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$const118.0'}), (120, {'res': '$120load_global.1'}), (122, {'item': '$120load_global.1', 'res': '$122load_attr.2'}), (124, {'value': '$122load_attr.2', 'res': '$124unary_negative.3'}), (126, {'items': ['$const118.0', '$124unary_negative.3'], 'res': '$126build_tuple.4'}), (128, {'retval': '$126build_tuple.4', 'castval': '$128return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$130load_global.0'}), (132, {'res': '$r132.1'}), (134, {'func': '$130load_global.0', 'args': ['$r132.1'], 'res': '$134call_function.2'}), (138, {'res': '$const138.3'}), (140, {'value': '$const138.3'}), (142, {'res': '$142load_global.4'}), (144, {'res': '$n144.5'}), (146, {'func': '$142load_global.4', 'args': ['$n144.5'], 'res': '$146call_function.6'}), (148, {'value': '$146call_function.6', 'res': '$148get_iter.7'})), outgoing_phis={'$phi150.0': '$148get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={150: ('$148get_iter.7',)})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=150 nstack_initial=1):
AdaptBlockInfo(insts=((150, {'iterator': '$phi150.0', 'pair': '$150for_iter.1', 'indval': '$150for_iter.2', 'pred': '$150for_iter.3'}),), outgoing_phis={'$phi152.1': '$150for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 152: ('$phi150.0', '$150for_iter.2')})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=152 nstack_initial=2):
AdaptBlockInfo(insts=((152, {'value': '$phi152.1'}), (154, {'res': '$sgn154.2'}), (156, {'res': '$ipiv156.3'}), (158, {'res': '$k158.4'}), (160, {'index': '$k158.4', 'target': '$ipiv156.3', 'res': '$160binary_subscr.5'}), (162, {'res': '$k162.6'}), (164, {'res': '$const164.7'}), (166, {'lhs': '$k162.6', 'rhs': '$const164.7', 'res': '$166binary_add.8'}), (168, {'lhs': '$160binary_subscr.5', 'rhs': '$166binary_add.8', 'res': '$168compare_op.9'}), (170, {'lhs': '$sgn154.2', 'rhs': '$168compare_op.9', 'res': '$170binary_add.10'}), (172, {'value': '$170binary_add.10'}), (174, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={150: ('$phi152.0',)})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$sgn176.0'}), (178, {'res': '$const178.1'}), (180, {'lhs': '$sgn176.0', 'rhs': '$const178.1', 'res': '$180binary_and.2'}), (182, {'value': '$180binary_and.2'}), (184, {'res': '$sgn184.3'}), (186, {'res': '$const186.4'}), (188, {'lhs': '$sgn184.3', 'rhs': '$const186.4', 'res': '$188compare_op.5'}), (190, {'pred': '$188compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: (), 196: ()})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$const192.0'}), (194, {'value': '$const192.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={196: ()})
DEBUG 2023-04-14 17:43:03,035 block_infos State(pc_initial=196 nstack_initial=0):
AdaptBlockInfo(insts=((196, {'res': '$196load_global.0'}), (198, {'res': '$ipiv198.1'}), (200, {'item': '$ipiv198.1', 'res': '$200load_attr.2'}), (202, {'items': ['$200load_attr.2'], 'res': '$202build_list.3'}), (204, {'func': '$196load_global.0', 'args': ['$202build_list.3'], 'res': '$204call_function.4'}), (208, {'res': '$208load_deref.5'}), (210, {'res': '$n210.6'}), (212, {'res': '$acpy212.7'}), (214, {'res': '$sgn214.8'}), (216, {'func': '$208load_deref.5', 'args': ['$n210.6', '$acpy212.7', '$sgn214.8'], 'res': '$216call_function.9'}), (218, {'retval': '$216call_function.9', 'castval': '$218return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,038 label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=shape) ['$4load_attr.1', 'a']
    $const6.2 = const(int, -1)               ['$const6.2']
    n = getitem(value=$4load_attr.1, index=$const6.2, fn=<built-in function getitem>) ['$4load_attr.1', '$const6.2', 'n']
    $14load_attr.5 = getattr(value=a, attr=shape) ['$14load_attr.5', 'a']
    $const16.6 = const(int, -2)              ['$const16.6']
    $18binary_subscr.7 = getitem(value=$14load_attr.5, index=$const16.6, fn=<built-in function getitem>) ['$14load_attr.5', '$18binary_subscr.7', '$const16.6']
    $22compare_op.9 = $18binary_subscr.7 != n ['$18binary_subscr.7', '$22compare_op.9', 'n']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.9, func=bool24, args=(Var($22compare_op.9, linalg.py:1975),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.9', '$24pred', 'bool24']
    branch $24pred, 26, 42                   ['$24pred']
label 26:
    msg = const(str, Last 2 dimensions of the array must be square.) ['msg']
    $30load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$30load_global.1']
    $32load_attr.2 = getattr(value=$30load_global.1, attr=linalg) ['$30load_global.1', '$32load_attr.2']
    $34load_method.3 = getattr(value=$32load_attr.2, attr=LinAlgError) ['$32load_attr.2', '$34load_method.3']
    $38call_method.5 = call $34load_method.3(msg, func=$34load_method.3, args=[Var(msg, linalg.py:1976)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_method.3', '$38call_method.5', 'msg']
    raise $38call_method.5                   ['$38call_method.5']
label 42:
    $const44.1 = const(int, 0)               ['$const44.1']
    $46compare_op.2 = n == $const44.1        ['$46compare_op.2', '$const44.1', 'n']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, linalg.py:1979),), kws=(), vararg=None, varkwarg=None, target=None) ['$46compare_op.2', '$48pred', 'bool48']
    branch $48pred, 50, 58                   ['$48pred']
label 50:
    $50load_deref.0 = freevar(ONE: (1+0j))   ['$50load_deref.0']
    $52load_deref.1 = freevar(ZERO: 0.0)     ['$52load_deref.1']
    $54build_tuple.2 = build_tuple(items=[Var($50load_deref.0, linalg.py:1980), Var($52load_deref.1, linalg.py:1980)]) ['$50load_deref.0', '$52load_deref.1', '$54build_tuple.2']
    $56return_value.3 = cast(value=$54build_tuple.2) ['$54build_tuple.2', '$56return_value.3']
    return $56return_value.3                 ['$56return_value.3']
label 58:
    $58load_global.0 = global(_check_finite_matrix: <function _check_finite_matrix at 0x000002661771F280>) ['$58load_global.0']
    $62call_function.2 = call $58load_global.0(a, func=$58load_global.0, args=[Var(a, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.0', '$62call_function.2', 'a']
    $66load_global.3 = global(_copy_to_fortran_order: <function _copy_to_fortran_order at 0x000002661771F550>) ['$66load_global.3']
    acpy = call $66load_global.3(a, func=$66load_global.3, args=[Var(a, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.3', 'a', 'acpy']
    $74load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$74load_global.6']
    $76load_attr.7 = getattr(value=$74load_global.6, attr=empty) ['$74load_global.6', '$76load_attr.7']
    $80load_global.9 = global(F_INT_nptype: <class 'numpy.int32'>) ['$80load_global.9']
    ipiv = call $76load_attr.7(n, func=$76load_attr.7, args=[Var(n, linalg.py:1974)], kws=[('dtype', Var($80load_global.9, linalg.py:1986))], vararg=None, varkwarg=None, target=None) ['$76load_attr.7', '$80load_global.9', 'ipiv', 'n']
    $88load_deref.12 = freevar(numba_xxgetrf: ExternalFunction(numba_xxgetrf)) ['$88load_deref.12']
    $90load_deref.13 = freevar(kind: 122)    ['$90load_deref.13']
    $98load_attr.17 = getattr(value=acpy, attr=ctypes) ['$98load_attr.17', 'acpy']
    $104load_attr.20 = getattr(value=ipiv, attr=ctypes) ['$104load_attr.20', 'ipiv']
    r = call $88load_deref.12($90load_deref.13, n, n, $98load_attr.17, n, $104load_attr.20, func=$88load_deref.12, args=[Var($90load_deref.13, linalg.py:1988), Var(n, linalg.py:1974), Var(n, linalg.py:1974), Var($98load_attr.17, linalg.py:1988), Var(n, linalg.py:1974), Var($104load_attr.20, linalg.py:1988)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_attr.20', '$88load_deref.12', '$90load_deref.13', '$98load_attr.17', 'n', 'n', 'n', 'r']
    $const112.23 = const(int, 0)             ['$const112.23']
    $114compare_op.24 = r > $const112.23     ['$114compare_op.24', '$const112.23', 'r']
    bool116 = global(bool: <class 'bool'>)   ['bool116']
    $116pred = call bool116($114compare_op.24, func=bool116, args=(Var($114compare_op.24, linalg.py:1990),), kws=(), vararg=None, varkwarg=None, target=None) ['$114compare_op.24', '$116pred', 'bool116']
    branch $116pred, 118, 130                ['$116pred']
label 118:
    $const118.0 = const(float, 0.0)          ['$const118.0']
    $120load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$120load_global.1']
    $122load_attr.2 = getattr(value=$120load_global.1, attr=inf) ['$120load_global.1', '$122load_attr.2']
    $124unary_negative.3 = unary(fn=<built-in function neg>, value=$122load_attr.2) ['$122load_attr.2', '$124unary_negative.3']
    $126build_tuple.4 = build_tuple(items=[Var($const118.0, linalg.py:1992), Var($124unary_negative.3, linalg.py:1992)]) ['$124unary_negative.3', '$126build_tuple.4', '$const118.0']
    $128return_value.5 = cast(value=$126build_tuple.4) ['$126build_tuple.4', '$128return_value.5']
    return $128return_value.5                ['$128return_value.5']
label 130:
    $130load_global.0 = global(_inv_err_handler: <function _inv_err_handler at 0x000002661771F5E0>) ['$130load_global.0']
    $134call_function.2 = call $130load_global.0(r, func=$130load_global.0, args=[Var(r, linalg.py:1988)], kws=(), vararg=None, varkwarg=None, target=None) ['$130load_global.0', '$134call_function.2', 'r']
    sgn = const(int, 1)                      ['sgn']
    $142load_global.4 = global(range: <class 'range'>) ['$142load_global.4']
    $146call_function.6 = call $142load_global.4(n, func=$142load_global.4, args=[Var(n, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None) ['$142load_global.4', '$146call_function.6', 'n']
    $148get_iter.7 = getiter(value=$146call_function.6) ['$146call_function.6', '$148get_iter.7']
    $phi150.0 = $148get_iter.7               ['$148get_iter.7', '$phi150.0']
    jump 150                                 []
label 150:
    $150for_iter.1 = iternext(value=$phi150.0) ['$150for_iter.1', '$phi150.0']
    $150for_iter.2 = pair_first(value=$150for_iter.1) ['$150for_iter.1', '$150for_iter.2']
    $150for_iter.3 = pair_second(value=$150for_iter.1) ['$150for_iter.1', '$150for_iter.3']
    $phi152.1 = $150for_iter.2               ['$150for_iter.2', '$phi152.1']
    branch $150for_iter.3, 152, 176          ['$150for_iter.3']
label 152:
    k = $phi152.1                            ['$phi152.1', 'k']
    $160binary_subscr.5 = getitem(value=ipiv, index=k, fn=<built-in function getitem>) ['$160binary_subscr.5', 'ipiv', 'k']
    $const164.7 = const(int, 1)              ['$const164.7']
    $166binary_add.8 = k + $const164.7       ['$166binary_add.8', '$const164.7', 'k']
    $168compare_op.9 = $160binary_subscr.5 != $166binary_add.8 ['$160binary_subscr.5', '$166binary_add.8', '$168compare_op.9']
    $170binary_add.10 = sgn + $168compare_op.9 ['$168compare_op.9', '$170binary_add.10', 'sgn']
    sgn = $170binary_add.10                  ['$170binary_add.10', 'sgn']
    jump 150                                 []
label 176:
    $const178.1 = const(int, 1)              ['$const178.1']
    $180binary_and.2 = sgn & $const178.1     ['$180binary_and.2', '$const178.1', 'sgn']
    sgn = $180binary_and.2                   ['$180binary_and.2', 'sgn']
    $const186.4 = const(int, 0)              ['$const186.4']
    $188compare_op.5 = sgn == $const186.4    ['$188compare_op.5', '$const186.4', 'sgn']
    bool190 = global(bool: <class 'bool'>)   ['bool190']
    $190pred = call bool190($188compare_op.5, func=bool190, args=(Var($188compare_op.5, linalg.py:2007),), kws=(), vararg=None, varkwarg=None, target=None) ['$188compare_op.5', '$190pred', 'bool190']
    branch $190pred, 192, 196                ['$190pred']
label 192:
    sgn = const(int, -1)                     ['sgn']
    jump 196                                 []
label 196:
    $196load_global.0 = global(_dummy_liveness_func: <function _dummy_liveness_func at 0x000002661771F700>) ['$196load_global.0']
    $200load_attr.2 = getattr(value=ipiv, attr=size) ['$200load_attr.2', 'ipiv']
    $202build_list.3 = build_list(items=[Var($200load_attr.2, linalg.py:2011)]) ['$200load_attr.2', '$202build_list.3']
    $204call_function.4 = call $196load_global.0($202build_list.3, func=$196load_global.0, args=[Var($202build_list.3, linalg.py:2011)], kws=(), vararg=None, varkwarg=None, target=None) ['$196load_global.0', '$202build_list.3', '$204call_function.4']
    $208load_deref.5 = freevar(diag_walker: <function _get_slogdet_diag_walker.<locals>.cmplx_diag_walker at 0x000002661995F1F0>) ['$208load_deref.5']
    $216call_function.9 = call $208load_deref.5(n, acpy, sgn, func=$208load_deref.5, args=[Var(n, linalg.py:1974), Var(acpy, linalg.py:1984), Var(sgn, linalg.py:2002)], kws=(), vararg=None, varkwarg=None, target=None) ['$208load_deref.5', '$216call_function.9', 'acpy', 'n', 'sgn']
    $218return_value.10 = cast(value=$216call_function.9) ['$216call_function.9', '$218return_value.10']
    return $218return_value.10               ['$218return_value.10']

DEBUG 2023-04-14 17:43:03,049 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,049 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,049 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,049 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2023-04-14 17:43:03,049 on stmt: $const6.2 = const(int, -1)
DEBUG 2023-04-14 17:43:03,049 on stmt: n = static_getitem(value=$4load_attr.1, index=-1, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,049 on stmt: $14load_attr.5 = getattr(value=a, attr=shape)
DEBUG 2023-04-14 17:43:03,049 on stmt: $const16.6 = const(int, -2)
DEBUG 2023-04-14 17:43:03,049 on stmt: $18binary_subscr.7 = static_getitem(value=$14load_attr.5, index=-2, index_var=$const16.6, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,049 on stmt: $22compare_op.9 = $18binary_subscr.7 != n
DEBUG 2023-04-14 17:43:03,049 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,049 on stmt: $24pred = call bool24($22compare_op.9, func=bool24, args=(Var($22compare_op.9, linalg.py:1975),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,049 on stmt: branch $24pred, 26, 42
DEBUG 2023-04-14 17:43:03,049 ==== SSA block analysis pass on 26
DEBUG 2023-04-14 17:43:03,049 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,049 on stmt: msg = const(str, Last 2 dimensions of the array must be square.)
DEBUG 2023-04-14 17:43:03,049 on stmt: $30load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,049 on stmt: $32load_attr.2 = getattr(value=$30load_global.1, attr=linalg)
DEBUG 2023-04-14 17:43:03,049 on stmt: $34load_method.3 = getattr(value=$32load_attr.2, attr=LinAlgError)
DEBUG 2023-04-14 17:43:03,049 on stmt: $38call_method.5 = call $34load_method.3(msg, func=$34load_method.3, args=[Var(msg, linalg.py:1976)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,049 on stmt: <static> raise <class 'numpy.linalg.LinAlgError'>('Last 2 dimensions of the array must be square.')
DEBUG 2023-04-14 17:43:03,049 ==== SSA block analysis pass on 42
DEBUG 2023-04-14 17:43:03,049 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,049 on stmt: $const44.1 = const(int, 0)
DEBUG 2023-04-14 17:43:03,049 on stmt: $46compare_op.2 = n == $const44.1
DEBUG 2023-04-14 17:43:03,049 on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,049 on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, linalg.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,049 on stmt: branch $48pred, 50, 58
DEBUG 2023-04-14 17:43:03,049 ==== SSA block analysis pass on 50
DEBUG 2023-04-14 17:43:03,049 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,049 on stmt: $50load_deref.0 = freevar(ONE: (1+0j))
DEBUG 2023-04-14 17:43:03,049 on stmt: $52load_deref.1 = freevar(ZERO: 0.0)
DEBUG 2023-04-14 17:43:03,049 on stmt: $54build_tuple.2 = build_tuple(items=[Var($50load_deref.0, linalg.py:1980), Var($52load_deref.1, linalg.py:1980)])
DEBUG 2023-04-14 17:43:03,049 on stmt: $56return_value.3 = cast(value=$54build_tuple.2)
DEBUG 2023-04-14 17:43:03,049 on stmt: return $56return_value.3
DEBUG 2023-04-14 17:43:03,049 ==== SSA block analysis pass on 58
DEBUG 2023-04-14 17:43:03,049 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,049 on stmt: $58load_global.0 = global(_check_finite_matrix: <function _check_finite_matrix at 0x000002661771F280>)
DEBUG 2023-04-14 17:43:03,049 on stmt: $62call_function.2 = call $58load_global.0(a, func=$58load_global.0, args=[Var(a, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,049 on stmt: $66load_global.3 = global(_copy_to_fortran_order: <function _copy_to_fortran_order at 0x000002661771F550>)
DEBUG 2023-04-14 17:43:03,049 on stmt: acpy = call $66load_global.3(a, func=$66load_global.3, args=[Var(a, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,049 on stmt: $74load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,049 on stmt: $76load_attr.7 = getattr(value=$74load_global.6, attr=empty)
DEBUG 2023-04-14 17:43:03,049 on stmt: $80load_global.9 = global(F_INT_nptype: <class 'numpy.int32'>)
DEBUG 2023-04-14 17:43:03,049 on stmt: ipiv = call $76load_attr.7(n, func=$76load_attr.7, args=[Var(n, linalg.py:1974)], kws=[('dtype', Var($80load_global.9, linalg.py:1986))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,049 on stmt: $88load_deref.12 = freevar(numba_xxgetrf: ExternalFunction(numba_xxgetrf))
DEBUG 2023-04-14 17:43:03,049 on stmt: $90load_deref.13 = freevar(kind: 122)
DEBUG 2023-04-14 17:43:03,049 on stmt: $98load_attr.17 = getattr(value=acpy, attr=ctypes)
DEBUG 2023-04-14 17:43:03,049 on stmt: $104load_attr.20 = getattr(value=ipiv, attr=ctypes)
DEBUG 2023-04-14 17:43:03,049 on stmt: r = call $88load_deref.12($90load_deref.13, n, n, $98load_attr.17, n, $104load_attr.20, func=$88load_deref.12, args=[Var($90load_deref.13, linalg.py:1988), Var(n, linalg.py:1974), Var(n, linalg.py:1974), Var($98load_attr.17, linalg.py:1988), Var(n, linalg.py:1974), Var($104load_attr.20, linalg.py:1988)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,049 on stmt: $const112.23 = const(int, 0)
DEBUG 2023-04-14 17:43:03,049 on stmt: $114compare_op.24 = r > $const112.23
DEBUG 2023-04-14 17:43:03,049 on stmt: bool116 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,049 on stmt: $116pred = call bool116($114compare_op.24, func=bool116, args=(Var($114compare_op.24, linalg.py:1990),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,049 on stmt: branch $116pred, 118, 130
DEBUG 2023-04-14 17:43:03,049 ==== SSA block analysis pass on 118
DEBUG 2023-04-14 17:43:03,049 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,049 on stmt: $const118.0 = const(float, 0.0)
DEBUG 2023-04-14 17:43:03,049 on stmt: $120load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,055 on stmt: $122load_attr.2 = getattr(value=$120load_global.1, attr=inf)
DEBUG 2023-04-14 17:43:03,055 on stmt: $124unary_negative.3 = unary(fn=<built-in function neg>, value=$122load_attr.2)
DEBUG 2023-04-14 17:43:03,055 on stmt: $126build_tuple.4 = build_tuple(items=[Var($const118.0, linalg.py:1992), Var($124unary_negative.3, linalg.py:1992)])
DEBUG 2023-04-14 17:43:03,055 on stmt: $128return_value.5 = cast(value=$126build_tuple.4)
DEBUG 2023-04-14 17:43:03,055 on stmt: return $128return_value.5
DEBUG 2023-04-14 17:43:03,055 ==== SSA block analysis pass on 130
DEBUG 2023-04-14 17:43:03,055 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,055 on stmt: $130load_global.0 = global(_inv_err_handler: <function _inv_err_handler at 0x000002661771F5E0>)
DEBUG 2023-04-14 17:43:03,055 on stmt: $134call_function.2 = call $130load_global.0(r, func=$130load_global.0, args=[Var(r, linalg.py:1988)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,055 on stmt: sgn = const(int, 1)
DEBUG 2023-04-14 17:43:03,055 on stmt: $142load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:03,055 on stmt: $146call_function.6 = call $142load_global.4(n, func=$142load_global.4, args=[Var(n, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,055 on stmt: $148get_iter.7 = getiter(value=$146call_function.6)
DEBUG 2023-04-14 17:43:03,055 on stmt: $phi150.0 = $148get_iter.7
DEBUG 2023-04-14 17:43:03,055 on stmt: jump 150
DEBUG 2023-04-14 17:43:03,055 ==== SSA block analysis pass on 150
DEBUG 2023-04-14 17:43:03,055 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,055 on stmt: $150for_iter.1 = iternext(value=$phi150.0)
DEBUG 2023-04-14 17:43:03,055 on stmt: $150for_iter.2 = pair_first(value=$150for_iter.1)
DEBUG 2023-04-14 17:43:03,055 on stmt: $150for_iter.3 = pair_second(value=$150for_iter.1)
DEBUG 2023-04-14 17:43:03,055 on stmt: $phi152.1 = $150for_iter.2
DEBUG 2023-04-14 17:43:03,055 on stmt: branch $150for_iter.3, 152, 176
DEBUG 2023-04-14 17:43:03,055 ==== SSA block analysis pass on 152
DEBUG 2023-04-14 17:43:03,055 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,055 on stmt: k = $phi152.1
DEBUG 2023-04-14 17:43:03,055 on stmt: $160binary_subscr.5 = getitem(value=ipiv, index=k, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,055 on stmt: $const164.7 = const(int, 1)
DEBUG 2023-04-14 17:43:03,055 on stmt: $166binary_add.8 = k + $const164.7
DEBUG 2023-04-14 17:43:03,055 on stmt: $168compare_op.9 = $160binary_subscr.5 != $166binary_add.8
DEBUG 2023-04-14 17:43:03,055 on stmt: $170binary_add.10 = sgn + $168compare_op.9
DEBUG 2023-04-14 17:43:03,055 on stmt: sgn = $170binary_add.10
DEBUG 2023-04-14 17:43:03,055 on stmt: jump 150
DEBUG 2023-04-14 17:43:03,055 ==== SSA block analysis pass on 176
DEBUG 2023-04-14 17:43:03,055 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,055 on stmt: $const178.1 = const(int, 1)
DEBUG 2023-04-14 17:43:03,055 on stmt: $180binary_and.2 = sgn & $const178.1
DEBUG 2023-04-14 17:43:03,055 on stmt: sgn = $180binary_and.2
DEBUG 2023-04-14 17:43:03,055 on stmt: $const186.4 = const(int, 0)
DEBUG 2023-04-14 17:43:03,055 on stmt: $188compare_op.5 = sgn == $const186.4
DEBUG 2023-04-14 17:43:03,055 on stmt: bool190 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,055 on stmt: $190pred = call bool190($188compare_op.5, func=bool190, args=(Var($188compare_op.5, linalg.py:2007),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,055 on stmt: branch $190pred, 192, 196
DEBUG 2023-04-14 17:43:03,055 ==== SSA block analysis pass on 192
DEBUG 2023-04-14 17:43:03,055 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,055 on stmt: sgn = const(int, -1)
DEBUG 2023-04-14 17:43:03,055 on stmt: jump 196
DEBUG 2023-04-14 17:43:03,055 ==== SSA block analysis pass on 196
DEBUG 2023-04-14 17:43:03,055 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A155B0>
DEBUG 2023-04-14 17:43:03,055 on stmt: $196load_global.0 = global(_dummy_liveness_func: <function _dummy_liveness_func at 0x000002661771F700>)
DEBUG 2023-04-14 17:43:03,055 on stmt: $200load_attr.2 = getattr(value=ipiv, attr=size)
DEBUG 2023-04-14 17:43:03,055 on stmt: $202build_list.3 = build_list(items=[Var($200load_attr.2, linalg.py:2011)])
DEBUG 2023-04-14 17:43:03,055 on stmt: $204call_function.4 = call $196load_global.0($202build_list.3, func=$196load_global.0, args=[Var($202build_list.3, linalg.py:2011)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,055 on stmt: $208load_deref.5 = freevar(diag_walker: <function _get_slogdet_diag_walker.<locals>.cmplx_diag_walker at 0x000002661995F1F0>)
DEBUG 2023-04-14 17:43:03,055 on stmt: $216call_function.9 = call $208load_deref.5(n, acpy, sgn, func=$208load_deref.5, args=[Var(n, linalg.py:1974), Var(acpy, linalg.py:1984), Var(sgn, linalg.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,055 on stmt: $218return_value.10 = cast(value=$216call_function.9)
DEBUG 2023-04-14 17:43:03,055 on stmt: return $218return_value.10
DEBUG 2023-04-14 17:43:03,059 defs defaultdict(<class 'list'>,
            {'$104load_attr.20': [<numba.core.ir.Assign object at 0x000002661990E040>],
             '$114compare_op.24': [<numba.core.ir.Assign object at 0x00000266198E9DC0>],
             '$116pred': [<numba.core.ir.Assign object at 0x000002661991BEB0>],
             '$120load_global.1': [<numba.core.ir.Assign object at 0x0000026619904E80>],
             '$122load_attr.2': [<numba.core.ir.Assign object at 0x000002661991B7F0>],
             '$124unary_negative.3': [<numba.core.ir.Assign object at 0x000002661991BD60>],
             '$126build_tuple.4': [<numba.core.ir.Assign object at 0x00000266199E6BB0>],
             '$128return_value.5': [<numba.core.ir.Assign object at 0x00000266199E6D00>],
             '$130load_global.0': [<numba.core.ir.Assign object at 0x00000266199E6FA0>],
             '$134call_function.2': [<numba.core.ir.Assign object at 0x0000026619A0C2E0>],
             '$142load_global.4': [<numba.core.ir.Assign object at 0x0000026619A0C6A0>],
             '$146call_function.6': [<numba.core.ir.Assign object at 0x0000026619A0C9A0>],
             '$148get_iter.7': [<numba.core.ir.Assign object at 0x0000026619A0CAC0>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x00000266198C9610>],
             '$150for_iter.1': [<numba.core.ir.Assign object at 0x0000026619A0CD30>],
             '$150for_iter.2': [<numba.core.ir.Assign object at 0x0000026619A0CE50>],
             '$150for_iter.3': [<numba.core.ir.Assign object at 0x0000026619A0CF70>],
             '$160binary_subscr.5': [<numba.core.ir.Assign object at 0x0000026619A0E790>],
             '$166binary_add.8': [<numba.core.ir.Assign object at 0x0000026619A0EBB0>],
             '$168compare_op.9': [<numba.core.ir.Assign object at 0x0000026619A0ED30>],
             '$170binary_add.10': [<numba.core.ir.Assign object at 0x0000026619A0EEB0>],
             '$180binary_and.2': [<numba.core.ir.Assign object at 0x0000026619A103D0>],
             '$188compare_op.5': [<numba.core.ir.Assign object at 0x0000026619A108B0>],
             '$18binary_subscr.7': [<numba.core.ir.Assign object at 0x0000026619A157F0>],
             '$190pred': [<numba.core.ir.Assign object at 0x0000026619A10B20>],
             '$196load_global.0': [<numba.core.ir.Assign object at 0x0000026619A10FA0>],
             '$200load_attr.2': [<numba.core.ir.Assign object at 0x0000026619A12280>],
             '$202build_list.3': [<numba.core.ir.Assign object at 0x0000026619A12430>],
             '$204call_function.4': [<numba.core.ir.Assign object at 0x0000026619A125E0>],
             '$208load_deref.5': [<numba.core.ir.Assign object at 0x0000026619A12700>],
             '$216call_function.9': [<numba.core.ir.Assign object at 0x0000026619A12C40>],
             '$218return_value.10': [<numba.core.ir.Assign object at 0x0000026619A12D60>],
             '$22compare_op.9': [<numba.core.ir.Assign object at 0x00000266198C9AC0>],
             '$24pred': [<numba.core.ir.Assign object at 0x00000266198BBCD0>],
             '$30load_global.1': [<numba.core.ir.Assign object at 0x00000266198BB790>],
             '$32load_attr.2': [<numba.core.ir.Assign object at 0x00000266198BB5E0>],
             '$34load_method.3': [<numba.core.ir.Assign object at 0x00000266198BB250>],
             '$38call_method.5': [<numba.core.ir.Assign object at 0x00000266198BB520>],
             '$46compare_op.2': [<numba.core.ir.Assign object at 0x00000266198B3CA0>],
             '$48pred': [<numba.core.ir.Assign object at 0x00000266198B3B20>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000026619975C40>],
             '$50load_deref.0': [<numba.core.ir.Assign object at 0x00000266198B3E20>],
             '$52load_deref.1': [<numba.core.ir.Assign object at 0x00000266198B3F10>],
             '$54build_tuple.2': [<numba.core.ir.Assign object at 0x00000266198B3520>],
             '$56return_value.3': [<numba.core.ir.Assign object at 0x00000266198B3250>],
             '$58load_global.0': [<numba.core.ir.Assign object at 0x00000266198B32E0>],
             '$62call_function.2': [<numba.core.ir.Assign object at 0x000002661990DDF0>],
             '$66load_global.3': [<numba.core.ir.Assign object at 0x000002661990D250>],
             '$74load_global.6': [<numba.core.ir.Assign object at 0x0000026619910040>],
             '$76load_attr.7': [<numba.core.ir.Assign object at 0x0000026619910280>],
             '$80load_global.9': [<numba.core.ir.Assign object at 0x00000266199101C0>],
             '$88load_deref.12': [<numba.core.ir.Assign object at 0x0000026619910D30>],
             '$90load_deref.13': [<numba.core.ir.Assign object at 0x00000266199102B0>],
             '$98load_attr.17': [<numba.core.ir.Assign object at 0x000002661990ED90>],
             '$const112.23': [<numba.core.ir.Assign object at 0x00000266198E9880>],
             '$const118.0': [<numba.core.ir.Assign object at 0x000002661990E640>],
             '$const16.6': [<numba.core.ir.Assign object at 0x00000266198C9C70>],
             '$const164.7': [<numba.core.ir.Assign object at 0x0000026619A0EA00>],
             '$const178.1': [<numba.core.ir.Assign object at 0x0000026619A10220>],
             '$const186.4': [<numba.core.ir.Assign object at 0x0000026619A10700>],
             '$const44.1': [<numba.core.ir.Assign object at 0x00000266198BBF70>],
             '$const6.2': [<numba.core.ir.Assign object at 0x000002661995A820>],
             '$phi150.0': [<numba.core.ir.Assign object at 0x0000026619A0C100>],
             '$phi152.1': [<numba.core.ir.Assign object at 0x0000026619A0CC70>],
             'a': [<numba.core.ir.Assign object at 0x00000266199D3A00>],
             'acpy': [<numba.core.ir.Assign object at 0x000002661990D6D0>],
             'bool116': [<numba.core.ir.Assign object at 0x000002661991B100>],
             'bool190': [<numba.core.ir.Assign object at 0x0000026619A10A00>],
             'bool24': [<numba.core.ir.Assign object at 0x00000266198BB070>],
             'bool48': [<numba.core.ir.Assign object at 0x00000266198B3400>],
             'ipiv': [<numba.core.ir.Assign object at 0x0000026619910A30>],
             'k': [<numba.core.ir.Assign object at 0x0000026619A0E280>],
             'msg': [<numba.core.ir.Assign object at 0x00000266198BBB50>],
             'n': [<numba.core.ir.Assign object at 0x0000026619A15730>],
             'r': [<numba.core.ir.Assign object at 0x00000266199046D0>],
             'sgn': [<numba.core.ir.Assign object at 0x0000026619A0C400>,
                     <numba.core.ir.Assign object at 0x0000026619A0EF70>,
                     <numba.core.ir.Assign object at 0x0000026619A10490>,
                     <numba.core.ir.Assign object at 0x0000026619A10D00>]})
DEBUG 2023-04-14 17:43:03,059 SSA violators {'sgn'}
DEBUG 2023-04-14 17:43:03,059 Fix SSA violator on var sgn
DEBUG 2023-04-14 17:43:03,059 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:03,059 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,059 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,059 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2023-04-14 17:43:03,059 on stmt: $const6.2 = const(int, -1)
DEBUG 2023-04-14 17:43:03,059 on stmt: n = static_getitem(value=$4load_attr.1, index=-1, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,059 on stmt: $14load_attr.5 = getattr(value=a, attr=shape)
DEBUG 2023-04-14 17:43:03,059 on stmt: $const16.6 = const(int, -2)
DEBUG 2023-04-14 17:43:03,059 on stmt: $18binary_subscr.7 = static_getitem(value=$14load_attr.5, index=-2, index_var=$const16.6, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,059 on stmt: $22compare_op.9 = $18binary_subscr.7 != n
DEBUG 2023-04-14 17:43:03,059 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,059 on stmt: $24pred = call bool24($22compare_op.9, func=bool24, args=(Var($22compare_op.9, linalg.py:1975),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,059 on stmt: branch $24pred, 26, 42
DEBUG 2023-04-14 17:43:03,059 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:03,059 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,059 on stmt: msg = const(str, Last 2 dimensions of the array must be square.)
DEBUG 2023-04-14 17:43:03,059 on stmt: $30load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,059 on stmt: $32load_attr.2 = getattr(value=$30load_global.1, attr=linalg)
DEBUG 2023-04-14 17:43:03,059 on stmt: $34load_method.3 = getattr(value=$32load_attr.2, attr=LinAlgError)
DEBUG 2023-04-14 17:43:03,059 on stmt: $38call_method.5 = call $34load_method.3(msg, func=$34load_method.3, args=[Var(msg, linalg.py:1976)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,059 on stmt: <static> raise <class 'numpy.linalg.LinAlgError'>('Last 2 dimensions of the array must be square.')
DEBUG 2023-04-14 17:43:03,061 ==== SSA block rewrite pass on 42
DEBUG 2023-04-14 17:43:03,061 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,061 on stmt: $const44.1 = const(int, 0)
DEBUG 2023-04-14 17:43:03,061 on stmt: $46compare_op.2 = n == $const44.1
DEBUG 2023-04-14 17:43:03,061 on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,061 on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, linalg.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,061 on stmt: branch $48pred, 50, 58
DEBUG 2023-04-14 17:43:03,061 ==== SSA block rewrite pass on 50
DEBUG 2023-04-14 17:43:03,061 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,061 on stmt: $50load_deref.0 = freevar(ONE: (1+0j))
DEBUG 2023-04-14 17:43:03,061 on stmt: $52load_deref.1 = freevar(ZERO: 0.0)
DEBUG 2023-04-14 17:43:03,061 on stmt: $54build_tuple.2 = build_tuple(items=[Var($50load_deref.0, linalg.py:1980), Var($52load_deref.1, linalg.py:1980)])
DEBUG 2023-04-14 17:43:03,061 on stmt: $56return_value.3 = cast(value=$54build_tuple.2)
DEBUG 2023-04-14 17:43:03,061 on stmt: return $56return_value.3
DEBUG 2023-04-14 17:43:03,061 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:03,061 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,061 on stmt: $58load_global.0 = global(_check_finite_matrix: <function _check_finite_matrix at 0x000002661771F280>)
DEBUG 2023-04-14 17:43:03,061 on stmt: $62call_function.2 = call $58load_global.0(a, func=$58load_global.0, args=[Var(a, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,061 on stmt: $66load_global.3 = global(_copy_to_fortran_order: <function _copy_to_fortran_order at 0x000002661771F550>)
DEBUG 2023-04-14 17:43:03,061 on stmt: acpy = call $66load_global.3(a, func=$66load_global.3, args=[Var(a, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,061 on stmt: $74load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,061 on stmt: $76load_attr.7 = getattr(value=$74load_global.6, attr=empty)
DEBUG 2023-04-14 17:43:03,061 on stmt: $80load_global.9 = global(F_INT_nptype: <class 'numpy.int32'>)
DEBUG 2023-04-14 17:43:03,061 on stmt: ipiv = call $76load_attr.7(n, func=$76load_attr.7, args=[Var(n, linalg.py:1974)], kws=[('dtype', Var($80load_global.9, linalg.py:1986))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,061 on stmt: $88load_deref.12 = freevar(numba_xxgetrf: ExternalFunction(numba_xxgetrf))
DEBUG 2023-04-14 17:43:03,061 on stmt: $90load_deref.13 = freevar(kind: 122)
DEBUG 2023-04-14 17:43:03,061 on stmt: $98load_attr.17 = getattr(value=acpy, attr=ctypes)
DEBUG 2023-04-14 17:43:03,061 on stmt: $104load_attr.20 = getattr(value=ipiv, attr=ctypes)
DEBUG 2023-04-14 17:43:03,061 on stmt: r = call $88load_deref.12($90load_deref.13, n, n, $98load_attr.17, n, $104load_attr.20, func=$88load_deref.12, args=[Var($90load_deref.13, linalg.py:1988), Var(n, linalg.py:1974), Var(n, linalg.py:1974), Var($98load_attr.17, linalg.py:1988), Var(n, linalg.py:1974), Var($104load_attr.20, linalg.py:1988)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,061 on stmt: $const112.23 = const(int, 0)
DEBUG 2023-04-14 17:43:03,061 on stmt: $114compare_op.24 = r > $const112.23
DEBUG 2023-04-14 17:43:03,061 on stmt: bool116 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,061 on stmt: $116pred = call bool116($114compare_op.24, func=bool116, args=(Var($114compare_op.24, linalg.py:1990),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,061 on stmt: branch $116pred, 118, 130
DEBUG 2023-04-14 17:43:03,061 ==== SSA block rewrite pass on 118
DEBUG 2023-04-14 17:43:03,061 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,061 on stmt: $const118.0 = const(float, 0.0)
DEBUG 2023-04-14 17:43:03,061 on stmt: $120load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,061 on stmt: $122load_attr.2 = getattr(value=$120load_global.1, attr=inf)
DEBUG 2023-04-14 17:43:03,061 on stmt: $124unary_negative.3 = unary(fn=<built-in function neg>, value=$122load_attr.2)
DEBUG 2023-04-14 17:43:03,061 on stmt: $126build_tuple.4 = build_tuple(items=[Var($const118.0, linalg.py:1992), Var($124unary_negative.3, linalg.py:1992)])
DEBUG 2023-04-14 17:43:03,061 on stmt: $128return_value.5 = cast(value=$126build_tuple.4)
DEBUG 2023-04-14 17:43:03,061 on stmt: return $128return_value.5
DEBUG 2023-04-14 17:43:03,061 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:03,061 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,061 on stmt: $130load_global.0 = global(_inv_err_handler: <function _inv_err_handler at 0x000002661771F5E0>)
DEBUG 2023-04-14 17:43:03,061 on stmt: $134call_function.2 = call $130load_global.0(r, func=$130load_global.0, args=[Var(r, linalg.py:1988)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,061 on stmt: sgn = const(int, 1)
DEBUG 2023-04-14 17:43:03,061 first assign: sgn
DEBUG 2023-04-14 17:43:03,061 replaced with: sgn = const(int, 1)
DEBUG 2023-04-14 17:43:03,061 on stmt: $142load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:03,061 on stmt: $146call_function.6 = call $142load_global.4(n, func=$142load_global.4, args=[Var(n, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,066 on stmt: $148get_iter.7 = getiter(value=$146call_function.6)
DEBUG 2023-04-14 17:43:03,066 on stmt: $phi150.0 = $148get_iter.7
DEBUG 2023-04-14 17:43:03,066 on stmt: jump 150
DEBUG 2023-04-14 17:43:03,066 ==== SSA block rewrite pass on 150
DEBUG 2023-04-14 17:43:03,066 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,066 on stmt: $150for_iter.1 = iternext(value=$phi150.0)
DEBUG 2023-04-14 17:43:03,066 on stmt: $150for_iter.2 = pair_first(value=$150for_iter.1)
DEBUG 2023-04-14 17:43:03,066 on stmt: $150for_iter.3 = pair_second(value=$150for_iter.1)
DEBUG 2023-04-14 17:43:03,066 on stmt: $phi152.1 = $150for_iter.2
DEBUG 2023-04-14 17:43:03,066 on stmt: branch $150for_iter.3, 152, 176
DEBUG 2023-04-14 17:43:03,066 ==== SSA block rewrite pass on 152
DEBUG 2023-04-14 17:43:03,066 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,066 on stmt: k = $phi152.1
DEBUG 2023-04-14 17:43:03,066 on stmt: $160binary_subscr.5 = getitem(value=ipiv, index=k, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,066 on stmt: $const164.7 = const(int, 1)
DEBUG 2023-04-14 17:43:03,066 on stmt: $166binary_add.8 = k + $const164.7
DEBUG 2023-04-14 17:43:03,066 on stmt: $168compare_op.9 = $160binary_subscr.5 != $166binary_add.8
DEBUG 2023-04-14 17:43:03,066 on stmt: $170binary_add.10 = sgn + $168compare_op.9
DEBUG 2023-04-14 17:43:03,066 on stmt: sgn = $170binary_add.10
DEBUG 2023-04-14 17:43:03,066 replaced with: sgn.1 = $170binary_add.10
DEBUG 2023-04-14 17:43:03,066 on stmt: jump 150
DEBUG 2023-04-14 17:43:03,066 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:03,066 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,066 on stmt: $const178.1 = const(int, 1)
DEBUG 2023-04-14 17:43:03,066 on stmt: $180binary_and.2 = sgn & $const178.1
DEBUG 2023-04-14 17:43:03,066 on stmt: sgn = $180binary_and.2
DEBUG 2023-04-14 17:43:03,066 replaced with: sgn.2 = $180binary_and.2
DEBUG 2023-04-14 17:43:03,066 on stmt: $const186.4 = const(int, 0)
DEBUG 2023-04-14 17:43:03,066 on stmt: $188compare_op.5 = sgn == $const186.4
DEBUG 2023-04-14 17:43:03,066 on stmt: bool190 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,066 on stmt: $190pred = call bool190($188compare_op.5, func=bool190, args=(Var($188compare_op.5, linalg.py:2007),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,066 on stmt: branch $190pred, 192, 196
DEBUG 2023-04-14 17:43:03,066 ==== SSA block rewrite pass on 192
DEBUG 2023-04-14 17:43:03,066 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,066 on stmt: sgn = const(int, -1)
DEBUG 2023-04-14 17:43:03,066 replaced with: sgn.3 = const(int, -1)
DEBUG 2023-04-14 17:43:03,066 on stmt: jump 196
DEBUG 2023-04-14 17:43:03,066 ==== SSA block rewrite pass on 196
DEBUG 2023-04-14 17:43:03,066 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,066 on stmt: $196load_global.0 = global(_dummy_liveness_func: <function _dummy_liveness_func at 0x000002661771F700>)
DEBUG 2023-04-14 17:43:03,069 on stmt: $200load_attr.2 = getattr(value=ipiv, attr=size)
DEBUG 2023-04-14 17:43:03,069 on stmt: $202build_list.3 = build_list(items=[Var($200load_attr.2, linalg.py:2011)])
DEBUG 2023-04-14 17:43:03,069 on stmt: $204call_function.4 = call $196load_global.0($202build_list.3, func=$196load_global.0, args=[Var($202build_list.3, linalg.py:2011)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,069 on stmt: $208load_deref.5 = freevar(diag_walker: <function _get_slogdet_diag_walker.<locals>.cmplx_diag_walker at 0x000002661995F1F0>)
DEBUG 2023-04-14 17:43:03,069 on stmt: $216call_function.9 = call $208load_deref.5(n, acpy, sgn, func=$208load_deref.5, args=[Var(n, linalg.py:1974), Var(acpy, linalg.py:1984), Var(sgn, linalg.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,069 on stmt: $218return_value.10 = cast(value=$216call_function.9)
DEBUG 2023-04-14 17:43:03,069 on stmt: return $218return_value.10
DEBUG 2023-04-14 17:43:03,069 Replaced assignments: defaultdict(<class 'list'>,
            {130: [<numba.core.ir.Assign object at 0x0000026619A154F0>],
             152: [<numba.core.ir.Assign object at 0x0000026619A15A60>],
             176: [<numba.core.ir.Assign object at 0x0000026619A155E0>],
             192: [<numba.core.ir.Assign object at 0x0000026619A15700>]})
DEBUG 2023-04-14 17:43:03,069 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:03,069 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,069 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,069 on stmt: $4load_attr.1 = getattr(value=a, attr=shape)
DEBUG 2023-04-14 17:43:03,069 on stmt: $const6.2 = const(int, -1)
DEBUG 2023-04-14 17:43:03,069 on stmt: n = static_getitem(value=$4load_attr.1, index=-1, index_var=$const6.2, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,069 on stmt: $14load_attr.5 = getattr(value=a, attr=shape)
DEBUG 2023-04-14 17:43:03,069 on stmt: $const16.6 = const(int, -2)
DEBUG 2023-04-14 17:43:03,069 on stmt: $18binary_subscr.7 = static_getitem(value=$14load_attr.5, index=-2, index_var=$const16.6, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,069 on stmt: $22compare_op.9 = $18binary_subscr.7 != n
DEBUG 2023-04-14 17:43:03,069 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,069 on stmt: $24pred = call bool24($22compare_op.9, func=bool24, args=(Var($22compare_op.9, linalg.py:1975),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,069 on stmt: branch $24pred, 26, 42
DEBUG 2023-04-14 17:43:03,071 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:03,071 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,071 on stmt: msg = const(str, Last 2 dimensions of the array must be square.)
DEBUG 2023-04-14 17:43:03,071 on stmt: $30load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,071 on stmt: $32load_attr.2 = getattr(value=$30load_global.1, attr=linalg)
DEBUG 2023-04-14 17:43:03,071 on stmt: $34load_method.3 = getattr(value=$32load_attr.2, attr=LinAlgError)
DEBUG 2023-04-14 17:43:03,071 on stmt: $38call_method.5 = call $34load_method.3(msg, func=$34load_method.3, args=[Var(msg, linalg.py:1976)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,071 on stmt: <static> raise <class 'numpy.linalg.LinAlgError'>('Last 2 dimensions of the array must be square.')
DEBUG 2023-04-14 17:43:03,071 ==== SSA block rewrite pass on 42
DEBUG 2023-04-14 17:43:03,071 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,071 on stmt: $const44.1 = const(int, 0)
DEBUG 2023-04-14 17:43:03,071 on stmt: $46compare_op.2 = n == $const44.1
DEBUG 2023-04-14 17:43:03,071 on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,071 on stmt: $48pred = call bool48($46compare_op.2, func=bool48, args=(Var($46compare_op.2, linalg.py:1979),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,071 on stmt: branch $48pred, 50, 58
DEBUG 2023-04-14 17:43:03,071 ==== SSA block rewrite pass on 50
DEBUG 2023-04-14 17:43:03,071 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,071 on stmt: $50load_deref.0 = freevar(ONE: (1+0j))
DEBUG 2023-04-14 17:43:03,071 on stmt: $52load_deref.1 = freevar(ZERO: 0.0)
DEBUG 2023-04-14 17:43:03,071 on stmt: $54build_tuple.2 = build_tuple(items=[Var($50load_deref.0, linalg.py:1980), Var($52load_deref.1, linalg.py:1980)])
DEBUG 2023-04-14 17:43:03,071 on stmt: $56return_value.3 = cast(value=$54build_tuple.2)
DEBUG 2023-04-14 17:43:03,071 on stmt: return $56return_value.3
DEBUG 2023-04-14 17:43:03,071 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:03,071 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,071 on stmt: $58load_global.0 = global(_check_finite_matrix: <function _check_finite_matrix at 0x000002661771F280>)
DEBUG 2023-04-14 17:43:03,071 on stmt: $62call_function.2 = call $58load_global.0(a, func=$58load_global.0, args=[Var(a, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,071 on stmt: $66load_global.3 = global(_copy_to_fortran_order: <function _copy_to_fortran_order at 0x000002661771F550>)
DEBUG 2023-04-14 17:43:03,071 on stmt: acpy = call $66load_global.3(a, func=$66load_global.3, args=[Var(a, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,071 on stmt: $74load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,071 on stmt: $76load_attr.7 = getattr(value=$74load_global.6, attr=empty)
DEBUG 2023-04-14 17:43:03,071 on stmt: $80load_global.9 = global(F_INT_nptype: <class 'numpy.int32'>)
DEBUG 2023-04-14 17:43:03,071 on stmt: ipiv = call $76load_attr.7(n, func=$76load_attr.7, args=[Var(n, linalg.py:1974)], kws=[('dtype', Var($80load_global.9, linalg.py:1986))], vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,071 on stmt: $88load_deref.12 = freevar(numba_xxgetrf: ExternalFunction(numba_xxgetrf))
DEBUG 2023-04-14 17:43:03,071 on stmt: $90load_deref.13 = freevar(kind: 122)
DEBUG 2023-04-14 17:43:03,071 on stmt: $98load_attr.17 = getattr(value=acpy, attr=ctypes)
DEBUG 2023-04-14 17:43:03,071 on stmt: $104load_attr.20 = getattr(value=ipiv, attr=ctypes)
DEBUG 2023-04-14 17:43:03,071 on stmt: r = call $88load_deref.12($90load_deref.13, n, n, $98load_attr.17, n, $104load_attr.20, func=$88load_deref.12, args=[Var($90load_deref.13, linalg.py:1988), Var(n, linalg.py:1974), Var(n, linalg.py:1974), Var($98load_attr.17, linalg.py:1988), Var(n, linalg.py:1974), Var($104load_attr.20, linalg.py:1988)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,071 on stmt: $const112.23 = const(int, 0)
DEBUG 2023-04-14 17:43:03,071 on stmt: $114compare_op.24 = r > $const112.23
DEBUG 2023-04-14 17:43:03,071 on stmt: bool116 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,071 on stmt: $116pred = call bool116($114compare_op.24, func=bool116, args=(Var($114compare_op.24, linalg.py:1990),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,071 on stmt: branch $116pred, 118, 130
DEBUG 2023-04-14 17:43:03,071 ==== SSA block rewrite pass on 118
DEBUG 2023-04-14 17:43:03,075 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,075 on stmt: $const118.0 = const(float, 0.0)
DEBUG 2023-04-14 17:43:03,075 on stmt: $120load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,075 on stmt: $122load_attr.2 = getattr(value=$120load_global.1, attr=inf)
DEBUG 2023-04-14 17:43:03,075 on stmt: $124unary_negative.3 = unary(fn=<built-in function neg>, value=$122load_attr.2)
DEBUG 2023-04-14 17:43:03,075 on stmt: $126build_tuple.4 = build_tuple(items=[Var($const118.0, linalg.py:1992), Var($124unary_negative.3, linalg.py:1992)])
DEBUG 2023-04-14 17:43:03,075 on stmt: $128return_value.5 = cast(value=$126build_tuple.4)
DEBUG 2023-04-14 17:43:03,075 on stmt: return $128return_value.5
DEBUG 2023-04-14 17:43:03,075 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:03,075 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,075 on stmt: $130load_global.0 = global(_inv_err_handler: <function _inv_err_handler at 0x000002661771F5E0>)
DEBUG 2023-04-14 17:43:03,075 on stmt: $134call_function.2 = call $130load_global.0(r, func=$130load_global.0, args=[Var(r, linalg.py:1988)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,075 on stmt: sgn = const(int, 1)
DEBUG 2023-04-14 17:43:03,075 on stmt: $142load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:03,075 on stmt: $146call_function.6 = call $142load_global.4(n, func=$142load_global.4, args=[Var(n, linalg.py:1974)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,075 on stmt: $148get_iter.7 = getiter(value=$146call_function.6)
DEBUG 2023-04-14 17:43:03,075 on stmt: $phi150.0 = $148get_iter.7
DEBUG 2023-04-14 17:43:03,075 on stmt: jump 150
DEBUG 2023-04-14 17:43:03,075 ==== SSA block rewrite pass on 150
DEBUG 2023-04-14 17:43:03,075 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,075 on stmt: $150for_iter.1 = iternext(value=$phi150.0)
DEBUG 2023-04-14 17:43:03,075 on stmt: $150for_iter.2 = pair_first(value=$150for_iter.1)
DEBUG 2023-04-14 17:43:03,075 on stmt: $150for_iter.3 = pair_second(value=$150for_iter.1)
DEBUG 2023-04-14 17:43:03,075 on stmt: $phi152.1 = $150for_iter.2
DEBUG 2023-04-14 17:43:03,075 on stmt: branch $150for_iter.3, 152, 176
DEBUG 2023-04-14 17:43:03,075 ==== SSA block rewrite pass on 152
DEBUG 2023-04-14 17:43:03,075 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,075 on stmt: k = $phi152.1
DEBUG 2023-04-14 17:43:03,075 on stmt: $160binary_subscr.5 = getitem(value=ipiv, index=k, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,075 on stmt: $const164.7 = const(int, 1)
DEBUG 2023-04-14 17:43:03,075 on stmt: $166binary_add.8 = k + $const164.7
DEBUG 2023-04-14 17:43:03,075 on stmt: $168compare_op.9 = $160binary_subscr.5 != $166binary_add.8
DEBUG 2023-04-14 17:43:03,075 on stmt: $170binary_add.10 = sgn + $168compare_op.9
DEBUG 2023-04-14 17:43:03,075 find_def var='sgn' stmt=$170binary_add.10 = sgn + $168compare_op.9
DEBUG 2023-04-14 17:43:03,075 find_def_from_top label 152
DEBUG 2023-04-14 17:43:03,075 idom 150 from label 152
DEBUG 2023-04-14 17:43:03,075 find_def_from_bottom label 150
DEBUG 2023-04-14 17:43:03,075 find_def_from_top label 150
DEBUG 2023-04-14 17:43:03,075 insert phi node sgn.4 = phi(incoming_values=[], incoming_blocks=[]) at 150
DEBUG 2023-04-14 17:43:03,075 find_def_from_bottom label 152
DEBUG 2023-04-14 17:43:03,075 incoming_def sgn.1 = $170binary_add.10
DEBUG 2023-04-14 17:43:03,075 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:03,075 incoming_def sgn = const(int, 1)
DEBUG 2023-04-14 17:43:03,080 replaced with: $170binary_add.10 = sgn.4 + $168compare_op.9
DEBUG 2023-04-14 17:43:03,080 on stmt: sgn.1 = $170binary_add.10
DEBUG 2023-04-14 17:43:03,080 on stmt: jump 150
DEBUG 2023-04-14 17:43:03,080 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:03,080 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,080 on stmt: $const178.1 = const(int, 1)
DEBUG 2023-04-14 17:43:03,080 on stmt: $180binary_and.2 = sgn & $const178.1
DEBUG 2023-04-14 17:43:03,080 find_def var='sgn' stmt=$180binary_and.2 = sgn & $const178.1
DEBUG 2023-04-14 17:43:03,080 find_def_from_top label 176
DEBUG 2023-04-14 17:43:03,080 idom 150 from label 176
DEBUG 2023-04-14 17:43:03,080 find_def_from_bottom label 150
DEBUG 2023-04-14 17:43:03,080 replaced with: $180binary_and.2 = sgn.4 & $const178.1
DEBUG 2023-04-14 17:43:03,080 on stmt: sgn.2 = $180binary_and.2
DEBUG 2023-04-14 17:43:03,080 on stmt: $const186.4 = const(int, 0)
DEBUG 2023-04-14 17:43:03,080 on stmt: $188compare_op.5 = sgn == $const186.4
DEBUG 2023-04-14 17:43:03,080 find_def var='sgn' stmt=$188compare_op.5 = sgn == $const186.4
DEBUG 2023-04-14 17:43:03,080 replaced with: $188compare_op.5 = sgn.2 == $const186.4
DEBUG 2023-04-14 17:43:03,082 on stmt: bool190 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,082 on stmt: $190pred = call bool190($188compare_op.5, func=bool190, args=(Var($188compare_op.5, linalg.py:2007),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,082 on stmt: branch $190pred, 192, 196
DEBUG 2023-04-14 17:43:03,082 ==== SSA block rewrite pass on 192
DEBUG 2023-04-14 17:43:03,082 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,082 on stmt: sgn.3 = const(int, -1)
DEBUG 2023-04-14 17:43:03,082 on stmt: jump 196
DEBUG 2023-04-14 17:43:03,082 ==== SSA block rewrite pass on 196
DEBUG 2023-04-14 17:43:03,082 Running <numba.core.ssa._FixSSAVars object at 0x0000026619A12F10>
DEBUG 2023-04-14 17:43:03,082 on stmt: $196load_global.0 = global(_dummy_liveness_func: <function _dummy_liveness_func at 0x000002661771F700>)
DEBUG 2023-04-14 17:43:03,082 on stmt: $200load_attr.2 = getattr(value=ipiv, attr=size)
DEBUG 2023-04-14 17:43:03,082 on stmt: $202build_list.3 = build_list(items=[Var($200load_attr.2, linalg.py:2011)])
DEBUG 2023-04-14 17:43:03,082 on stmt: $204call_function.4 = call $196load_global.0($202build_list.3, func=$196load_global.0, args=[Var($202build_list.3, linalg.py:2011)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,082 on stmt: $208load_deref.5 = freevar(diag_walker: <function _get_slogdet_diag_walker.<locals>.cmplx_diag_walker at 0x000002661995F1F0>)
DEBUG 2023-04-14 17:43:03,082 on stmt: $216call_function.9 = call $208load_deref.5(n, acpy, sgn, func=$208load_deref.5, args=[Var(n, linalg.py:1974), Var(acpy, linalg.py:1984), Var(sgn, linalg.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,082 find_def var='sgn' stmt=$216call_function.9 = call $208load_deref.5(n, acpy, sgn, func=$208load_deref.5, args=[Var(n, linalg.py:1974), Var(acpy, linalg.py:1984), Var(sgn, linalg.py:2002)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,082 find_def_from_top label 196
DEBUG 2023-04-14 17:43:03,082 insert phi node sgn.5 = phi(incoming_values=[], incoming_blocks=[]) at 196
DEBUG 2023-04-14 17:43:03,082 find_def_from_bottom label 176
DEBUG 2023-04-14 17:43:03,082 incoming_def sgn.2 = $180binary_and.2
DEBUG 2023-04-14 17:43:03,082 find_def_from_bottom label 192
DEBUG 2023-04-14 17:43:03,082 incoming_def sgn.3 = const(int, -1)
DEBUG 2023-04-14 17:43:03,082 replaced with: $216call_function.9 = call $208load_deref.5(n, acpy, sgn.5, func=$208load_deref.5, args=[Var(n, linalg.py:1974), Var(acpy, linalg.py:1984), Var(sgn.5, linalg.py:2011)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,082 on stmt: $218return_value.10 = cast(value=$216call_function.9)
DEBUG 2023-04-14 17:43:03,082 on stmt: return $218return_value.10
DEBUG 2023-04-14 17:43:03,095 bytecode dump:
>          0	NOP(arg=None, lineno=749)
           2	LOAD_GLOBAL(arg=0, lineno=749)
           4	LOAD_METHOD(arg=1, lineno=749)
           6	LOAD_FAST(arg=0, lineno=749)
           8	CALL_METHOD(arg=1, lineno=749)
          10	GET_ITER(arg=None, lineno=749)
>         12	FOR_ITER(arg=30, lineno=749)
          14	STORE_FAST(arg=1, lineno=749)
          16	LOAD_GLOBAL(arg=0, lineno=750)
          18	LOAD_METHOD(arg=2, lineno=750)
          20	LOAD_FAST(arg=1, lineno=750)
          22	LOAD_METHOD(arg=3, lineno=750)
          24	CALL_METHOD(arg=0, lineno=750)
          26	CALL_METHOD(arg=1, lineno=750)
          28	POP_JUMP_IF_TRUE(arg=12, lineno=750)
          30	LOAD_GLOBAL(arg=0, lineno=751)
          32	LOAD_ATTR(arg=4, lineno=751)
          34	LOAD_METHOD(arg=5, lineno=751)
          36	LOAD_CONST(arg=1, lineno=752)
          38	CALL_METHOD(arg=1, lineno=751)
          40	RAISE_VARARGS(arg=1, lineno=751)
          42	JUMP_ABSOLUTE(arg=12, lineno=751)
>         44	LOAD_CONST(arg=0, lineno=751)
          46	RETURN_VALUE(arg=None, lineno=751)
DEBUG 2023-04-14 17:43:03,095 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,095 stack: []
DEBUG 2023-04-14 17:43:03,095 dispatch pc=0, inst=NOP(arg=None, lineno=749)
DEBUG 2023-04-14 17:43:03,095 stack []
DEBUG 2023-04-14 17:43:03,095 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=749)
DEBUG 2023-04-14 17:43:03,095 stack []
DEBUG 2023-04-14 17:43:03,095 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=749)
DEBUG 2023-04-14 17:43:03,095 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=749)
DEBUG 2023-04-14 17:43:03,095 stack ['$4load_method.1']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=749)
DEBUG 2023-04-14 17:43:03,095 stack ['$4load_method.1', '$a6.2']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=10, inst=GET_ITER(arg=None, lineno=749)
DEBUG 2023-04-14 17:43:03,095 stack ['$8call_method.3']
DEBUG 2023-04-14 17:43:03,095 end state. edges=[Edge(pc=12, stack=('$10get_iter.4',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,095 pending: deque([State(pc_initial=12 nstack_initial=1)])
DEBUG 2023-04-14 17:43:03,095 stack: ['$phi12.0']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=12, inst=FOR_ITER(arg=30, lineno=749)
DEBUG 2023-04-14 17:43:03,095 stack ['$phi12.0']
DEBUG 2023-04-14 17:43:03,095 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=('$phi12.0', '$12for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,095 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=14 nstack_initial=2)])
DEBUG 2023-04-14 17:43:03,095 stack: []
DEBUG 2023-04-14 17:43:03,095 dispatch pc=44, inst=LOAD_CONST(arg=0, lineno=751)
DEBUG 2023-04-14 17:43:03,095 stack []
DEBUG 2023-04-14 17:43:03,095 dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=751)
DEBUG 2023-04-14 17:43:03,095 stack ['$const44.0']
DEBUG 2023-04-14 17:43:03,095 end state. edges=[]
DEBUG 2023-04-14 17:43:03,095 pending: deque([State(pc_initial=14 nstack_initial=2)])
DEBUG 2023-04-14 17:43:03,095 stack: ['$phi14.0', '$phi14.1']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=14, inst=STORE_FAST(arg=1, lineno=749)
DEBUG 2023-04-14 17:43:03,095 stack ['$phi14.0', '$phi14.1']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=16, inst=LOAD_GLOBAL(arg=0, lineno=750)
DEBUG 2023-04-14 17:43:03,095 stack ['$phi14.0']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=750)
DEBUG 2023-04-14 17:43:03,095 stack ['$phi14.0', '$16load_global.2']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=750)
DEBUG 2023-04-14 17:43:03,095 stack ['$phi14.0', '$18load_method.3']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=750)
DEBUG 2023-04-14 17:43:03,095 stack ['$phi14.0', '$18load_method.3', '$v20.4']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=24, inst=CALL_METHOD(arg=0, lineno=750)
DEBUG 2023-04-14 17:43:03,095 stack ['$phi14.0', '$18load_method.3', '$22load_method.5']
DEBUG 2023-04-14 17:43:03,095 dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=750)
DEBUG 2023-04-14 17:43:03,095 stack ['$phi14.0', '$18load_method.3', '$24call_method.6']
DEBUG 2023-04-14 17:43:03,100 dispatch pc=28, inst=POP_JUMP_IF_TRUE(arg=12, lineno=750)
DEBUG 2023-04-14 17:43:03,100 stack ['$phi14.0', '$26call_method.7']
DEBUG 2023-04-14 17:43:03,100 end state. edges=[Edge(pc=30, stack=('$phi14.0',), blockstack=(), npush=0), Edge(pc=12, stack=('$phi14.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,100 pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=12 nstack_initial=1)])
DEBUG 2023-04-14 17:43:03,100 stack: ['$phi30.0']
DEBUG 2023-04-14 17:43:03,100 dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=751)
DEBUG 2023-04-14 17:43:03,100 stack ['$phi30.0']
DEBUG 2023-04-14 17:43:03,100 dispatch pc=32, inst=LOAD_ATTR(arg=4, lineno=751)
DEBUG 2023-04-14 17:43:03,100 stack ['$phi30.0', '$30load_global.1']
DEBUG 2023-04-14 17:43:03,100 dispatch pc=34, inst=LOAD_METHOD(arg=5, lineno=751)
DEBUG 2023-04-14 17:43:03,100 stack ['$phi30.0', '$32load_attr.2']
DEBUG 2023-04-14 17:43:03,100 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=752)
DEBUG 2023-04-14 17:43:03,100 stack ['$phi30.0', '$34load_method.3']
DEBUG 2023-04-14 17:43:03,100 dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=751)
DEBUG 2023-04-14 17:43:03,100 stack ['$phi30.0', '$34load_method.3', '$const36.4']
DEBUG 2023-04-14 17:43:03,100 dispatch pc=40, inst=RAISE_VARARGS(arg=1, lineno=751)
DEBUG 2023-04-14 17:43:03,100 stack ['$phi30.0', '$38call_method.5']
DEBUG 2023-04-14 17:43:03,100 end state. edges=[]
DEBUG 2023-04-14 17:43:03,100 pending: deque([State(pc_initial=12 nstack_initial=1)])
DEBUG 2023-04-14 17:43:03,100 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,100 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=1): {'$phi12.0'},
             State(pc_initial=14 nstack_initial=2): {'$phi14.1'},
             State(pc_initial=30 nstack_initial=1): set(),
             State(pc_initial=44 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,100 defmap: {'$phi12.0': State(pc_initial=0 nstack_initial=0),
 '$phi14.1': State(pc_initial=12 nstack_initial=1)}
DEBUG 2023-04-14 17:43:03,100 phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi14.0', State(pc_initial=14 nstack_initial=2))},
             '$phi14.0': {('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi30.0': {('$phi14.0', State(pc_initial=14 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:03,100 changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi12.0', State(pc_initial=12 nstack_initial=1))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:03,100 changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:03,100 changing phismap: defaultdict(<class 'set'>,
            {'$phi12.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi14.1': {('$12for_iter.2',
                           State(pc_initial=12 nstack_initial=1))},
             '$phi30.0': {('$10get_iter.4',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:03,100 keep phismap: {'$phi12.0': {('$10get_iter.4', State(pc_initial=0 nstack_initial=0))},
 '$phi14.1': {('$12for_iter.2', State(pc_initial=12 nstack_initial=1))}}
DEBUG 2023-04-14 17:43:03,102 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi12.0': '$10get_iter.4'},
             State(pc_initial=12 nstack_initial=1): {'$phi14.1': '$12for_iter.2'}})
DEBUG 2023-04-14 17:43:03,102 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,102 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3', 'res': '$10get_iter.4'})), outgoing_phis={'$phi12.0': '$10get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: ('$10get_iter.4',)})
DEBUG 2023-04-14 17:43:03,102 block_infos State(pc_initial=12 nstack_initial=1):
AdaptBlockInfo(insts=((12, {'iterator': '$phi12.0', 'pair': '$12for_iter.1', 'indval': '$12for_iter.2', 'pred': '$12for_iter.3'}),), outgoing_phis={'$phi14.1': '$12for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 14: ('$phi12.0', '$12for_iter.2')})
DEBUG 2023-04-14 17:43:03,102 block_infos State(pc_initial=14 nstack_initial=2):
AdaptBlockInfo(insts=((14, {'value': '$phi14.1'}), (16, {'res': '$16load_global.2'}), (18, {'item': '$16load_global.2', 'res': '$18load_method.3'}), (20, {'res': '$v20.4'}), (22, {'item': '$v20.4', 'res': '$22load_method.5'}), (24, {'func': '$22load_method.5', 'args': [], 'res': '$24call_method.6'}), (26, {'func': '$18load_method.3', 'args': ['$24call_method.6'], 'res': '$26call_method.7'}), (28, {'pred': '$26call_method.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi14.0',), 12: ('$phi14.0',)})
DEBUG 2023-04-14 17:43:03,102 block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.1'}), (32, {'item': '$30load_global.1', 'res': '$32load_attr.2'}), (34, {'item': '$32load_attr.2', 'res': '$34load_method.3'}), (36, {'res': '$const36.4'}), (38, {'func': '$34load_method.3', 'args': ['$const36.4'], 'res': '$38call_method.5'}), (40, {'exc': '$38call_method.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,102 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$const44.0'}), (46, {'retval': '$const44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,102 label 0:
    a = arg(0, name=a)                       ['a']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=nditer) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, linalg.py:749)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'a']
    $10get_iter.4 = getiter(value=$8call_method.3) ['$10get_iter.4', '$8call_method.3']
    $phi12.0 = $10get_iter.4                 ['$10get_iter.4', '$phi12.0']
    jump 12                                  []
label 12:
    $12for_iter.1 = iternext(value=$phi12.0) ['$12for_iter.1', '$phi12.0']
    $12for_iter.2 = pair_first(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.2']
    $12for_iter.3 = pair_second(value=$12for_iter.1) ['$12for_iter.1', '$12for_iter.3']
    $phi14.1 = $12for_iter.2                 ['$12for_iter.2', '$phi14.1']
    branch $12for_iter.3, 14, 44             ['$12for_iter.3']
label 14:
    v = $phi14.1                             ['$phi14.1', 'v']
    $16load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$16load_global.2']
    $18load_method.3 = getattr(value=$16load_global.2, attr=isfinite) ['$16load_global.2', '$18load_method.3']
    $22load_method.5 = getattr(value=v, attr=item) ['$22load_method.5', 'v']
    $24call_method.6 = call $22load_method.5(func=$22load_method.5, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.5', '$24call_method.6']
    $26call_method.7 = call $18load_method.3($24call_method.6, func=$18load_method.3, args=[Var($24call_method.6, linalg.py:750)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_method.3', '$24call_method.6', '$26call_method.7']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26call_method.7, func=bool28, args=(Var($26call_method.7, linalg.py:750),), kws=(), vararg=None, varkwarg=None, target=None) ['$26call_method.7', '$28pred', 'bool28']
    branch $28pred, 12, 30                   ['$28pred']
label 30:
    $30load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$30load_global.1']
    $32load_attr.2 = getattr(value=$30load_global.1, attr=linalg) ['$30load_global.1', '$32load_attr.2']
    $34load_method.3 = getattr(value=$32load_attr.2, attr=LinAlgError) ['$32load_attr.2', '$34load_method.3']
    $const36.4 = const(str, Array must not contain infs or NaNs.) ['$const36.4']
    $38call_method.5 = call $34load_method.3($const36.4, func=$34load_method.3, args=[Var($const36.4, linalg.py:752)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_method.3', '$38call_method.5', '$const36.4']
    raise $38call_method.5                   ['$38call_method.5']
label 44:
    $const44.0 = const(NoneType, None)       ['$const44.0']
    $46return_value.1 = cast(value=$const44.0) ['$46return_value.1', '$const44.0']
    return $46return_value.1                 ['$46return_value.1']

DEBUG 2023-04-14 17:43:03,112 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,112 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A539A0>
DEBUG 2023-04-14 17:43:03,112 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,112 on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,112 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=nditer)
DEBUG 2023-04-14 17:43:03,112 on stmt: $8call_method.3 = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, linalg.py:749)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,112 on stmt: $10get_iter.4 = getiter(value=$8call_method.3)
DEBUG 2023-04-14 17:43:03,112 on stmt: $phi12.0 = $10get_iter.4
DEBUG 2023-04-14 17:43:03,112 on stmt: jump 12
DEBUG 2023-04-14 17:43:03,112 ==== SSA block analysis pass on 12
DEBUG 2023-04-14 17:43:03,112 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A539A0>
DEBUG 2023-04-14 17:43:03,112 on stmt: $12for_iter.1 = iternext(value=$phi12.0)
DEBUG 2023-04-14 17:43:03,112 on stmt: $12for_iter.2 = pair_first(value=$12for_iter.1)
DEBUG 2023-04-14 17:43:03,112 on stmt: $12for_iter.3 = pair_second(value=$12for_iter.1)
DEBUG 2023-04-14 17:43:03,112 on stmt: $phi14.1 = $12for_iter.2
DEBUG 2023-04-14 17:43:03,112 on stmt: branch $12for_iter.3, 14, 44
DEBUG 2023-04-14 17:43:03,112 ==== SSA block analysis pass on 14
DEBUG 2023-04-14 17:43:03,112 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A539A0>
DEBUG 2023-04-14 17:43:03,112 on stmt: v = $phi14.1
DEBUG 2023-04-14 17:43:03,112 on stmt: $16load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,112 on stmt: $18load_method.3 = getattr(value=$16load_global.2, attr=isfinite)
DEBUG 2023-04-14 17:43:03,112 on stmt: $22load_method.5 = getattr(value=v, attr=item)
DEBUG 2023-04-14 17:43:03,112 on stmt: $24call_method.6 = call $22load_method.5(func=$22load_method.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,112 on stmt: $26call_method.7 = call $18load_method.3($24call_method.6, func=$18load_method.3, args=[Var($24call_method.6, linalg.py:750)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,112 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,112 on stmt: $28pred = call bool28($26call_method.7, func=bool28, args=(Var($26call_method.7, linalg.py:750),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,112 on stmt: branch $28pred, 12, 30
DEBUG 2023-04-14 17:43:03,112 ==== SSA block analysis pass on 30
DEBUG 2023-04-14 17:43:03,112 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A539A0>
DEBUG 2023-04-14 17:43:03,112 on stmt: $30load_global.1 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,112 on stmt: $32load_attr.2 = getattr(value=$30load_global.1, attr=linalg)
DEBUG 2023-04-14 17:43:03,112 on stmt: $34load_method.3 = getattr(value=$32load_attr.2, attr=LinAlgError)
DEBUG 2023-04-14 17:43:03,112 on stmt: $const36.4 = const(str, Array must not contain infs or NaNs.)
DEBUG 2023-04-14 17:43:03,112 on stmt: $38call_method.5 = call $34load_method.3($const36.4, func=$34load_method.3, args=[Var($const36.4, linalg.py:752)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,112 on stmt: <static> raise <class 'numpy.linalg.LinAlgError'>('Array must not contain infs or NaNs.')
DEBUG 2023-04-14 17:43:03,112 ==== SSA block analysis pass on 44
DEBUG 2023-04-14 17:43:03,112 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A539A0>
DEBUG 2023-04-14 17:43:03,112 on stmt: $const44.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:03,116 on stmt: $46return_value.1 = cast(value=$const44.0)
DEBUG 2023-04-14 17:43:03,116 on stmt: return $46return_value.1
DEBUG 2023-04-14 17:43:03,116 defs defaultdict(<class 'list'>,
            {'$10get_iter.4': [<numba.core.ir.Assign object at 0x0000026619A47130>],
             '$12for_iter.1': [<numba.core.ir.Assign object at 0x0000026619A47460>],
             '$12for_iter.2': [<numba.core.ir.Assign object at 0x0000026619A47580>],
             '$12for_iter.3': [<numba.core.ir.Assign object at 0x0000026619A476A0>],
             '$16load_global.2': [<numba.core.ir.Assign object at 0x0000026619A47AF0>],
             '$18load_method.3': [<numba.core.ir.Assign object at 0x0000026619A47C70>],
             '$22load_method.5': [<numba.core.ir.Assign object at 0x0000026619A47F10>],
             '$24call_method.6': [<numba.core.ir.Assign object at 0x0000026619A4A160>],
             '$26call_method.7': [<numba.core.ir.Assign object at 0x0000026619A4A2E0>],
             '$28pred': [<numba.core.ir.Assign object at 0x0000026619A4A4F0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619A40B50>],
             '$30load_global.1': [<numba.core.ir.Assign object at 0x0000026619A4A730>],
             '$32load_attr.2': [<numba.core.ir.Assign object at 0x0000026619A4A8B0>],
             '$34load_method.3': [<numba.core.ir.Assign object at 0x0000026619A408B0>],
             '$38call_method.5': [<numba.core.ir.Assign object at 0x0000026619A40520>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x0000026619A3C790>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000026619A40CD0>],
             '$8call_method.3': [<numba.core.ir.Assign object at 0x0000026619A47040>],
             '$const36.4': [<numba.core.ir.Assign object at 0x0000026619A40730>],
             '$const44.0': [<numba.core.ir.Assign object at 0x0000026619A3C610>],
             '$phi12.0': [<numba.core.ir.Assign object at 0x0000026619A40E80>],
             '$phi14.1': [<numba.core.ir.Assign object at 0x0000026619A473A0>],
             'a': [<numba.core.ir.Assign object at 0x0000026619A409D0>],
             'bool28': [<numba.core.ir.Assign object at 0x0000026619A4A3D0>],
             'v': [<numba.core.ir.Assign object at 0x0000026619A47970>]})
DEBUG 2023-04-14 17:43:03,116 SSA violators set()
DEBUG 2023-04-14 17:43:03,131 bytecode dump:
>          0	NOP(arg=None, lineno=3256)
           2	LOAD_GLOBAL(arg=0, lineno=3256)
           4	LOAD_FAST(arg=0, lineno=3256)
           6	CALL_FUNCTION(arg=1, lineno=3256)
           8	STORE_FAST(arg=2, lineno=3256)
          10	LOAD_GLOBAL(arg=1, lineno=3257)
          12	LOAD_FAST(arg=2, lineno=3257)
          14	CALL_FUNCTION(arg=1, lineno=3257)
          16	GET_ITER(arg=None, lineno=3257)
>         18	FOR_ITER(arg=40, lineno=3257)
          20	STORE_FAST(arg=3, lineno=3257)
          22	LOAD_FAST(arg=0, lineno=3258)
          24	LOAD_FAST(arg=3, lineno=3258)
          26	BINARY_SUBSCR(arg=None, lineno=3258)
          28	LOAD_FAST(arg=1, lineno=3258)
          30	LOAD_GLOBAL(arg=0, lineno=3258)
          32	LOAD_FAST(arg=1, lineno=3258)
          34	CALL_FUNCTION(arg=1, lineno=3258)
          36	LOAD_FAST(arg=2, lineno=3258)
          38	BINARY_SUBTRACT(arg=None, lineno=3258)
          40	LOAD_FAST(arg=3, lineno=3258)
          42	BINARY_ADD(arg=None, lineno=3258)
          44	BINARY_SUBSCR(arg=None, lineno=3258)
          46	COMPARE_OP(arg=3, lineno=3258)
          48	POP_JUMP_IF_FALSE(arg=18, lineno=3258)
          50	LOAD_GLOBAL(arg=2, lineno=3259)
          52	LOAD_CONST(arg=1, lineno=3259)
          54	CALL_FUNCTION(arg=1, lineno=3259)
          56	RAISE_VARARGS(arg=1, lineno=3259)
          58	JUMP_ABSOLUTE(arg=18, lineno=3259)
>         60	LOAD_CONST(arg=0, lineno=3259)
          62	RETURN_VALUE(arg=None, lineno=3259)
DEBUG 2023-04-14 17:43:03,131 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,131 stack: []
DEBUG 2023-04-14 17:43:03,131 dispatch pc=0, inst=NOP(arg=None, lineno=3256)
DEBUG 2023-04-14 17:43:03,131 stack []
DEBUG 2023-04-14 17:43:03,131 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3256)
DEBUG 2023-04-14 17:43:03,131 stack []
DEBUG 2023-04-14 17:43:03,131 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3256)
DEBUG 2023-04-14 17:43:03,131 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:03,131 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3256)
DEBUG 2023-04-14 17:43:03,131 stack ['$2load_global.0', '$shape4.1']
DEBUG 2023-04-14 17:43:03,131 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=3256)
DEBUG 2023-04-14 17:43:03,131 stack ['$6call_function.2']
DEBUG 2023-04-14 17:43:03,131 dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=3257)
DEBUG 2023-04-14 17:43:03,131 stack []
DEBUG 2023-04-14 17:43:03,131 dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=3257)
DEBUG 2023-04-14 17:43:03,131 stack ['$10load_global.3']
DEBUG 2023-04-14 17:43:03,131 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=3257)
DEBUG 2023-04-14 17:43:03,131 stack ['$10load_global.3', '$n12.4']
DEBUG 2023-04-14 17:43:03,131 dispatch pc=16, inst=GET_ITER(arg=None, lineno=3257)
DEBUG 2023-04-14 17:43:03,131 stack ['$14call_function.5']
DEBUG 2023-04-14 17:43:03,131 end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,131 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2023-04-14 17:43:03,131 stack: ['$phi18.0']
DEBUG 2023-04-14 17:43:03,131 dispatch pc=18, inst=FOR_ITER(arg=40, lineno=3257)
DEBUG 2023-04-14 17:43:03,131 stack ['$phi18.0']
DEBUG 2023-04-14 17:43:03,131 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,131 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
DEBUG 2023-04-14 17:43:03,131 stack: []
DEBUG 2023-04-14 17:43:03,131 dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=3259)
DEBUG 2023-04-14 17:43:03,131 stack []
DEBUG 2023-04-14 17:43:03,133 dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=3259)
DEBUG 2023-04-14 17:43:03,133 stack ['$const60.0']
DEBUG 2023-04-14 17:43:03,133 end state. edges=[]
DEBUG 2023-04-14 17:43:03,133 pending: deque([State(pc_initial=20 nstack_initial=2)])
DEBUG 2023-04-14 17:43:03,133 stack: ['$phi20.0', '$phi20.1']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=20, inst=STORE_FAST(arg=3, lineno=3257)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$phi20.1']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$shape22.2']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$shape22.2', '$i24.3']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$26binary_subscr.4']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=18, lineno=3258)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi20.0', '$46compare_op.14']
DEBUG 2023-04-14 17:43:03,133 end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=18, stack=('$phi20.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,133 pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
DEBUG 2023-04-14 17:43:03,133 stack: ['$phi50.0']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=3259)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi50.0']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=3259)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi50.0', '$50load_global.1']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=3259)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi50.0', '$50load_global.1', '$const52.2']
DEBUG 2023-04-14 17:43:03,133 dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=3259)
DEBUG 2023-04-14 17:43:03,133 stack ['$phi50.0', '$54call_function.3']
DEBUG 2023-04-14 17:43:03,133 end state. edges=[]
DEBUG 2023-04-14 17:43:03,133 pending: deque([State(pc_initial=18 nstack_initial=1)])
DEBUG 2023-04-14 17:43:03,135 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,135 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,135 defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
DEBUG 2023-04-14 17:43:03,135 phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
DEBUG 2023-04-14 17:43:03,135 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:03,135 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:03,135 changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
DEBUG 2023-04-14 17:43:03,135 keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
DEBUG 2023-04-14 17:43:03,135 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
DEBUG 2023-04-14 17:43:03,135 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,135 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
DEBUG 2023-04-14 17:43:03,135 block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
DEBUG 2023-04-14 17:43:03,135 block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 18: ('$phi20.0',)})
DEBUG 2023-04-14 17:43:03,135 block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,135 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,135 label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:3258),), kws=(), vararg=None, varkwarg=None, target=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 18                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:3259)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

DEBUG 2023-04-14 17:43:03,145 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,145 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A6B130>
DEBUG 2023-04-14 17:43:03,145 on stmt: shape = arg(0, name=shape)
DEBUG 2023-04-14 17:43:03,145 on stmt: main_shape = arg(1, name=main_shape)
DEBUG 2023-04-14 17:43:03,145 on stmt: $2load_global.0 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:03,145 on stmt: n = const(int, 2)
DEBUG 2023-04-14 17:43:03,145 on stmt: $10load_global.3 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:03,145 on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:3256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,145 on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
DEBUG 2023-04-14 17:43:03,145 on stmt: $phi18.0 = $16get_iter.6
DEBUG 2023-04-14 17:43:03,145 on stmt: jump 18
DEBUG 2023-04-14 17:43:03,145 ==== SSA block analysis pass on 18
DEBUG 2023-04-14 17:43:03,145 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A6B130>
DEBUG 2023-04-14 17:43:03,145 on stmt: $18for_iter.1 = iternext(value=$phi18.0)
DEBUG 2023-04-14 17:43:03,145 on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
DEBUG 2023-04-14 17:43:03,145 on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
DEBUG 2023-04-14 17:43:03,145 on stmt: $phi20.1 = $18for_iter.2
DEBUG 2023-04-14 17:43:03,145 on stmt: branch $18for_iter.3, 20, 60
DEBUG 2023-04-14 17:43:03,145 ==== SSA block analysis pass on 20
DEBUG 2023-04-14 17:43:03,145 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A6B130>
DEBUG 2023-04-14 17:43:03,145 on stmt: i = $phi20.1
DEBUG 2023-04-14 17:43:03,145 on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,145 on stmt: $30load_global.6 = global(len: <built-in function len>)
DEBUG 2023-04-14 17:43:03,145 on stmt: $34call_function.8 = const(int, 2)
DEBUG 2023-04-14 17:43:03,145 on stmt: $38binary_subtract.10 = $34call_function.8 - n
DEBUG 2023-04-14 17:43:03,145 on stmt: $42binary_add.12 = $38binary_subtract.10 + i
DEBUG 2023-04-14 17:43:03,145 on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,145 on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
DEBUG 2023-04-14 17:43:03,145 on stmt: bool48 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,145 on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:3258),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,145 on stmt: branch $48pred, 50, 18
DEBUG 2023-04-14 17:43:03,145 ==== SSA block analysis pass on 50
DEBUG 2023-04-14 17:43:03,145 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A6B130>
DEBUG 2023-04-14 17:43:03,145 on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
DEBUG 2023-04-14 17:43:03,145 on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
DEBUG 2023-04-14 17:43:03,145 on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:3259)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,145 on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
DEBUG 2023-04-14 17:43:03,145 ==== SSA block analysis pass on 60
DEBUG 2023-04-14 17:43:03,145 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A6B130>
DEBUG 2023-04-14 17:43:03,145 on stmt: $const60.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:03,145 on stmt: $62return_value.1 = cast(value=$const60.0)
DEBUG 2023-04-14 17:43:03,145 on stmt: return $62return_value.1
DEBUG 2023-04-14 17:43:03,145 defs defaultdict(<class 'list'>,
            {'$10load_global.3': [<numba.core.ir.Assign object at 0x0000026619A74190>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x0000026619A74490>],
             '$16get_iter.6': [<numba.core.ir.Assign object at 0x0000026619A745B0>],
             '$18for_iter.1': [<numba.core.ir.Assign object at 0x0000026619A74820>],
             '$18for_iter.2': [<numba.core.ir.Assign object at 0x0000026619A74940>],
             '$18for_iter.3': [<numba.core.ir.Assign object at 0x0000026619A74A60>],
             '$26binary_subscr.4': [<numba.core.ir.Assign object at 0x0000026619A65700>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619A6BC10>],
             '$30load_global.6': [<numba.core.ir.Assign object at 0x0000026619A65D00>],
             '$34call_function.8': [<numba.core.ir.Assign object at 0x0000026619A74D90>],
             '$38binary_subtract.10': [<numba.core.ir.Assign object at 0x0000026619A76040>],
             '$42binary_add.12': [<numba.core.ir.Assign object at 0x0000026619A762E0>],
             '$44binary_subscr.13': [<numba.core.ir.Assign object at 0x0000026619A76460>],
             '$46compare_op.14': [<numba.core.ir.Assign object at 0x0000026619A765E0>],
             '$48pred': [<numba.core.ir.Assign object at 0x0000026619A76850>],
             '$50load_global.1': [<numba.core.ir.Assign object at 0x0000026619A6B880>],
             '$54call_function.3': [<numba.core.ir.Assign object at 0x0000026619A76C10>],
             '$62return_value.1': [<numba.core.ir.Assign object at 0x0000026619A78070>],
             '$const52.2': [<numba.core.ir.Assign object at 0x0000026619A76A30>],
             '$const60.0': [<numba.core.ir.Assign object at 0x0000026619A76EB0>],
             '$phi18.0': [<numba.core.ir.Assign object at 0x0000026619A6BDC0>],
             '$phi20.1': [<numba.core.ir.Assign object at 0x0000026619A74760>],
             'bool48': [<numba.core.ir.Assign object at 0x0000026619A76730>],
             'i': [<numba.core.ir.Assign object at 0x0000026619A6B7C0>],
             'main_shape': [<numba.core.ir.Assign object at 0x0000026619A6BA90>],
             'n': [<numba.core.ir.Assign object at 0x0000026619A6BF10>],
             'shape': [<numba.core.ir.Assign object at 0x0000026619A6B970>]})
DEBUG 2023-04-14 17:43:03,145 SSA violators set()
DEBUG 2023-04-14 17:43:03,225 bytecode dump:
>          0	NOP(arg=None, lineno=795)
           2	LOAD_DEREF(arg=1, lineno=795)
           4	POP_JUMP_IF_FALSE(arg=18, lineno=795)
           6	LOAD_GLOBAL(arg=0, lineno=797)
           8	LOAD_METHOD(arg=1, lineno=797)
          10	LOAD_FAST(arg=0, lineno=797)
          12	CALL_METHOD(arg=1, lineno=797)
          14	STORE_FAST(arg=1, lineno=797)
          16	JUMP_FORWARD(arg=54, lineno=797)
>         18	LOAD_DEREF(arg=0, lineno=798)
          20	POP_JUMP_IF_FALSE(arg=62, lineno=798)
          22	LOAD_FAST(arg=0, lineno=800)
          24	LOAD_ATTR(arg=2, lineno=800)
          26	LOAD_ATTR(arg=3, lineno=800)
          28	STORE_FAST(arg=2, lineno=800)
          30	LOAD_FAST(arg=2, lineno=801)
          32	POP_JUMP_IF_FALSE(arg=50, lineno=801)
          34	LOAD_GLOBAL(arg=0, lineno=804)
          36	LOAD_METHOD(arg=1, lineno=804)
          38	LOAD_FAST(arg=0, lineno=804)
          40	LOAD_ATTR(arg=4, lineno=804)
          42	CALL_METHOD(arg=1, lineno=804)
          44	LOAD_ATTR(arg=4, lineno=804)
          46	STORE_FAST(arg=1, lineno=804)
          48	JUMP_ABSOLUTE(arg=72, lineno=804)
>         50	LOAD_GLOBAL(arg=0, lineno=808)
          52	LOAD_METHOD(arg=5, lineno=808)
          54	LOAD_FAST(arg=0, lineno=808)
          56	CALL_METHOD(arg=1, lineno=808)
          58	STORE_FAST(arg=1, lineno=808)
          60	JUMP_FORWARD(arg=10, lineno=808)
>         62	LOAD_GLOBAL(arg=0, lineno=811)
          64	LOAD_METHOD(arg=5, lineno=811)
          66	LOAD_FAST(arg=0, lineno=811)
          68	CALL_METHOD(arg=1, lineno=811)
          70	STORE_FAST(arg=1, lineno=811)
>         72	LOAD_FAST(arg=1, lineno=812)
          74	RETURN_VALUE(arg=None, lineno=812)
DEBUG 2023-04-14 17:43:03,225 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,225 stack: []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=0, inst=NOP(arg=None, lineno=795)
DEBUG 2023-04-14 17:43:03,225 stack []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=795)
DEBUG 2023-04-14 17:43:03,225 stack []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=4, inst=POP_JUMP_IF_FALSE(arg=18, lineno=795)
DEBUG 2023-04-14 17:43:03,225 stack ['$2load_deref.0']
DEBUG 2023-04-14 17:43:03,225 end state. edges=[Edge(pc=6, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,225 pending: deque([State(pc_initial=6 nstack_initial=0), State(pc_initial=18 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,225 stack: []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=797)
DEBUG 2023-04-14 17:43:03,225 stack []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=797)
DEBUG 2023-04-14 17:43:03,225 stack ['$6load_global.0']
DEBUG 2023-04-14 17:43:03,225 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=797)
DEBUG 2023-04-14 17:43:03,225 stack ['$8load_method.1']
DEBUG 2023-04-14 17:43:03,225 dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=797)
DEBUG 2023-04-14 17:43:03,225 stack ['$8load_method.1', '$a10.2']
DEBUG 2023-04-14 17:43:03,225 dispatch pc=14, inst=STORE_FAST(arg=1, lineno=797)
DEBUG 2023-04-14 17:43:03,225 stack ['$12call_method.3']
DEBUG 2023-04-14 17:43:03,225 dispatch pc=16, inst=JUMP_FORWARD(arg=54, lineno=797)
DEBUG 2023-04-14 17:43:03,225 stack []
DEBUG 2023-04-14 17:43:03,225 end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,225 pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,225 stack: []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=18, inst=LOAD_DEREF(arg=0, lineno=798)
DEBUG 2023-04-14 17:43:03,225 stack []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=62, lineno=798)
DEBUG 2023-04-14 17:43:03,225 stack ['$18load_deref.0']
DEBUG 2023-04-14 17:43:03,225 end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,225 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=22 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,225 stack: []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=72, inst=LOAD_FAST(arg=1, lineno=812)
DEBUG 2023-04-14 17:43:03,225 stack []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=74, inst=RETURN_VALUE(arg=None, lineno=812)
DEBUG 2023-04-14 17:43:03,225 stack ['$acpy72.0']
DEBUG 2023-04-14 17:43:03,225 end state. edges=[]
DEBUG 2023-04-14 17:43:03,225 pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,225 stack: []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=800)
DEBUG 2023-04-14 17:43:03,225 stack []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=24, inst=LOAD_ATTR(arg=2, lineno=800)
DEBUG 2023-04-14 17:43:03,225 stack ['$a22.0']
DEBUG 2023-04-14 17:43:03,225 dispatch pc=26, inst=LOAD_ATTR(arg=3, lineno=800)
DEBUG 2023-04-14 17:43:03,225 stack ['$24load_attr.1']
DEBUG 2023-04-14 17:43:03,225 dispatch pc=28, inst=STORE_FAST(arg=2, lineno=800)
DEBUG 2023-04-14 17:43:03,225 stack ['$26load_attr.2']
DEBUG 2023-04-14 17:43:03,225 dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=801)
DEBUG 2023-04-14 17:43:03,225 stack []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=50, lineno=801)
DEBUG 2023-04-14 17:43:03,225 stack ['$flag_f30.3']
DEBUG 2023-04-14 17:43:03,225 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,225 pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,225 stack: []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=62, inst=LOAD_GLOBAL(arg=0, lineno=811)
DEBUG 2023-04-14 17:43:03,225 stack []
DEBUG 2023-04-14 17:43:03,225 dispatch pc=64, inst=LOAD_METHOD(arg=5, lineno=811)
DEBUG 2023-04-14 17:43:03,225 stack ['$62load_global.0']
DEBUG 2023-04-14 17:43:03,225 dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=811)
DEBUG 2023-04-14 17:43:03,225 stack ['$64load_method.1']
DEBUG 2023-04-14 17:43:03,225 dispatch pc=68, inst=CALL_METHOD(arg=1, lineno=811)
DEBUG 2023-04-14 17:43:03,225 stack ['$64load_method.1', '$a66.2']
DEBUG 2023-04-14 17:43:03,225 dispatch pc=70, inst=STORE_FAST(arg=1, lineno=811)
DEBUG 2023-04-14 17:43:03,225 stack ['$68call_method.3']
DEBUG 2023-04-14 17:43:03,225 end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,225 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=50 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,233 stack: []
DEBUG 2023-04-14 17:43:03,233 dispatch pc=34, inst=LOAD_GLOBAL(arg=0, lineno=804)
DEBUG 2023-04-14 17:43:03,233 stack []
DEBUG 2023-04-14 17:43:03,233 dispatch pc=36, inst=LOAD_METHOD(arg=1, lineno=804)
DEBUG 2023-04-14 17:43:03,233 stack ['$34load_global.0']
DEBUG 2023-04-14 17:43:03,233 dispatch pc=38, inst=LOAD_FAST(arg=0, lineno=804)
DEBUG 2023-04-14 17:43:03,233 stack ['$36load_method.1']
DEBUG 2023-04-14 17:43:03,233 dispatch pc=40, inst=LOAD_ATTR(arg=4, lineno=804)
DEBUG 2023-04-14 17:43:03,233 stack ['$36load_method.1', '$a38.2']
DEBUG 2023-04-14 17:43:03,233 dispatch pc=42, inst=CALL_METHOD(arg=1, lineno=804)
DEBUG 2023-04-14 17:43:03,233 stack ['$36load_method.1', '$40load_attr.3']
DEBUG 2023-04-14 17:43:03,233 dispatch pc=44, inst=LOAD_ATTR(arg=4, lineno=804)
DEBUG 2023-04-14 17:43:03,233 stack ['$42call_method.4']
DEBUG 2023-04-14 17:43:03,233 dispatch pc=46, inst=STORE_FAST(arg=1, lineno=804)
DEBUG 2023-04-14 17:43:03,233 stack ['$44load_attr.5']
DEBUG 2023-04-14 17:43:03,233 dispatch pc=48, inst=JUMP_ABSOLUTE(arg=72, lineno=804)
DEBUG 2023-04-14 17:43:03,233 stack []
DEBUG 2023-04-14 17:43:03,233 end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,233 pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,233 stack: []
DEBUG 2023-04-14 17:43:03,233 dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=808)
DEBUG 2023-04-14 17:43:03,233 stack []
DEBUG 2023-04-14 17:43:03,233 dispatch pc=52, inst=LOAD_METHOD(arg=5, lineno=808)
DEBUG 2023-04-14 17:43:03,233 stack ['$50load_global.0']
DEBUG 2023-04-14 17:43:03,233 dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=808)
DEBUG 2023-04-14 17:43:03,233 stack ['$52load_method.1']
DEBUG 2023-04-14 17:43:03,233 dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=808)
DEBUG 2023-04-14 17:43:03,233 stack ['$52load_method.1', '$a54.2']
DEBUG 2023-04-14 17:43:03,233 dispatch pc=58, inst=STORE_FAST(arg=1, lineno=808)
DEBUG 2023-04-14 17:43:03,233 stack ['$56call_method.3']
DEBUG 2023-04-14 17:43:03,233 dispatch pc=60, inst=JUMP_FORWARD(arg=10, lineno=808)
DEBUG 2023-04-14 17:43:03,233 stack []
DEBUG 2023-04-14 17:43:03,233 end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,233 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,233 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,233 pending: deque([State(pc_initial=72 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,233 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,233 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,233 defmap: {}
DEBUG 2023-04-14 17:43:03,235 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,235 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,235 keep phismap: {}
DEBUG 2023-04-14 17:43:03,235 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:03,235 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,235 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'pred': '$2load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: (), 18: ()})
DEBUG 2023-04-14 17:43:03,235 block_infos State(pc_initial=6 nstack_initial=0):
AdaptBlockInfo(insts=((6, {'res': '$6load_global.0'}), (8, {'item': '$6load_global.0', 'res': '$8load_method.1'}), (10, {'res': '$a10.2'}), (12, {'func': '$8load_method.1', 'args': ['$a10.2'], 'res': '$12call_method.3'}), (14, {'value': '$12call_method.3'}), (16, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
DEBUG 2023-04-14 17:43:03,235 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$18load_deref.0'}), (20, {'pred': '$18load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 62: ()})
DEBUG 2023-04-14 17:43:03,235 block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$a22.0'}), (24, {'item': '$a22.0', 'res': '$24load_attr.1'}), (26, {'item': '$24load_attr.1', 'res': '$26load_attr.2'}), (28, {'value': '$26load_attr.2'}), (30, {'res': '$flag_f30.3'}), (32, {'pred': '$flag_f30.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 50: ()})
DEBUG 2023-04-14 17:43:03,236 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'item': '$34load_global.0', 'res': '$36load_method.1'}), (38, {'res': '$a38.2'}), (40, {'item': '$a38.2', 'res': '$40load_attr.3'}), (42, {'func': '$36load_method.1', 'args': ['$40load_attr.3'], 'res': '$42call_method.4'}), (44, {'item': '$42call_method.4', 'res': '$44load_attr.5'}), (46, {'value': '$44load_attr.5'}), (48, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
DEBUG 2023-04-14 17:43:03,236 block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.0'}), (52, {'item': '$50load_global.0', 'res': '$52load_method.1'}), (54, {'res': '$a54.2'}), (56, {'func': '$52load_method.1', 'args': ['$a54.2'], 'res': '$56call_method.3'}), (58, {'value': '$56call_method.3'}), (60, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
DEBUG 2023-04-14 17:43:03,236 block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$62load_global.0'}), (64, {'item': '$62load_global.0', 'res': '$64load_method.1'}), (66, {'res': '$a66.2'}), (68, {'func': '$64load_method.1', 'args': ['$a66.2'], 'res': '$68call_method.3'}), (70, {'value': '$68call_method.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: ()})
DEBUG 2023-04-14 17:43:03,236 block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$acpy72.0'}), (74, {'retval': '$acpy72.0', 'castval': '$74return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,236 label 0:
    a = arg(0, name=a)                       ['a']
    $2load_deref.0 = freevar(F_layout: False) ['$2load_deref.0']
    bool4 = global(bool: <class 'bool'>)     ['bool4']
    $4pred = call bool4($2load_deref.0, func=bool4, args=(Var($2load_deref.0, linalg.py:795),), kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$4pred', 'bool4']
    branch $4pred, 6, 18                     ['$4pred']
label 6:
    $6load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$6load_global.0']
    $8load_method.1 = getattr(value=$6load_global.0, attr=copy) ['$6load_global.0', '$8load_method.1']
    acpy = call $8load_method.1(a, func=$8load_method.1, args=[Var(a, linalg.py:795)], kws=(), vararg=None, varkwarg=None, target=None) ['$8load_method.1', 'a', 'acpy']
    jump 72                                  []
label 18:
    $18load_deref.0 = freevar(A_layout: False) ['$18load_deref.0']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18load_deref.0, func=bool20, args=(Var($18load_deref.0, linalg.py:798),), kws=(), vararg=None, varkwarg=None, target=None) ['$18load_deref.0', '$20pred', 'bool20']
    branch $20pred, 22, 62                   ['$20pred']
label 22:
    $24load_attr.1 = getattr(value=a, attr=flags) ['$24load_attr.1', 'a']
    flag_f = getattr(value=$24load_attr.1, attr=f_contiguous) ['$24load_attr.1', 'flag_f']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(flag_f, func=bool32, args=(Var(flag_f, linalg.py:800),), kws=(), vararg=None, varkwarg=None, target=None) ['$32pred', 'bool32', 'flag_f']
    branch $32pred, 34, 50                   ['$32pred']
label 34:
    $34load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$34load_global.0']
    $36load_method.1 = getattr(value=$34load_global.0, attr=copy) ['$34load_global.0', '$36load_method.1']
    $40load_attr.3 = getattr(value=a, attr=T) ['$40load_attr.3', 'a']
    $42call_method.4 = call $36load_method.1($40load_attr.3, func=$36load_method.1, args=[Var($40load_attr.3, linalg.py:804)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_method.1', '$40load_attr.3', '$42call_method.4']
    acpy = getattr(value=$42call_method.4, attr=T) ['$42call_method.4', 'acpy']
    jump 72                                  []
label 50:
    $50load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.0']
    $52load_method.1 = getattr(value=$50load_global.0, attr=asfortranarray) ['$50load_global.0', '$52load_method.1']
    acpy = call $52load_method.1(a, func=$52load_method.1, args=[Var(a, linalg.py:795)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.1', 'a', 'acpy']
    jump 72                                  []
label 62:
    $62load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$62load_global.0']
    $64load_method.1 = getattr(value=$62load_global.0, attr=asfortranarray) ['$62load_global.0', '$64load_method.1']
    acpy = call $64load_method.1(a, func=$64load_method.1, args=[Var(a, linalg.py:795)], kws=(), vararg=None, varkwarg=None, target=None) ['$64load_method.1', 'a', 'acpy']
    jump 72                                  []
label 72:
    $74return_value.1 = cast(value=acpy)     ['$74return_value.1', 'acpy']
    return $74return_value.1                 ['$74return_value.1']

DEBUG 2023-04-14 17:43:03,243 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,243 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B51580>
DEBUG 2023-04-14 17:43:03,243 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,243 on stmt: $2load_deref.0 = freevar(F_layout: False)
DEBUG 2023-04-14 17:43:03,243 on stmt: bool4 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,243 on stmt: $4pred = call bool4($2load_deref.0, func=bool4, args=(Var($2load_deref.0, linalg.py:795),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,243 on stmt: jump 18
DEBUG 2023-04-14 17:43:03,243 ==== SSA block analysis pass on 18
DEBUG 2023-04-14 17:43:03,243 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B51580>
DEBUG 2023-04-14 17:43:03,243 on stmt: $18load_deref.0 = freevar(A_layout: False)
DEBUG 2023-04-14 17:43:03,243 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,243 on stmt: $20pred = call bool20($18load_deref.0, func=bool20, args=(Var($18load_deref.0, linalg.py:798),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,243 on stmt: jump 62
DEBUG 2023-04-14 17:43:03,243 ==== SSA block analysis pass on 62
DEBUG 2023-04-14 17:43:03,243 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B51580>
DEBUG 2023-04-14 17:43:03,243 on stmt: $62load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,243 on stmt: $64load_method.1 = getattr(value=$62load_global.0, attr=asfortranarray)
DEBUG 2023-04-14 17:43:03,243 on stmt: acpy = call $64load_method.1(a, func=$64load_method.1, args=[Var(a, linalg.py:795)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,243 on stmt: jump 72
DEBUG 2023-04-14 17:43:03,243 ==== SSA block analysis pass on 72
DEBUG 2023-04-14 17:43:03,243 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B51580>
DEBUG 2023-04-14 17:43:03,243 on stmt: $74return_value.1 = cast(value=acpy)
DEBUG 2023-04-14 17:43:03,243 on stmt: return $74return_value.1
DEBUG 2023-04-14 17:43:03,243 defs defaultdict(<class 'list'>,
            {'$18load_deref.0': [<numba.core.ir.Assign object at 0x0000026619B47370>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000026619B470D0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000026619B476A0>],
             '$4pred': [<numba.core.ir.Assign object at 0x0000026619B47940>],
             '$62load_global.0': [<numba.core.ir.Assign object at 0x0000026619B4F9A0>],
             '$64load_method.1': [<numba.core.ir.Assign object at 0x0000026619B4FB20>],
             '$74return_value.1': [<numba.core.ir.Assign object at 0x0000026619B51160>],
             'a': [<numba.core.ir.Assign object at 0x0000026619B47520>],
             'acpy': [<numba.core.ir.Assign object at 0x0000026619B4FE50>],
             'bool20': [<numba.core.ir.Assign object at 0x0000026619B471F0>],
             'bool4': [<numba.core.ir.Assign object at 0x0000026619B47820>]})
DEBUG 2023-04-14 17:43:03,245 SSA violators set()
DEBUG 2023-04-14 17:43:03,246 bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
DEBUG 2023-04-14 17:43:03,246 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,246 stack: []
DEBUG 2023-04-14 17:43:03,246 dispatch pc=0, inst=NOP(arg=None, lineno=3)
DEBUG 2023-04-14 17:43:03,246 stack []
DEBUG 2023-04-14 17:43:03,246 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
DEBUG 2023-04-14 17:43:03,246 stack []
DEBUG 2023-04-14 17:43:03,246 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
DEBUG 2023-04-14 17:43:03,246 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:03,246 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
DEBUG 2023-04-14 17:43:03,246 stack ['$2load_global.0', '$a4.1']
DEBUG 2023-04-14 17:43:03,246 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
DEBUG 2023-04-14 17:43:03,246 stack ['$6call_function.2']
DEBUG 2023-04-14 17:43:03,246 end state. edges=[]
DEBUG 2023-04-14 17:43:03,246 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,246 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,246 defmap: {}
DEBUG 2023-04-14 17:43:03,246 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,246 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,246 keep phismap: {}
DEBUG 2023-04-14 17:43:03,246 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:03,246 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,246 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$a4.1'}), (6, {'func': '$2load_global.0', 'args': ['$a4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,246 label 0:
    a = arg(0, name=a)                       ['a']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(a, func=$2load_global.0, args=[Var(a, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'a']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:43:03,253 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,253 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B516D0>
DEBUG 2023-04-14 17:43:03,253 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,253 on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
DEBUG 2023-04-14 17:43:03,253 on stmt: $6call_function.2 = call $2load_global.0(a, func=$2load_global.0, args=[Var(a, <string>:3)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,253 on stmt: $8return_value.3 = cast(value=$6call_function.2)
DEBUG 2023-04-14 17:43:03,253 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:43:03,253 defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619B594C0>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x0000026619B59970>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000026619B59A90>],
             'a': [<numba.core.ir.Assign object at 0x0000026619B51AF0>]})
DEBUG 2023-04-14 17:43:03,253 SSA violators set()
DEBUG 2023-04-14 17:43:03,377 bytecode dump:
>          0	NOP(arg=None, lineno=4101)
           2	LOAD_GLOBAL(arg=0, lineno=4101)
           4	LOAD_FAST(arg=0, lineno=4101)
           6	LOAD_FAST(arg=1, lineno=4101)
           8	LOAD_DEREF(arg=0, lineno=4101)
          10	CALL_FUNCTION(arg=3, lineno=4101)
          12	RETURN_VALUE(arg=None, lineno=4101)
DEBUG 2023-04-14 17:43:03,377 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,377 stack: []
DEBUG 2023-04-14 17:43:03,377 dispatch pc=0, inst=NOP(arg=None, lineno=4101)
DEBUG 2023-04-14 17:43:03,377 stack []
DEBUG 2023-04-14 17:43:03,377 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
DEBUG 2023-04-14 17:43:03,377 stack []
DEBUG 2023-04-14 17:43:03,377 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
DEBUG 2023-04-14 17:43:03,377 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:03,377 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
DEBUG 2023-04-14 17:43:03,377 stack ['$2load_global.0', '$shape4.1']
DEBUG 2023-04-14 17:43:03,377 dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
DEBUG 2023-04-14 17:43:03,377 stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
DEBUG 2023-04-14 17:43:03,377 dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
DEBUG 2023-04-14 17:43:03,377 stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
DEBUG 2023-04-14 17:43:03,377 dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
DEBUG 2023-04-14 17:43:03,377 stack ['$10call_function.4']
DEBUG 2023-04-14 17:43:03,377 end state. edges=[]
DEBUG 2023-04-14 17:43:03,377 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,377 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,377 defmap: {}
DEBUG 2023-04-14 17:43:03,377 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,377 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,377 keep phismap: {}
DEBUG 2023-04-14 17:43:03,377 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:03,377 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,379 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,379 label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(int32, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

DEBUG 2023-04-14 17:43:03,379 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,379 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B316D0>
DEBUG 2023-04-14 17:43:03,379 on stmt: shape = arg(0, name=shape)
DEBUG 2023-04-14 17:43:03,379 on stmt: dtype = arg(1, name=dtype)
DEBUG 2023-04-14 17:43:03,379 on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
DEBUG 2023-04-14 17:43:03,379 on stmt: $8load_deref.3 = freevar(retty: array(int32, 1d, C))
DEBUG 2023-04-14 17:43:03,379 on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,379 on stmt: $12return_value.5 = cast(value=$10call_function.4)
DEBUG 2023-04-14 17:43:03,379 on stmt: return $12return_value.5
DEBUG 2023-04-14 17:43:03,379 defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000026619B95F10>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x0000026619BA1070>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619B3A670>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x0000026619B95D30>],
             'dtype': [<numba.core.ir.Assign object at 0x0000026619B87850>],
             'shape': [<numba.core.ir.Assign object at 0x0000026619B47A30>]})
DEBUG 2023-04-14 17:43:03,379 SSA violators set()
DEBUG 2023-04-14 17:43:03,420 bytecode dump:
>          0	NOP(arg=None, lineno=818)
           2	LOAD_FAST(arg=0, lineno=818)
           4	LOAD_CONST(arg=1, lineno=818)
           6	COMPARE_OP(arg=3, lineno=818)
           8	POP_JUMP_IF_FALSE(arg=52, lineno=818)
          10	LOAD_FAST(arg=0, lineno=819)
          12	LOAD_CONST(arg=1, lineno=819)
          14	COMPARE_OP(arg=0, lineno=819)
          16	POP_JUMP_IF_FALSE(arg=32, lineno=819)
          18	LOAD_GLOBAL(arg=0, lineno=820)
          20	CALL_FUNCTION(arg=0, lineno=820)
          22	POP_TOP(arg=None, lineno=820)
          24	LOAD_CONST(arg=1, lineno=821)
          26	POP_JUMP_IF_TRUE(arg=32, lineno=821)
          28	LOAD_ASSERTION_ERROR(arg=None, lineno=821)
          30	RAISE_VARARGS(arg=1, lineno=821)
>         32	LOAD_FAST(arg=0, lineno=822)
          34	LOAD_CONST(arg=1, lineno=822)
          36	COMPARE_OP(arg=4, lineno=822)
          38	POP_JUMP_IF_FALSE(arg=52, lineno=822)
          40	LOAD_GLOBAL(arg=1, lineno=823)
          42	LOAD_ATTR(arg=2, lineno=823)
          44	LOAD_METHOD(arg=3, lineno=823)
          46	LOAD_CONST(arg=2, lineno=824)
          48	CALL_METHOD(arg=1, lineno=823)
          50	RAISE_VARARGS(arg=1, lineno=823)
>         52	LOAD_CONST(arg=0, lineno=823)
          54	RETURN_VALUE(arg=None, lineno=823)
DEBUG 2023-04-14 17:43:03,420 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,420 stack: []
DEBUG 2023-04-14 17:43:03,420 dispatch pc=0, inst=NOP(arg=None, lineno=818)
DEBUG 2023-04-14 17:43:03,420 stack []
DEBUG 2023-04-14 17:43:03,420 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=818)
DEBUG 2023-04-14 17:43:03,420 stack []
DEBUG 2023-04-14 17:43:03,420 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=818)
DEBUG 2023-04-14 17:43:03,420 stack ['$r2.0']
DEBUG 2023-04-14 17:43:03,420 dispatch pc=6, inst=COMPARE_OP(arg=3, lineno=818)
DEBUG 2023-04-14 17:43:03,425 stack ['$r2.0', '$const4.1']
DEBUG 2023-04-14 17:43:03,425 dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=52, lineno=818)
DEBUG 2023-04-14 17:43:03,425 stack ['$6compare_op.2']
DEBUG 2023-04-14 17:43:03,425 end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,425 pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,425 stack: []
DEBUG 2023-04-14 17:43:03,425 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=819)
DEBUG 2023-04-14 17:43:03,425 stack []
DEBUG 2023-04-14 17:43:03,425 dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=819)
DEBUG 2023-04-14 17:43:03,425 stack ['$r10.0']
DEBUG 2023-04-14 17:43:03,425 dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=819)
DEBUG 2023-04-14 17:43:03,425 stack ['$r10.0', '$const12.1']
DEBUG 2023-04-14 17:43:03,425 dispatch pc=16, inst=POP_JUMP_IF_FALSE(arg=32, lineno=819)
DEBUG 2023-04-14 17:43:03,425 stack ['$14compare_op.2']
DEBUG 2023-04-14 17:43:03,425 end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,425 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,425 stack: []
DEBUG 2023-04-14 17:43:03,425 dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=823)
DEBUG 2023-04-14 17:43:03,425 stack []
DEBUG 2023-04-14 17:43:03,425 dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=823)
DEBUG 2023-04-14 17:43:03,425 stack ['$const52.0']
DEBUG 2023-04-14 17:43:03,425 end state. edges=[]
DEBUG 2023-04-14 17:43:03,425 pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,425 stack: []
DEBUG 2023-04-14 17:43:03,425 dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=820)
DEBUG 2023-04-14 17:43:03,425 stack []
DEBUG 2023-04-14 17:43:03,425 dispatch pc=20, inst=CALL_FUNCTION(arg=0, lineno=820)
DEBUG 2023-04-14 17:43:03,425 stack ['$18load_global.0']
DEBUG 2023-04-14 17:43:03,425 dispatch pc=22, inst=POP_TOP(arg=None, lineno=820)
DEBUG 2023-04-14 17:43:03,425 stack ['$20call_function.1']
DEBUG 2023-04-14 17:43:03,425 dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=821)
DEBUG 2023-04-14 17:43:03,425 stack []
DEBUG 2023-04-14 17:43:03,425 dispatch pc=26, inst=POP_JUMP_IF_TRUE(arg=32, lineno=821)
DEBUG 2023-04-14 17:43:03,425 stack ['$const24.2']
DEBUG 2023-04-14 17:43:03,425 end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,425 pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,425 stack: []
DEBUG 2023-04-14 17:43:03,425 dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=822)
DEBUG 2023-04-14 17:43:03,425 stack []
DEBUG 2023-04-14 17:43:03,425 dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=822)
DEBUG 2023-04-14 17:43:03,425 stack ['$r32.0']
DEBUG 2023-04-14 17:43:03,428 dispatch pc=36, inst=COMPARE_OP(arg=4, lineno=822)
DEBUG 2023-04-14 17:43:03,428 stack ['$r32.0', '$const34.1']
DEBUG 2023-04-14 17:43:03,428 dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=52, lineno=822)
DEBUG 2023-04-14 17:43:03,428 stack ['$36compare_op.2']
DEBUG 2023-04-14 17:43:03,428 end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,428 pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,428 stack: []
DEBUG 2023-04-14 17:43:03,428 dispatch pc=28, inst=LOAD_ASSERTION_ERROR(arg=None, lineno=821)
DEBUG 2023-04-14 17:43:03,428 stack []
DEBUG 2023-04-14 17:43:03,428 dispatch pc=30, inst=RAISE_VARARGS(arg=1, lineno=821)
DEBUG 2023-04-14 17:43:03,428 stack ['$assertion_error28.0']
DEBUG 2023-04-14 17:43:03,428 end state. edges=[]
DEBUG 2023-04-14 17:43:03,428 pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,428 pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,428 stack: []
DEBUG 2023-04-14 17:43:03,428 dispatch pc=40, inst=LOAD_GLOBAL(arg=1, lineno=823)
DEBUG 2023-04-14 17:43:03,428 stack []
DEBUG 2023-04-14 17:43:03,428 dispatch pc=42, inst=LOAD_ATTR(arg=2, lineno=823)
DEBUG 2023-04-14 17:43:03,428 stack ['$40load_global.0']
DEBUG 2023-04-14 17:43:03,428 dispatch pc=44, inst=LOAD_METHOD(arg=3, lineno=823)
DEBUG 2023-04-14 17:43:03,428 stack ['$42load_attr.1']
DEBUG 2023-04-14 17:43:03,428 dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=824)
DEBUG 2023-04-14 17:43:03,428 stack ['$44load_method.2']
DEBUG 2023-04-14 17:43:03,428 dispatch pc=48, inst=CALL_METHOD(arg=1, lineno=823)
DEBUG 2023-04-14 17:43:03,428 stack ['$44load_method.2', '$const46.3']
DEBUG 2023-04-14 17:43:03,428 dispatch pc=50, inst=RAISE_VARARGS(arg=1, lineno=823)
DEBUG 2023-04-14 17:43:03,428 stack ['$48call_method.4']
DEBUG 2023-04-14 17:43:03,428 end state. edges=[]
DEBUG 2023-04-14 17:43:03,428 pending: deque([State(pc_initial=52 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,428 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,428 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,428 defmap: {}
DEBUG 2023-04-14 17:43:03,428 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,428 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,428 keep phismap: {}
DEBUG 2023-04-14 17:43:03,428 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:03,430 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,430 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$r2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$r2.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 52: ()})
DEBUG 2023-04-14 17:43:03,430 block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$r10.0'}), (12, {'res': '$const12.1'}), (14, {'lhs': '$r10.0', 'rhs': '$const12.1', 'res': '$14compare_op.2'}), (16, {'pred': '$14compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 32: ()})
DEBUG 2023-04-14 17:43:03,430 block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$18load_global.0'}), (20, {'func': '$18load_global.0', 'args': [], 'res': '$20call_function.1'}), (24, {'res': '$const24.2'}), (26, {'pred': '$const24.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 32: ()})
DEBUG 2023-04-14 17:43:03,430 block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$assertion_error28.0'}), (30, {'exc': '$assertion_error28.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,430 block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$r32.0'}), (34, {'res': '$const34.1'}), (36, {'lhs': '$r32.0', 'rhs': '$const34.1', 'res': '$36compare_op.2'}), (38, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 52: ()})
DEBUG 2023-04-14 17:43:03,430 block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$40load_global.0'}), (42, {'item': '$40load_global.0', 'res': '$42load_attr.1'}), (44, {'item': '$42load_attr.1', 'res': '$44load_method.2'}), (46, {'res': '$const46.3'}), (48, {'func': '$44load_method.2', 'args': ['$const46.3'], 'res': '$48call_method.4'}), (50, {'exc': '$48call_method.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,430 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$const52.0'}), (54, {'retval': '$const52.0', 'castval': '$54return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,430 label 0:
    r = arg(0, name=r)                       ['r']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6compare_op.2 = r != $const4.1          ['$6compare_op.2', '$const4.1', 'r']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, linalg.py:818),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 52                    ['$8pred']
label 10:
    $const12.1 = const(int, 0)               ['$const12.1']
    $14compare_op.2 = r < $const12.1         ['$14compare_op.2', '$const12.1', 'r']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, linalg.py:819),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.2', '$16pred', 'bool16']
    branch $16pred, 18, 32                   ['$16pred']
label 18:
    $18load_global.0 = global(fatal_error_func: ExternalFunction(numba_fatal_error)) ['$18load_global.0']
    $20call_function.1 = call $18load_global.0(func=$18load_global.0, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.0', '$20call_function.1']
    $const24.2 = const(int, 0)               ['$const24.2']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($const24.2, func=bool26, args=(Var($const24.2, linalg.py:821),), kws=(), vararg=None, varkwarg=None, target=None) ['$26pred', '$const24.2', 'bool26']
    branch $26pred, 32, 28                   ['$26pred']
label 28:
    $assertion_error28.0 = global(AssertionError: <class 'AssertionError'>) ['$assertion_error28.0']
    raise $assertion_error28.0               ['$assertion_error28.0']
label 32:
    $const34.1 = const(int, 0)               ['$const34.1']
    $36compare_op.2 = r > $const34.1         ['$36compare_op.2', '$const34.1', 'r']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, linalg.py:822),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 52                   ['$38pred']
label 40:
    $40load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$40load_global.0']
    $42load_attr.1 = getattr(value=$40load_global.0, attr=linalg) ['$40load_global.0', '$42load_attr.1']
    $44load_method.2 = getattr(value=$42load_attr.1, attr=LinAlgError) ['$42load_attr.1', '$44load_method.2']
    $const46.3 = const(str, Matrix is singular to machine precision.) ['$const46.3']
    $48call_method.4 = call $44load_method.2($const46.3, func=$44load_method.2, args=[Var($const46.3, linalg.py:824)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_method.2', '$48call_method.4', '$const46.3']
    raise $48call_method.4                   ['$48call_method.4']
label 52:
    $const52.0 = const(NoneType, None)       ['$const52.0']
    $54return_value.1 = cast(value=$const52.0) ['$54return_value.1', '$const52.0']
    return $54return_value.1                 ['$54return_value.1']

DEBUG 2023-04-14 17:43:03,438 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,438 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619C00820>
DEBUG 2023-04-14 17:43:03,438 on stmt: r = arg(0, name=r)
DEBUG 2023-04-14 17:43:03,438 on stmt: $const4.1 = const(int, 0)
DEBUG 2023-04-14 17:43:03,438 on stmt: $6compare_op.2 = r != $const4.1
DEBUG 2023-04-14 17:43:03,438 on stmt: bool8 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,438 on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, linalg.py:818),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,438 on stmt: branch $8pred, 10, 52
DEBUG 2023-04-14 17:43:03,438 ==== SSA block analysis pass on 10
DEBUG 2023-04-14 17:43:03,438 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619C00820>
DEBUG 2023-04-14 17:43:03,438 on stmt: $const12.1 = const(int, 0)
DEBUG 2023-04-14 17:43:03,438 on stmt: $14compare_op.2 = r < $const12.1
DEBUG 2023-04-14 17:43:03,438 on stmt: bool16 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,438 on stmt: $16pred = call bool16($14compare_op.2, func=bool16, args=(Var($14compare_op.2, linalg.py:819),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,438 on stmt: branch $16pred, 18, 32
DEBUG 2023-04-14 17:43:03,438 ==== SSA block analysis pass on 18
DEBUG 2023-04-14 17:43:03,438 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619C00820>
DEBUG 2023-04-14 17:43:03,438 on stmt: $18load_global.0 = global(fatal_error_func: ExternalFunction(numba_fatal_error))
DEBUG 2023-04-14 17:43:03,438 on stmt: $20call_function.1 = call $18load_global.0(func=$18load_global.0, args=[], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,438 on stmt: $const24.2 = const(int, 0)
DEBUG 2023-04-14 17:43:03,438 on stmt: bool26 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,438 on stmt: $26pred = call bool26($const24.2, func=bool26, args=(Var($const24.2, linalg.py:821),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,438 on stmt: jump 28
DEBUG 2023-04-14 17:43:03,438 ==== SSA block analysis pass on 28
DEBUG 2023-04-14 17:43:03,438 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619C00820>
DEBUG 2023-04-14 17:43:03,440 on stmt: $assertion_error28.0 = global(AssertionError: <class 'AssertionError'>)
DEBUG 2023-04-14 17:43:03,440 on stmt: <static> raise <class 'AssertionError'>
DEBUG 2023-04-14 17:43:03,440 ==== SSA block analysis pass on 32
DEBUG 2023-04-14 17:43:03,440 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619C00820>
DEBUG 2023-04-14 17:43:03,440 on stmt: $const34.1 = const(int, 0)
DEBUG 2023-04-14 17:43:03,440 on stmt: $36compare_op.2 = r > $const34.1
DEBUG 2023-04-14 17:43:03,440 on stmt: bool38 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,440 on stmt: $38pred = call bool38($36compare_op.2, func=bool38, args=(Var($36compare_op.2, linalg.py:822),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,440 on stmt: branch $38pred, 40, 52
DEBUG 2023-04-14 17:43:03,440 ==== SSA block analysis pass on 40
DEBUG 2023-04-14 17:43:03,440 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619C00820>
DEBUG 2023-04-14 17:43:03,440 on stmt: $40load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,440 on stmt: $42load_attr.1 = getattr(value=$40load_global.0, attr=linalg)
DEBUG 2023-04-14 17:43:03,440 on stmt: $44load_method.2 = getattr(value=$42load_attr.1, attr=LinAlgError)
DEBUG 2023-04-14 17:43:03,440 on stmt: $const46.3 = const(str, Matrix is singular to machine precision.)
DEBUG 2023-04-14 17:43:03,440 on stmt: $48call_method.4 = call $44load_method.2($const46.3, func=$44load_method.2, args=[Var($const46.3, linalg.py:824)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,440 on stmt: <static> raise <class 'numpy.linalg.LinAlgError'>('Matrix is singular to machine precision.')
DEBUG 2023-04-14 17:43:03,440 ==== SSA block analysis pass on 52
DEBUG 2023-04-14 17:43:03,440 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619C00820>
DEBUG 2023-04-14 17:43:03,440 on stmt: $const52.0 = const(NoneType, None)
DEBUG 2023-04-14 17:43:03,440 on stmt: $54return_value.1 = cast(value=$const52.0)
DEBUG 2023-04-14 17:43:03,440 on stmt: return $54return_value.1
DEBUG 2023-04-14 17:43:03,440 defs defaultdict(<class 'list'>,
            {'$14compare_op.2': [<numba.core.ir.Assign object at 0x0000026619BE5EB0>],
             '$16pred': [<numba.core.ir.Assign object at 0x0000026619BE5070>],
             '$18load_global.0': [<numba.core.ir.Assign object at 0x0000026619BE0DF0>],
             '$20call_function.1': [<numba.core.ir.Assign object at 0x0000026619BE01C0>],
             '$26pred': [<numba.core.ir.Assign object at 0x0000026619B3A460>],
             '$36compare_op.2': [<numba.core.ir.Assign object at 0x0000026619BE1670>],
             '$38pred': [<numba.core.ir.Assign object at 0x0000026619BE18E0>],
             '$40load_global.0': [<numba.core.ir.Assign object at 0x0000026619BE1B20>],
             '$42load_attr.1': [<numba.core.ir.Assign object at 0x0000026619BE1CA0>],
             '$44load_method.2': [<numba.core.ir.Assign object at 0x0000026619BE1E20>],
             '$48call_method.4': [<numba.core.ir.Assign object at 0x0000026619BEB1F0>],
             '$54return_value.1': [<numba.core.ir.Assign object at 0x0000026619BEB5E0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000026619BE5730>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000026619BE59A0>],
             '$assertion_error28.0': [<numba.core.ir.Assign object at 0x0000026619BE10A0>],
             '$const12.1': [<numba.core.ir.Assign object at 0x0000026619BE5D00>],
             '$const24.2': [<numba.core.ir.Assign object at 0x0000026619BE0640>],
             '$const34.1': [<numba.core.ir.Assign object at 0x0000026619BE14C0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000026619BE5580>],
             '$const46.3': [<numba.core.ir.Assign object at 0x0000026619BE1FA0>],
             '$const52.0': [<numba.core.ir.Assign object at 0x0000026619BEB460>],
             'bool16': [<numba.core.ir.Assign object at 0x0000026619BE5190>],
             'bool26': [<numba.core.ir.Assign object at 0x0000026619BE04C0>],
             'bool38': [<numba.core.ir.Assign object at 0x0000026619BE17C0>],
             'bool8': [<numba.core.ir.Assign object at 0x0000026619BE5880>],
             'r': [<numba.core.ir.Assign object at 0x0000026619BE52E0>]})
DEBUG 2023-04-14 17:43:03,440 SSA violators set()
DEBUG 2023-04-14 17:43:03,486 bytecode dump:
>          0	NOP(arg=None, lineno=829)
           2	LOAD_FAST(arg=0, lineno=829)
           4	LOAD_CONST(arg=1, lineno=829)
           6	BINARY_SUBSCR(arg=None, lineno=829)
           8	RETURN_VALUE(arg=None, lineno=829)
DEBUG 2023-04-14 17:43:03,486 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,486 stack: []
DEBUG 2023-04-14 17:43:03,486 dispatch pc=0, inst=NOP(arg=None, lineno=829)
DEBUG 2023-04-14 17:43:03,486 stack []
DEBUG 2023-04-14 17:43:03,486 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=829)
DEBUG 2023-04-14 17:43:03,490 stack []
DEBUG 2023-04-14 17:43:03,490 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=829)
DEBUG 2023-04-14 17:43:03,490 stack ['$a2.0']
DEBUG 2023-04-14 17:43:03,490 dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=829)
DEBUG 2023-04-14 17:43:03,490 stack ['$a2.0', '$const4.1']
DEBUG 2023-04-14 17:43:03,490 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=829)
DEBUG 2023-04-14 17:43:03,490 stack ['$6binary_subscr.2']
DEBUG 2023-04-14 17:43:03,490 end state. edges=[]
DEBUG 2023-04-14 17:43:03,490 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,490 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,490 defmap: {}
DEBUG 2023-04-14 17:43:03,490 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,490 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,490 keep phismap: {}
DEBUG 2023-04-14 17:43:03,490 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:03,490 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,490 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$a2.0', 'res': '$6binary_subscr.2'}), (8, {'retval': '$6binary_subscr.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,490 label 0:
    a = arg(0, name=a)                       ['a']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=a, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'a']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:43:03,492 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,492 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B3A880>
DEBUG 2023-04-14 17:43:03,492 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,492 on stmt: $const4.1 = const(int, 0)
DEBUG 2023-04-14 17:43:03,492 on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,492 on stmt: $8return_value.3 = cast(value=$6binary_subscr.2)
DEBUG 2023-04-14 17:43:03,492 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:43:03,492 defs defaultdict(<class 'list'>,
            {'$6binary_subscr.2': [<numba.core.ir.Assign object at 0x0000026619B6C790>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000026619B3A9A0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000026619B3A250>],
             'a': [<numba.core.ir.Assign object at 0x0000026619B87520>]})
DEBUG 2023-04-14 17:43:03,492 SSA violators set()
DEBUG 2023-04-14 17:43:03,523 bytecode dump:
>          0	NOP(arg=None, lineno=1934)
           2	LOAD_FAST(arg=2, lineno=1934)
           4	LOAD_CONST(arg=1, lineno=1934)
           6	BINARY_ADD(arg=None, lineno=1934)
           8	STORE_FAST(arg=3, lineno=1934)
          10	LOAD_CONST(arg=2, lineno=1935)
          12	STORE_FAST(arg=4, lineno=1935)
          14	LOAD_GLOBAL(arg=0, lineno=1936)
          16	LOAD_FAST(arg=0, lineno=1936)
          18	CALL_FUNCTION(arg=1, lineno=1936)
          20	GET_ITER(arg=None, lineno=1936)
>         22	FOR_ITER(arg=56, lineno=1936)
          24	STORE_FAST(arg=5, lineno=1936)
          26	LOAD_GLOBAL(arg=1, lineno=1937)
          28	LOAD_METHOD(arg=2, lineno=1937)
          30	LOAD_FAST(arg=1, lineno=1937)
          32	LOAD_FAST(arg=5, lineno=1937)
          34	LOAD_FAST(arg=5, lineno=1937)
          36	BUILD_TUPLE(arg=2, lineno=1937)
          38	BINARY_SUBSCR(arg=None, lineno=1937)
          40	CALL_METHOD(arg=1, lineno=1937)
          42	STORE_FAST(arg=6, lineno=1937)
          44	LOAD_FAST(arg=3, lineno=1938)
          46	LOAD_FAST(arg=1, lineno=1938)
          48	LOAD_FAST(arg=5, lineno=1938)
          50	LOAD_FAST(arg=5, lineno=1938)
          52	BUILD_TUPLE(arg=2, lineno=1938)
          54	BINARY_SUBSCR(arg=None, lineno=1938)
          56	LOAD_FAST(arg=6, lineno=1938)
          58	BINARY_TRUE_DIVIDE(arg=None, lineno=1938)
          60	BINARY_MULTIPLY(arg=None, lineno=1938)
          62	STORE_FAST(arg=3, lineno=1938)
          64	LOAD_FAST(arg=4, lineno=1939)
          66	LOAD_GLOBAL(arg=1, lineno=1939)
          68	LOAD_METHOD(arg=3, lineno=1939)
          70	LOAD_FAST(arg=6, lineno=1939)
          72	CALL_METHOD(arg=1, lineno=1939)
          74	BINARY_ADD(arg=None, lineno=1939)
          76	STORE_FAST(arg=4, lineno=1939)
          78	JUMP_ABSOLUTE(arg=22, lineno=1939)
>         80	LOAD_FAST(arg=3, lineno=1940)
          82	LOAD_FAST(arg=4, lineno=1940)
          84	BUILD_TUPLE(arg=2, lineno=1940)
          86	RETURN_VALUE(arg=None, lineno=1940)
DEBUG 2023-04-14 17:43:03,526 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,526 stack: []
DEBUG 2023-04-14 17:43:03,526 dispatch pc=0, inst=NOP(arg=None, lineno=1934)
DEBUG 2023-04-14 17:43:03,526 stack []
DEBUG 2023-04-14 17:43:03,526 dispatch pc=2, inst=LOAD_FAST(arg=2, lineno=1934)
DEBUG 2023-04-14 17:43:03,526 stack []
DEBUG 2023-04-14 17:43:03,526 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1934)
DEBUG 2023-04-14 17:43:03,526 stack ['$sgn2.0']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=1934)
DEBUG 2023-04-14 17:43:03,526 stack ['$sgn2.0', '$const4.1']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1934)
DEBUG 2023-04-14 17:43:03,526 stack ['$6binary_add.2']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1935)
DEBUG 2023-04-14 17:43:03,526 stack []
DEBUG 2023-04-14 17:43:03,526 dispatch pc=12, inst=STORE_FAST(arg=4, lineno=1935)
DEBUG 2023-04-14 17:43:03,526 stack ['$const10.3']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=14, inst=LOAD_GLOBAL(arg=0, lineno=1936)
DEBUG 2023-04-14 17:43:03,526 stack []
DEBUG 2023-04-14 17:43:03,526 dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1936)
DEBUG 2023-04-14 17:43:03,526 stack ['$14load_global.4']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=1936)
DEBUG 2023-04-14 17:43:03,526 stack ['$14load_global.4', '$n16.5']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=20, inst=GET_ITER(arg=None, lineno=1936)
DEBUG 2023-04-14 17:43:03,526 stack ['$18call_function.6']
DEBUG 2023-04-14 17:43:03,526 end state. edges=[Edge(pc=22, stack=('$20get_iter.7',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,526 pending: deque([State(pc_initial=22 nstack_initial=1)])
DEBUG 2023-04-14 17:43:03,526 stack: ['$phi22.0']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=22, inst=FOR_ITER(arg=56, lineno=1936)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi22.0']
DEBUG 2023-04-14 17:43:03,526 end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,526 pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=24 nstack_initial=2)])
DEBUG 2023-04-14 17:43:03,526 stack: []
DEBUG 2023-04-14 17:43:03,526 dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=1940)
DEBUG 2023-04-14 17:43:03,526 stack []
DEBUG 2023-04-14 17:43:03,526 dispatch pc=82, inst=LOAD_FAST(arg=4, lineno=1940)
DEBUG 2023-04-14 17:43:03,526 stack ['$csgn80.0']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=84, inst=BUILD_TUPLE(arg=2, lineno=1940)
DEBUG 2023-04-14 17:43:03,526 stack ['$csgn80.0', '$acc82.1']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=1940)
DEBUG 2023-04-14 17:43:03,526 stack ['$84build_tuple.2']
DEBUG 2023-04-14 17:43:03,526 end state. edges=[]
DEBUG 2023-04-14 17:43:03,526 pending: deque([State(pc_initial=24 nstack_initial=2)])
DEBUG 2023-04-14 17:43:03,526 stack: ['$phi24.0', '$phi24.1']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=1936)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$phi24.1']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=1937)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=28, inst=LOAD_METHOD(arg=2, lineno=1937)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$26load_global.2']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=1937)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$28load_method.3']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=32, inst=LOAD_FAST(arg=5, lineno=1937)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$28load_method.3', '$a30.4']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=34, inst=LOAD_FAST(arg=5, lineno=1937)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$28load_method.3', '$a30.4', '$k32.5']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=1937)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$28load_method.3', '$a30.4', '$k32.5', '$k34.6']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=1937)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$28load_method.3', '$a30.4', '$36build_tuple.7']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=1937)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$28load_method.3', '$38binary_subscr.8']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=42, inst=STORE_FAST(arg=6, lineno=1937)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$40call_method.9']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=1938)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=46, inst=LOAD_FAST(arg=1, lineno=1938)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$csgn44.10']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=1938)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$csgn44.10', '$a46.11']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=1938)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$csgn44.10', '$a46.11', '$k48.12']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=52, inst=BUILD_TUPLE(arg=2, lineno=1938)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$csgn44.10', '$a46.11', '$k48.12', '$k50.13']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=54, inst=BINARY_SUBSCR(arg=None, lineno=1938)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$csgn44.10', '$a46.11', '$52build_tuple.14']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=56, inst=LOAD_FAST(arg=6, lineno=1938)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$csgn44.10', '$54binary_subscr.15']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=58, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1938)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$csgn44.10', '$54binary_subscr.15', '$absel56.16']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=60, inst=BINARY_MULTIPLY(arg=None, lineno=1938)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$csgn44.10', '$58binary_true_divide.17']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=62, inst=STORE_FAST(arg=3, lineno=1938)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$60binary_multiply.18']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=1939)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=66, inst=LOAD_GLOBAL(arg=1, lineno=1939)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$acc64.19']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=68, inst=LOAD_METHOD(arg=3, lineno=1939)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$acc64.19', '$66load_global.20']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=70, inst=LOAD_FAST(arg=6, lineno=1939)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$acc64.19', '$68load_method.21']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=72, inst=CALL_METHOD(arg=1, lineno=1939)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$acc64.19', '$68load_method.21', '$absel70.22']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=74, inst=BINARY_ADD(arg=None, lineno=1939)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$acc64.19', '$72call_method.23']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1939)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0', '$74binary_add.24']
DEBUG 2023-04-14 17:43:03,526 dispatch pc=78, inst=JUMP_ABSOLUTE(arg=22, lineno=1939)
DEBUG 2023-04-14 17:43:03,526 stack ['$phi24.0']
DEBUG 2023-04-14 17:43:03,526 end state. edges=[Edge(pc=22, stack=('$phi24.0',), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,531 pending: deque([State(pc_initial=22 nstack_initial=1)])
DEBUG 2023-04-14 17:43:03,531 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,531 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=24 nstack_initial=2): {'$phi24.1'},
             State(pc_initial=80 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,531 defmap: {'$phi22.0': State(pc_initial=0 nstack_initial=0),
 '$phi24.1': State(pc_initial=22 nstack_initial=1)}
DEBUG 2023-04-14 17:43:03,531 phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=2))},
             '$phi24.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:03,531 changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi24.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:03,531 changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:03,531 changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.0': {('$20get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
DEBUG 2023-04-14 17:43:03,531 keep phismap: {'$phi22.0': {('$20get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi24.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))}}
DEBUG 2023-04-14 17:43:03,531 new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$20get_iter.7'},
             State(pc_initial=22 nstack_initial=1): {'$phi24.1': '$22for_iter.2'}})
DEBUG 2023-04-14 17:43:03,531 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,531 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$sgn2.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$sgn2.0', 'rhs': '$const4.1', 'res': '$6binary_add.2'}), (8, {'value': '$6binary_add.2'}), (10, {'res': '$const10.3'}), (12, {'value': '$const10.3'}), (14, {'res': '$14load_global.4'}), (16, {'res': '$n16.5'}), (18, {'func': '$14load_global.4', 'args': ['$n16.5'], 'res': '$18call_function.6'}), (20, {'value': '$18call_function.6', 'res': '$20get_iter.7'})), outgoing_phis={'$phi22.0': '$20get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.7',)})
DEBUG 2023-04-14 17:43:03,531 block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi24.1': '$22for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: (), 24: ('$phi22.0', '$22for_iter.2')})
DEBUG 2023-04-14 17:43:03,531 block_infos State(pc_initial=24 nstack_initial=2):
AdaptBlockInfo(insts=((24, {'value': '$phi24.1'}), (26, {'res': '$26load_global.2'}), (28, {'item': '$26load_global.2', 'res': '$28load_method.3'}), (30, {'res': '$a30.4'}), (32, {'res': '$k32.5'}), (34, {'res': '$k34.6'}), (36, {'items': ['$k32.5', '$k34.6'], 'res': '$36build_tuple.7'}), (38, {'index': '$36build_tuple.7', 'target': '$a30.4', 'res': '$38binary_subscr.8'}), (40, {'func': '$28load_method.3', 'args': ['$38binary_subscr.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$csgn44.10'}), (46, {'res': '$a46.11'}), (48, {'res': '$k48.12'}), (50, {'res': '$k50.13'}), (52, {'items': ['$k48.12', '$k50.13'], 'res': '$52build_tuple.14'}), (54, {'index': '$52build_tuple.14', 'target': '$a46.11', 'res': '$54binary_subscr.15'}), (56, {'res': '$absel56.16'}), (58, {'lhs': '$54binary_subscr.15', 'rhs': '$absel56.16', 'res': '$58binary_true_divide.17'}), (60, {'lhs': '$csgn44.10', 'rhs': '$58binary_true_divide.17', 'res': '$60binary_multiply.18'}), (62, {'value': '$60binary_multiply.18'}), (64, {'res': '$acc64.19'}), (66, {'res': '$66load_global.20'}), (68, {'item': '$66load_global.20', 'res': '$68load_method.21'}), (70, {'res': '$absel70.22'}), (72, {'func': '$68load_method.21', 'args': ['$absel70.22'], 'res': '$72call_method.23'}), (74, {'lhs': '$acc64.19', 'rhs': '$72call_method.23', 'res': '$74binary_add.24'}), (76, {'value': '$74binary_add.24'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi24.0',)})
DEBUG 2023-04-14 17:43:03,531 block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$csgn80.0'}), (82, {'res': '$acc82.1'}), (84, {'items': ['$csgn80.0', '$acc82.1'], 'res': '$84build_tuple.2'}), (86, {'retval': '$84build_tuple.2', 'castval': '$86return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,533 label 0:
    n = arg(0, name=n)                       ['n']
    a = arg(1, name=a)                       ['a']
    sgn = arg(2, name=sgn)                   ['sgn']
    $const4.1 = const(complex, 0j)           ['$const4.1']
    csgn = sgn + $const4.1                   ['$const4.1', 'csgn', 'sgn']
    acc = const(float, 0.0)                  ['acc']
    $14load_global.4 = global(range: <class 'range'>) ['$14load_global.4']
    $18call_function.6 = call $14load_global.4(n, func=$14load_global.4, args=[Var(n, linalg.py:1934)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_global.4', '$18call_function.6', 'n']
    $20get_iter.7 = getiter(value=$18call_function.6) ['$18call_function.6', '$20get_iter.7']
    $phi22.0 = $20get_iter.7                 ['$20get_iter.7', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi24.1 = $22for_iter.2                 ['$22for_iter.2', '$phi24.1']
    branch $22for_iter.3, 24, 80             ['$22for_iter.3']
label 24:
    k = $phi24.1                             ['$phi24.1', 'k']
    $26load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$26load_global.2']
    $28load_method.3 = getattr(value=$26load_global.2, attr=abs) ['$26load_global.2', '$28load_method.3']
    $36build_tuple.7 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)]) ['$36build_tuple.7', 'k', 'k']
    $38binary_subscr.8 = getitem(value=a, index=$36build_tuple.7, fn=<built-in function getitem>) ['$36build_tuple.7', '$38binary_subscr.8', 'a']
    absel = call $28load_method.3($38binary_subscr.8, func=$28load_method.3, args=[Var($38binary_subscr.8, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_method.3', '$38binary_subscr.8', 'absel']
    $52build_tuple.14 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)]) ['$52build_tuple.14', 'k', 'k']
    $54binary_subscr.15 = getitem(value=a, index=$52build_tuple.14, fn=<built-in function getitem>) ['$52build_tuple.14', '$54binary_subscr.15', 'a']
    $58binary_true_divide.17 = $54binary_subscr.15 / absel ['$54binary_subscr.15', '$58binary_true_divide.17', 'absel']
    $60binary_multiply.18 = csgn * $58binary_true_divide.17 ['$58binary_true_divide.17', '$60binary_multiply.18', 'csgn']
    csgn = $60binary_multiply.18             ['$60binary_multiply.18', 'csgn']
    $66load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$66load_global.20']
    $68load_method.21 = getattr(value=$66load_global.20, attr=log) ['$66load_global.20', '$68load_method.21']
    $72call_method.23 = call $68load_method.21(absel, func=$68load_method.21, args=[Var(absel, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_method.21', '$72call_method.23', 'absel']
    $74binary_add.24 = acc + $72call_method.23 ['$72call_method.23', '$74binary_add.24', 'acc']
    acc = $74binary_add.24                   ['$74binary_add.24', 'acc']
    jump 22                                  []
label 80:
    $84build_tuple.2 = build_tuple(items=[Var(csgn, linalg.py:1934), Var(acc, linalg.py:1935)]) ['$84build_tuple.2', 'acc', 'csgn']
    $86return_value.3 = cast(value=$84build_tuple.2) ['$84build_tuple.2', '$86return_value.3']
    return $86return_value.3                 ['$86return_value.3']

DEBUG 2023-04-14 17:43:03,542 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,542 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619BD1D00>
DEBUG 2023-04-14 17:43:03,542 on stmt: n = arg(0, name=n)
DEBUG 2023-04-14 17:43:03,542 on stmt: a = arg(1, name=a)
DEBUG 2023-04-14 17:43:03,542 on stmt: sgn = arg(2, name=sgn)
DEBUG 2023-04-14 17:43:03,542 on stmt: $const4.1 = const(complex, 0j)
DEBUG 2023-04-14 17:43:03,542 on stmt: csgn = sgn + $const4.1
DEBUG 2023-04-14 17:43:03,542 on stmt: acc = const(float, 0.0)
DEBUG 2023-04-14 17:43:03,542 on stmt: $14load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:03,542 on stmt: $18call_function.6 = call $14load_global.4(n, func=$14load_global.4, args=[Var(n, linalg.py:1934)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,542 on stmt: $20get_iter.7 = getiter(value=$18call_function.6)
DEBUG 2023-04-14 17:43:03,542 on stmt: $phi22.0 = $20get_iter.7
DEBUG 2023-04-14 17:43:03,542 on stmt: jump 22
DEBUG 2023-04-14 17:43:03,542 ==== SSA block analysis pass on 22
DEBUG 2023-04-14 17:43:03,542 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619BD1D00>
DEBUG 2023-04-14 17:43:03,542 on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG 2023-04-14 17:43:03,542 on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:03,542 on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:03,542 on stmt: $phi24.1 = $22for_iter.2
DEBUG 2023-04-14 17:43:03,542 on stmt: branch $22for_iter.3, 24, 80
DEBUG 2023-04-14 17:43:03,542 ==== SSA block analysis pass on 24
DEBUG 2023-04-14 17:43:03,542 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619BD1D00>
DEBUG 2023-04-14 17:43:03,542 on stmt: k = $phi24.1
DEBUG 2023-04-14 17:43:03,542 on stmt: $26load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,542 on stmt: $28load_method.3 = getattr(value=$26load_global.2, attr=abs)
DEBUG 2023-04-14 17:43:03,542 on stmt: $36build_tuple.7 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,544 on stmt: $38binary_subscr.8 = getitem(value=a, index=$36build_tuple.7, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,544 on stmt: absel = call $28load_method.3($38binary_subscr.8, func=$28load_method.3, args=[Var($38binary_subscr.8, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,544 on stmt: $52build_tuple.14 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,544 on stmt: $54binary_subscr.15 = getitem(value=a, index=$52build_tuple.14, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,544 on stmt: $58binary_true_divide.17 = $54binary_subscr.15 / absel
DEBUG 2023-04-14 17:43:03,544 on stmt: $60binary_multiply.18 = csgn * $58binary_true_divide.17
DEBUG 2023-04-14 17:43:03,544 on stmt: csgn = $60binary_multiply.18
DEBUG 2023-04-14 17:43:03,544 on stmt: $66load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,544 on stmt: $68load_method.21 = getattr(value=$66load_global.20, attr=log)
DEBUG 2023-04-14 17:43:03,544 on stmt: $72call_method.23 = call $68load_method.21(absel, func=$68load_method.21, args=[Var(absel, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,544 on stmt: $74binary_add.24 = acc + $72call_method.23
DEBUG 2023-04-14 17:43:03,544 on stmt: acc = $74binary_add.24
DEBUG 2023-04-14 17:43:03,544 on stmt: jump 22
DEBUG 2023-04-14 17:43:03,544 ==== SSA block analysis pass on 80
DEBUG 2023-04-14 17:43:03,544 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619BD1D00>
DEBUG 2023-04-14 17:43:03,544 on stmt: $84build_tuple.2 = build_tuple(items=[Var(csgn, linalg.py:1934), Var(acc, linalg.py:1935)])
DEBUG 2023-04-14 17:43:03,544 on stmt: $86return_value.3 = cast(value=$84build_tuple.2)
DEBUG 2023-04-14 17:43:03,544 on stmt: return $86return_value.3
DEBUG 2023-04-14 17:43:03,544 defs defaultdict(<class 'list'>,
            {'$14load_global.4': [<numba.core.ir.Assign object at 0x0000026619B5E490>],
             '$18call_function.6': [<numba.core.ir.Assign object at 0x0000026619B5E790>],
             '$20get_iter.7': [<numba.core.ir.Assign object at 0x0000026619B5E8B0>],
             '$22for_iter.1': [<numba.core.ir.Assign object at 0x0000026619B5EAC0>],
             '$22for_iter.2': [<numba.core.ir.Assign object at 0x0000026619B5EBE0>],
             '$22for_iter.3': [<numba.core.ir.Assign object at 0x0000026619B5ED00>],
             '$26load_global.2': [<numba.core.ir.Assign object at 0x0000026619B35130>],
             '$28load_method.3': [<numba.core.ir.Assign object at 0x0000026619B35070>],
             '$36build_tuple.7': [<numba.core.ir.Assign object at 0x0000026619B35CD0>],
             '$38binary_subscr.8': [<numba.core.ir.Assign object at 0x0000026619B35FA0>],
             '$52build_tuple.14': [<numba.core.ir.Assign object at 0x0000026619B68280>],
             '$54binary_subscr.15': [<numba.core.ir.Assign object at 0x0000026619B68400>],
             '$58binary_true_divide.17': [<numba.core.ir.Assign object at 0x0000026619B686A0>],
             '$60binary_multiply.18': [<numba.core.ir.Assign object at 0x0000026619B68820>],
             '$66load_global.20': [<numba.core.ir.Assign object at 0x0000026619B68B50>],
             '$68load_method.21': [<numba.core.ir.Assign object at 0x0000026619B68CD0>],
             '$72call_method.23': [<numba.core.ir.Assign object at 0x0000026619B30040>],
             '$74binary_add.24': [<numba.core.ir.Assign object at 0x0000026619B30160>],
             '$84build_tuple.2': [<numba.core.ir.Assign object at 0x0000026619B30340>],
             '$86return_value.3': [<numba.core.ir.Assign object at 0x0000026619B30490>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000026619B3D8E0>],
             '$phi22.0': [<numba.core.ir.Assign object at 0x0000026619B3D190>],
             '$phi24.1': [<numba.core.ir.Assign object at 0x0000026619B5EA00>],
             'a': [<numba.core.ir.Assign object at 0x0000026619B3D2E0>],
             'absel': [<numba.core.ir.Assign object at 0x0000026619B359A0>],
             'acc': [<numba.core.ir.Assign object at 0x0000026619B5E1F0>,
                     <numba.core.ir.Assign object at 0x0000026619B30220>],
             'csgn': [<numba.core.ir.Assign object at 0x0000026619B3D520>,
                      <numba.core.ir.Assign object at 0x0000026619B688E0>],
             'k': [<numba.core.ir.Assign object at 0x0000026619B5EFD0>],
             'n': [<numba.core.ir.Assign object at 0x0000026619B3DA90>],
             'sgn': [<numba.core.ir.Assign object at 0x0000026619B3D280>]})
DEBUG 2023-04-14 17:43:03,544 SSA violators {'acc', 'csgn'}
DEBUG 2023-04-14 17:43:03,544 Fix SSA violator on var acc
DEBUG 2023-04-14 17:43:03,544 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:03,544 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619BD1DF0>
DEBUG 2023-04-14 17:43:03,545 on stmt: n = arg(0, name=n)
DEBUG 2023-04-14 17:43:03,545 on stmt: a = arg(1, name=a)
DEBUG 2023-04-14 17:43:03,545 on stmt: sgn = arg(2, name=sgn)
DEBUG 2023-04-14 17:43:03,545 on stmt: $const4.1 = const(complex, 0j)
DEBUG 2023-04-14 17:43:03,545 on stmt: csgn = sgn + $const4.1
DEBUG 2023-04-14 17:43:03,545 on stmt: acc = const(float, 0.0)
DEBUG 2023-04-14 17:43:03,545 first assign: acc
DEBUG 2023-04-14 17:43:03,545 replaced with: acc = const(float, 0.0)
DEBUG 2023-04-14 17:43:03,545 on stmt: $14load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:03,545 on stmt: $18call_function.6 = call $14load_global.4(n, func=$14load_global.4, args=[Var(n, linalg.py:1934)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,545 on stmt: $20get_iter.7 = getiter(value=$18call_function.6)
DEBUG 2023-04-14 17:43:03,545 on stmt: $phi22.0 = $20get_iter.7
DEBUG 2023-04-14 17:43:03,545 on stmt: jump 22
DEBUG 2023-04-14 17:43:03,545 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:03,545 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619BD1DF0>
DEBUG 2023-04-14 17:43:03,545 on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG 2023-04-14 17:43:03,545 on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:03,545 on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:03,545 on stmt: $phi24.1 = $22for_iter.2
DEBUG 2023-04-14 17:43:03,545 on stmt: branch $22for_iter.3, 24, 80
DEBUG 2023-04-14 17:43:03,545 ==== SSA block rewrite pass on 24
DEBUG 2023-04-14 17:43:03,545 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619BD1DF0>
DEBUG 2023-04-14 17:43:03,545 on stmt: k = $phi24.1
DEBUG 2023-04-14 17:43:03,545 on stmt: $26load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,545 on stmt: $28load_method.3 = getattr(value=$26load_global.2, attr=abs)
DEBUG 2023-04-14 17:43:03,545 on stmt: $36build_tuple.7 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,545 on stmt: $38binary_subscr.8 = getitem(value=a, index=$36build_tuple.7, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,545 on stmt: absel = call $28load_method.3($38binary_subscr.8, func=$28load_method.3, args=[Var($38binary_subscr.8, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,545 on stmt: $52build_tuple.14 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,545 on stmt: $54binary_subscr.15 = getitem(value=a, index=$52build_tuple.14, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,545 on stmt: $58binary_true_divide.17 = $54binary_subscr.15 / absel
DEBUG 2023-04-14 17:43:03,545 on stmt: $60binary_multiply.18 = csgn * $58binary_true_divide.17
DEBUG 2023-04-14 17:43:03,545 on stmt: csgn = $60binary_multiply.18
DEBUG 2023-04-14 17:43:03,545 on stmt: $66load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,545 on stmt: $68load_method.21 = getattr(value=$66load_global.20, attr=log)
DEBUG 2023-04-14 17:43:03,545 on stmt: $72call_method.23 = call $68load_method.21(absel, func=$68load_method.21, args=[Var(absel, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,545 on stmt: $74binary_add.24 = acc + $72call_method.23
DEBUG 2023-04-14 17:43:03,545 on stmt: acc = $74binary_add.24
DEBUG 2023-04-14 17:43:03,545 replaced with: acc.1 = $74binary_add.24
DEBUG 2023-04-14 17:43:03,545 on stmt: jump 22
DEBUG 2023-04-14 17:43:03,545 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:03,545 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619BD1DF0>
DEBUG 2023-04-14 17:43:03,545 on stmt: $84build_tuple.2 = build_tuple(items=[Var(csgn, linalg.py:1934), Var(acc, linalg.py:1935)])
DEBUG 2023-04-14 17:43:03,545 on stmt: $86return_value.3 = cast(value=$84build_tuple.2)
DEBUG 2023-04-14 17:43:03,545 on stmt: return $86return_value.3
DEBUG 2023-04-14 17:43:03,545 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026619BD1E80>],
             24: [<numba.core.ir.Assign object at 0x0000026619BD1B20>]})
DEBUG 2023-04-14 17:43:03,545 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:03,545 Running <numba.core.ssa._FixSSAVars object at 0x0000026619BD1DF0>
DEBUG 2023-04-14 17:43:03,545 on stmt: n = arg(0, name=n)
DEBUG 2023-04-14 17:43:03,545 on stmt: a = arg(1, name=a)
DEBUG 2023-04-14 17:43:03,545 on stmt: sgn = arg(2, name=sgn)
DEBUG 2023-04-14 17:43:03,545 on stmt: $const4.1 = const(complex, 0j)
DEBUG 2023-04-14 17:43:03,545 on stmt: csgn = sgn + $const4.1
DEBUG 2023-04-14 17:43:03,545 on stmt: acc = const(float, 0.0)
DEBUG 2023-04-14 17:43:03,545 on stmt: $14load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:03,545 on stmt: $18call_function.6 = call $14load_global.4(n, func=$14load_global.4, args=[Var(n, linalg.py:1934)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,545 on stmt: $20get_iter.7 = getiter(value=$18call_function.6)
DEBUG 2023-04-14 17:43:03,545 on stmt: $phi22.0 = $20get_iter.7
DEBUG 2023-04-14 17:43:03,545 on stmt: jump 22
DEBUG 2023-04-14 17:43:03,545 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:03,545 Running <numba.core.ssa._FixSSAVars object at 0x0000026619BD1DF0>
DEBUG 2023-04-14 17:43:03,545 on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG 2023-04-14 17:43:03,545 on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:03,545 on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:03,545 on stmt: $phi24.1 = $22for_iter.2
DEBUG 2023-04-14 17:43:03,545 on stmt: branch $22for_iter.3, 24, 80
DEBUG 2023-04-14 17:43:03,545 ==== SSA block rewrite pass on 24
DEBUG 2023-04-14 17:43:03,545 Running <numba.core.ssa._FixSSAVars object at 0x0000026619BD1DF0>
DEBUG 2023-04-14 17:43:03,545 on stmt: k = $phi24.1
DEBUG 2023-04-14 17:43:03,545 on stmt: $26load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,545 on stmt: $28load_method.3 = getattr(value=$26load_global.2, attr=abs)
DEBUG 2023-04-14 17:43:03,545 on stmt: $36build_tuple.7 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,545 on stmt: $38binary_subscr.8 = getitem(value=a, index=$36build_tuple.7, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,545 on stmt: absel = call $28load_method.3($38binary_subscr.8, func=$28load_method.3, args=[Var($38binary_subscr.8, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,545 on stmt: $52build_tuple.14 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,545 on stmt: $54binary_subscr.15 = getitem(value=a, index=$52build_tuple.14, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,545 on stmt: $58binary_true_divide.17 = $54binary_subscr.15 / absel
DEBUG 2023-04-14 17:43:03,545 on stmt: $60binary_multiply.18 = csgn * $58binary_true_divide.17
DEBUG 2023-04-14 17:43:03,545 on stmt: csgn = $60binary_multiply.18
DEBUG 2023-04-14 17:43:03,545 on stmt: $66load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,545 on stmt: $68load_method.21 = getattr(value=$66load_global.20, attr=log)
DEBUG 2023-04-14 17:43:03,545 on stmt: $72call_method.23 = call $68load_method.21(absel, func=$68load_method.21, args=[Var(absel, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,545 on stmt: $74binary_add.24 = acc + $72call_method.23
DEBUG 2023-04-14 17:43:03,545 find_def var='acc' stmt=$74binary_add.24 = acc + $72call_method.23
DEBUG 2023-04-14 17:43:03,545 find_def_from_top label 24
DEBUG 2023-04-14 17:43:03,545 idom 22 from label 24
DEBUG 2023-04-14 17:43:03,545 find_def_from_bottom label 22
DEBUG 2023-04-14 17:43:03,545 find_def_from_top label 22
DEBUG 2023-04-14 17:43:03,545 insert phi node acc.2 = phi(incoming_values=[], incoming_blocks=[]) at 22
DEBUG 2023-04-14 17:43:03,545 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:03,545 incoming_def acc = const(float, 0.0)
DEBUG 2023-04-14 17:43:03,545 find_def_from_bottom label 24
DEBUG 2023-04-14 17:43:03,545 incoming_def acc.1 = $74binary_add.24
DEBUG 2023-04-14 17:43:03,545 replaced with: $74binary_add.24 = acc.2 + $72call_method.23
DEBUG 2023-04-14 17:43:03,545 on stmt: acc.1 = $74binary_add.24
DEBUG 2023-04-14 17:43:03,545 on stmt: jump 22
DEBUG 2023-04-14 17:43:03,545 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:03,545 Running <numba.core.ssa._FixSSAVars object at 0x0000026619BD1DF0>
DEBUG 2023-04-14 17:43:03,545 on stmt: $84build_tuple.2 = build_tuple(items=[Var(csgn, linalg.py:1934), Var(acc, linalg.py:1935)])
DEBUG 2023-04-14 17:43:03,545 find_def var='acc' stmt=$84build_tuple.2 = build_tuple(items=[Var(csgn, linalg.py:1934), Var(acc, linalg.py:1935)])
DEBUG 2023-04-14 17:43:03,545 find_def_from_top label 80
DEBUG 2023-04-14 17:43:03,545 idom 22 from label 80
DEBUG 2023-04-14 17:43:03,545 find_def_from_bottom label 22
DEBUG 2023-04-14 17:43:03,545 replaced with: $84build_tuple.2 = build_tuple(items=[Var(csgn, linalg.py:1934), Var(acc.2, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,545 on stmt: $86return_value.3 = cast(value=$84build_tuple.2)
DEBUG 2023-04-14 17:43:03,545 on stmt: return $86return_value.3
DEBUG 2023-04-14 17:43:03,545 Fix SSA violator on var csgn
DEBUG 2023-04-14 17:43:03,545 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:03,545 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619BD1760>
DEBUG 2023-04-14 17:43:03,545 on stmt: n = arg(0, name=n)
DEBUG 2023-04-14 17:43:03,545 on stmt: a = arg(1, name=a)
DEBUG 2023-04-14 17:43:03,545 on stmt: sgn = arg(2, name=sgn)
DEBUG 2023-04-14 17:43:03,545 on stmt: $const4.1 = const(complex, 0j)
DEBUG 2023-04-14 17:43:03,545 on stmt: csgn = sgn + $const4.1
DEBUG 2023-04-14 17:43:03,545 first assign: csgn
DEBUG 2023-04-14 17:43:03,545 replaced with: csgn = sgn + $const4.1
DEBUG 2023-04-14 17:43:03,545 on stmt: acc = const(float, 0.0)
DEBUG 2023-04-14 17:43:03,545 on stmt: $14load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:03,545 on stmt: $18call_function.6 = call $14load_global.4(n, func=$14load_global.4, args=[Var(n, linalg.py:1934)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,545 on stmt: $20get_iter.7 = getiter(value=$18call_function.6)
DEBUG 2023-04-14 17:43:03,545 on stmt: $phi22.0 = $20get_iter.7
DEBUG 2023-04-14 17:43:03,545 on stmt: jump 22
DEBUG 2023-04-14 17:43:03,545 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:03,545 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619BD1760>
DEBUG 2023-04-14 17:43:03,545 on stmt: acc.2 = phi(incoming_values=[Var(acc, linalg.py:1935), Var(acc.1, linalg.py:1939)], incoming_blocks=[0, 24])
DEBUG 2023-04-14 17:43:03,545 on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG 2023-04-14 17:43:03,545 on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:03,545 on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:03,545 on stmt: $phi24.1 = $22for_iter.2
DEBUG 2023-04-14 17:43:03,552 on stmt: branch $22for_iter.3, 24, 80
DEBUG 2023-04-14 17:43:03,552 ==== SSA block rewrite pass on 24
DEBUG 2023-04-14 17:43:03,552 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619BD1760>
DEBUG 2023-04-14 17:43:03,552 on stmt: k = $phi24.1
DEBUG 2023-04-14 17:43:03,552 on stmt: $26load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,552 on stmt: $28load_method.3 = getattr(value=$26load_global.2, attr=abs)
DEBUG 2023-04-14 17:43:03,552 on stmt: $36build_tuple.7 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,552 on stmt: $38binary_subscr.8 = getitem(value=a, index=$36build_tuple.7, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,552 on stmt: absel = call $28load_method.3($38binary_subscr.8, func=$28load_method.3, args=[Var($38binary_subscr.8, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,552 on stmt: $52build_tuple.14 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,552 on stmt: $54binary_subscr.15 = getitem(value=a, index=$52build_tuple.14, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,552 on stmt: $58binary_true_divide.17 = $54binary_subscr.15 / absel
DEBUG 2023-04-14 17:43:03,552 on stmt: $60binary_multiply.18 = csgn * $58binary_true_divide.17
DEBUG 2023-04-14 17:43:03,552 on stmt: csgn = $60binary_multiply.18
DEBUG 2023-04-14 17:43:03,552 replaced with: csgn.1 = $60binary_multiply.18
DEBUG 2023-04-14 17:43:03,552 on stmt: $66load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,552 on stmt: $68load_method.21 = getattr(value=$66load_global.20, attr=log)
DEBUG 2023-04-14 17:43:03,552 on stmt: $72call_method.23 = call $68load_method.21(absel, func=$68load_method.21, args=[Var(absel, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,552 on stmt: $74binary_add.24 = acc.2 + $72call_method.23
DEBUG 2023-04-14 17:43:03,552 on stmt: acc.1 = $74binary_add.24
DEBUG 2023-04-14 17:43:03,552 on stmt: jump 22
DEBUG 2023-04-14 17:43:03,552 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:03,552 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619BD1760>
DEBUG 2023-04-14 17:43:03,552 on stmt: $84build_tuple.2 = build_tuple(items=[Var(csgn, linalg.py:1934), Var(acc.2, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,552 on stmt: $86return_value.3 = cast(value=$84build_tuple.2)
DEBUG 2023-04-14 17:43:03,552 on stmt: return $86return_value.3
DEBUG 2023-04-14 17:43:03,552 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026619BD1CA0>],
             24: [<numba.core.ir.Assign object at 0x0000026619BCC130>]})
DEBUG 2023-04-14 17:43:03,552 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:03,552 Running <numba.core.ssa._FixSSAVars object at 0x0000026619BD1F10>
DEBUG 2023-04-14 17:43:03,552 on stmt: n = arg(0, name=n)
DEBUG 2023-04-14 17:43:03,552 on stmt: a = arg(1, name=a)
DEBUG 2023-04-14 17:43:03,552 on stmt: sgn = arg(2, name=sgn)
DEBUG 2023-04-14 17:43:03,552 on stmt: $const4.1 = const(complex, 0j)
DEBUG 2023-04-14 17:43:03,552 on stmt: csgn = sgn + $const4.1
DEBUG 2023-04-14 17:43:03,552 on stmt: acc = const(float, 0.0)
DEBUG 2023-04-14 17:43:03,552 on stmt: $14load_global.4 = global(range: <class 'range'>)
DEBUG 2023-04-14 17:43:03,552 on stmt: $18call_function.6 = call $14load_global.4(n, func=$14load_global.4, args=[Var(n, linalg.py:1934)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,552 on stmt: $20get_iter.7 = getiter(value=$18call_function.6)
DEBUG 2023-04-14 17:43:03,552 on stmt: $phi22.0 = $20get_iter.7
DEBUG 2023-04-14 17:43:03,552 on stmt: jump 22
DEBUG 2023-04-14 17:43:03,552 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:03,554 Running <numba.core.ssa._FixSSAVars object at 0x0000026619BD1F10>
DEBUG 2023-04-14 17:43:03,554 on stmt: acc.2 = phi(incoming_values=[Var(acc, linalg.py:1935), Var(acc.1, linalg.py:1939)], incoming_blocks=[0, 24])
DEBUG 2023-04-14 17:43:03,554 on stmt: $22for_iter.1 = iternext(value=$phi22.0)
DEBUG 2023-04-14 17:43:03,554 on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:03,554 on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
DEBUG 2023-04-14 17:43:03,554 on stmt: $phi24.1 = $22for_iter.2
DEBUG 2023-04-14 17:43:03,554 on stmt: branch $22for_iter.3, 24, 80
DEBUG 2023-04-14 17:43:03,554 ==== SSA block rewrite pass on 24
DEBUG 2023-04-14 17:43:03,554 Running <numba.core.ssa._FixSSAVars object at 0x0000026619BD1F10>
DEBUG 2023-04-14 17:43:03,554 on stmt: k = $phi24.1
DEBUG 2023-04-14 17:43:03,554 on stmt: $26load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,554 on stmt: $28load_method.3 = getattr(value=$26load_global.2, attr=abs)
DEBUG 2023-04-14 17:43:03,554 on stmt: $36build_tuple.7 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,554 on stmt: $38binary_subscr.8 = getitem(value=a, index=$36build_tuple.7, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,554 on stmt: absel = call $28load_method.3($38binary_subscr.8, func=$28load_method.3, args=[Var($38binary_subscr.8, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,554 on stmt: $52build_tuple.14 = build_tuple(items=[Var(k, linalg.py:1936), Var(k, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,554 on stmt: $54binary_subscr.15 = getitem(value=a, index=$52build_tuple.14, fn=<built-in function getitem>)
DEBUG 2023-04-14 17:43:03,554 on stmt: $58binary_true_divide.17 = $54binary_subscr.15 / absel
DEBUG 2023-04-14 17:43:03,554 on stmt: $60binary_multiply.18 = csgn * $58binary_true_divide.17
DEBUG 2023-04-14 17:43:03,554 find_def var='csgn' stmt=$60binary_multiply.18 = csgn * $58binary_true_divide.17
DEBUG 2023-04-14 17:43:03,554 find_def_from_top label 24
DEBUG 2023-04-14 17:43:03,554 idom 22 from label 24
DEBUG 2023-04-14 17:43:03,554 find_def_from_bottom label 22
DEBUG 2023-04-14 17:43:03,554 find_def_from_top label 22
DEBUG 2023-04-14 17:43:03,554 insert phi node csgn.2 = phi(incoming_values=[], incoming_blocks=[]) at 22
DEBUG 2023-04-14 17:43:03,554 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:03,554 incoming_def csgn = sgn + $const4.1
DEBUG 2023-04-14 17:43:03,554 find_def_from_bottom label 24
DEBUG 2023-04-14 17:43:03,554 incoming_def csgn.1 = $60binary_multiply.18
DEBUG 2023-04-14 17:43:03,554 replaced with: $60binary_multiply.18 = csgn.2 * $58binary_true_divide.17
DEBUG 2023-04-14 17:43:03,554 on stmt: csgn.1 = $60binary_multiply.18
DEBUG 2023-04-14 17:43:03,556 on stmt: $66load_global.20 = global(np: <module 'numpy' from 'C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
DEBUG 2023-04-14 17:43:03,556 on stmt: $68load_method.21 = getattr(value=$66load_global.20, attr=log)
DEBUG 2023-04-14 17:43:03,556 on stmt: $72call_method.23 = call $68load_method.21(absel, func=$68load_method.21, args=[Var(absel, linalg.py:1937)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,556 on stmt: $74binary_add.24 = acc.2 + $72call_method.23
DEBUG 2023-04-14 17:43:03,556 on stmt: acc.1 = $74binary_add.24
DEBUG 2023-04-14 17:43:03,556 on stmt: jump 22
DEBUG 2023-04-14 17:43:03,556 ==== SSA block rewrite pass on 80
DEBUG 2023-04-14 17:43:03,556 Running <numba.core.ssa._FixSSAVars object at 0x0000026619BD1F10>
DEBUG 2023-04-14 17:43:03,556 on stmt: $84build_tuple.2 = build_tuple(items=[Var(csgn, linalg.py:1934), Var(acc.2, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,556 find_def var='csgn' stmt=$84build_tuple.2 = build_tuple(items=[Var(csgn, linalg.py:1934), Var(acc.2, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,556 find_def_from_top label 80
DEBUG 2023-04-14 17:43:03,556 idom 22 from label 80
DEBUG 2023-04-14 17:43:03,556 find_def_from_bottom label 22
DEBUG 2023-04-14 17:43:03,556 replaced with: $84build_tuple.2 = build_tuple(items=[Var(csgn.2, linalg.py:1936), Var(acc.2, linalg.py:1936)])
DEBUG 2023-04-14 17:43:03,556 on stmt: $86return_value.3 = cast(value=$84build_tuple.2)
DEBUG 2023-04-14 17:43:03,556 on stmt: return $86return_value.3
DEBUG 2023-04-14 17:43:03,575 bytecode dump:
>          0	NOP(arg=None, lineno=1138)
           2	LOAD_GLOBAL(arg=0, lineno=1138)
           4	LOAD_METHOD(arg=1, lineno=1138)
           6	LOAD_FAST(arg=0, lineno=1138)
           8	LOAD_ATTR(arg=2, lineno=1138)
          10	LOAD_FAST(arg=0, lineno=1138)
          12	LOAD_ATTR(arg=3, lineno=1138)
          14	CALL_METHOD(arg=2, lineno=1138)
          16	RETURN_VALUE(arg=None, lineno=1138)
DEBUG 2023-04-14 17:43:03,575 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,575 stack: []
DEBUG 2023-04-14 17:43:03,575 dispatch pc=0, inst=NOP(arg=None, lineno=1138)
DEBUG 2023-04-14 17:43:03,575 stack []
DEBUG 2023-04-14 17:43:03,575 dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1138)
DEBUG 2023-04-14 17:43:03,575 stack []
DEBUG 2023-04-14 17:43:03,575 dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=1138)
DEBUG 2023-04-14 17:43:03,575 stack ['$2load_global.0']
DEBUG 2023-04-14 17:43:03,575 dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1138)
DEBUG 2023-04-14 17:43:03,580 stack ['$4load_method.1']
DEBUG 2023-04-14 17:43:03,580 dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=1138)
DEBUG 2023-04-14 17:43:03,580 stack ['$4load_method.1', '$z6.2']
DEBUG 2023-04-14 17:43:03,580 dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=1138)
DEBUG 2023-04-14 17:43:03,580 stack ['$4load_method.1', '$8load_attr.3']
DEBUG 2023-04-14 17:43:03,580 dispatch pc=12, inst=LOAD_ATTR(arg=3, lineno=1138)
DEBUG 2023-04-14 17:43:03,580 stack ['$4load_method.1', '$8load_attr.3', '$z10.4']
DEBUG 2023-04-14 17:43:03,580 dispatch pc=14, inst=CALL_METHOD(arg=2, lineno=1138)
DEBUG 2023-04-14 17:43:03,580 stack ['$4load_method.1', '$8load_attr.3', '$12load_attr.5']
DEBUG 2023-04-14 17:43:03,580 dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=1138)
DEBUG 2023-04-14 17:43:03,580 stack ['$14call_method.6']
DEBUG 2023-04-14 17:43:03,580 end state. edges=[]
DEBUG 2023-04-14 17:43:03,580 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,580 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,580 defmap: {}
DEBUG 2023-04-14 17:43:03,580 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,580 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,580 keep phismap: {}
DEBUG 2023-04-14 17:43:03,580 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:03,580 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,580 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$z6.2'}), (8, {'item': '$z6.2', 'res': '$8load_attr.3'}), (10, {'res': '$z10.4'}), (12, {'item': '$z10.4', 'res': '$12load_attr.5'}), (14, {'func': '$4load_method.1', 'args': ['$8load_attr.3', '$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'retval': '$14call_method.6', 'castval': '$16return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,580 label 0:
    z = arg(0, name=z)                       ['z']
    $2load_global.0 = global(math: <module 'math' (built-in)>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=hypot) ['$2load_global.0', '$4load_method.1']
    $8load_attr.3 = getattr(value=z, attr=real) ['$8load_attr.3', 'z']
    $12load_attr.5 = getattr(value=z, attr=imag) ['$12load_attr.5', 'z']
    $14call_method.6 = call $4load_method.1($8load_attr.3, $12load_attr.5, func=$4load_method.1, args=[Var($8load_attr.3, numbers.py:1138), Var($12load_attr.5, numbers.py:1138)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_attr.5', '$14call_method.6', '$4load_method.1', '$8load_attr.3']
    $16return_value.7 = cast(value=$14call_method.6) ['$14call_method.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

DEBUG 2023-04-14 17:43:03,586 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,586 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619C10250>
DEBUG 2023-04-14 17:43:03,586 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:03,586 on stmt: $2load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:03,586 on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=hypot)
DEBUG 2023-04-14 17:43:03,586 on stmt: $8load_attr.3 = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:03,586 on stmt: $12load_attr.5 = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:03,586 on stmt: $14call_method.6 = call $4load_method.1($8load_attr.3, $12load_attr.5, func=$4load_method.1, args=[Var($8load_attr.3, numbers.py:1138), Var($12load_attr.5, numbers.py:1138)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,586 on stmt: $16return_value.7 = cast(value=$14call_method.6)
DEBUG 2023-04-14 17:43:03,586 on stmt: return $16return_value.7
DEBUG 2023-04-14 17:43:03,586 defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x0000026619B72370>],
             '$14call_method.6': [<numba.core.ir.Assign object at 0x0000026619B72580>],
             '$16return_value.7': [<numba.core.ir.Assign object at 0x0000026619B72670>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000026619B77C70>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000026619B77DF0>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x0000026619B720D0>],
             'z': [<numba.core.ir.Assign object at 0x0000026619B776D0>]})
DEBUG 2023-04-14 17:43:03,586 SSA violators set()
DEBUG 2023-04-14 17:43:03,595 bytecode dump:
>          0	NOP(arg=None, lineno=371)
           2	LOAD_DEREF(arg=0, lineno=371)
           4	LOAD_FAST(arg=0, lineno=371)
           6	LOAD_FAST(arg=1, lineno=371)
           8	CALL_FUNCTION(arg=2, lineno=371)
          10	RETURN_VALUE(arg=None, lineno=371)
DEBUG 2023-04-14 17:43:03,596 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,596 stack: []
DEBUG 2023-04-14 17:43:03,596 dispatch pc=0, inst=NOP(arg=None, lineno=371)
DEBUG 2023-04-14 17:43:03,596 stack []
DEBUG 2023-04-14 17:43:03,596 dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=371)
DEBUG 2023-04-14 17:43:03,596 stack []
DEBUG 2023-04-14 17:43:03,596 dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=371)
DEBUG 2023-04-14 17:43:03,596 stack ['$2load_deref.0']
DEBUG 2023-04-14 17:43:03,596 dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=371)
DEBUG 2023-04-14 17:43:03,596 stack ['$2load_deref.0', '$x4.1']
DEBUG 2023-04-14 17:43:03,596 dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=371)
DEBUG 2023-04-14 17:43:03,596 stack ['$2load_deref.0', '$x4.1', '$y6.2']
DEBUG 2023-04-14 17:43:03,596 dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=371)
DEBUG 2023-04-14 17:43:03,596 stack ['$8call_function.3']
DEBUG 2023-04-14 17:43:03,596 end state. edges=[]
DEBUG 2023-04-14 17:43:03,596 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,596 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,596 defmap: {}
DEBUG 2023-04-14 17:43:03,596 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,596 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,596 keep phismap: {}
DEBUG 2023-04-14 17:43:03,596 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:03,596 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,596 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$y6.2'}), (8, {'func': '$2load_deref.0', 'args': ['$x4.1', '$y6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,596 label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_deref.0 = freevar(plat_hypot: ExternalFunction(_hypot)) ['$2load_deref.0']
    $8call_function.3 = call $2load_deref.0(x, y, func=$2load_deref.0, args=[Var(x, mathimpl.py:371), Var(y, mathimpl.py:371)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$8call_function.3', 'x', 'y']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

DEBUG 2023-04-14 17:43:03,601 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,601 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619A96070>
DEBUG 2023-04-14 17:43:03,601 on stmt: x = arg(0, name=x)
DEBUG 2023-04-14 17:43:03,601 on stmt: y = arg(1, name=y)
DEBUG 2023-04-14 17:43:03,601 on stmt: $2load_deref.0 = freevar(plat_hypot: ExternalFunction(_hypot))
DEBUG 2023-04-14 17:43:03,601 on stmt: $8call_function.3 = call $2load_deref.0(x, y, func=$2load_deref.0, args=[Var(x, mathimpl.py:371), Var(y, mathimpl.py:371)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,601 on stmt: $10return_value.4 = cast(value=$8call_function.3)
DEBUG 2023-04-14 17:43:03,601 on stmt: return $10return_value.4
DEBUG 2023-04-14 17:43:03,601 defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x0000026619B450D0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000026619B456A0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x0000026619B452B0>],
             'x': [<numba.core.ir.Assign object at 0x0000026619A96CA0>],
             'y': [<numba.core.ir.Assign object at 0x0000026619B593D0>]})
DEBUG 2023-04-14 17:43:03,601 SSA violators set()
DEBUG 2023-04-14 17:43:03,776 bytecode dump:
>          0	NOP(arg=None, lineno=1063)
           2	LOAD_FAST(arg=0, lineno=1063)
           4	LOAD_ATTR(arg=0, lineno=1063)
           6	STORE_FAST(arg=2, lineno=1063)
           8	LOAD_FAST(arg=0, lineno=1064)
          10	LOAD_ATTR(arg=1, lineno=1064)
          12	STORE_FAST(arg=3, lineno=1064)
          14	LOAD_FAST(arg=1, lineno=1065)
          16	LOAD_ATTR(arg=0, lineno=1065)
          18	STORE_FAST(arg=4, lineno=1065)
          20	LOAD_FAST(arg=1, lineno=1066)
          22	LOAD_ATTR(arg=1, lineno=1066)
          24	STORE_FAST(arg=5, lineno=1066)
          26	LOAD_FAST(arg=4, lineno=1067)
          28	POP_JUMP_IF_TRUE(arg=42, lineno=1067)
          30	LOAD_FAST(arg=5, lineno=1067)
          32	POP_JUMP_IF_TRUE(arg=42, lineno=1067)
          34	LOAD_GLOBAL(arg=2, lineno=1068)
          36	LOAD_CONST(arg=1, lineno=1068)
          38	CALL_FUNCTION(arg=1, lineno=1068)
          40	RAISE_VARARGS(arg=1, lineno=1068)
>         42	LOAD_GLOBAL(arg=3, lineno=1069)
          44	LOAD_FAST(arg=4, lineno=1069)
          46	CALL_FUNCTION(arg=1, lineno=1069)
          48	LOAD_GLOBAL(arg=3, lineno=1069)
          50	LOAD_FAST(arg=5, lineno=1069)
          52	CALL_FUNCTION(arg=1, lineno=1069)
          54	COMPARE_OP(arg=5, lineno=1069)
          56	POP_JUMP_IF_FALSE(arg=126, lineno=1069)
          58	LOAD_FAST(arg=4, lineno=1071)
          60	POP_JUMP_IF_TRUE(arg=72, lineno=1071)
          62	LOAD_GLOBAL(arg=4, lineno=1072)
          64	LOAD_GLOBAL(arg=5, lineno=1072)
          66	LOAD_GLOBAL(arg=5, lineno=1072)
          68	CALL_FUNCTION(arg=2, lineno=1072)
          70	RETURN_VALUE(arg=None, lineno=1072)
>         72	LOAD_FAST(arg=5, lineno=1073)
          74	LOAD_FAST(arg=4, lineno=1073)
          76	BINARY_TRUE_DIVIDE(arg=None, lineno=1073)
          78	STORE_FAST(arg=6, lineno=1073)
          80	LOAD_FAST(arg=4, lineno=1074)
          82	LOAD_FAST(arg=5, lineno=1074)
          84	LOAD_FAST(arg=6, lineno=1074)
          86	BINARY_MULTIPLY(arg=None, lineno=1074)
          88	BINARY_ADD(arg=None, lineno=1074)
          90	STORE_FAST(arg=7, lineno=1074)
          92	LOAD_GLOBAL(arg=4, lineno=1075)
          94	LOAD_FAST(arg=2, lineno=1076)
          96	LOAD_FAST(arg=3, lineno=1076)
          98	LOAD_FAST(arg=6, lineno=1076)
         100	BINARY_MULTIPLY(arg=None, lineno=1076)
         102	BINARY_ADD(arg=None, lineno=1076)
         104	LOAD_FAST(arg=7, lineno=1076)
         106	BINARY_TRUE_DIVIDE(arg=None, lineno=1076)
         108	LOAD_FAST(arg=3, lineno=1077)
         110	LOAD_FAST(arg=2, lineno=1077)
         112	LOAD_FAST(arg=6, lineno=1077)
         114	BINARY_MULTIPLY(arg=None, lineno=1077)
         116	BINARY_SUBTRACT(arg=None, lineno=1077)
         118	LOAD_FAST(arg=7, lineno=1077)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=1077)
         122	CALL_FUNCTION(arg=2, lineno=1075)
         124	RETURN_VALUE(arg=None, lineno=1075)
>        126	LOAD_FAST(arg=5, lineno=1080)
         128	POP_JUMP_IF_TRUE(arg=140, lineno=1080)
         130	LOAD_GLOBAL(arg=4, lineno=1081)
         132	LOAD_GLOBAL(arg=5, lineno=1081)
         134	LOAD_GLOBAL(arg=5, lineno=1081)
         136	CALL_FUNCTION(arg=2, lineno=1081)
         138	RETURN_VALUE(arg=None, lineno=1081)
>        140	LOAD_FAST(arg=4, lineno=1082)
         142	LOAD_FAST(arg=5, lineno=1082)
         144	BINARY_TRUE_DIVIDE(arg=None, lineno=1082)
         146	STORE_FAST(arg=6, lineno=1082)
         148	LOAD_FAST(arg=4, lineno=1083)
         150	LOAD_FAST(arg=6, lineno=1083)
         152	BINARY_MULTIPLY(arg=None, lineno=1083)
         154	LOAD_FAST(arg=5, lineno=1083)
         156	BINARY_ADD(arg=None, lineno=1083)
         158	STORE_FAST(arg=7, lineno=1083)
         160	LOAD_GLOBAL(arg=4, lineno=1084)
         162	LOAD_FAST(arg=0, lineno=1085)
         164	LOAD_ATTR(arg=0, lineno=1085)
         166	LOAD_FAST(arg=6, lineno=1085)
         168	BINARY_MULTIPLY(arg=None, lineno=1085)
         170	LOAD_FAST(arg=0, lineno=1085)
         172	LOAD_ATTR(arg=1, lineno=1085)
         174	BINARY_ADD(arg=None, lineno=1085)
         176	LOAD_FAST(arg=7, lineno=1085)
         178	BINARY_TRUE_DIVIDE(arg=None, lineno=1085)
         180	LOAD_FAST(arg=0, lineno=1086)
         182	LOAD_ATTR(arg=1, lineno=1086)
         184	LOAD_FAST(arg=6, lineno=1086)
         186	BINARY_MULTIPLY(arg=None, lineno=1086)
         188	LOAD_FAST(arg=0, lineno=1086)
         190	LOAD_ATTR(arg=0, lineno=1086)
         192	BINARY_SUBTRACT(arg=None, lineno=1086)
         194	LOAD_FAST(arg=7, lineno=1086)
         196	BINARY_TRUE_DIVIDE(arg=None, lineno=1086)
         198	CALL_FUNCTION(arg=2, lineno=1084)
         200	RETURN_VALUE(arg=None, lineno=1084)
         202	LOAD_CONST(arg=0, lineno=1084)
         204	RETURN_VALUE(arg=None, lineno=1084)
DEBUG 2023-04-14 17:43:03,776 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,776 stack: []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=0, inst=NOP(arg=None, lineno=1063)
DEBUG 2023-04-14 17:43:03,776 stack []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1063)
DEBUG 2023-04-14 17:43:03,776 stack []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=1063)
DEBUG 2023-04-14 17:43:03,776 stack ['$a2.0']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=6, inst=STORE_FAST(arg=2, lineno=1063)
DEBUG 2023-04-14 17:43:03,776 stack ['$4load_attr.1']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1064)
DEBUG 2023-04-14 17:43:03,776 stack []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=10, inst=LOAD_ATTR(arg=1, lineno=1064)
DEBUG 2023-04-14 17:43:03,776 stack ['$a8.2']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=12, inst=STORE_FAST(arg=3, lineno=1064)
DEBUG 2023-04-14 17:43:03,776 stack ['$10load_attr.3']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1065)
DEBUG 2023-04-14 17:43:03,776 stack []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=16, inst=LOAD_ATTR(arg=0, lineno=1065)
DEBUG 2023-04-14 17:43:03,776 stack ['$b14.4']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=18, inst=STORE_FAST(arg=4, lineno=1065)
DEBUG 2023-04-14 17:43:03,776 stack ['$16load_attr.5']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=1066)
DEBUG 2023-04-14 17:43:03,776 stack []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=22, inst=LOAD_ATTR(arg=1, lineno=1066)
DEBUG 2023-04-14 17:43:03,776 stack ['$b20.6']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=24, inst=STORE_FAST(arg=5, lineno=1066)
DEBUG 2023-04-14 17:43:03,776 stack ['$22load_attr.7']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=1067)
DEBUG 2023-04-14 17:43:03,776 stack []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=28, inst=POP_JUMP_IF_TRUE(arg=42, lineno=1067)
DEBUG 2023-04-14 17:43:03,776 stack ['$breal26.8']
DEBUG 2023-04-14 17:43:03,776 end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,776 pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,776 stack: []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=30, inst=LOAD_FAST(arg=5, lineno=1067)
DEBUG 2023-04-14 17:43:03,776 stack []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=32, inst=POP_JUMP_IF_TRUE(arg=42, lineno=1067)
DEBUG 2023-04-14 17:43:03,776 stack ['$bimag30.0']
DEBUG 2023-04-14 17:43:03,776 end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,776 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,776 stack: []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=42, inst=LOAD_GLOBAL(arg=3, lineno=1069)
DEBUG 2023-04-14 17:43:03,776 stack []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1069)
DEBUG 2023-04-14 17:43:03,776 stack ['$42load_global.0']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=46, inst=CALL_FUNCTION(arg=1, lineno=1069)
DEBUG 2023-04-14 17:43:03,776 stack ['$42load_global.0', '$breal44.1']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=48, inst=LOAD_GLOBAL(arg=3, lineno=1069)
DEBUG 2023-04-14 17:43:03,776 stack ['$46call_function.2']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=1069)
DEBUG 2023-04-14 17:43:03,776 stack ['$46call_function.2', '$48load_global.3']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=52, inst=CALL_FUNCTION(arg=1, lineno=1069)
DEBUG 2023-04-14 17:43:03,776 stack ['$46call_function.2', '$48load_global.3', '$bimag50.4']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=54, inst=COMPARE_OP(arg=5, lineno=1069)
DEBUG 2023-04-14 17:43:03,776 stack ['$46call_function.2', '$52call_function.5']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=126, lineno=1069)
DEBUG 2023-04-14 17:43:03,776 stack ['$54compare_op.6']
DEBUG 2023-04-14 17:43:03,776 end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=126, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,776 pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=42 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,776 stack: []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=34, inst=LOAD_GLOBAL(arg=2, lineno=1068)
DEBUG 2023-04-14 17:43:03,776 stack []
DEBUG 2023-04-14 17:43:03,776 dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1068)
DEBUG 2023-04-14 17:43:03,776 stack ['$34load_global.0']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=38, inst=CALL_FUNCTION(arg=1, lineno=1068)
DEBUG 2023-04-14 17:43:03,776 stack ['$34load_global.0', '$const36.1']
DEBUG 2023-04-14 17:43:03,776 dispatch pc=40, inst=RAISE_VARARGS(arg=1, lineno=1068)
DEBUG 2023-04-14 17:43:03,776 stack ['$38call_function.2']
DEBUG 2023-04-14 17:43:03,776 end state. edges=[]
DEBUG 2023-04-14 17:43:03,781 pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,781 pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,781 stack: []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=58, inst=LOAD_FAST(arg=4, lineno=1071)
DEBUG 2023-04-14 17:43:03,781 stack []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=60, inst=POP_JUMP_IF_TRUE(arg=72, lineno=1071)
DEBUG 2023-04-14 17:43:03,781 stack ['$breal58.0']
DEBUG 2023-04-14 17:43:03,781 end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,781 pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,781 stack: []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=126, inst=LOAD_FAST(arg=5, lineno=1080)
DEBUG 2023-04-14 17:43:03,781 stack []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=128, inst=POP_JUMP_IF_TRUE(arg=140, lineno=1080)
DEBUG 2023-04-14 17:43:03,781 stack ['$bimag126.0']
DEBUG 2023-04-14 17:43:03,781 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0), Edge(pc=140, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:03,781 pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=72 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,781 stack: []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=62, inst=LOAD_GLOBAL(arg=4, lineno=1072)
DEBUG 2023-04-14 17:43:03,781 stack []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=64, inst=LOAD_GLOBAL(arg=5, lineno=1072)
DEBUG 2023-04-14 17:43:03,781 stack ['$62load_global.0']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=66, inst=LOAD_GLOBAL(arg=5, lineno=1072)
DEBUG 2023-04-14 17:43:03,781 stack ['$62load_global.0', '$64load_global.1']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=68, inst=CALL_FUNCTION(arg=2, lineno=1072)
DEBUG 2023-04-14 17:43:03,781 stack ['$62load_global.0', '$64load_global.1', '$66load_global.2']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=70, inst=RETURN_VALUE(arg=None, lineno=1072)
DEBUG 2023-04-14 17:43:03,781 stack ['$68call_function.3']
DEBUG 2023-04-14 17:43:03,781 end state. edges=[]
DEBUG 2023-04-14 17:43:03,781 pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,781 stack: []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=1073)
DEBUG 2023-04-14 17:43:03,781 stack []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=1073)
DEBUG 2023-04-14 17:43:03,781 stack ['$bimag72.0']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=76, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1073)
DEBUG 2023-04-14 17:43:03,781 stack ['$bimag72.0', '$breal74.1']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=78, inst=STORE_FAST(arg=6, lineno=1073)
DEBUG 2023-04-14 17:43:03,781 stack ['$76binary_true_divide.2']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=1074)
DEBUG 2023-04-14 17:43:03,781 stack []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=1074)
DEBUG 2023-04-14 17:43:03,781 stack ['$breal80.3']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=84, inst=LOAD_FAST(arg=6, lineno=1074)
DEBUG 2023-04-14 17:43:03,781 stack ['$breal80.3', '$bimag82.4']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=86, inst=BINARY_MULTIPLY(arg=None, lineno=1074)
DEBUG 2023-04-14 17:43:03,781 stack ['$breal80.3', '$bimag82.4', '$ratio84.5']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1074)
DEBUG 2023-04-14 17:43:03,781 stack ['$breal80.3', '$86binary_multiply.6']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=90, inst=STORE_FAST(arg=7, lineno=1074)
DEBUG 2023-04-14 17:43:03,781 stack ['$88binary_add.7']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=92, inst=LOAD_GLOBAL(arg=4, lineno=1075)
DEBUG 2023-04-14 17:43:03,781 stack []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=1076)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1076)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$areal94.9']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=98, inst=LOAD_FAST(arg=6, lineno=1076)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$areal94.9', '$aimag96.10']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=100, inst=BINARY_MULTIPLY(arg=None, lineno=1076)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$areal94.9', '$aimag96.10', '$ratio98.11']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=102, inst=BINARY_ADD(arg=None, lineno=1076)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$areal94.9', '$100binary_multiply.12']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=104, inst=LOAD_FAST(arg=7, lineno=1076)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$102binary_add.13']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=106, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1076)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$102binary_add.13', '$denom104.14']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=108, inst=LOAD_FAST(arg=3, lineno=1077)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$106binary_true_divide.15']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=1077)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=112, inst=LOAD_FAST(arg=6, lineno=1077)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$areal110.17']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=114, inst=BINARY_MULTIPLY(arg=None, lineno=1077)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$areal110.17', '$ratio112.18']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=116, inst=BINARY_SUBTRACT(arg=None, lineno=1077)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$106binary_true_divide.15', '$aimag108.16', '$114binary_multiply.19']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=1077)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$106binary_true_divide.15', '$116binary_subtract.20']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1077)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$106binary_true_divide.15', '$116binary_subtract.20', '$denom118.21']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=122, inst=CALL_FUNCTION(arg=2, lineno=1075)
DEBUG 2023-04-14 17:43:03,781 stack ['$92load_global.8', '$106binary_true_divide.15', '$120binary_true_divide.22']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=124, inst=RETURN_VALUE(arg=None, lineno=1075)
DEBUG 2023-04-14 17:43:03,781 stack ['$122call_function.23']
DEBUG 2023-04-14 17:43:03,781 end state. edges=[]
DEBUG 2023-04-14 17:43:03,781 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,781 stack: []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=130, inst=LOAD_GLOBAL(arg=4, lineno=1081)
DEBUG 2023-04-14 17:43:03,781 stack []
DEBUG 2023-04-14 17:43:03,781 dispatch pc=132, inst=LOAD_GLOBAL(arg=5, lineno=1081)
DEBUG 2023-04-14 17:43:03,781 stack ['$130load_global.0']
DEBUG 2023-04-14 17:43:03,781 dispatch pc=134, inst=LOAD_GLOBAL(arg=5, lineno=1081)
DEBUG 2023-04-14 17:43:03,781 stack ['$130load_global.0', '$132load_global.1']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=136, inst=CALL_FUNCTION(arg=2, lineno=1081)
DEBUG 2023-04-14 17:43:03,785 stack ['$130load_global.0', '$132load_global.1', '$134load_global.2']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=138, inst=RETURN_VALUE(arg=None, lineno=1081)
DEBUG 2023-04-14 17:43:03,785 stack ['$136call_function.3']
DEBUG 2023-04-14 17:43:03,785 end state. edges=[]
DEBUG 2023-04-14 17:43:03,785 pending: deque([State(pc_initial=140 nstack_initial=0)])
DEBUG 2023-04-14 17:43:03,785 stack: []
DEBUG 2023-04-14 17:43:03,785 dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=1082)
DEBUG 2023-04-14 17:43:03,785 stack []
DEBUG 2023-04-14 17:43:03,785 dispatch pc=142, inst=LOAD_FAST(arg=5, lineno=1082)
DEBUG 2023-04-14 17:43:03,785 stack ['$breal140.0']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=144, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1082)
DEBUG 2023-04-14 17:43:03,785 stack ['$breal140.0', '$bimag142.1']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=146, inst=STORE_FAST(arg=6, lineno=1082)
DEBUG 2023-04-14 17:43:03,785 stack ['$144binary_true_divide.2']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=1083)
DEBUG 2023-04-14 17:43:03,785 stack []
DEBUG 2023-04-14 17:43:03,785 dispatch pc=150, inst=LOAD_FAST(arg=6, lineno=1083)
DEBUG 2023-04-14 17:43:03,785 stack ['$breal148.3']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=152, inst=BINARY_MULTIPLY(arg=None, lineno=1083)
DEBUG 2023-04-14 17:43:03,785 stack ['$breal148.3', '$ratio150.4']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=154, inst=LOAD_FAST(arg=5, lineno=1083)
DEBUG 2023-04-14 17:43:03,785 stack ['$152binary_multiply.5']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=156, inst=BINARY_ADD(arg=None, lineno=1083)
DEBUG 2023-04-14 17:43:03,785 stack ['$152binary_multiply.5', '$bimag154.6']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=158, inst=STORE_FAST(arg=7, lineno=1083)
DEBUG 2023-04-14 17:43:03,785 stack ['$156binary_add.7']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=160, inst=LOAD_GLOBAL(arg=4, lineno=1084)
DEBUG 2023-04-14 17:43:03,785 stack []
DEBUG 2023-04-14 17:43:03,785 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=1085)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=164, inst=LOAD_ATTR(arg=0, lineno=1085)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$a162.9']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=166, inst=LOAD_FAST(arg=6, lineno=1085)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$164load_attr.10']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=168, inst=BINARY_MULTIPLY(arg=None, lineno=1085)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$164load_attr.10', '$ratio166.11']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=170, inst=LOAD_FAST(arg=0, lineno=1085)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$168binary_multiply.12']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=172, inst=LOAD_ATTR(arg=1, lineno=1085)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$168binary_multiply.12', '$a170.13']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=174, inst=BINARY_ADD(arg=None, lineno=1085)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$168binary_multiply.12', '$172load_attr.14']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=176, inst=LOAD_FAST(arg=7, lineno=1085)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$174binary_add.15']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=178, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1085)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$174binary_add.15', '$denom176.16']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=180, inst=LOAD_FAST(arg=0, lineno=1086)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$178binary_true_divide.17']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=182, inst=LOAD_ATTR(arg=1, lineno=1086)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$178binary_true_divide.17', '$a180.18']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=184, inst=LOAD_FAST(arg=6, lineno=1086)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$178binary_true_divide.17', '$182load_attr.19']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=186, inst=BINARY_MULTIPLY(arg=None, lineno=1086)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$178binary_true_divide.17', '$182load_attr.19', '$ratio184.20']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=188, inst=LOAD_FAST(arg=0, lineno=1086)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=190, inst=LOAD_ATTR(arg=0, lineno=1086)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21', '$a188.22']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=192, inst=BINARY_SUBTRACT(arg=None, lineno=1086)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$178binary_true_divide.17', '$186binary_multiply.21', '$190load_attr.23']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1086)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$178binary_true_divide.17', '$192binary_subtract.24']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=196, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1086)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$178binary_true_divide.17', '$192binary_subtract.24', '$denom194.25']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=198, inst=CALL_FUNCTION(arg=2, lineno=1084)
DEBUG 2023-04-14 17:43:03,785 stack ['$160load_global.8', '$178binary_true_divide.17', '$196binary_true_divide.26']
DEBUG 2023-04-14 17:43:03,785 dispatch pc=200, inst=RETURN_VALUE(arg=None, lineno=1084)
DEBUG 2023-04-14 17:43:03,785 stack ['$198call_function.27']
DEBUG 2023-04-14 17:43:03,785 end state. edges=[]
DEBUG 2023-04-14 17:43:03,785 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:03,785 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=126 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:03,785 defmap: {}
DEBUG 2023-04-14 17:43:03,785 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,785 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:03,785 keep phismap: {}
DEBUG 2023-04-14 17:43:03,785 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:03,785 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:03,785 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$a8.2'}), (10, {'item': '$a8.2', 'res': '$10load_attr.3'}), (12, {'value': '$10load_attr.3'}), (14, {'res': '$b14.4'}), (16, {'item': '$b14.4', 'res': '$16load_attr.5'}), (18, {'value': '$16load_attr.5'}), (20, {'res': '$b20.6'}), (22, {'item': '$b20.6', 'res': '$22load_attr.7'}), (24, {'value': '$22load_attr.7'}), (26, {'res': '$breal26.8'}), (28, {'pred': '$breal26.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 42: ()})
DEBUG 2023-04-14 17:43:03,785 block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$bimag30.0'}), (32, {'pred': '$bimag30.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 42: ()})
DEBUG 2023-04-14 17:43:03,785 block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_global.0'}), (36, {'res': '$const36.1'}), (38, {'func': '$34load_global.0', 'args': ['$const36.1'], 'res': '$38call_function.2'}), (40, {'exc': '$38call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,785 block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_global.0'}), (44, {'res': '$breal44.1'}), (46, {'func': '$42load_global.0', 'args': ['$breal44.1'], 'res': '$46call_function.2'}), (48, {'res': '$48load_global.3'}), (50, {'res': '$bimag50.4'}), (52, {'func': '$48load_global.3', 'args': ['$bimag50.4'], 'res': '$52call_function.5'}), (54, {'lhs': '$46call_function.2', 'rhs': '$52call_function.5', 'res': '$54compare_op.6'}), (56, {'pred': '$54compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 126: ()})
DEBUG 2023-04-14 17:43:03,785 block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$breal58.0'}), (60, {'pred': '$breal58.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 72: ()})
DEBUG 2023-04-14 17:43:03,785 block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$62load_global.0'}), (64, {'res': '$64load_global.1'}), (66, {'res': '$66load_global.2'}), (68, {'func': '$62load_global.0', 'args': ['$64load_global.1', '$66load_global.2'], 'res': '$68call_function.3'}), (70, {'retval': '$68call_function.3', 'castval': '$70return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,785 block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$bimag72.0'}), (74, {'res': '$breal74.1'}), (76, {'lhs': '$bimag72.0', 'rhs': '$breal74.1', 'res': '$76binary_true_divide.2'}), (78, {'value': '$76binary_true_divide.2'}), (80, {'res': '$breal80.3'}), (82, {'res': '$bimag82.4'}), (84, {'res': '$ratio84.5'}), (86, {'lhs': '$bimag82.4', 'rhs': '$ratio84.5', 'res': '$86binary_multiply.6'}), (88, {'lhs': '$breal80.3', 'rhs': '$86binary_multiply.6', 'res': '$88binary_add.7'}), (90, {'value': '$88binary_add.7'}), (92, {'res': '$92load_global.8'}), (94, {'res': '$areal94.9'}), (96, {'res': '$aimag96.10'}), (98, {'res': '$ratio98.11'}), (100, {'lhs': '$aimag96.10', 'rhs': '$ratio98.11', 'res': '$100binary_multiply.12'}), (102, {'lhs': '$areal94.9', 'rhs': '$100binary_multiply.12', 'res': '$102binary_add.13'}), (104, {'res': '$denom104.14'}), (106, {'lhs': '$102binary_add.13', 'rhs': '$denom104.14', 'res': '$106binary_true_divide.15'}), (108, {'res': '$aimag108.16'}), (110, {'res': '$areal110.17'}), (112, {'res': '$ratio112.18'}), (114, {'lhs': '$areal110.17', 'rhs': '$ratio112.18', 'res': '$114binary_multiply.19'}), (116, {'lhs': '$aimag108.16', 'rhs': '$114binary_multiply.19', 'res': '$116binary_subtract.20'}), (118, {'res': '$denom118.21'}), (120, {'lhs': '$116binary_subtract.20', 'rhs': '$denom118.21', 'res': '$120binary_true_divide.22'}), (122, {'func': '$92load_global.8', 'args': ['$106binary_true_divide.15', '$120binary_true_divide.22'], 'res': '$122call_function.23'}), (124, {'retval': '$122call_function.23', 'castval': '$124return_value.24'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,785 block_infos State(pc_initial=126 nstack_initial=0):
AdaptBlockInfo(insts=((126, {'res': '$bimag126.0'}), (128, {'pred': '$bimag126.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: (), 140: ()})
DEBUG 2023-04-14 17:43:03,785 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$130load_global.0'}), (132, {'res': '$132load_global.1'}), (134, {'res': '$134load_global.2'}), (136, {'func': '$130load_global.0', 'args': ['$132load_global.1', '$134load_global.2'], 'res': '$136call_function.3'}), (138, {'retval': '$136call_function.3', 'castval': '$138return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,785 block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$breal140.0'}), (142, {'res': '$bimag142.1'}), (144, {'lhs': '$breal140.0', 'rhs': '$bimag142.1', 'res': '$144binary_true_divide.2'}), (146, {'value': '$144binary_true_divide.2'}), (148, {'res': '$breal148.3'}), (150, {'res': '$ratio150.4'}), (152, {'lhs': '$breal148.3', 'rhs': '$ratio150.4', 'res': '$152binary_multiply.5'}), (154, {'res': '$bimag154.6'}), (156, {'lhs': '$152binary_multiply.5', 'rhs': '$bimag154.6', 'res': '$156binary_add.7'}), (158, {'value': '$156binary_add.7'}), (160, {'res': '$160load_global.8'}), (162, {'res': '$a162.9'}), (164, {'item': '$a162.9', 'res': '$164load_attr.10'}), (166, {'res': '$ratio166.11'}), (168, {'lhs': '$164load_attr.10', 'rhs': '$ratio166.11', 'res': '$168binary_multiply.12'}), (170, {'res': '$a170.13'}), (172, {'item': '$a170.13', 'res': '$172load_attr.14'}), (174, {'lhs': '$168binary_multiply.12', 'rhs': '$172load_attr.14', 'res': '$174binary_add.15'}), (176, {'res': '$denom176.16'}), (178, {'lhs': '$174binary_add.15', 'rhs': '$denom176.16', 'res': '$178binary_true_divide.17'}), (180, {'res': '$a180.18'}), (182, {'item': '$a180.18', 'res': '$182load_attr.19'}), (184, {'res': '$ratio184.20'}), (186, {'lhs': '$182load_attr.19', 'rhs': '$ratio184.20', 'res': '$186binary_multiply.21'}), (188, {'res': '$a188.22'}), (190, {'item': '$a188.22', 'res': '$190load_attr.23'}), (192, {'lhs': '$186binary_multiply.21', 'rhs': '$190load_attr.23', 'res': '$192binary_subtract.24'}), (194, {'res': '$denom194.25'}), (196, {'lhs': '$192binary_subtract.24', 'rhs': '$denom194.25', 'res': '$196binary_true_divide.26'}), (198, {'func': '$160load_global.8', 'args': ['$178binary_true_divide.17', '$196binary_true_divide.26'], 'res': '$198call_function.27'}), (200, {'retval': '$198call_function.27', 'castval': '$200return_value.28'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:03,790 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    areal = getattr(value=a, attr=real)      ['a', 'areal']
    aimag = getattr(value=a, attr=imag)      ['a', 'aimag']
    breal = getattr(value=b, attr=real)      ['b', 'breal']
    bimag = getattr(value=b, attr=imag)      ['b', 'bimag']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None) ['$28pred', 'bool28', 'breal']
    branch $28pred, 42, 30                   ['$28pred']
label 30:
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None) ['$32pred', 'bimag', 'bool32']
    branch $32pred, 42, 34                   ['$32pred']
label 34:
    $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$34load_global.0']
    $const36.1 = const(str, complex division by zero) ['$const36.1']
    $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_global.0', '$38call_function.2', '$const36.1']
    raise $38call_function.2                 ['$38call_function.2']
label 42:
    $42load_global.0 = global(abs: <built-in function abs>) ['$42load_global.0']
    $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.0', '$46call_function.2', 'breal']
    $48load_global.3 = global(abs: <built-in function abs>) ['$48load_global.3']
    $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.3', '$52call_function.5', 'bimag']
    $54compare_op.6 = $46call_function.2 >= $52call_function.5 ['$46call_function.2', '$52call_function.5', '$54compare_op.6']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.6', '$56pred', 'bool56']
    branch $56pred, 58, 126                  ['$56pred']
label 58:
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None) ['$60pred', 'bool60', 'breal']
    branch $60pred, 72, 62                   ['$60pred']
label 62:
    $62load_global.0 = global(complex: <class 'complex'>) ['$62load_global.0']
    $64load_global.1 = global(NAN: nan)      ['$64load_global.1']
    $66load_global.2 = global(NAN: nan)      ['$66load_global.2']
    $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None) ['$62load_global.0', '$64load_global.1', '$66load_global.2', '$68call_function.3']
    $70return_value.4 = cast(value=$68call_function.3) ['$68call_function.3', '$70return_value.4']
    return $70return_value.4                 ['$70return_value.4']
label 72:
    ratio = bimag / breal                    ['bimag', 'breal', 'ratio']
    $86binary_multiply.6 = bimag * ratio     ['$86binary_multiply.6', 'bimag', 'ratio']
    denom = breal + $86binary_multiply.6     ['$86binary_multiply.6', 'breal', 'denom']
    $92load_global.8 = global(complex: <class 'complex'>) ['$92load_global.8']
    $100binary_multiply.12 = aimag * ratio   ['$100binary_multiply.12', 'aimag', 'ratio']
    $102binary_add.13 = areal + $100binary_multiply.12 ['$100binary_multiply.12', '$102binary_add.13', 'areal']
    $106binary_true_divide.15 = $102binary_add.13 / denom ['$102binary_add.13', '$106binary_true_divide.15', 'denom']
    $114binary_multiply.19 = areal * ratio   ['$114binary_multiply.19', 'areal', 'ratio']
    $116binary_subtract.20 = aimag - $114binary_multiply.19 ['$114binary_multiply.19', '$116binary_subtract.20', 'aimag']
    $120binary_true_divide.22 = $116binary_subtract.20 / denom ['$116binary_subtract.20', '$120binary_true_divide.22', 'denom']
    $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None) ['$106binary_true_divide.15', '$120binary_true_divide.22', '$122call_function.23', '$92load_global.8']
    $124return_value.24 = cast(value=$122call_function.23) ['$122call_function.23', '$124return_value.24']
    return $124return_value.24               ['$124return_value.24']
label 126:
    bool128 = global(bool: <class 'bool'>)   ['bool128']
    $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None) ['$128pred', 'bimag', 'bool128']
    branch $128pred, 140, 130                ['$128pred']
label 130:
    $130load_global.0 = global(complex: <class 'complex'>) ['$130load_global.0']
    $132load_global.1 = global(NAN: nan)     ['$132load_global.1']
    $134load_global.2 = global(NAN: nan)     ['$134load_global.2']
    $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None) ['$130load_global.0', '$132load_global.1', '$134load_global.2', '$136call_function.3']
    $138return_value.4 = cast(value=$136call_function.3) ['$136call_function.3', '$138return_value.4']
    return $138return_value.4                ['$138return_value.4']
label 140:
    ratio = breal / bimag                    ['bimag', 'breal', 'ratio']
    $152binary_multiply.5 = breal * ratio    ['$152binary_multiply.5', 'breal', 'ratio']
    denom = $152binary_multiply.5 + bimag    ['$152binary_multiply.5', 'bimag', 'denom']
    $160load_global.8 = global(complex: <class 'complex'>) ['$160load_global.8']
    $164load_attr.10 = getattr(value=a, attr=real) ['$164load_attr.10', 'a']
    $168binary_multiply.12 = $164load_attr.10 * ratio ['$164load_attr.10', '$168binary_multiply.12', 'ratio']
    $172load_attr.14 = getattr(value=a, attr=imag) ['$172load_attr.14', 'a']
    $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14 ['$168binary_multiply.12', '$172load_attr.14', '$174binary_add.15']
    $178binary_true_divide.17 = $174binary_add.15 / denom ['$174binary_add.15', '$178binary_true_divide.17', 'denom']
    $182load_attr.19 = getattr(value=a, attr=imag) ['$182load_attr.19', 'a']
    $186binary_multiply.21 = $182load_attr.19 * ratio ['$182load_attr.19', '$186binary_multiply.21', 'ratio']
    $190load_attr.23 = getattr(value=a, attr=real) ['$190load_attr.23', 'a']
    $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23 ['$186binary_multiply.21', '$190load_attr.23', '$192binary_subtract.24']
    $196binary_true_divide.26 = $192binary_subtract.24 / denom ['$192binary_subtract.24', '$196binary_true_divide.26', 'denom']
    $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.8', '$178binary_true_divide.17', '$196binary_true_divide.26', '$198call_function.27']
    $200return_value.28 = cast(value=$198call_function.27) ['$198call_function.27', '$200return_value.28']
    return $200return_value.28               ['$200return_value.28']

DEBUG 2023-04-14 17:43:03,804 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:03,804 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B01520>
DEBUG 2023-04-14 17:43:03,804 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,804 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:03,804 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,804 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,804 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2023-04-14 17:43:03,804 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2023-04-14 17:43:03,804 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,804 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,804 on stmt: branch $28pred, 42, 30
DEBUG 2023-04-14 17:43:03,804 ==== SSA block analysis pass on 30
DEBUG 2023-04-14 17:43:03,804 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B01520>
DEBUG 2023-04-14 17:43:03,804 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,804 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,805 on stmt: branch $32pred, 42, 34
DEBUG 2023-04-14 17:43:03,805 ==== SSA block analysis pass on 34
DEBUG 2023-04-14 17:43:03,805 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B01520>
DEBUG 2023-04-14 17:43:03,805 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:03,805 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2023-04-14 17:43:03,805 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,805 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2023-04-14 17:43:03,805 ==== SSA block analysis pass on 42
DEBUG 2023-04-14 17:43:03,805 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B01520>
DEBUG 2023-04-14 17:43:03,805 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:03,805 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,805 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:03,805 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,805 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2023-04-14 17:43:03,805 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,805 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,805 on stmt: branch $56pred, 58, 126
DEBUG 2023-04-14 17:43:03,806 ==== SSA block analysis pass on 58
DEBUG 2023-04-14 17:43:03,806 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B01520>
DEBUG 2023-04-14 17:43:03,806 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,806 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,806 on stmt: branch $60pred, 72, 62
DEBUG 2023-04-14 17:43:03,806 ==== SSA block analysis pass on 62
DEBUG 2023-04-14 17:43:03,806 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B01520>
DEBUG 2023-04-14 17:43:03,806 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,806 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,806 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,807 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,807 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2023-04-14 17:43:03,807 on stmt: return $70return_value.4
DEBUG 2023-04-14 17:43:03,807 ==== SSA block analysis pass on 72
DEBUG 2023-04-14 17:43:03,807 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B01520>
DEBUG 2023-04-14 17:43:03,807 on stmt: ratio = bimag / breal
DEBUG 2023-04-14 17:43:03,807 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:43:03,807 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:43:03,807 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,807 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:43:03,807 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2023-04-14 17:43:03,807 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:43:03,807 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:43:03,807 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2023-04-14 17:43:03,807 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:43:03,807 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,807 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2023-04-14 17:43:03,808 on stmt: return $124return_value.24
DEBUG 2023-04-14 17:43:03,808 ==== SSA block analysis pass on 126
DEBUG 2023-04-14 17:43:03,808 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B01520>
DEBUG 2023-04-14 17:43:03,808 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,808 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,808 on stmt: branch $128pred, 140, 130
DEBUG 2023-04-14 17:43:03,808 ==== SSA block analysis pass on 130
DEBUG 2023-04-14 17:43:03,808 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B01520>
DEBUG 2023-04-14 17:43:03,808 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,808 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,808 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,808 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,808 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2023-04-14 17:43:03,808 on stmt: return $138return_value.4
DEBUG 2023-04-14 17:43:03,808 ==== SSA block analysis pass on 140
DEBUG 2023-04-14 17:43:03,808 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619B01520>
DEBUG 2023-04-14 17:43:03,808 on stmt: ratio = breal / bimag
DEBUG 2023-04-14 17:43:03,808 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2023-04-14 17:43:03,808 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:43:03,808 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,809 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,809 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2023-04-14 17:43:03,809 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,809 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2023-04-14 17:43:03,809 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:43:03,809 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,809 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2023-04-14 17:43:03,809 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,809 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2023-04-14 17:43:03,809 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:43:03,809 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,809 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2023-04-14 17:43:03,809 on stmt: return $200return_value.28
DEBUG 2023-04-14 17:43:03,810 defs defaultdict(<class 'list'>,
            {'$100binary_multiply.12': [<numba.core.ir.Assign object at 0x0000026619A65A30>],
             '$102binary_add.13': [<numba.core.ir.Assign object at 0x0000026619ABC8B0>],
             '$106binary_true_divide.15': [<numba.core.ir.Assign object at 0x0000026619ABC1C0>],
             '$114binary_multiply.19': [<numba.core.ir.Assign object at 0x0000026619ABC610>],
             '$116binary_subtract.20': [<numba.core.ir.Assign object at 0x0000026619ABCD60>],
             '$120binary_true_divide.22': [<numba.core.ir.Assign object at 0x0000026619ABCAC0>],
             '$122call_function.23': [<numba.core.ir.Assign object at 0x0000026619ABCCA0>],
             '$124return_value.24': [<numba.core.ir.Assign object at 0x0000026619ABC280>],
             '$128pred': [<numba.core.ir.Assign object at 0x0000026619ABC490>],
             '$130load_global.0': [<numba.core.ir.Assign object at 0x0000026619AD2670>],
             '$132load_global.1': [<numba.core.ir.Assign object at 0x0000026619AD2550>],
             '$134load_global.2': [<numba.core.ir.Assign object at 0x0000026619AD2D00>],
             '$136call_function.3': [<numba.core.ir.Assign object at 0x0000026619AD2EB0>],
             '$138return_value.4': [<numba.core.ir.Assign object at 0x0000026619AD23D0>],
             '$152binary_multiply.5': [<numba.core.ir.Assign object at 0x0000026619AE33D0>],
             '$160load_global.8': [<numba.core.ir.Assign object at 0x0000026619AE3A00>],
             '$164load_attr.10': [<numba.core.ir.Assign object at 0x0000026619AE3CD0>],
             '$168binary_multiply.12': [<numba.core.ir.Assign object at 0x0000026619AE3B80>],
             '$172load_attr.14': [<numba.core.ir.Assign object at 0x0000026619AF1760>],
             '$174binary_add.15': [<numba.core.ir.Assign object at 0x0000026619AF1190>],
             '$178binary_true_divide.17': [<numba.core.ir.Assign object at 0x0000026619AF1AC0>],
             '$182load_attr.19': [<numba.core.ir.Assign object at 0x0000026619AF1670>],
             '$186binary_multiply.21': [<numba.core.ir.Assign object at 0x0000026619AF1EE0>],
             '$190load_attr.23': [<numba.core.ir.Assign object at 0x0000026619AF15E0>],
             '$192binary_subtract.24': [<numba.core.ir.Assign object at 0x0000026619AF1D30>],
             '$196binary_true_divide.26': [<numba.core.ir.Assign object at 0x0000026619A5AA60>],
             '$198call_function.27': [<numba.core.ir.Assign object at 0x0000026619A5A220>],
             '$200return_value.28': [<numba.core.ir.Assign object at 0x0000026619A5AEB0>],
             '$28pred': [<numba.core.ir.Assign object at 0x0000026619B63E50>],
             '$32pred': [<numba.core.ir.Assign object at 0x0000026619B63C70>],
             '$34load_global.0': [<numba.core.ir.Assign object at 0x0000026619B63A30>],
             '$38call_function.2': [<numba.core.ir.Assign object at 0x0000026619B63190>],
             '$42load_global.0': [<numba.core.ir.Assign object at 0x00000266198C3A60>],
             '$46call_function.2': [<numba.core.ir.Assign object at 0x0000026619A96220>],
             '$48load_global.3': [<numba.core.ir.Assign object at 0x0000026619A96DF0>],
             '$52call_function.5': [<numba.core.ir.Assign object at 0x0000026619A96100>],
             '$54compare_op.6': [<numba.core.ir.Assign object at 0x0000026619A96790>],
             '$56pred': [<numba.core.ir.Assign object at 0x0000026619A96580>],
             '$60pred': [<numba.core.ir.Assign object at 0x0000026619A78EE0>],
             '$62load_global.0': [<numba.core.ir.Assign object at 0x0000026619A783A0>],
             '$64load_global.1': [<numba.core.ir.Assign object at 0x0000026619A78A00>],
             '$66load_global.2': [<numba.core.ir.Assign object at 0x0000026619A78340>],
             '$68call_function.3': [<numba.core.ir.Assign object at 0x0000026619A6B1F0>],
             '$70return_value.4': [<numba.core.ir.Assign object at 0x0000026619B64DF0>],
             '$86binary_multiply.6': [<numba.core.ir.Assign object at 0x0000026619A55760>],
             '$92load_global.8': [<numba.core.ir.Assign object at 0x0000026619A55F70>],
             '$const36.1': [<numba.core.ir.Assign object at 0x0000026619B63E80>],
             'a': [<numba.core.ir.Assign object at 0x0000026619B643D0>],
             'aimag': [<numba.core.ir.Assign object at 0x0000026619B311F0>],
             'areal': [<numba.core.ir.Assign object at 0x0000026619B31250>],
             'b': [<numba.core.ir.Assign object at 0x0000026619B318E0>],
             'bimag': [<numba.core.ir.Assign object at 0x0000026619B31C40>],
             'bool128': [<numba.core.ir.Assign object at 0x0000026619A652B0>],
             'bool28': [<numba.core.ir.Assign object at 0x0000026619B63310>],
             'bool32': [<numba.core.ir.Assign object at 0x0000026619B63430>],
             'bool56': [<numba.core.ir.Assign object at 0x0000026619A96190>],
             'bool60': [<numba.core.ir.Assign object at 0x0000026619A78400>],
             'breal': [<numba.core.ir.Assign object at 0x0000026619B31FA0>],
             'denom': [<numba.core.ir.Assign object at 0x0000026619A551C0>,
                       <numba.core.ir.Assign object at 0x0000026619AE35B0>],
             'ratio': [<numba.core.ir.Assign object at 0x0000026619A55670>,
                       <numba.core.ir.Assign object at 0x0000026619AD2430>]})
DEBUG 2023-04-14 17:43:03,810 SSA violators {'ratio', 'denom'}
DEBUG 2023-04-14 17:43:03,810 Fix SSA violator on var ratio
DEBUG 2023-04-14 17:43:03,810 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:03,810 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,810 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,810 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:03,810 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,810 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,811 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2023-04-14 17:43:03,811 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2023-04-14 17:43:03,811 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,811 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,811 on stmt: branch $28pred, 42, 30
DEBUG 2023-04-14 17:43:03,811 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:03,811 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,811 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,811 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,811 on stmt: branch $32pred, 42, 34
DEBUG 2023-04-14 17:43:03,811 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:43:03,811 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,811 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:03,811 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2023-04-14 17:43:03,811 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,811 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2023-04-14 17:43:03,811 ==== SSA block rewrite pass on 42
DEBUG 2023-04-14 17:43:03,811 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,811 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:03,811 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,811 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:03,811 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,811 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2023-04-14 17:43:03,811 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,811 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,811 on stmt: branch $56pred, 58, 126
DEBUG 2023-04-14 17:43:03,811 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:03,811 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,811 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,811 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,811 on stmt: branch $60pred, 72, 62
DEBUG 2023-04-14 17:43:03,811 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:43:03,811 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,811 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,811 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,811 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,811 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,811 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2023-04-14 17:43:03,811 on stmt: return $70return_value.4
DEBUG 2023-04-14 17:43:03,811 ==== SSA block rewrite pass on 72
DEBUG 2023-04-14 17:43:03,811 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,811 on stmt: ratio = bimag / breal
DEBUG 2023-04-14 17:43:03,811 first assign: ratio
DEBUG 2023-04-14 17:43:03,811 replaced with: ratio = bimag / breal
DEBUG 2023-04-14 17:43:03,811 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:43:03,811 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:43:03,811 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,811 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:43:03,811 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2023-04-14 17:43:03,811 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:43:03,811 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:43:03,811 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2023-04-14 17:43:03,811 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:43:03,811 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,811 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2023-04-14 17:43:03,811 on stmt: return $124return_value.24
DEBUG 2023-04-14 17:43:03,811 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:43:03,811 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,811 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,811 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: branch $128pred, 140, 130
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,816 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,816 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2023-04-14 17:43:03,816 on stmt: return $138return_value.4
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 140
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: ratio = breal / bimag
DEBUG 2023-04-14 17:43:03,816 replaced with: ratio.1 = breal / bimag
DEBUG 2023-04-14 17:43:03,816 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2023-04-14 17:43:03,816 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:43:03,816 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,816 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2023-04-14 17:43:03,816 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,816 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2023-04-14 17:43:03,816 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:43:03,816 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,816 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2023-04-14 17:43:03,816 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,816 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2023-04-14 17:43:03,816 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:43:03,816 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2023-04-14 17:43:03,816 on stmt: return $200return_value.28
DEBUG 2023-04-14 17:43:03,816 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x0000026619B01A60>],
             140: [<numba.core.ir.Assign object at 0x0000026619B011F0>]})
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FixSSAVars object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,816 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:03,816 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,816 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,816 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2023-04-14 17:43:03,816 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2023-04-14 17:43:03,816 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: branch $28pred, 42, 30
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FixSSAVars object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: branch $32pred, 42, 34
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FixSSAVars object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2023-04-14 17:43:03,816 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 42
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FixSSAVars object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2023-04-14 17:43:03,816 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: branch $56pred, 58, 126
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FixSSAVars object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: branch $60pred, 72, 62
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FixSSAVars object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,816 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,816 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2023-04-14 17:43:03,816 on stmt: return $70return_value.4
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 72
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FixSSAVars object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: ratio = bimag / breal
DEBUG 2023-04-14 17:43:03,816 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:43:03,816 find_def var='ratio' stmt=$86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:43:03,816 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:43:03,816 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:43:03,816 find_def var='ratio' stmt=$100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:43:03,816 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2023-04-14 17:43:03,816 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:43:03,816 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:43:03,816 find_def var='ratio' stmt=$114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:43:03,816 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2023-04-14 17:43:03,816 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:43:03,816 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2023-04-14 17:43:03,816 on stmt: return $124return_value.24
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FixSSAVars object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: branch $128pred, 140, 130
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FixSSAVars object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,816 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,816 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2023-04-14 17:43:03,816 on stmt: return $138return_value.4
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 140
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FixSSAVars object at 0x0000026619AD2B80>
DEBUG 2023-04-14 17:43:03,816 on stmt: ratio.1 = breal / bimag
DEBUG 2023-04-14 17:43:03,816 on stmt: $152binary_multiply.5 = breal * ratio
DEBUG 2023-04-14 17:43:03,816 find_def var='ratio' stmt=$152binary_multiply.5 = breal * ratio
DEBUG 2023-04-14 17:43:03,816 replaced with: $152binary_multiply.5 = breal * ratio.1
DEBUG 2023-04-14 17:43:03,816 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:43:03,816 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,816 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2023-04-14 17:43:03,816 find_def var='ratio' stmt=$168binary_multiply.12 = $164load_attr.10 * ratio
DEBUG 2023-04-14 17:43:03,816 replaced with: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2023-04-14 17:43:03,816 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,816 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2023-04-14 17:43:03,816 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:43:03,816 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,816 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2023-04-14 17:43:03,816 find_def var='ratio' stmt=$186binary_multiply.21 = $182load_attr.19 * ratio
DEBUG 2023-04-14 17:43:03,816 replaced with: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2023-04-14 17:43:03,816 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,816 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2023-04-14 17:43:03,816 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:43:03,816 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2023-04-14 17:43:03,816 on stmt: return $200return_value.28
DEBUG 2023-04-14 17:43:03,816 Fix SSA violator on var denom
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2880>
DEBUG 2023-04-14 17:43:03,816 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,816 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:03,816 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,816 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,816 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2023-04-14 17:43:03,816 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2023-04-14 17:43:03,816 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: branch $28pred, 42, 30
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2880>
DEBUG 2023-04-14 17:43:03,816 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: branch $32pred, 42, 34
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2880>
DEBUG 2023-04-14 17:43:03,816 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2023-04-14 17:43:03,816 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 42
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2880>
DEBUG 2023-04-14 17:43:03,816 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2023-04-14 17:43:03,816 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: branch $56pred, 58, 126
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2880>
DEBUG 2023-04-14 17:43:03,816 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: branch $60pred, 72, 62
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2880>
DEBUG 2023-04-14 17:43:03,816 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,816 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,816 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,816 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,816 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2023-04-14 17:43:03,816 on stmt: return $70return_value.4
DEBUG 2023-04-14 17:43:03,816 ==== SSA block rewrite pass on 72
DEBUG 2023-04-14 17:43:03,816 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2880>
DEBUG 2023-04-14 17:43:03,816 on stmt: ratio = bimag / breal
DEBUG 2023-04-14 17:43:03,826 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:43:03,826 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:43:03,826 first assign: denom
DEBUG 2023-04-14 17:43:03,826 replaced with: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:43:03,826 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:43:03,826 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2023-04-14 17:43:03,826 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:43:03,826 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:43:03,826 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2023-04-14 17:43:03,826 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:43:03,826 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2023-04-14 17:43:03,826 on stmt: return $124return_value.24
DEBUG 2023-04-14 17:43:03,826 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:43:03,826 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2880>
DEBUG 2023-04-14 17:43:03,826 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: branch $128pred, 140, 130
DEBUG 2023-04-14 17:43:03,826 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:03,826 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2880>
DEBUG 2023-04-14 17:43:03,826 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,826 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,826 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2023-04-14 17:43:03,826 on stmt: return $138return_value.4
DEBUG 2023-04-14 17:43:03,826 ==== SSA block rewrite pass on 140
DEBUG 2023-04-14 17:43:03,826 Running <numba.core.ssa._FreshVarHandler object at 0x0000026619AD2880>
DEBUG 2023-04-14 17:43:03,826 on stmt: ratio.1 = breal / bimag
DEBUG 2023-04-14 17:43:03,826 on stmt: $152binary_multiply.5 = breal * ratio.1
DEBUG 2023-04-14 17:43:03,826 on stmt: denom = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:43:03,826 replaced with: denom.1 = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:43:03,826 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,826 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2023-04-14 17:43:03,826 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,826 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2023-04-14 17:43:03,826 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:43:03,826 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,826 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2023-04-14 17:43:03,826 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,826 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2023-04-14 17:43:03,826 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:43:03,826 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2023-04-14 17:43:03,826 on stmt: return $200return_value.28
DEBUG 2023-04-14 17:43:03,826 Replaced assignments: defaultdict(<class 'list'>,
            {72: [<numba.core.ir.Assign object at 0x0000026619B01A90>],
             140: [<numba.core.ir.Assign object at 0x0000026619AE3760>]})
DEBUG 2023-04-14 17:43:03,826 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:03,826 Running <numba.core.ssa._FixSSAVars object at 0x0000026619B012E0>
DEBUG 2023-04-14 17:43:03,826 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:03,826 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:03,826 on stmt: areal = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,826 on stmt: aimag = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,826 on stmt: breal = getattr(value=b, attr=real)
DEBUG 2023-04-14 17:43:03,826 on stmt: bimag = getattr(value=b, attr=imag)
DEBUG 2023-04-14 17:43:03,826 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $28pred = call bool28(breal, func=bool28, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: branch $28pred, 42, 30
DEBUG 2023-04-14 17:43:03,826 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:03,826 Running <numba.core.ssa._FixSSAVars object at 0x0000026619B012E0>
DEBUG 2023-04-14 17:43:03,826 on stmt: bool32 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $32pred = call bool32(bimag, func=bool32, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: branch $32pred, 42, 34
DEBUG 2023-04-14 17:43:03,826 ==== SSA block rewrite pass on 34
DEBUG 2023-04-14 17:43:03,826 Running <numba.core.ssa._FixSSAVars object at 0x0000026619B012E0>
DEBUG 2023-04-14 17:43:03,826 on stmt: $34load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $const36.1 = const(str, complex division by zero)
DEBUG 2023-04-14 17:43:03,826 on stmt: $38call_function.2 = call $34load_global.0($const36.1, func=$34load_global.0, args=[Var($const36.1, numbers.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: <static> raise <class 'ZeroDivisionError'>('complex division by zero')
DEBUG 2023-04-14 17:43:03,826 ==== SSA block rewrite pass on 42
DEBUG 2023-04-14 17:43:03,826 Running <numba.core.ssa._FixSSAVars object at 0x0000026619B012E0>
DEBUG 2023-04-14 17:43:03,826 on stmt: $42load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $46call_function.2 = call $42load_global.0(breal, func=$42load_global.0, args=[Var(breal, numbers.py:1065)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: $48load_global.3 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $52call_function.5 = call $48load_global.3(bimag, func=$48load_global.3, args=[Var(bimag, numbers.py:1066)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: $54compare_op.6 = $46call_function.2 >= $52call_function.5
DEBUG 2023-04-14 17:43:03,826 on stmt: bool56 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $56pred = call bool56($54compare_op.6, func=bool56, args=(Var($54compare_op.6, numbers.py:1069),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: branch $56pred, 58, 126
DEBUG 2023-04-14 17:43:03,826 ==== SSA block rewrite pass on 58
DEBUG 2023-04-14 17:43:03,826 Running <numba.core.ssa._FixSSAVars object at 0x0000026619B012E0>
DEBUG 2023-04-14 17:43:03,826 on stmt: bool60 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $60pred = call bool60(breal, func=bool60, args=(Var(breal, numbers.py:1065),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: branch $60pred, 72, 62
DEBUG 2023-04-14 17:43:03,826 ==== SSA block rewrite pass on 62
DEBUG 2023-04-14 17:43:03,826 Running <numba.core.ssa._FixSSAVars object at 0x0000026619B012E0>
DEBUG 2023-04-14 17:43:03,826 on stmt: $62load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,826 on stmt: $64load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,826 on stmt: $66load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,826 on stmt: $68call_function.3 = call $62load_global.0($64load_global.1, $66load_global.2, func=$62load_global.0, args=[Var($64load_global.1, numbers.py:1072), Var($66load_global.2, numbers.py:1072)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,826 on stmt: $70return_value.4 = cast(value=$68call_function.3)
DEBUG 2023-04-14 17:43:03,826 on stmt: return $70return_value.4
DEBUG 2023-04-14 17:43:03,826 ==== SSA block rewrite pass on 72
DEBUG 2023-04-14 17:43:03,826 Running <numba.core.ssa._FixSSAVars object at 0x0000026619B012E0>
DEBUG 2023-04-14 17:43:03,826 on stmt: ratio = bimag / breal
DEBUG 2023-04-14 17:43:03,826 on stmt: $86binary_multiply.6 = bimag * ratio
DEBUG 2023-04-14 17:43:03,826 on stmt: denom = breal + $86binary_multiply.6
DEBUG 2023-04-14 17:43:03,826 on stmt: $92load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,831 on stmt: $100binary_multiply.12 = aimag * ratio
DEBUG 2023-04-14 17:43:03,831 on stmt: $102binary_add.13 = areal + $100binary_multiply.12
DEBUG 2023-04-14 17:43:03,831 on stmt: $106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:43:03,831 find_def var='denom' stmt=$106binary_true_divide.15 = $102binary_add.13 / denom
DEBUG 2023-04-14 17:43:03,831 on stmt: $114binary_multiply.19 = areal * ratio
DEBUG 2023-04-14 17:43:03,831 on stmt: $116binary_subtract.20 = aimag - $114binary_multiply.19
DEBUG 2023-04-14 17:43:03,831 on stmt: $120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:43:03,831 find_def var='denom' stmt=$120binary_true_divide.22 = $116binary_subtract.20 / denom
DEBUG 2023-04-14 17:43:03,831 on stmt: $122call_function.23 = call $92load_global.8($106binary_true_divide.15, $120binary_true_divide.22, func=$92load_global.8, args=[Var($106binary_true_divide.15, numbers.py:1076), Var($120binary_true_divide.22, numbers.py:1077)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,831 on stmt: $124return_value.24 = cast(value=$122call_function.23)
DEBUG 2023-04-14 17:43:03,831 on stmt: return $124return_value.24
DEBUG 2023-04-14 17:43:03,831 ==== SSA block rewrite pass on 126
DEBUG 2023-04-14 17:43:03,831 Running <numba.core.ssa._FixSSAVars object at 0x0000026619B012E0>
DEBUG 2023-04-14 17:43:03,831 on stmt: bool128 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:03,831 on stmt: $128pred = call bool128(bimag, func=bool128, args=(Var(bimag, numbers.py:1066),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,831 on stmt: branch $128pred, 140, 130
DEBUG 2023-04-14 17:43:03,831 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:03,831 Running <numba.core.ssa._FixSSAVars object at 0x0000026619B012E0>
DEBUG 2023-04-14 17:43:03,831 on stmt: $130load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,831 on stmt: $132load_global.1 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,831 on stmt: $134load_global.2 = global(NAN: nan)
DEBUG 2023-04-14 17:43:03,831 on stmt: $136call_function.3 = call $130load_global.0($132load_global.1, $134load_global.2, func=$130load_global.0, args=[Var($132load_global.1, numbers.py:1081), Var($134load_global.2, numbers.py:1081)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,831 on stmt: $138return_value.4 = cast(value=$136call_function.3)
DEBUG 2023-04-14 17:43:03,831 on stmt: return $138return_value.4
DEBUG 2023-04-14 17:43:03,831 ==== SSA block rewrite pass on 140
DEBUG 2023-04-14 17:43:03,831 Running <numba.core.ssa._FixSSAVars object at 0x0000026619B012E0>
DEBUG 2023-04-14 17:43:03,831 on stmt: ratio.1 = breal / bimag
DEBUG 2023-04-14 17:43:03,831 on stmt: $152binary_multiply.5 = breal * ratio.1
DEBUG 2023-04-14 17:43:03,831 on stmt: denom.1 = $152binary_multiply.5 + bimag
DEBUG 2023-04-14 17:43:03,831 on stmt: $160load_global.8 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:03,831 on stmt: $164load_attr.10 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,831 on stmt: $168binary_multiply.12 = $164load_attr.10 * ratio.1
DEBUG 2023-04-14 17:43:03,831 on stmt: $172load_attr.14 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,831 on stmt: $174binary_add.15 = $168binary_multiply.12 + $172load_attr.14
DEBUG 2023-04-14 17:43:03,831 on stmt: $178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:43:03,831 find_def var='denom' stmt=$178binary_true_divide.17 = $174binary_add.15 / denom
DEBUG 2023-04-14 17:43:03,831 replaced with: $178binary_true_divide.17 = $174binary_add.15 / denom.1
DEBUG 2023-04-14 17:43:03,831 on stmt: $182load_attr.19 = getattr(value=a, attr=imag)
DEBUG 2023-04-14 17:43:03,831 on stmt: $186binary_multiply.21 = $182load_attr.19 * ratio.1
DEBUG 2023-04-14 17:43:03,831 on stmt: $190load_attr.23 = getattr(value=a, attr=real)
DEBUG 2023-04-14 17:43:03,831 on stmt: $192binary_subtract.24 = $186binary_multiply.21 - $190load_attr.23
DEBUG 2023-04-14 17:43:03,831 on stmt: $196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:43:03,831 find_def var='denom' stmt=$196binary_true_divide.26 = $192binary_subtract.24 / denom
DEBUG 2023-04-14 17:43:03,831 replaced with: $196binary_true_divide.26 = $192binary_subtract.24 / denom.1
DEBUG 2023-04-14 17:43:03,831 on stmt: $198call_function.27 = call $160load_global.8($178binary_true_divide.17, $196binary_true_divide.26, func=$160load_global.8, args=[Var($178binary_true_divide.17, numbers.py:1085), Var($196binary_true_divide.26, numbers.py:1086)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:03,831 on stmt: $200return_value.28 = cast(value=$198call_function.27)
DEBUG 2023-04-14 17:43:03,831 on stmt: return $200return_value.28
DEBUG 2023-04-14 17:43:04,305 bytecode dump:
>          0	NOP(arg=None, lineno=284)
           2	LOAD_FAST(arg=0, lineno=284)
           4	LOAD_FAST(arg=1, lineno=281)
           6	BINARY_ADD(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:43:04,305 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,305 stack: []
DEBUG 2023-04-14 17:43:04,305 dispatch pc=0, inst=NOP(arg=None, lineno=284)
DEBUG 2023-04-14 17:43:04,305 stack []
DEBUG 2023-04-14 17:43:04,305 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=284)
DEBUG 2023-04-14 17:43:04,305 stack []
DEBUG 2023-04-14 17:43:04,305 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=281)
DEBUG 2023-04-14 17:43:04,305 stack ['$Z_12.0']
DEBUG 2023-04-14 17:43:04,305 dispatch pc=6, inst=BINARY_ADD(arg=None, lineno=1)
DEBUG 2023-04-14 17:43:04,305 stack ['$Z_12.0', '$n_det_14.1']
DEBUG 2023-04-14 17:43:04,305 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:43:04,305 stack ['$6binary_add.2']
DEBUG 2023-04-14 17:43:04,305 end state. edges=[]
DEBUG 2023-04-14 17:43:04,305 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:04,305 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:04,305 defmap: {}
DEBUG 2023-04-14 17:43:04,305 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:04,305 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:04,305 keep phismap: {}
DEBUG 2023-04-14 17:43:04,305 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:04,305 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:04,305 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$Z_12.0'}), (4, {'res': '$n_det_14.1'}), (6, {'lhs': '$Z_12.0', 'rhs': '$n_det_14.1', 'res': '$6binary_add.2'}), (8, {'retval': '$6binary_add.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,305 label 0:
    Z_1 = arg(0, name=Z_1)                   ['Z_1']
    n_det_1 = arg(1, name=n_det_1)           ['n_det_1']
    $6binary_add.2 = Z_1 + n_det_1           ['$6binary_add.2', 'Z_1', 'n_det_1']
    $8return_value.3 = cast(value=$6binary_add.2) ['$6binary_add.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:43:04,305 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:04,305 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026618FEA640>
DEBUG 2023-04-14 17:43:04,305 on stmt: Z_1 = arg(0, name=Z_1)
DEBUG 2023-04-14 17:43:04,305 on stmt: n_det_1 = arg(1, name=n_det_1)
DEBUG 2023-04-14 17:43:04,305 on stmt: $6binary_add.2 = Z_1 + n_det_1
DEBUG 2023-04-14 17:43:04,305 on stmt: $8return_value.3 = cast(value=$6binary_add.2)
DEBUG 2023-04-14 17:43:04,305 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:43:04,305 defs defaultdict(<class 'list'>,
            {'$6binary_add.2': [<numba.core.ir.Assign object at 0x0000026618F7E550>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000026618F7E670>],
             'Z_1': [<numba.core.ir.Assign object at 0x0000026618F6CD00>],
             'n_det_1': [<numba.core.ir.Assign object at 0x0000026618F7E130>]})
DEBUG 2023-04-14 17:43:04,305 SSA violators set()
DEBUG 2023-04-14 17:43:04,335 bytecode dump:
>          0	NOP(arg=None, lineno=216)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
          96	JUMP_FORWARD(arg=8, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=237)
         138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	JUMP_ABSOLUTE(arg=130, lineno=241)
>        172	LOAD_FAST(arg=3, lineno=243)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=243)
         176	LOAD_CONST(arg=8, lineno=243)
         178	LOAD_FAST(arg=2, lineno=243)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         182	RETURN_VALUE(arg=None, lineno=243)
>        184	LOAD_FAST(arg=2, lineno=243)
         186	RETURN_VALUE(arg=None, lineno=243)
DEBUG 2023-04-14 17:43:04,335 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,335 stack: []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=0, inst=NOP(arg=None, lineno=216)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
DEBUG 2023-04-14 17:43:04,335 stack ['$2load_deref.0']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
DEBUG 2023-04-14 17:43:04,335 stack ['$2load_deref.0', '$const4.1']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
DEBUG 2023-04-14 17:43:04,335 stack ['$6call_function.2']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
DEBUG 2023-04-14 17:43:04,335 stack ['$10load_deref.3']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
DEBUG 2023-04-14 17:43:04,335 stack ['$10load_deref.3', '$a12.4']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
DEBUG 2023-04-14 17:43:04,335 stack ['$14call_function.5']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
DEBUG 2023-04-14 17:43:04,335 stack ['$b18.6']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
DEBUG 2023-04-14 17:43:04,335 stack ['$b18.6', '$const20.7']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=218)
DEBUG 2023-04-14 17:43:04,335 stack ['$22compare_op.8']
DEBUG 2023-04-14 17:43:04,335 end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,335 pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,335 stack: []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
DEBUG 2023-04-14 17:43:04,335 stack ['$const26.0']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
DEBUG 2023-04-14 17:43:04,335 stack ['$b30.1']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
DEBUG 2023-04-14 17:43:04,335 stack ['$32unary_negative.2']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
DEBUG 2023-04-14 17:43:04,335 stack ['$exp36.3']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
DEBUG 2023-04-14 17:43:04,335 stack ['$exp36.3', '$const38.4']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=221)
DEBUG 2023-04-14 17:43:04,335 stack ['$40compare_op.5']
DEBUG 2023-04-14 17:43:04,335 end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,335 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,335 stack: []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
DEBUG 2023-04-14 17:43:04,335 stack ['$const98.0']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
DEBUG 2023-04-14 17:43:04,335 stack ['$b102.1']
DEBUG 2023-04-14 17:43:04,335 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,335 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,335 stack: []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
DEBUG 2023-04-14 17:43:04,335 stack ['$44load_global.0']
DEBUG 2023-04-14 17:43:04,335 end state. edges=[]
DEBUG 2023-04-14 17:43:04,335 pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,335 stack: []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=223)
DEBUG 2023-04-14 17:43:04,335 stack ['$48load_deref.0']
DEBUG 2023-04-14 17:43:04,335 end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,335 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,335 stack: []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
DEBUG 2023-04-14 17:43:04,335 stack []
DEBUG 2023-04-14 17:43:04,335 dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
DEBUG 2023-04-14 17:43:04,335 stack ['$exp106.0']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
DEBUG 2023-04-14 17:43:04,335 stack ['$exp106.0', '$const108.1']
DEBUG 2023-04-14 17:43:04,335 dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=234)
DEBUG 2023-04-14 17:43:04,340 stack ['$110compare_op.2']
DEBUG 2023-04-14 17:43:04,340 end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 stack: []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
DEBUG 2023-04-14 17:43:04,340 stack []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
DEBUG 2023-04-14 17:43:04,340 stack ['$a52.0']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
DEBUG 2023-04-14 17:43:04,340 stack ['$a52.0', '$const54.1']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=224)
DEBUG 2023-04-14 17:43:04,340 stack ['$56compare_op.2']
DEBUG 2023-04-14 17:43:04,340 end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 stack: []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
DEBUG 2023-04-14 17:43:04,340 stack []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
DEBUG 2023-04-14 17:43:04,340 stack ['$114load_global.0']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
DEBUG 2023-04-14 17:43:04,340 stack ['$116load_method.1']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
DEBUG 2023-04-14 17:43:04,340 stack ['$116load_method.1', '$a118.2']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
DEBUG 2023-04-14 17:43:04,340 stack ['$116load_method.1', '$a118.2', '$120load_global.3']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
DEBUG 2023-04-14 17:43:04,340 stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
DEBUG 2023-04-14 17:43:04,340 stack ['$116load_method.1', '$a118.2', '$124call_function.5']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
DEBUG 2023-04-14 17:43:04,340 stack ['$126call_method.6']
DEBUG 2023-04-14 17:43:04,340 end state. edges=[]
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 stack: []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
DEBUG 2023-04-14 17:43:04,340 stack []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
DEBUG 2023-04-14 17:43:04,340 stack ['$exp130.0']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
DEBUG 2023-04-14 17:43:04,340 stack ['$exp130.0', '$const132.1']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=237)
DEBUG 2023-04-14 17:43:04,340 stack ['$134compare_op.2']
DEBUG 2023-04-14 17:43:04,340 end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 stack: []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
DEBUG 2023-04-14 17:43:04,340 stack []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=225)
DEBUG 2023-04-14 17:43:04,340 stack ['$60load_deref.0']
DEBUG 2023-04-14 17:43:04,340 end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 stack: []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
DEBUG 2023-04-14 17:43:04,340 stack []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
DEBUG 2023-04-14 17:43:04,340 stack ['$a76.0']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
DEBUG 2023-04-14 17:43:04,340 stack ['$a76.0', '$const78.1']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
DEBUG 2023-04-14 17:43:04,340 stack ['$80compare_op.2']
DEBUG 2023-04-14 17:43:04,340 end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 stack: []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
DEBUG 2023-04-14 17:43:04,340 stack []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
DEBUG 2023-04-14 17:43:04,340 stack ['$exp138.0']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
DEBUG 2023-04-14 17:43:04,340 stack ['$exp138.0', '$const140.1']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=238)
DEBUG 2023-04-14 17:43:04,340 stack ['$142binary_and.2']
DEBUG 2023-04-14 17:43:04,340 end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 stack: []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=243)
DEBUG 2023-04-14 17:43:04,340 stack []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=243)
DEBUG 2023-04-14 17:43:04,340 stack ['$invert172.0']
DEBUG 2023-04-14 17:43:04,340 end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 stack: []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
DEBUG 2023-04-14 17:43:04,340 stack []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
DEBUG 2023-04-14 17:43:04,340 stack ['$64load_deref.0']
DEBUG 2023-04-14 17:43:04,340 end state. edges=[]
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 stack: []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
DEBUG 2023-04-14 17:43:04,340 stack []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
DEBUG 2023-04-14 17:43:04,340 stack ['$68load_global.0']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
DEBUG 2023-04-14 17:43:04,340 stack ['$68load_global.0', '$const70.1']
DEBUG 2023-04-14 17:43:04,340 dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
DEBUG 2023-04-14 17:43:04,340 stack ['$72call_function.2']
DEBUG 2023-04-14 17:43:04,340 end state. edges=[]
DEBUG 2023-04-14 17:43:04,340 pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,340 stack: []
DEBUG 2023-04-14 17:43:04,340 dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
DEBUG 2023-04-14 17:43:04,345 stack []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
DEBUG 2023-04-14 17:43:04,345 stack ['$a84.0']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
DEBUG 2023-04-14 17:43:04,345 stack ['$a84.0', '$const86.1']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
DEBUG 2023-04-14 17:43:04,345 stack ['$88compare_op.2']
DEBUG 2023-04-14 17:43:04,345 end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,345 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,345 pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,345 stack: []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
DEBUG 2023-04-14 17:43:04,345 stack []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
DEBUG 2023-04-14 17:43:04,345 stack ['$r146.0']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
DEBUG 2023-04-14 17:43:04,345 stack ['$r146.0', '$a148.1']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
DEBUG 2023-04-14 17:43:04,345 stack ['$150inplace_multiply.2']
DEBUG 2023-04-14 17:43:04,345 end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,345 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,345 stack: []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
DEBUG 2023-04-14 17:43:04,345 stack []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
DEBUG 2023-04-14 17:43:04,345 stack ['$exp154.0']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
DEBUG 2023-04-14 17:43:04,345 stack ['$exp154.0', '$const156.1']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
DEBUG 2023-04-14 17:43:04,345 stack ['$158inplace_rshift.2']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
DEBUG 2023-04-14 17:43:04,345 stack []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
DEBUG 2023-04-14 17:43:04,345 stack ['$a162.3']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
DEBUG 2023-04-14 17:43:04,345 stack ['$a162.3', '$a164.4']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
DEBUG 2023-04-14 17:43:04,345 stack ['$166inplace_multiply.5']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=241)
DEBUG 2023-04-14 17:43:04,345 stack []
DEBUG 2023-04-14 17:43:04,345 end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,345 pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,345 stack: []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=243)
DEBUG 2023-04-14 17:43:04,345 stack []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=243)
DEBUG 2023-04-14 17:43:04,345 stack ['$const176.0']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
DEBUG 2023-04-14 17:43:04,345 stack ['$const176.0', '$r178.1']
DEBUG 2023-04-14 17:43:04,345 dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=243)
DEBUG 2023-04-14 17:43:04,345 stack ['$180binary_true_divide.2']
DEBUG 2023-04-14 17:43:04,345 end state. edges=[]
DEBUG 2023-04-14 17:43:04,345 pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,345 stack: []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
DEBUG 2023-04-14 17:43:04,345 stack []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=243)
DEBUG 2023-04-14 17:43:04,345 stack ['$r184.0']
DEBUG 2023-04-14 17:43:04,345 end state. edges=[]
DEBUG 2023-04-14 17:43:04,345 pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,345 stack: []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
DEBUG 2023-04-14 17:43:04,345 stack []
DEBUG 2023-04-14 17:43:04,345 dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
DEBUG 2023-04-14 17:43:04,345 stack ['$const92.0']
DEBUG 2023-04-14 17:43:04,345 end state. edges=[]
DEBUG 2023-04-14 17:43:04,345 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,345 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,345 pending: deque([State(pc_initial=130 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,345 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:04,345 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:04,345 defmap: {}
DEBUG 2023-04-14 17:43:04,345 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:04,345 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:04,345 keep phismap: {}
DEBUG 2023-04-14 17:43:04,345 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:04,345 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,345 block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,345 label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: int64)      ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: int64)     ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: True) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:04,366 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:04,366 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,366 on stmt: $const4.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,366 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,366 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: $const20.7 = const(int, 0)
DEBUG 2023-04-14 17:43:04,366 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2023-04-14 17:43:04,366 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: branch $24pred, 26, 98
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 26
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,366 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,366 on stmt: $const38.4 = const(int, 0)
DEBUG 2023-04-14 17:43:04,366 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2023-04-14 17:43:04,366 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: branch $42pred, 44, 48
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 44
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 48
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2023-04-14 17:43:04,366 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: jump 52
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 52
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $const54.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,366 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2023-04-14 17:43:04,366 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: branch $58pred, 60, 76
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 60
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $60load_deref.0 = freevar(zerodiv_return: False)
DEBUG 2023-04-14 17:43:04,366 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: jump 68
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 68
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $const70.1 = const(str, 0 cannot be raised to a negative power)
DEBUG 2023-04-14 17:43:04,366 on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: <static> raise <class 'ZeroDivisionError'>('0 cannot be raised to a negative power')
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 76
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $const78.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,366 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2023-04-14 17:43:04,366 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: branch $82pred, 84, 106
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 84
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $const86.1 = const(int, -1)
DEBUG 2023-04-14 17:43:04,366 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2023-04-14 17:43:04,366 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: branch $90pred, 92, 106
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 92
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $const92.0 = const(int, 0)
DEBUG 2023-04-14 17:43:04,366 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2023-04-14 17:43:04,366 on stmt: return $94return_value.1
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 98
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: invert = const(bool, False)
DEBUG 2023-04-14 17:43:04,366 on stmt: exp = b
DEBUG 2023-04-14 17:43:04,366 on stmt: jump 106
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 106
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $const108.1 = const(int, 65536)
DEBUG 2023-04-14 17:43:04,366 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2023-04-14 17:43:04,366 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: branch $112pred, 114, 130
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 114
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2023-04-14 17:43:04,366 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2023-04-14 17:43:04,366 on stmt: return $128return_value.7
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 130
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,366 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2023-04-14 17:43:04,366 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: branch $136pred, 138, 172
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 138
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $const140.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,366 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2023-04-14 17:43:04,366 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: branch $144pred, 146, 154
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 146
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,366 on stmt: r = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,366 on stmt: jump 154
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 154
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $const156.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,366 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,366 on stmt: exp = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,366 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,366 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,366 on stmt: jump 130
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 172
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: branch $174pred, 176, 184
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 176
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2023-04-14 17:43:04,366 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2023-04-14 17:43:04,366 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2023-04-14 17:43:04,366 on stmt: return $182return_value.3
DEBUG 2023-04-14 17:43:04,366 ==== SSA block analysis pass on 184
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026619375730>
DEBUG 2023-04-14 17:43:04,366 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2023-04-14 17:43:04,366 on stmt: return $186return_value.1
DEBUG 2023-04-14 17:43:04,366 defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x00000266193B7BE0>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x0000026618FED3A0>],
             '$112pred': [<numba.core.ir.Assign object at 0x0000026618FED550>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x0000026618FED7C0>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x0000026618FEDBE0>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x0000026618FEDF70>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x0000026618F8D490>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x0000026618F66C70>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x0000026618F665B0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x0000026618F0E340>],
             '$136pred': [<numba.core.ir.Assign object at 0x0000026618F0E5B0>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x0000026618F0EA30>],
             '$144pred': [<numba.core.ir.Assign object at 0x0000026618F0ED60>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x0000026618EAC100>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x0000026618EAC880>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x0000026618EA7D60>],
             '$174pred': [<numba.core.ir.Assign object at 0x0000026618EA72E0>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000026618DF2B80>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x0000026618DF2E20>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x0000026618DF22E0>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x00000266193EE520>],
             '$24pred': [<numba.core.ir.Assign object at 0x00000266193EE430>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x00000266193B7970>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x000002661932D0D0>],
             '$42pred': [<numba.core.ir.Assign object at 0x000002661945B0A0>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x000002661945B910>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x000002661945BA90>],
             '$50pred': [<numba.core.ir.Assign object at 0x0000026619440940>],
             '$56compare_op.2': [<numba.core.ir.Assign object at 0x0000026619440FD0>],
             '$58pred': [<numba.core.ir.Assign object at 0x0000026619440790>],
             '$60load_deref.0': [<numba.core.ir.Assign object at 0x00000266193BA910>],
             '$62pred': [<numba.core.ir.Assign object at 0x00000266193BA850>],
             '$68load_global.0': [<numba.core.ir.Assign object at 0x00000266193BA6A0>],
             '$72call_function.2': [<numba.core.ir.Assign object at 0x0000026618FD1190>],
             '$80compare_op.2': [<numba.core.ir.Assign object at 0x0000026618FD1070>],
             '$82pred': [<numba.core.ir.Assign object at 0x0000026618FD1880>],
             '$88compare_op.2': [<numba.core.ir.Assign object at 0x0000026618F82940>],
             '$90pred': [<numba.core.ir.Assign object at 0x0000026618F82CD0>],
             '$94return_value.1': [<numba.core.ir.Assign object at 0x0000026618F824F0>],
             '$const108.1': [<numba.core.ir.Assign object at 0x0000026618FED130>],
             '$const132.1': [<numba.core.ir.Assign object at 0x0000026618F0E0A0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x0000026618F0E7F0>],
             '$const156.1': [<numba.core.ir.Assign object at 0x0000026618EACA60>],
             '$const176.0': [<numba.core.ir.Assign object at 0x0000026618EA74C0>],
             '$const20.7': [<numba.core.ir.Assign object at 0x00000266193EE7C0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x000002661932DA60>],
             '$const4.1': [<numba.core.ir.Assign object at 0x00000266193B7B80>],
             '$const54.1': [<numba.core.ir.Assign object at 0x0000026619440C70>],
             '$const70.1': [<numba.core.ir.Assign object at 0x000002661944DA00>],
             '$const78.1': [<numba.core.ir.Assign object at 0x0000026618FD1490>],
             '$const86.1': [<numba.core.ir.Assign object at 0x0000026618F82130>],
             '$const92.0': [<numba.core.ir.Assign object at 0x0000026618F82FD0>],
             'a': [<numba.core.ir.Assign object at 0x00000266193B7190>],
             'a.1': [<numba.core.ir.Assign object at 0x000002661935C280>,
                     <numba.core.ir.Assign object at 0x0000026618EA7F70>],
             'b': [<numba.core.ir.Assign object at 0x00000266193B72E0>],
             'bool112': [<numba.core.ir.Assign object at 0x0000026618FED5B0>],
             'bool136': [<numba.core.ir.Assign object at 0x0000026618F0E4C0>],
             'bool144': [<numba.core.ir.Assign object at 0x0000026618F0EA90>],
             'bool174': [<numba.core.ir.Assign object at 0x0000026618EA7160>],
             'bool24': [<numba.core.ir.Assign object at 0x00000266193EE730>],
             'bool42': [<numba.core.ir.Assign object at 0x000002661945BA00>],
             'bool50': [<numba.core.ir.Assign object at 0x000002661945BFA0>],
             'bool58': [<numba.core.ir.Assign object at 0x0000026619440670>],
             'bool62': [<numba.core.ir.Assign object at 0x00000266193BA580>],
             'bool82': [<numba.core.ir.Assign object at 0x0000026618FD1A90>],
             'bool90': [<numba.core.ir.Assign object at 0x0000026618F82B80>],
             'exp': [<numba.core.ir.Assign object at 0x000002661932D6A0>,
                     <numba.core.ir.Assign object at 0x0000026618FEDA60>,
                     <numba.core.ir.Assign object at 0x0000026618EACB80>],
             'invert': [<numba.core.ir.Assign object at 0x00000266193EEB50>,
                        <numba.core.ir.Assign object at 0x0000026618F828B0>],
             'r': [<numba.core.ir.Assign object at 0x00000266193B77F0>,
                   <numba.core.ir.Assign object at 0x0000026618EAC250>]})
DEBUG 2023-04-14 17:43:04,366 SSA violators {'r', 'invert', 'exp', 'a.1'}
DEBUG 2023-04-14 17:43:04,366 Fix SSA violator on var r
DEBUG 2023-04-14 17:43:04,366 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,366 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,366 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:04,366 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:04,366 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,366 on stmt: $const4.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,366 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 first assign: r
DEBUG 2023-04-14 17:43:04,366 replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,366 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: $const20.7 = const(int, 0)
DEBUG 2023-04-14 17:43:04,366 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2023-04-14 17:43:04,366 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,366 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,366 on stmt: branch $24pred, 26, 98
DEBUG 2023-04-14 17:43:04,366 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:04,375 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,375 on stmt: invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,375 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,375 on stmt: $const38.4 = const(int, 0)
DEBUG 2023-04-14 17:43:04,375 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2023-04-14 17:43:04,375 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,375 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,375 on stmt: branch $42pred, 44, 48
DEBUG 2023-04-14 17:43:04,375 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,375 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,375 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2023-04-14 17:43:04,375 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2023-04-14 17:43:04,375 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:04,375 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,375 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2023-04-14 17:43:04,375 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,375 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,375 on stmt: jump 52
DEBUG 2023-04-14 17:43:04,375 ==== SSA block rewrite pass on 52
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const54.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,376 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2023-04-14 17:43:04,376 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $58pred, 60, 76
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $60load_deref.0 = freevar(zerodiv_return: False)
DEBUG 2023-04-14 17:43:04,376 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: jump 68
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $const70.1 = const(str, 0 cannot be raised to a negative power)
DEBUG 2023-04-14 17:43:04,376 on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: <static> raise <class 'ZeroDivisionError'>('0 cannot be raised to a negative power')
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 76
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const78.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,376 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2023-04-14 17:43:04,376 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $82pred, 84, 106
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const86.1 = const(int, -1)
DEBUG 2023-04-14 17:43:04,376 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2023-04-14 17:43:04,376 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $90pred, 92, 106
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const92.0 = const(int, 0)
DEBUG 2023-04-14 17:43:04,376 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2023-04-14 17:43:04,376 on stmt: return $94return_value.1
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: invert = const(bool, False)
DEBUG 2023-04-14 17:43:04,376 on stmt: exp = b
DEBUG 2023-04-14 17:43:04,376 on stmt: jump 106
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const108.1 = const(int, 65536)
DEBUG 2023-04-14 17:43:04,376 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2023-04-14 17:43:04,376 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $112pred, 114, 130
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 114
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2023-04-14 17:43:04,376 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2023-04-14 17:43:04,376 on stmt: return $128return_value.7
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,376 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2023-04-14 17:43:04,376 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $136pred, 138, 172
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const140.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,376 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2023-04-14 17:43:04,376 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $144pred, 146, 154
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 146
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,376 on stmt: r = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,376 replaced with: r.1 = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,376 on stmt: jump 154
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const156.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,376 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,376 on stmt: exp = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,376 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,376 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,376 on stmt: jump 130
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 172
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $174pred, 176, 184
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2023-04-14 17:43:04,376 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2023-04-14 17:43:04,376 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2023-04-14 17:43:04,376 on stmt: return $182return_value.3
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 184
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FreshVarHandler object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2023-04-14 17:43:04,376 on stmt: return $186return_value.1
DEBUG 2023-04-14 17:43:04,376 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026618DF2640>],
             146: [<numba.core.ir.Assign object at 0x0000026618DF2580>]})
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:04,376 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:04,376 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,376 on stmt: $const4.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,376 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,376 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: $const20.7 = const(int, 0)
DEBUG 2023-04-14 17:43:04,376 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2023-04-14 17:43:04,376 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $24pred, 26, 98
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,376 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,376 on stmt: $const38.4 = const(int, 0)
DEBUG 2023-04-14 17:43:04,376 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2023-04-14 17:43:04,376 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $42pred, 44, 48
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2023-04-14 17:43:04,376 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: jump 52
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 52
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const54.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,376 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2023-04-14 17:43:04,376 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $58pred, 60, 76
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $60load_deref.0 = freevar(zerodiv_return: False)
DEBUG 2023-04-14 17:43:04,376 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: jump 68
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $const70.1 = const(str, 0 cannot be raised to a negative power)
DEBUG 2023-04-14 17:43:04,376 on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: <static> raise <class 'ZeroDivisionError'>('0 cannot be raised to a negative power')
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 76
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const78.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,376 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2023-04-14 17:43:04,376 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $82pred, 84, 106
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const86.1 = const(int, -1)
DEBUG 2023-04-14 17:43:04,376 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2023-04-14 17:43:04,376 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $90pred, 92, 106
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const92.0 = const(int, 0)
DEBUG 2023-04-14 17:43:04,376 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2023-04-14 17:43:04,376 on stmt: return $94return_value.1
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: invert = const(bool, False)
DEBUG 2023-04-14 17:43:04,376 on stmt: exp = b
DEBUG 2023-04-14 17:43:04,376 on stmt: jump 106
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,376 on stmt: $const108.1 = const(int, 65536)
DEBUG 2023-04-14 17:43:04,376 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2023-04-14 17:43:04,376 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,376 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,376 on stmt: branch $112pred, 114, 130
DEBUG 2023-04-14 17:43:04,376 ==== SSA block rewrite pass on 114
DEBUG 2023-04-14 17:43:04,376 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,385 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2023-04-14 17:43:04,385 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2023-04-14 17:43:04,385 on stmt: return $128return_value.7
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,385 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,385 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2023-04-14 17:43:04,385 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: branch $136pred, 138, 172
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,385 on stmt: $const140.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,385 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2023-04-14 17:43:04,385 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: branch $144pred, 146, 154
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 146
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,385 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,385 find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,385 find_def_from_top label 146
DEBUG 2023-04-14 17:43:04,385 idom 138 from label 146
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 138
DEBUG 2023-04-14 17:43:04,385 find_def_from_top label 138
DEBUG 2023-04-14 17:43:04,385 idom 130 from label 138
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:04,385 find_def_from_top label 130
DEBUG 2023-04-14 17:43:04,385 insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 106
DEBUG 2023-04-14 17:43:04,385 find_def_from_top label 106
DEBUG 2023-04-14 17:43:04,385 idom 0 from label 106
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,385 incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 154
DEBUG 2023-04-14 17:43:04,385 find_def_from_top label 154
DEBUG 2023-04-14 17:43:04,385 insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 138
DEBUG 2023-04-14 17:43:04,385 find_def_from_top label 138
DEBUG 2023-04-14 17:43:04,385 idom 130 from label 138
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:04,385 incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[106])
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 146
DEBUG 2023-04-14 17:43:04,385 incoming_def r.1 = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,385 incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG 2023-04-14 17:43:04,385 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,385 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,385 on stmt: jump 154
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,385 on stmt: $const156.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,385 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,385 on stmt: exp = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,385 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,385 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,385 on stmt: jump 130
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 172
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,385 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: branch $174pred, 176, 184
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,385 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2023-04-14 17:43:04,385 on stmt: $180binary_true_divide.2 = $const176.0 / r
DEBUG 2023-04-14 17:43:04,385 find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
DEBUG 2023-04-14 17:43:04,385 find_def_from_top label 176
DEBUG 2023-04-14 17:43:04,385 idom 172 from label 176
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 172
DEBUG 2023-04-14 17:43:04,385 find_def_from_top label 172
DEBUG 2023-04-14 17:43:04,385 idom 130 from label 172
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:04,385 replaced with: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2023-04-14 17:43:04,385 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2023-04-14 17:43:04,385 on stmt: return $182return_value.3
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 184
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,385 on stmt: $186return_value.1 = cast(value=r)
DEBUG 2023-04-14 17:43:04,385 find_def var='r' stmt=$186return_value.1 = cast(value=r)
DEBUG 2023-04-14 17:43:04,385 find_def_from_top label 184
DEBUG 2023-04-14 17:43:04,385 idom 172 from label 184
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 172
DEBUG 2023-04-14 17:43:04,385 find_def_from_top label 172
DEBUG 2023-04-14 17:43:04,385 idom 130 from label 172
DEBUG 2023-04-14 17:43:04,385 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:04,385 replaced with: $186return_value.1 = cast(value=r.2)
DEBUG 2023-04-14 17:43:04,385 on stmt: return $186return_value.1
DEBUG 2023-04-14 17:43:04,385 Fix SSA violator on var invert
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:04,385 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:04,385 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,385 on stmt: $const4.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,385 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,385 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: $const20.7 = const(int, 0)
DEBUG 2023-04-14 17:43:04,385 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2023-04-14 17:43:04,385 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: branch $24pred, 26, 98
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,385 first assign: invert
DEBUG 2023-04-14 17:43:04,385 replaced with: invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,385 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,385 on stmt: $const38.4 = const(int, 0)
DEBUG 2023-04-14 17:43:04,385 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2023-04-14 17:43:04,385 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: branch $42pred, 44, 48
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2023-04-14 17:43:04,385 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: jump 52
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 52
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $const54.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,385 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2023-04-14 17:43:04,385 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: branch $58pred, 60, 76
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $60load_deref.0 = freevar(zerodiv_return: False)
DEBUG 2023-04-14 17:43:04,385 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: jump 68
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $const70.1 = const(str, 0 cannot be raised to a negative power)
DEBUG 2023-04-14 17:43:04,385 on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: <static> raise <class 'ZeroDivisionError'>('0 cannot be raised to a negative power')
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 76
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $const78.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,385 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2023-04-14 17:43:04,385 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: branch $82pred, 84, 106
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $const86.1 = const(int, -1)
DEBUG 2023-04-14 17:43:04,385 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2023-04-14 17:43:04,385 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: branch $90pred, 92, 106
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $const92.0 = const(int, 0)
DEBUG 2023-04-14 17:43:04,385 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2023-04-14 17:43:04,385 on stmt: return $94return_value.1
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: invert = const(bool, False)
DEBUG 2023-04-14 17:43:04,385 replaced with: invert.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,385 on stmt: exp = b
DEBUG 2023-04-14 17:43:04,385 on stmt: jump 106
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $const108.1 = const(int, 65536)
DEBUG 2023-04-14 17:43:04,385 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2023-04-14 17:43:04,385 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: branch $112pred, 114, 130
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 114
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2023-04-14 17:43:04,385 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2023-04-14 17:43:04,385 on stmt: return $128return_value.7
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG 2023-04-14 17:43:04,385 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,385 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2023-04-14 17:43:04,385 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,385 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,385 on stmt: branch $136pred, 138, 172
DEBUG 2023-04-14 17:43:04,385 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:04,385 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,385 on stmt: $const140.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,385 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2023-04-14 17:43:04,385 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: branch $144pred, 146, 154
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 146
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,395 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,395 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,395 on stmt: jump 154
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,395 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG 2023-04-14 17:43:04,395 on stmt: $const156.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,395 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,395 on stmt: exp = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,395 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,395 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,395 on stmt: jump 130
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 172
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,395 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: branch $174pred, 176, 184
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,395 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2023-04-14 17:43:04,395 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2023-04-14 17:43:04,395 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2023-04-14 17:43:04,395 on stmt: return $182return_value.3
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 184
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FreshVarHandler object at 0x0000026618DF2A30>
DEBUG 2023-04-14 17:43:04,395 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2023-04-14 17:43:04,395 on stmt: return $186return_value.1
DEBUG 2023-04-14 17:43:04,395 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000026618DF2790>],
             98: [<numba.core.ir.Assign object at 0x0000026618DF24C0>]})
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:04,395 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:04,395 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,395 on stmt: $const4.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,395 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,395 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: $const20.7 = const(int, 0)
DEBUG 2023-04-14 17:43:04,395 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2023-04-14 17:43:04,395 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: branch $24pred, 26, 98
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,395 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,395 on stmt: $const38.4 = const(int, 0)
DEBUG 2023-04-14 17:43:04,395 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2023-04-14 17:43:04,395 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: branch $42pred, 44, 48
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2023-04-14 17:43:04,395 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: jump 52
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 52
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $const54.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,395 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2023-04-14 17:43:04,395 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: branch $58pred, 60, 76
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $60load_deref.0 = freevar(zerodiv_return: False)
DEBUG 2023-04-14 17:43:04,395 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: jump 68
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $const70.1 = const(str, 0 cannot be raised to a negative power)
DEBUG 2023-04-14 17:43:04,395 on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: <static> raise <class 'ZeroDivisionError'>('0 cannot be raised to a negative power')
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 76
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $const78.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,395 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2023-04-14 17:43:04,395 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: branch $82pred, 84, 106
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $const86.1 = const(int, -1)
DEBUG 2023-04-14 17:43:04,395 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2023-04-14 17:43:04,395 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: branch $90pred, 92, 106
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $const92.0 = const(int, 0)
DEBUG 2023-04-14 17:43:04,395 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2023-04-14 17:43:04,395 on stmt: return $94return_value.1
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: invert.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,395 on stmt: exp = b
DEBUG 2023-04-14 17:43:04,395 on stmt: jump 106
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $const108.1 = const(int, 65536)
DEBUG 2023-04-14 17:43:04,395 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2023-04-14 17:43:04,395 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: branch $112pred, 114, 130
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 114
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2023-04-14 17:43:04,395 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2023-04-14 17:43:04,395 on stmt: return $128return_value.7
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG 2023-04-14 17:43:04,395 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,395 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2023-04-14 17:43:04,395 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: branch $136pred, 138, 172
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $const140.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,395 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2023-04-14 17:43:04,395 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 on stmt: branch $144pred, 146, 154
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 146
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,395 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,395 on stmt: jump 154
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG 2023-04-14 17:43:04,395 on stmt: $const156.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,395 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,395 on stmt: exp = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,395 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,395 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,395 on stmt: jump 130
DEBUG 2023-04-14 17:43:04,395 ==== SSA block rewrite pass on 172
DEBUG 2023-04-14 17:43:04,395 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,395 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,395 on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,395 find_def_from_top label 172
DEBUG 2023-04-14 17:43:04,395 idom 130 from label 172
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:04,395 find_def_from_top label 130
DEBUG 2023-04-14 17:43:04,395 idom 106 from label 130
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 106
DEBUG 2023-04-14 17:43:04,395 find_def_from_top label 106
DEBUG 2023-04-14 17:43:04,395 insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 98
DEBUG 2023-04-14 17:43:04,395 incoming_def invert.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 76
DEBUG 2023-04-14 17:43:04,395 find_def_from_top label 76
DEBUG 2023-04-14 17:43:04,395 idom 52 from label 76
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 52
DEBUG 2023-04-14 17:43:04,395 find_def_from_top label 52
DEBUG 2023-04-14 17:43:04,395 idom 48 from label 52
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 48
DEBUG 2023-04-14 17:43:04,395 find_def_from_top label 48
DEBUG 2023-04-14 17:43:04,395 idom 26 from label 48
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 26
DEBUG 2023-04-14 17:43:04,395 incoming_def invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 84
DEBUG 2023-04-14 17:43:04,395 find_def_from_top label 84
DEBUG 2023-04-14 17:43:04,395 idom 76 from label 84
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 76
DEBUG 2023-04-14 17:43:04,395 find_def_from_top label 76
DEBUG 2023-04-14 17:43:04,395 idom 52 from label 76
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 52
DEBUG 2023-04-14 17:43:04,395 find_def_from_top label 52
DEBUG 2023-04-14 17:43:04,395 idom 48 from label 52
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 48
DEBUG 2023-04-14 17:43:04,395 find_def_from_top label 48
DEBUG 2023-04-14 17:43:04,395 idom 26 from label 48
DEBUG 2023-04-14 17:43:04,395 find_def_from_bottom label 26
DEBUG 2023-04-14 17:43:04,395 incoming_def invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,395 replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $174pred, 176, 184
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,405 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2023-04-14 17:43:04,405 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2023-04-14 17:43:04,405 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2023-04-14 17:43:04,405 on stmt: return $182return_value.3
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 184
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,405 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2023-04-14 17:43:04,405 on stmt: return $186return_value.1
DEBUG 2023-04-14 17:43:04,405 Fix SSA violator on var exp
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:04,405 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:04,405 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,405 on stmt: $const4.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,405 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,405 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: $const20.7 = const(int, 0)
DEBUG 2023-04-14 17:43:04,405 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2023-04-14 17:43:04,405 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $24pred, 26, 98
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,405 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,405 first assign: exp
DEBUG 2023-04-14 17:43:04,405 replaced with: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,405 on stmt: $const38.4 = const(int, 0)
DEBUG 2023-04-14 17:43:04,405 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2023-04-14 17:43:04,405 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $42pred, 44, 48
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2023-04-14 17:43:04,405 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: jump 52
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 52
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $const54.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,405 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2023-04-14 17:43:04,405 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $58pred, 60, 76
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $60load_deref.0 = freevar(zerodiv_return: False)
DEBUG 2023-04-14 17:43:04,405 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: jump 68
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $const70.1 = const(str, 0 cannot be raised to a negative power)
DEBUG 2023-04-14 17:43:04,405 on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: <static> raise <class 'ZeroDivisionError'>('0 cannot be raised to a negative power')
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 76
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $const78.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,405 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2023-04-14 17:43:04,405 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $82pred, 84, 106
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $const86.1 = const(int, -1)
DEBUG 2023-04-14 17:43:04,405 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2023-04-14 17:43:04,405 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $90pred, 92, 106
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $const92.0 = const(int, 0)
DEBUG 2023-04-14 17:43:04,405 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2023-04-14 17:43:04,405 on stmt: return $94return_value.1
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: invert.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,405 on stmt: exp = b
DEBUG 2023-04-14 17:43:04,405 replaced with: exp.1 = b
DEBUG 2023-04-14 17:43:04,405 on stmt: jump 106
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:232), Var(invert, numbers.py:219), Var(invert, numbers.py:219)], incoming_blocks=[98, 76, 84])
DEBUG 2023-04-14 17:43:04,405 on stmt: $const108.1 = const(int, 65536)
DEBUG 2023-04-14 17:43:04,405 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2023-04-14 17:43:04,405 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $112pred, 114, 130
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 114
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2023-04-14 17:43:04,405 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2023-04-14 17:43:04,405 on stmt: return $128return_value.7
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG 2023-04-14 17:43:04,405 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,405 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2023-04-14 17:43:04,405 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $136pred, 138, 172
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $const140.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,405 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2023-04-14 17:43:04,405 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $144pred, 146, 154
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 146
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,405 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,405 on stmt: jump 154
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG 2023-04-14 17:43:04,405 on stmt: $const156.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,405 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,405 on stmt: exp = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,405 replaced with: exp.2 = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,405 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,405 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,405 on stmt: jump 130
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 172
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $174pred, 176, 184
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2023-04-14 17:43:04,405 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2023-04-14 17:43:04,405 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2023-04-14 17:43:04,405 on stmt: return $182return_value.3
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 184
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FreshVarHandler object at 0x00000266199BC820>
DEBUG 2023-04-14 17:43:04,405 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2023-04-14 17:43:04,405 on stmt: return $186return_value.1
DEBUG 2023-04-14 17:43:04,405 Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x0000026618DF27F0>],
             98: [<numba.core.ir.Assign object at 0x0000026618DF23D0>],
             154: [<numba.core.ir.Assign object at 0x00000266193D8670>]})
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,405 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:04,405 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:04,405 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,405 on stmt: $const4.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,405 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,405 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: $const20.7 = const(int, 0)
DEBUG 2023-04-14 17:43:04,405 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2023-04-14 17:43:04,405 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $24pred, 26, 98
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,405 on stmt: invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,405 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,405 on stmt: $const38.4 = const(int, 0)
DEBUG 2023-04-14 17:43:04,405 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2023-04-14 17:43:04,405 find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
DEBUG 2023-04-14 17:43:04,405 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $42pred, 44, 48
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,405 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,405 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2023-04-14 17:43:04,405 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: jump 52
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 52
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,405 on stmt: $const54.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,405 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2023-04-14 17:43:04,405 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: branch $58pred, 60, 76
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,405 on stmt: $60load_deref.0 = freevar(zerodiv_return: False)
DEBUG 2023-04-14 17:43:04,405 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: jump 68
DEBUG 2023-04-14 17:43:04,405 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,405 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,405 on stmt: $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:04,405 on stmt: $const70.1 = const(str, 0 cannot be raised to a negative power)
DEBUG 2023-04-14 17:43:04,405 on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,405 on stmt: <static> raise <class 'ZeroDivisionError'>('0 cannot be raised to a negative power')
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 76
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: $const78.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,415 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2023-04-14 17:43:04,415 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $82pred, 84, 106
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: $const86.1 = const(int, -1)
DEBUG 2023-04-14 17:43:04,415 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2023-04-14 17:43:04,415 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $90pred, 92, 106
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: $const92.0 = const(int, 0)
DEBUG 2023-04-14 17:43:04,415 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2023-04-14 17:43:04,415 on stmt: return $94return_value.1
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: invert.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,415 on stmt: exp.1 = b
DEBUG 2023-04-14 17:43:04,415 on stmt: jump 106
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:232), Var(invert, numbers.py:219), Var(invert, numbers.py:219)], incoming_blocks=[98, 76, 84])
DEBUG 2023-04-14 17:43:04,415 on stmt: $const108.1 = const(int, 65536)
DEBUG 2023-04-14 17:43:04,415 on stmt: $110compare_op.2 = exp > $const108.1
DEBUG 2023-04-14 17:43:04,415 find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 106
DEBUG 2023-04-14 17:43:04,415 insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 98
DEBUG 2023-04-14 17:43:04,415 incoming_def exp.1 = b
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 76
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 76
DEBUG 2023-04-14 17:43:04,415 idom 52 from label 76
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 52
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 52
DEBUG 2023-04-14 17:43:04,415 idom 48 from label 52
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 48
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 48
DEBUG 2023-04-14 17:43:04,415 idom 26 from label 48
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 26
DEBUG 2023-04-14 17:43:04,415 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 84
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 84
DEBUG 2023-04-14 17:43:04,415 idom 76 from label 84
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 76
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 76
DEBUG 2023-04-14 17:43:04,415 idom 52 from label 76
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 52
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 52
DEBUG 2023-04-14 17:43:04,415 idom 48 from label 52
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 48
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 48
DEBUG 2023-04-14 17:43:04,415 idom 26 from label 48
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 26
DEBUG 2023-04-14 17:43:04,415 incoming_def exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,415 replaced with: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2023-04-14 17:43:04,415 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $112pred, 114, 130
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 114
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2023-04-14 17:43:04,415 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2023-04-14 17:43:04,415 on stmt: return $128return_value.7
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG 2023-04-14 17:43:04,415 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,415 on stmt: $134compare_op.2 = exp != $const132.1
DEBUG 2023-04-14 17:43:04,415 find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 130
DEBUG 2023-04-14 17:43:04,415 insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 106
DEBUG 2023-04-14 17:43:04,415 incoming_def exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:233), Var(exp, numbers.py:220), Var(exp, numbers.py:220)], incoming_blocks=[98, 76, 84])
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 154
DEBUG 2023-04-14 17:43:04,415 incoming_def exp.2 = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,415 replaced with: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2023-04-14 17:43:04,415 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $136pred, 138, 172
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: $const140.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,415 on stmt: $142binary_and.2 = exp & $const140.1
DEBUG 2023-04-14 17:43:04,415 find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 138
DEBUG 2023-04-14 17:43:04,415 idom 130 from label 138
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:04,415 replaced with: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2023-04-14 17:43:04,415 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $144pred, 146, 154
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 146
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,415 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,415 on stmt: jump 154
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG 2023-04-14 17:43:04,415 on stmt: $const156.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,415 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,415 find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 154
DEBUG 2023-04-14 17:43:04,415 idom 138 from label 154
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 138
DEBUG 2023-04-14 17:43:04,415 find_def_from_top label 138
DEBUG 2023-04-14 17:43:04,415 idom 130 from label 138
DEBUG 2023-04-14 17:43:04,415 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:04,415 replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,415 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,415 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,415 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,415 on stmt: jump 130
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 172
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $174pred, 176, 184
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2023-04-14 17:43:04,415 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2023-04-14 17:43:04,415 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2023-04-14 17:43:04,415 on stmt: return $182return_value.3
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 184
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,415 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2023-04-14 17:43:04,415 on stmt: return $186return_value.1
DEBUG 2023-04-14 17:43:04,415 Fix SSA violator on var a.1
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,415 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:04,415 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:04,415 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,415 on stmt: $const4.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,415 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,415 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 first assign: a.1
DEBUG 2023-04-14 17:43:04,415 replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: $const20.7 = const(int, 0)
DEBUG 2023-04-14 17:43:04,415 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2023-04-14 17:43:04,415 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $24pred, 26, 98
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,415 on stmt: invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,415 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,415 on stmt: $const38.4 = const(int, 0)
DEBUG 2023-04-14 17:43:04,415 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2023-04-14 17:43:04,415 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $42pred, 44, 48
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,415 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,415 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2023-04-14 17:43:04,415 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: jump 52
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 52
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,415 on stmt: $const54.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,415 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2023-04-14 17:43:04,415 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $58pred, 60, 76
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,415 on stmt: $60load_deref.0 = freevar(zerodiv_return: False)
DEBUG 2023-04-14 17:43:04,415 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: jump 68
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,415 on stmt: $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $const70.1 = const(str, 0 cannot be raised to a negative power)
DEBUG 2023-04-14 17:43:04,415 on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: <static> raise <class 'ZeroDivisionError'>('0 cannot be raised to a negative power')
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 76
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,415 on stmt: $const78.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,415 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2023-04-14 17:43:04,415 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $82pred, 84, 106
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,415 on stmt: $const86.1 = const(int, -1)
DEBUG 2023-04-14 17:43:04,415 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2023-04-14 17:43:04,415 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,415 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,415 on stmt: branch $90pred, 92, 106
DEBUG 2023-04-14 17:43:04,415 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:04,415 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,415 on stmt: $const92.0 = const(int, 0)
DEBUG 2023-04-14 17:43:04,425 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2023-04-14 17:43:04,426 on stmt: return $94return_value.1
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,426 on stmt: invert.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,426 on stmt: exp.1 = b
DEBUG 2023-04-14 17:43:04,426 on stmt: jump 106
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,426 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:233), Var(exp, numbers.py:220), Var(exp, numbers.py:220)], incoming_blocks=[98, 76, 84])
DEBUG 2023-04-14 17:43:04,426 on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:232), Var(invert, numbers.py:219), Var(invert, numbers.py:219)], incoming_blocks=[98, 76, 84])
DEBUG 2023-04-14 17:43:04,426 on stmt: $const108.1 = const(int, 65536)
DEBUG 2023-04-14 17:43:04,426 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2023-04-14 17:43:04,426 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: branch $112pred, 114, 130
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 114
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,426 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2023-04-14 17:43:04,426 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2023-04-14 17:43:04,426 on stmt: return $128return_value.7
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,426 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2023-04-14 17:43:04,426 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG 2023-04-14 17:43:04,426 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,426 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2023-04-14 17:43:04,426 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: branch $136pred, 138, 172
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,426 on stmt: $const140.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,426 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2023-04-14 17:43:04,426 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: branch $144pred, 146, 154
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 146
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,426 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,426 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,426 on stmt: jump 154
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,426 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG 2023-04-14 17:43:04,426 on stmt: $const156.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,426 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,426 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,426 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,426 on stmt: a.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,426 replaced with: a.1.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,426 on stmt: jump 130
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 172
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,426 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: branch $174pred, 176, 184
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,426 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2023-04-14 17:43:04,426 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2023-04-14 17:43:04,426 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2023-04-14 17:43:04,426 on stmt: return $182return_value.3
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 184
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FreshVarHandler object at 0x00000266193D8640>
DEBUG 2023-04-14 17:43:04,426 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2023-04-14 17:43:04,426 on stmt: return $186return_value.1
DEBUG 2023-04-14 17:43:04,426 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000266193D8070>],
             154: [<numba.core.ir.Assign object at 0x0000026618E45F40>]})
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: a = arg(0, name=a)
DEBUG 2023-04-14 17:43:04,426 on stmt: b = arg(1, name=b)
DEBUG 2023-04-14 17:43:04,426 on stmt: $2load_deref.0 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,426 on stmt: $const4.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,426 on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: $10load_deref.3 = freevar(tp: int64)
DEBUG 2023-04-14 17:43:04,426 on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: $const20.7 = const(int, 0)
DEBUG 2023-04-14 17:43:04,426 on stmt: $22compare_op.8 = b < $const20.7
DEBUG 2023-04-14 17:43:04,426 on stmt: bool24 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: branch $24pred, 26, 98
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 26
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: invert = const(bool, True)
DEBUG 2023-04-14 17:43:04,426 on stmt: exp = unary(fn=<built-in function neg>, value=b)
DEBUG 2023-04-14 17:43:04,426 on stmt: $const38.4 = const(int, 0)
DEBUG 2023-04-14 17:43:04,426 on stmt: $40compare_op.5 = exp < $const38.4
DEBUG 2023-04-14 17:43:04,426 on stmt: bool42 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: branch $42pred, 44, 48
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: <static> raise <class 'OverflowError'>
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 48
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: $48load_deref.0 = freevar(is_integer: True)
DEBUG 2023-04-14 17:43:04,426 on stmt: bool50 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: jump 52
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 52
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: $const54.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,426 on stmt: $56compare_op.2 = a.1 == $const54.1
DEBUG 2023-04-14 17:43:04,426 find_def var='a.1' stmt=$56compare_op.2 = a.1 == $const54.1
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 52
DEBUG 2023-04-14 17:43:04,426 idom 48 from label 52
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 48
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 48
DEBUG 2023-04-14 17:43:04,426 idom 26 from label 48
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 26
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 26
DEBUG 2023-04-14 17:43:04,426 idom 0 from label 26
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,426 on stmt: bool58 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: branch $58pred, 60, 76
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 60
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: $60load_deref.0 = freevar(zerodiv_return: False)
DEBUG 2023-04-14 17:43:04,426 on stmt: bool62 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: jump 68
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $const70.1 = const(str, 0 cannot be raised to a negative power)
DEBUG 2023-04-14 17:43:04,426 on stmt: $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: <static> raise <class 'ZeroDivisionError'>('0 cannot be raised to a negative power')
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 76
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: $const78.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,426 on stmt: $80compare_op.2 = a.1 != $const78.1
DEBUG 2023-04-14 17:43:04,426 find_def var='a.1' stmt=$80compare_op.2 = a.1 != $const78.1
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 76
DEBUG 2023-04-14 17:43:04,426 idom 52 from label 76
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 52
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 52
DEBUG 2023-04-14 17:43:04,426 idom 48 from label 52
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 48
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 48
DEBUG 2023-04-14 17:43:04,426 idom 26 from label 48
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 26
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 26
DEBUG 2023-04-14 17:43:04,426 idom 0 from label 26
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,426 on stmt: bool82 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: branch $82pred, 84, 106
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 84
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: $const86.1 = const(int, -1)
DEBUG 2023-04-14 17:43:04,426 on stmt: $88compare_op.2 = a.1 != $const86.1
DEBUG 2023-04-14 17:43:04,426 find_def var='a.1' stmt=$88compare_op.2 = a.1 != $const86.1
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 84
DEBUG 2023-04-14 17:43:04,426 idom 76 from label 84
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 76
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 76
DEBUG 2023-04-14 17:43:04,426 idom 52 from label 76
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 52
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 52
DEBUG 2023-04-14 17:43:04,426 idom 48 from label 52
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 48
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 48
DEBUG 2023-04-14 17:43:04,426 idom 26 from label 48
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 26
DEBUG 2023-04-14 17:43:04,426 find_def_from_top label 26
DEBUG 2023-04-14 17:43:04,426 idom 0 from label 26
DEBUG 2023-04-14 17:43:04,426 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,426 on stmt: bool90 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: branch $90pred, 92, 106
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 92
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: $const92.0 = const(int, 0)
DEBUG 2023-04-14 17:43:04,426 on stmt: $94return_value.1 = cast(value=$const92.0)
DEBUG 2023-04-14 17:43:04,426 on stmt: return $94return_value.1
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: invert.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,426 on stmt: exp.1 = b
DEBUG 2023-04-14 17:43:04,426 on stmt: jump 106
DEBUG 2023-04-14 17:43:04,426 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,426 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,426 on stmt: exp.3 = phi(incoming_values=[Var(exp.1, numbers.py:233), Var(exp, numbers.py:220), Var(exp, numbers.py:220)], incoming_blocks=[98, 76, 84])
DEBUG 2023-04-14 17:43:04,426 on stmt: invert.2 = phi(incoming_values=[Var(invert.1, numbers.py:232), Var(invert, numbers.py:219), Var(invert, numbers.py:219)], incoming_blocks=[98, 76, 84])
DEBUG 2023-04-14 17:43:04,426 on stmt: $const108.1 = const(int, 65536)
DEBUG 2023-04-14 17:43:04,426 on stmt: $110compare_op.2 = exp.3 > $const108.1
DEBUG 2023-04-14 17:43:04,426 on stmt: bool112 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,426 on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,426 on stmt: branch $112pred, 114, 130
DEBUG 2023-04-14 17:43:04,435 ==== SSA block rewrite pass on 114
DEBUG 2023-04-14 17:43:04,435 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,435 on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,435 on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
DEBUG 2023-04-14 17:43:04,435 on stmt: $120load_global.3 = global(float: <class 'float'>)
DEBUG 2023-04-14 17:43:04,435 on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,435 on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,435 find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,435 find_def_from_top label 114
DEBUG 2023-04-14 17:43:04,435 idom 106 from label 114
DEBUG 2023-04-14 17:43:04,435 find_def_from_bottom label 106
DEBUG 2023-04-14 17:43:04,435 find_def_from_top label 106
DEBUG 2023-04-14 17:43:04,435 idom 0 from label 106
DEBUG 2023-04-14 17:43:04,435 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,435 on stmt: $128return_value.7 = cast(value=$126call_method.6)
DEBUG 2023-04-14 17:43:04,435 on stmt: return $128return_value.7
DEBUG 2023-04-14 17:43:04,435 ==== SSA block rewrite pass on 130
DEBUG 2023-04-14 17:43:04,435 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,435 on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
DEBUG 2023-04-14 17:43:04,435 on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
DEBUG 2023-04-14 17:43:04,435 on stmt: $const132.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,435 on stmt: $134compare_op.2 = exp.4 != $const132.1
DEBUG 2023-04-14 17:43:04,435 on stmt: bool136 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,435 on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,435 on stmt: branch $136pred, 138, 172
DEBUG 2023-04-14 17:43:04,435 ==== SSA block rewrite pass on 138
DEBUG 2023-04-14 17:43:04,435 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,435 on stmt: $const140.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,435 on stmt: $142binary_and.2 = exp.4 & $const140.1
DEBUG 2023-04-14 17:43:04,435 on stmt: bool144 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,435 on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,435 on stmt: branch $144pred, 146, 154
DEBUG 2023-04-14 17:43:04,435 ==== SSA block rewrite pass on 146
DEBUG 2023-04-14 17:43:04,435 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,435 on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,435 find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,435 find_def_from_top label 146
DEBUG 2023-04-14 17:43:04,435 idom 138 from label 146
DEBUG 2023-04-14 17:43:04,435 find_def_from_bottom label 138
DEBUG 2023-04-14 17:43:04,435 find_def_from_top label 138
DEBUG 2023-04-14 17:43:04,435 idom 130 from label 138
DEBUG 2023-04-14 17:43:04,435 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:04,435 find_def_from_top label 130
DEBUG 2023-04-14 17:43:04,435 insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
DEBUG 2023-04-14 17:43:04,435 find_def_from_bottom label 106
DEBUG 2023-04-14 17:43:04,435 find_def_from_top label 106
DEBUG 2023-04-14 17:43:04,435 idom 0 from label 106
DEBUG 2023-04-14 17:43:04,435 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,435 incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,435 find_def_from_bottom label 154
DEBUG 2023-04-14 17:43:04,435 incoming_def a.1.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,435 replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,435 on stmt: r.1 = $150inplace_multiply.2
DEBUG 2023-04-14 17:43:04,435 on stmt: jump 154
DEBUG 2023-04-14 17:43:04,435 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,435 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,435 on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
DEBUG 2023-04-14 17:43:04,435 on stmt: $const156.1 = const(int, 1)
DEBUG 2023-04-14 17:43:04,435 on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,435 on stmt: exp.2 = $158inplace_rshift.2
DEBUG 2023-04-14 17:43:04,435 on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,435 find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,435 find_def_from_top label 154
DEBUG 2023-04-14 17:43:04,435 idom 138 from label 154
DEBUG 2023-04-14 17:43:04,435 find_def_from_bottom label 138
DEBUG 2023-04-14 17:43:04,435 find_def_from_top label 138
DEBUG 2023-04-14 17:43:04,440 idom 130 from label 138
DEBUG 2023-04-14 17:43:04,440 find_def_from_bottom label 130
DEBUG 2023-04-14 17:43:04,440 replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,440 on stmt: a.1.1 = $166inplace_multiply.5
DEBUG 2023-04-14 17:43:04,440 on stmt: jump 130
DEBUG 2023-04-14 17:43:04,440 ==== SSA block rewrite pass on 172
DEBUG 2023-04-14 17:43:04,440 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,440 on stmt: bool174 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,440 on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,440 on stmt: branch $174pred, 176, 184
DEBUG 2023-04-14 17:43:04,440 ==== SSA block rewrite pass on 176
DEBUG 2023-04-14 17:43:04,440 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,440 on stmt: $const176.0 = const(float, 1.0)
DEBUG 2023-04-14 17:43:04,440 on stmt: $180binary_true_divide.2 = $const176.0 / r.2
DEBUG 2023-04-14 17:43:04,440 on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
DEBUG 2023-04-14 17:43:04,440 on stmt: return $182return_value.3
DEBUG 2023-04-14 17:43:04,440 ==== SSA block rewrite pass on 184
DEBUG 2023-04-14 17:43:04,440 Running <numba.core.ssa._FixSSAVars object at 0x00000266198BBDC0>
DEBUG 2023-04-14 17:43:04,440 on stmt: $186return_value.1 = cast(value=r.2)
DEBUG 2023-04-14 17:43:04,440 on stmt: return $186return_value.1
DEBUG 2023-04-14 17:43:04,515 bytecode dump:
>          0	NOP(arg=None, lineno=288)
           2	LOAD_FAST(arg=0, lineno=288)
           4	LOAD_FAST(arg=1, lineno=286)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:43:04,515 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,515 stack: []
DEBUG 2023-04-14 17:43:04,515 dispatch pc=0, inst=NOP(arg=None, lineno=288)
DEBUG 2023-04-14 17:43:04,515 stack []
DEBUG 2023-04-14 17:43:04,515 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=288)
DEBUG 2023-04-14 17:43:04,515 stack []
DEBUG 2023-04-14 17:43:04,515 dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=286)
DEBUG 2023-04-14 17:43:04,515 stack ['$_118call_method_38_12.0']
DEBUG 2023-04-14 17:43:04,515 dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
DEBUG 2023-04-14 17:43:04,515 stack ['$_118call_method_38_12.0', '$A_ZZ_14.1']
DEBUG 2023-04-14 17:43:04,515 dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
DEBUG 2023-04-14 17:43:04,515 stack ['$6binary_subtract.2']
DEBUG 2023-04-14 17:43:04,515 end state. edges=[]
DEBUG 2023-04-14 17:43:04,515 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:04,515 Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:04,515 defmap: {}
DEBUG 2023-04-14 17:43:04,515 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:04,515 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:04,515 keep phismap: {}
DEBUG 2023-04-14 17:43:04,515 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:04,515 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:04,515 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_118call_method_38_12.0'}), (4, {'res': '$A_ZZ_14.1'}), (6, {'lhs': '$_118call_method_38_12.0', 'rhs': '$A_ZZ_14.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,515 label 0:
    _118call_method_38_1 = arg(0, name=_118call_method_38_1) ['_118call_method_38_1']
    A_ZZ_1 = arg(1, name=A_ZZ_1)             ['A_ZZ_1']
    $6binary_subtract.2 = _118call_method_38_1 - A_ZZ_1 ['$6binary_subtract.2', 'A_ZZ_1', '_118call_method_38_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

DEBUG 2023-04-14 17:43:04,520 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:04,520 Running <numba.core.ssa._GatherDefsHandler object at 0x00000266193BA7F0>
DEBUG 2023-04-14 17:43:04,520 on stmt: _118call_method_38_1 = arg(0, name=_118call_method_38_1)
DEBUG 2023-04-14 17:43:04,520 on stmt: A_ZZ_1 = arg(1, name=A_ZZ_1)
DEBUG 2023-04-14 17:43:04,520 on stmt: $6binary_subtract.2 = _118call_method_38_1 - A_ZZ_1
DEBUG 2023-04-14 17:43:04,520 on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
DEBUG 2023-04-14 17:43:04,520 on stmt: return $8return_value.3
DEBUG 2023-04-14 17:43:04,520 defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0x0000026618DF0EE0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x0000026618DF0DF0>],
             'A_ZZ_1': [<numba.core.ir.Assign object at 0x0000026618E02910>],
             '_118call_method_38_1': [<numba.core.ir.Assign object at 0x00000266193EEB50>]})
DEBUG 2023-04-14 17:43:04,520 SSA violators set()
DEBUG 2023-04-14 17:43:04,545 bytecode dump:
>          0	NOP(arg=None, lineno=221)
           2	LOAD_FAST(arg=0, lineno=221)
           4	LOAD_ATTR(arg=0, lineno=221)
           6	STORE_FAST(arg=1, lineno=221)
           8	LOAD_FAST(arg=0, lineno=222)
          10	LOAD_ATTR(arg=1, lineno=222)
          12	STORE_FAST(arg=2, lineno=222)
          14	LOAD_FAST(arg=1, lineno=223)
          16	LOAD_CONST(arg=1, lineno=223)
          18	COMPARE_OP(arg=2, lineno=223)
          20	POP_JUMP_IF_FALSE(arg=44, lineno=223)
          22	LOAD_FAST(arg=2, lineno=223)
          24	LOAD_CONST(arg=1, lineno=223)
          26	COMPARE_OP(arg=2, lineno=223)
          28	POP_JUMP_IF_FALSE(arg=44, lineno=223)
          30	LOAD_GLOBAL(arg=2, lineno=224)
          32	LOAD_GLOBAL(arg=3, lineno=224)
          34	LOAD_FAST(arg=2, lineno=224)
          36	CALL_FUNCTION(arg=1, lineno=224)
          38	LOAD_FAST(arg=2, lineno=224)
          40	CALL_FUNCTION(arg=2, lineno=224)
          42	RETURN_VALUE(arg=None, lineno=224)
>         44	LOAD_GLOBAL(arg=4, lineno=225)
          46	LOAD_METHOD(arg=5, lineno=225)
          48	LOAD_FAST(arg=2, lineno=225)
          50	CALL_METHOD(arg=1, lineno=225)
          52	POP_JUMP_IF_FALSE(arg=68, lineno=225)
          54	LOAD_GLOBAL(arg=2, lineno=226)
          56	LOAD_GLOBAL(arg=3, lineno=226)
          58	LOAD_FAST(arg=2, lineno=226)
          60	CALL_FUNCTION(arg=1, lineno=226)
          62	LOAD_FAST(arg=2, lineno=226)
          64	CALL_FUNCTION(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=4, lineno=227)
          70	LOAD_METHOD(arg=6, lineno=227)
          72	LOAD_FAST(arg=1, lineno=227)
          74	CALL_METHOD(arg=1, lineno=227)
          76	POP_JUMP_IF_FALSE(arg=88, lineno=227)
          78	LOAD_GLOBAL(arg=2, lineno=228)
          80	LOAD_FAST(arg=1, lineno=228)
          82	LOAD_FAST(arg=1, lineno=228)
          84	CALL_FUNCTION(arg=2, lineno=228)
          86	RETURN_VALUE(arg=None, lineno=228)
>         88	LOAD_GLOBAL(arg=4, lineno=229)
          90	LOAD_METHOD(arg=5, lineno=229)
          92	LOAD_FAST(arg=1, lineno=229)
          94	CALL_METHOD(arg=1, lineno=229)
          96	POP_JUMP_IF_FALSE(arg=154, lineno=229)
          98	LOAD_FAST(arg=1, lineno=230)
         100	LOAD_CONST(arg=1, lineno=230)
         102	COMPARE_OP(arg=0, lineno=230)
         104	POP_JUMP_IF_FALSE(arg=132, lineno=230)
         106	LOAD_GLOBAL(arg=2, lineno=231)
         108	LOAD_GLOBAL(arg=3, lineno=231)
         110	LOAD_FAST(arg=2, lineno=231)
         112	LOAD_FAST(arg=2, lineno=231)
         114	BINARY_SUBTRACT(arg=None, lineno=231)
         116	CALL_FUNCTION(arg=1, lineno=231)
         118	LOAD_GLOBAL(arg=4, lineno=231)
         120	LOAD_METHOD(arg=7, lineno=231)
         122	LOAD_FAST(arg=1, lineno=231)
         124	LOAD_FAST(arg=2, lineno=231)
         126	CALL_METHOD(arg=2, lineno=231)
         128	CALL_FUNCTION(arg=2, lineno=231)
         130	RETURN_VALUE(arg=None, lineno=231)
>        132	LOAD_GLOBAL(arg=2, lineno=233)
         134	LOAD_FAST(arg=1, lineno=233)
         136	LOAD_GLOBAL(arg=4, lineno=233)
         138	LOAD_METHOD(arg=7, lineno=233)
         140	LOAD_FAST(arg=2, lineno=233)
         142	LOAD_FAST(arg=2, lineno=233)
         144	BINARY_SUBTRACT(arg=None, lineno=233)
         146	LOAD_FAST(arg=2, lineno=233)
         148	CALL_METHOD(arg=2, lineno=233)
         150	CALL_FUNCTION(arg=2, lineno=233)
         152	RETURN_VALUE(arg=None, lineno=233)
>        154	LOAD_GLOBAL(arg=3, lineno=239)
         156	LOAD_FAST(arg=1, lineno=239)
         158	CALL_FUNCTION(arg=1, lineno=239)
         160	LOAD_DEREF(arg=0, lineno=239)
         162	COMPARE_OP(arg=5, lineno=239)
         164	POP_JUMP_IF_TRUE(arg=178, lineno=239)
         166	LOAD_GLOBAL(arg=3, lineno=239)
         168	LOAD_FAST(arg=2, lineno=239)
         170	CALL_FUNCTION(arg=1, lineno=239)
         172	LOAD_DEREF(arg=0, lineno=239)
         174	COMPARE_OP(arg=5, lineno=239)
         176	POP_JUMP_IF_FALSE(arg=200, lineno=239)
>        178	LOAD_FAST(arg=1, lineno=240)
         180	LOAD_CONST(arg=2, lineno=240)
         182	INPLACE_MULTIPLY(arg=None, lineno=240)
         184	STORE_FAST(arg=1, lineno=240)
         186	LOAD_FAST(arg=2, lineno=241)
         188	LOAD_CONST(arg=2, lineno=241)
         190	INPLACE_MULTIPLY(arg=None, lineno=241)
         192	STORE_FAST(arg=2, lineno=241)
         194	LOAD_CONST(arg=3, lineno=242)
         196	STORE_FAST(arg=3, lineno=242)
         198	JUMP_FORWARD(arg=4, lineno=242)
>        200	LOAD_CONST(arg=4, lineno=244)
         202	STORE_FAST(arg=3, lineno=244)
>        204	LOAD_FAST(arg=1, lineno=246)
         206	LOAD_CONST(arg=5, lineno=246)
         208	COMPARE_OP(arg=5, lineno=246)
         210	POP_JUMP_IF_FALSE(arg=258, lineno=246)
         214	LOAD_GLOBAL(arg=4, lineno=247)
         216	LOAD_METHOD(arg=8, lineno=247)
         218	LOAD_FAST(arg=1, lineno=247)
         220	LOAD_GLOBAL(arg=4, lineno=247)
         222	LOAD_METHOD(arg=9, lineno=247)
         224	LOAD_FAST(arg=1, lineno=247)
         226	LOAD_FAST(arg=2, lineno=247)
         228	CALL_METHOD(arg=2, lineno=247)
         230	BINARY_ADD(arg=None, lineno=247)
         232	LOAD_CONST(arg=6, lineno=247)
         234	BINARY_MULTIPLY(arg=None, lineno=247)
         236	CALL_METHOD(arg=1, lineno=247)
         238	STORE_FAST(arg=4, lineno=247)
         240	LOAD_FAST(arg=4, lineno=248)
         242	STORE_FAST(arg=5, lineno=248)
         244	LOAD_FAST(arg=2, lineno=249)
         246	LOAD_CONST(arg=7, lineno=249)
         248	LOAD_FAST(arg=4, lineno=249)
         250	BINARY_MULTIPLY(arg=None, lineno=249)
         252	BINARY_TRUE_DIVIDE(arg=None, lineno=249)
         254	STORE_FAST(arg=6, lineno=249)
         256	JUMP_FORWARD(arg=56, lineno=249)
>        258	LOAD_GLOBAL(arg=4, lineno=251)
         260	LOAD_METHOD(arg=8, lineno=251)
         262	LOAD_FAST(arg=1, lineno=251)
         264	UNARY_NEGATIVE(arg=None, lineno=251)
         266	LOAD_GLOBAL(arg=4, lineno=251)
         268	LOAD_METHOD(arg=9, lineno=251)
         270	LOAD_FAST(arg=1, lineno=251)
         272	LOAD_FAST(arg=2, lineno=251)
         274	CALL_METHOD(arg=2, lineno=251)
         276	BINARY_ADD(arg=None, lineno=251)
         278	LOAD_CONST(arg=6, lineno=251)
         280	BINARY_MULTIPLY(arg=None, lineno=251)
         282	CALL_METHOD(arg=1, lineno=251)
         284	STORE_FAST(arg=4, lineno=251)
         286	LOAD_GLOBAL(arg=3, lineno=252)
         288	LOAD_FAST(arg=2, lineno=252)
         290	CALL_FUNCTION(arg=1, lineno=252)
         292	LOAD_CONST(arg=7, lineno=252)
         294	LOAD_FAST(arg=4, lineno=252)
         296	BINARY_MULTIPLY(arg=None, lineno=252)
         298	BINARY_TRUE_DIVIDE(arg=None, lineno=252)
         300	STORE_FAST(arg=5, lineno=252)
         302	LOAD_GLOBAL(arg=4, lineno=253)
         304	LOAD_METHOD(arg=7, lineno=253)
         306	LOAD_FAST(arg=4, lineno=253)
         308	LOAD_FAST(arg=2, lineno=253)
         310	CALL_METHOD(arg=2, lineno=253)
         312	STORE_FAST(arg=6, lineno=253)
>        314	LOAD_FAST(arg=3, lineno=255)
         316	POP_JUMP_IF_FALSE(arg=334, lineno=255)
         320	LOAD_GLOBAL(arg=2, lineno=256)
         322	LOAD_FAST(arg=5, lineno=256)
         324	LOAD_CONST(arg=7, lineno=256)
         326	BINARY_MULTIPLY(arg=None, lineno=256)
         328	LOAD_FAST(arg=6, lineno=256)
         330	CALL_FUNCTION(arg=2, lineno=256)
         332	RETURN_VALUE(arg=None, lineno=256)
>        334	LOAD_GLOBAL(arg=2, lineno=258)
         336	LOAD_FAST(arg=5, lineno=258)
         338	LOAD_FAST(arg=6, lineno=258)
         340	CALL_FUNCTION(arg=2, lineno=258)
         342	RETURN_VALUE(arg=None, lineno=258)
         344	LOAD_CONST(arg=8, lineno=258)
         346	RETURN_VALUE(arg=None, lineno=258)
DEBUG 2023-04-14 17:43:04,545 pending: deque([State(pc_initial=0 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,545 stack: []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=0, inst=NOP(arg=None, lineno=221)
DEBUG 2023-04-14 17:43:04,545 stack []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=221)
DEBUG 2023-04-14 17:43:04,545 stack []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=221)
DEBUG 2023-04-14 17:43:04,545 stack ['$z2.0']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=6, inst=STORE_FAST(arg=1, lineno=221)
DEBUG 2023-04-14 17:43:04,545 stack ['$4load_attr.1']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=222)
DEBUG 2023-04-14 17:43:04,545 stack []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=10, inst=LOAD_ATTR(arg=1, lineno=222)
DEBUG 2023-04-14 17:43:04,545 stack ['$z8.2']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=12, inst=STORE_FAST(arg=2, lineno=222)
DEBUG 2023-04-14 17:43:04,545 stack ['$10load_attr.3']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=223)
DEBUG 2023-04-14 17:43:04,545 stack []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=223)
DEBUG 2023-04-14 17:43:04,545 stack ['$a14.4']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=18, inst=COMPARE_OP(arg=2, lineno=223)
DEBUG 2023-04-14 17:43:04,545 stack ['$a14.4', '$const16.5']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=44, lineno=223)
DEBUG 2023-04-14 17:43:04,545 stack ['$18compare_op.6']
DEBUG 2023-04-14 17:43:04,545 end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,545 pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,545 stack: []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=223)
DEBUG 2023-04-14 17:43:04,545 stack []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=223)
DEBUG 2023-04-14 17:43:04,545 stack ['$b22.0']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=26, inst=COMPARE_OP(arg=2, lineno=223)
DEBUG 2023-04-14 17:43:04,545 stack ['$b22.0', '$const24.1']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=44, lineno=223)
DEBUG 2023-04-14 17:43:04,545 stack ['$26compare_op.2']
DEBUG 2023-04-14 17:43:04,545 end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,545 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,545 stack: []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=44, inst=LOAD_GLOBAL(arg=4, lineno=225)
DEBUG 2023-04-14 17:43:04,545 stack []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=46, inst=LOAD_METHOD(arg=5, lineno=225)
DEBUG 2023-04-14 17:43:04,545 stack ['$44load_global.0']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=225)
DEBUG 2023-04-14 17:43:04,545 stack ['$46load_method.1']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=50, inst=CALL_METHOD(arg=1, lineno=225)
DEBUG 2023-04-14 17:43:04,545 stack ['$46load_method.1', '$b48.2']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=68, lineno=225)
DEBUG 2023-04-14 17:43:04,545 stack ['$50call_method.3']
DEBUG 2023-04-14 17:43:04,545 end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,545 pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,545 stack: []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=30, inst=LOAD_GLOBAL(arg=2, lineno=224)
DEBUG 2023-04-14 17:43:04,545 stack []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=32, inst=LOAD_GLOBAL(arg=3, lineno=224)
DEBUG 2023-04-14 17:43:04,545 stack ['$30load_global.0']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=224)
DEBUG 2023-04-14 17:43:04,545 stack ['$30load_global.0', '$32load_global.1']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=36, inst=CALL_FUNCTION(arg=1, lineno=224)
DEBUG 2023-04-14 17:43:04,545 stack ['$30load_global.0', '$32load_global.1', '$b34.2']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=224)
DEBUG 2023-04-14 17:43:04,545 stack ['$30load_global.0', '$36call_function.3']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=40, inst=CALL_FUNCTION(arg=2, lineno=224)
DEBUG 2023-04-14 17:43:04,545 stack ['$30load_global.0', '$36call_function.3', '$b38.4']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=224)
DEBUG 2023-04-14 17:43:04,545 stack ['$40call_function.5']
DEBUG 2023-04-14 17:43:04,545 end state. edges=[]
DEBUG 2023-04-14 17:43:04,545 pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=54 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,545 pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,545 stack: []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=54, inst=LOAD_GLOBAL(arg=2, lineno=226)
DEBUG 2023-04-14 17:43:04,545 stack []
DEBUG 2023-04-14 17:43:04,545 dispatch pc=56, inst=LOAD_GLOBAL(arg=3, lineno=226)
DEBUG 2023-04-14 17:43:04,545 stack ['$54load_global.0']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=226)
DEBUG 2023-04-14 17:43:04,545 stack ['$54load_global.0', '$56load_global.1']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=60, inst=CALL_FUNCTION(arg=1, lineno=226)
DEBUG 2023-04-14 17:43:04,545 stack ['$54load_global.0', '$56load_global.1', '$b58.2']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=226)
DEBUG 2023-04-14 17:43:04,545 stack ['$54load_global.0', '$60call_function.3']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=64, inst=CALL_FUNCTION(arg=2, lineno=226)
DEBUG 2023-04-14 17:43:04,545 stack ['$54load_global.0', '$60call_function.3', '$b62.4']
DEBUG 2023-04-14 17:43:04,545 dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
DEBUG 2023-04-14 17:43:04,550 stack ['$64call_function.5']
DEBUG 2023-04-14 17:43:04,550 end state. edges=[]
DEBUG 2023-04-14 17:43:04,550 pending: deque([State(pc_initial=68 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,550 stack: []
DEBUG 2023-04-14 17:43:04,550 dispatch pc=68, inst=LOAD_GLOBAL(arg=4, lineno=227)
DEBUG 2023-04-14 17:43:04,550 stack []
DEBUG 2023-04-14 17:43:04,550 dispatch pc=70, inst=LOAD_METHOD(arg=6, lineno=227)
DEBUG 2023-04-14 17:43:04,550 stack ['$68load_global.0']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=72, inst=LOAD_FAST(arg=1, lineno=227)
DEBUG 2023-04-14 17:43:04,550 stack ['$70load_method.1']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=74, inst=CALL_METHOD(arg=1, lineno=227)
DEBUG 2023-04-14 17:43:04,550 stack ['$70load_method.1', '$a72.2']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=88, lineno=227)
DEBUG 2023-04-14 17:43:04,550 stack ['$74call_method.3']
DEBUG 2023-04-14 17:43:04,550 end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,550 pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,550 stack: []
DEBUG 2023-04-14 17:43:04,550 dispatch pc=78, inst=LOAD_GLOBAL(arg=2, lineno=228)
DEBUG 2023-04-14 17:43:04,550 stack []
DEBUG 2023-04-14 17:43:04,550 dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=228)
DEBUG 2023-04-14 17:43:04,550 stack ['$78load_global.0']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=82, inst=LOAD_FAST(arg=1, lineno=228)
DEBUG 2023-04-14 17:43:04,550 stack ['$78load_global.0', '$a80.1']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=84, inst=CALL_FUNCTION(arg=2, lineno=228)
DEBUG 2023-04-14 17:43:04,550 stack ['$78load_global.0', '$a80.1', '$a82.2']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=228)
DEBUG 2023-04-14 17:43:04,550 stack ['$84call_function.3']
DEBUG 2023-04-14 17:43:04,550 end state. edges=[]
DEBUG 2023-04-14 17:43:04,550 pending: deque([State(pc_initial=88 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,550 stack: []
DEBUG 2023-04-14 17:43:04,550 dispatch pc=88, inst=LOAD_GLOBAL(arg=4, lineno=229)
DEBUG 2023-04-14 17:43:04,550 stack []
DEBUG 2023-04-14 17:43:04,550 dispatch pc=90, inst=LOAD_METHOD(arg=5, lineno=229)
DEBUG 2023-04-14 17:43:04,550 stack ['$88load_global.0']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=92, inst=LOAD_FAST(arg=1, lineno=229)
DEBUG 2023-04-14 17:43:04,550 stack ['$90load_method.1']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=94, inst=CALL_METHOD(arg=1, lineno=229)
DEBUG 2023-04-14 17:43:04,550 stack ['$90load_method.1', '$a92.2']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=154, lineno=229)
DEBUG 2023-04-14 17:43:04,550 stack ['$94call_method.3']
DEBUG 2023-04-14 17:43:04,550 end state. edges=[Edge(pc=98, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,550 pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,550 stack: []
DEBUG 2023-04-14 17:43:04,550 dispatch pc=98, inst=LOAD_FAST(arg=1, lineno=230)
DEBUG 2023-04-14 17:43:04,550 stack []
DEBUG 2023-04-14 17:43:04,550 dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=230)
DEBUG 2023-04-14 17:43:04,550 stack ['$a98.0']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=102, inst=COMPARE_OP(arg=0, lineno=230)
DEBUG 2023-04-14 17:43:04,550 stack ['$a98.0', '$const100.1']
DEBUG 2023-04-14 17:43:04,550 dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=132, lineno=230)
DEBUG 2023-04-14 17:43:04,550 stack ['$102compare_op.2']
DEBUG 2023-04-14 17:43:04,550 end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=132, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,550 pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=132 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,550 stack: []
DEBUG 2023-04-14 17:43:04,550 dispatch pc=154, inst=LOAD_GLOBAL(arg=3, lineno=239)
DEBUG 2023-04-14 17:43:04,550 stack []
DEBUG 2023-04-14 17:43:04,550 dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=239)
DEBUG 2023-04-14 17:43:04,550 stack ['$154load_global.0']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=158, inst=CALL_FUNCTION(arg=1, lineno=239)
DEBUG 2023-04-14 17:43:04,556 stack ['$154load_global.0', '$a156.1']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=160, inst=LOAD_DEREF(arg=0, lineno=239)
DEBUG 2023-04-14 17:43:04,556 stack ['$158call_function.2']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=162, inst=COMPARE_OP(arg=5, lineno=239)
DEBUG 2023-04-14 17:43:04,556 stack ['$158call_function.2', '$160load_deref.3']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=164, inst=POP_JUMP_IF_TRUE(arg=178, lineno=239)
DEBUG 2023-04-14 17:43:04,556 stack ['$162compare_op.4']
DEBUG 2023-04-14 17:43:04,556 end state. edges=[Edge(pc=166, stack=(), blockstack=(), npush=0), Edge(pc=178, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,556 pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=132 nstack_initial=0), State(pc_initial=166 nstack_initial=0), State(pc_initial=178 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,556 stack: []
DEBUG 2023-04-14 17:43:04,556 dispatch pc=106, inst=LOAD_GLOBAL(arg=2, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack []
DEBUG 2023-04-14 17:43:04,556 dispatch pc=108, inst=LOAD_GLOBAL(arg=3, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=110, inst=LOAD_FAST(arg=2, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0', '$108load_global.1']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=112, inst=LOAD_FAST(arg=2, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0', '$108load_global.1', '$b110.2']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=114, inst=BINARY_SUBTRACT(arg=None, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0', '$108load_global.1', '$b110.2', '$b112.3']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=116, inst=CALL_FUNCTION(arg=1, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0', '$108load_global.1', '$114binary_subtract.4']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=118, inst=LOAD_GLOBAL(arg=4, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0', '$116call_function.5']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=120, inst=LOAD_METHOD(arg=7, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0', '$116call_function.5', '$118load_global.6']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0', '$116call_function.5', '$120load_method.7']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=124, inst=LOAD_FAST(arg=2, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0', '$116call_function.5', '$120load_method.7', '$a122.8']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0', '$116call_function.5', '$120load_method.7', '$a122.8', '$b124.9']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=128, inst=CALL_FUNCTION(arg=2, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$106load_global.0', '$116call_function.5', '$126call_method.10']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=130, inst=RETURN_VALUE(arg=None, lineno=231)
DEBUG 2023-04-14 17:43:04,556 stack ['$128call_function.11']
DEBUG 2023-04-14 17:43:04,556 end state. edges=[]
DEBUG 2023-04-14 17:43:04,556 pending: deque([State(pc_initial=132 nstack_initial=0), State(pc_initial=166 nstack_initial=0), State(pc_initial=178 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,556 stack: []
DEBUG 2023-04-14 17:43:04,556 dispatch pc=132, inst=LOAD_GLOBAL(arg=2, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack []
DEBUG 2023-04-14 17:43:04,556 dispatch pc=134, inst=LOAD_FAST(arg=1, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack ['$132load_global.0']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=136, inst=LOAD_GLOBAL(arg=4, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack ['$132load_global.0', '$a134.1']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=138, inst=LOAD_METHOD(arg=7, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack ['$132load_global.0', '$a134.1', '$136load_global.2']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=140, inst=LOAD_FAST(arg=2, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack ['$132load_global.0', '$a134.1', '$138load_method.3']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=142, inst=LOAD_FAST(arg=2, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack ['$132load_global.0', '$a134.1', '$138load_method.3', '$b140.4']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=144, inst=BINARY_SUBTRACT(arg=None, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack ['$132load_global.0', '$a134.1', '$138load_method.3', '$b140.4', '$b142.5']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack ['$132load_global.0', '$a134.1', '$138load_method.3', '$144binary_subtract.6']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=148, inst=CALL_METHOD(arg=2, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack ['$132load_global.0', '$a134.1', '$138load_method.3', '$144binary_subtract.6', '$b146.7']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=150, inst=CALL_FUNCTION(arg=2, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack ['$132load_global.0', '$a134.1', '$148call_method.8']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=152, inst=RETURN_VALUE(arg=None, lineno=233)
DEBUG 2023-04-14 17:43:04,556 stack ['$150call_function.9']
DEBUG 2023-04-14 17:43:04,556 end state. edges=[]
DEBUG 2023-04-14 17:43:04,556 pending: deque([State(pc_initial=166 nstack_initial=0), State(pc_initial=178 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,556 stack: []
DEBUG 2023-04-14 17:43:04,556 dispatch pc=166, inst=LOAD_GLOBAL(arg=3, lineno=239)
DEBUG 2023-04-14 17:43:04,556 stack []
DEBUG 2023-04-14 17:43:04,556 dispatch pc=168, inst=LOAD_FAST(arg=2, lineno=239)
DEBUG 2023-04-14 17:43:04,556 stack ['$166load_global.0']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=170, inst=CALL_FUNCTION(arg=1, lineno=239)
DEBUG 2023-04-14 17:43:04,556 stack ['$166load_global.0', '$b168.1']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=172, inst=LOAD_DEREF(arg=0, lineno=239)
DEBUG 2023-04-14 17:43:04,556 stack ['$170call_function.2']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=174, inst=COMPARE_OP(arg=5, lineno=239)
DEBUG 2023-04-14 17:43:04,556 stack ['$170call_function.2', '$172load_deref.3']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=176, inst=POP_JUMP_IF_FALSE(arg=200, lineno=239)
DEBUG 2023-04-14 17:43:04,556 stack ['$174compare_op.4']
DEBUG 2023-04-14 17:43:04,556 end state. edges=[Edge(pc=178, stack=(), blockstack=(), npush=0), Edge(pc=200, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,556 pending: deque([State(pc_initial=178 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=200 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,556 stack: []
DEBUG 2023-04-14 17:43:04,556 dispatch pc=178, inst=LOAD_FAST(arg=1, lineno=240)
DEBUG 2023-04-14 17:43:04,556 stack []
DEBUG 2023-04-14 17:43:04,556 dispatch pc=180, inst=LOAD_CONST(arg=2, lineno=240)
DEBUG 2023-04-14 17:43:04,556 stack ['$a178.0']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=182, inst=INPLACE_MULTIPLY(arg=None, lineno=240)
DEBUG 2023-04-14 17:43:04,556 stack ['$a178.0', '$const180.1']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=184, inst=STORE_FAST(arg=1, lineno=240)
DEBUG 2023-04-14 17:43:04,556 stack ['$182inplace_multiply.2']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=186, inst=LOAD_FAST(arg=2, lineno=241)
DEBUG 2023-04-14 17:43:04,556 stack []
DEBUG 2023-04-14 17:43:04,556 dispatch pc=188, inst=LOAD_CONST(arg=2, lineno=241)
DEBUG 2023-04-14 17:43:04,556 stack ['$b186.3']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=190, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
DEBUG 2023-04-14 17:43:04,556 stack ['$b186.3', '$const188.4']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=192, inst=STORE_FAST(arg=2, lineno=241)
DEBUG 2023-04-14 17:43:04,556 stack ['$190inplace_multiply.5']
DEBUG 2023-04-14 17:43:04,556 dispatch pc=194, inst=LOAD_CONST(arg=3, lineno=242)
DEBUG 2023-04-14 17:43:04,561 stack []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=196, inst=STORE_FAST(arg=3, lineno=242)
DEBUG 2023-04-14 17:43:04,561 stack ['$const194.6']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=198, inst=JUMP_FORWARD(arg=4, lineno=242)
DEBUG 2023-04-14 17:43:04,561 stack []
DEBUG 2023-04-14 17:43:04,561 end state. edges=[Edge(pc=204, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,561 pending: deque([State(pc_initial=178 nstack_initial=0), State(pc_initial=200 nstack_initial=0), State(pc_initial=204 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,561 pending: deque([State(pc_initial=200 nstack_initial=0), State(pc_initial=204 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,561 stack: []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=200, inst=LOAD_CONST(arg=4, lineno=244)
DEBUG 2023-04-14 17:43:04,561 stack []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=202, inst=STORE_FAST(arg=3, lineno=244)
DEBUG 2023-04-14 17:43:04,561 stack ['$const200.0']
DEBUG 2023-04-14 17:43:04,561 end state. edges=[Edge(pc=204, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,561 pending: deque([State(pc_initial=204 nstack_initial=0), State(pc_initial=204 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,561 stack: []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=204, inst=LOAD_FAST(arg=1, lineno=246)
DEBUG 2023-04-14 17:43:04,561 stack []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=206, inst=LOAD_CONST(arg=5, lineno=246)
DEBUG 2023-04-14 17:43:04,561 stack ['$a204.0']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=208, inst=COMPARE_OP(arg=5, lineno=246)
DEBUG 2023-04-14 17:43:04,561 stack ['$a204.0', '$const206.1']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=210, inst=POP_JUMP_IF_FALSE(arg=258, lineno=246)
DEBUG 2023-04-14 17:43:04,561 stack ['$208compare_op.2']
DEBUG 2023-04-14 17:43:04,561 end state. edges=[Edge(pc=214, stack=(), blockstack=(), npush=0), Edge(pc=258, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,561 pending: deque([State(pc_initial=204 nstack_initial=0), State(pc_initial=214 nstack_initial=0), State(pc_initial=258 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,561 pending: deque([State(pc_initial=214 nstack_initial=0), State(pc_initial=258 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,561 stack: []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=214, inst=LOAD_GLOBAL(arg=4, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=216, inst=LOAD_METHOD(arg=8, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$214load_global.0']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=218, inst=LOAD_FAST(arg=1, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$216load_method.1']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=220, inst=LOAD_GLOBAL(arg=4, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$216load_method.1', '$a218.2']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=222, inst=LOAD_METHOD(arg=9, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$216load_method.1', '$a218.2', '$220load_global.3']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=224, inst=LOAD_FAST(arg=1, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$216load_method.1', '$a218.2', '$222load_method.4']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=226, inst=LOAD_FAST(arg=2, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$216load_method.1', '$a218.2', '$222load_method.4', '$a224.5']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=228, inst=CALL_METHOD(arg=2, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$216load_method.1', '$a218.2', '$222load_method.4', '$a224.5', '$b226.6']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=230, inst=BINARY_ADD(arg=None, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$216load_method.1', '$a218.2', '$228call_method.7']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=232, inst=LOAD_CONST(arg=6, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$216load_method.1', '$230binary_add.8']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=234, inst=BINARY_MULTIPLY(arg=None, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$216load_method.1', '$230binary_add.8', '$const232.9']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=236, inst=CALL_METHOD(arg=1, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$216load_method.1', '$234binary_multiply.10']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=238, inst=STORE_FAST(arg=4, lineno=247)
DEBUG 2023-04-14 17:43:04,561 stack ['$236call_method.11']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=240, inst=LOAD_FAST(arg=4, lineno=248)
DEBUG 2023-04-14 17:43:04,561 stack []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=242, inst=STORE_FAST(arg=5, lineno=248)
DEBUG 2023-04-14 17:43:04,561 stack ['$t240.12']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=244, inst=LOAD_FAST(arg=2, lineno=249)
DEBUG 2023-04-14 17:43:04,561 stack []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=246, inst=LOAD_CONST(arg=7, lineno=249)
DEBUG 2023-04-14 17:43:04,561 stack ['$b244.13']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=248, inst=LOAD_FAST(arg=4, lineno=249)
DEBUG 2023-04-14 17:43:04,561 stack ['$b244.13', '$const246.14']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=250, inst=BINARY_MULTIPLY(arg=None, lineno=249)
DEBUG 2023-04-14 17:43:04,561 stack ['$b244.13', '$const246.14', '$t248.15']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=252, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=249)
DEBUG 2023-04-14 17:43:04,561 stack ['$b244.13', '$250binary_multiply.16']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=254, inst=STORE_FAST(arg=6, lineno=249)
DEBUG 2023-04-14 17:43:04,561 stack ['$252binary_true_divide.17']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=256, inst=JUMP_FORWARD(arg=56, lineno=249)
DEBUG 2023-04-14 17:43:04,561 stack []
DEBUG 2023-04-14 17:43:04,561 end state. edges=[Edge(pc=314, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,561 pending: deque([State(pc_initial=258 nstack_initial=0), State(pc_initial=314 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,561 stack: []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=258, inst=LOAD_GLOBAL(arg=4, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack []
DEBUG 2023-04-14 17:43:04,561 dispatch pc=260, inst=LOAD_METHOD(arg=8, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$258load_global.0']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=262, inst=LOAD_FAST(arg=1, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=264, inst=UNARY_NEGATIVE(arg=None, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1', '$a262.2']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=266, inst=LOAD_GLOBAL(arg=4, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1', '$264unary_negative.3']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=268, inst=LOAD_METHOD(arg=9, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1', '$264unary_negative.3', '$266load_global.4']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=270, inst=LOAD_FAST(arg=1, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1', '$264unary_negative.3', '$268load_method.5']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=272, inst=LOAD_FAST(arg=2, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1', '$264unary_negative.3', '$268load_method.5', '$a270.6']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=274, inst=CALL_METHOD(arg=2, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1', '$264unary_negative.3', '$268load_method.5', '$a270.6', '$b272.7']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=276, inst=BINARY_ADD(arg=None, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1', '$264unary_negative.3', '$274call_method.8']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=278, inst=LOAD_CONST(arg=6, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1', '$276binary_add.9']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=280, inst=BINARY_MULTIPLY(arg=None, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1', '$276binary_add.9', '$const278.10']
DEBUG 2023-04-14 17:43:04,561 dispatch pc=282, inst=CALL_METHOD(arg=1, lineno=251)
DEBUG 2023-04-14 17:43:04,561 stack ['$260load_method.1', '$280binary_multiply.11']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=284, inst=STORE_FAST(arg=4, lineno=251)
DEBUG 2023-04-14 17:43:04,566 stack ['$282call_method.12']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=286, inst=LOAD_GLOBAL(arg=3, lineno=252)
DEBUG 2023-04-14 17:43:04,566 stack []
DEBUG 2023-04-14 17:43:04,566 dispatch pc=288, inst=LOAD_FAST(arg=2, lineno=252)
DEBUG 2023-04-14 17:43:04,566 stack ['$286load_global.13']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=290, inst=CALL_FUNCTION(arg=1, lineno=252)
DEBUG 2023-04-14 17:43:04,566 stack ['$286load_global.13', '$b288.14']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=292, inst=LOAD_CONST(arg=7, lineno=252)
DEBUG 2023-04-14 17:43:04,566 stack ['$290call_function.15']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=294, inst=LOAD_FAST(arg=4, lineno=252)
DEBUG 2023-04-14 17:43:04,566 stack ['$290call_function.15', '$const292.16']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=296, inst=BINARY_MULTIPLY(arg=None, lineno=252)
DEBUG 2023-04-14 17:43:04,566 stack ['$290call_function.15', '$const292.16', '$t294.17']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=298, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=252)
DEBUG 2023-04-14 17:43:04,566 stack ['$290call_function.15', '$296binary_multiply.18']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=300, inst=STORE_FAST(arg=5, lineno=252)
DEBUG 2023-04-14 17:43:04,566 stack ['$298binary_true_divide.19']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=302, inst=LOAD_GLOBAL(arg=4, lineno=253)
DEBUG 2023-04-14 17:43:04,566 stack []
DEBUG 2023-04-14 17:43:04,566 dispatch pc=304, inst=LOAD_METHOD(arg=7, lineno=253)
DEBUG 2023-04-14 17:43:04,566 stack ['$302load_global.20']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=306, inst=LOAD_FAST(arg=4, lineno=253)
DEBUG 2023-04-14 17:43:04,566 stack ['$304load_method.21']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=308, inst=LOAD_FAST(arg=2, lineno=253)
DEBUG 2023-04-14 17:43:04,566 stack ['$304load_method.21', '$t306.22']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=310, inst=CALL_METHOD(arg=2, lineno=253)
DEBUG 2023-04-14 17:43:04,566 stack ['$304load_method.21', '$t306.22', '$b308.23']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=312, inst=STORE_FAST(arg=6, lineno=253)
DEBUG 2023-04-14 17:43:04,566 stack ['$310call_method.24']
DEBUG 2023-04-14 17:43:04,566 end state. edges=[Edge(pc=314, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,566 pending: deque([State(pc_initial=314 nstack_initial=0), State(pc_initial=314 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,566 stack: []
DEBUG 2023-04-14 17:43:04,566 dispatch pc=314, inst=LOAD_FAST(arg=3, lineno=255)
DEBUG 2023-04-14 17:43:04,566 stack []
DEBUG 2023-04-14 17:43:04,566 dispatch pc=316, inst=POP_JUMP_IF_FALSE(arg=334, lineno=255)
DEBUG 2023-04-14 17:43:04,566 stack ['$scale314.0']
DEBUG 2023-04-14 17:43:04,566 end state. edges=[Edge(pc=320, stack=(), blockstack=(), npush=0), Edge(pc=334, stack=(), blockstack=(), npush=0)]
DEBUG 2023-04-14 17:43:04,566 pending: deque([State(pc_initial=314 nstack_initial=0), State(pc_initial=320 nstack_initial=0), State(pc_initial=334 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,566 pending: deque([State(pc_initial=320 nstack_initial=0), State(pc_initial=334 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,566 stack: []
DEBUG 2023-04-14 17:43:04,566 dispatch pc=320, inst=LOAD_GLOBAL(arg=2, lineno=256)
DEBUG 2023-04-14 17:43:04,566 stack []
DEBUG 2023-04-14 17:43:04,566 dispatch pc=322, inst=LOAD_FAST(arg=5, lineno=256)
DEBUG 2023-04-14 17:43:04,566 stack ['$320load_global.0']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=324, inst=LOAD_CONST(arg=7, lineno=256)
DEBUG 2023-04-14 17:43:04,566 stack ['$320load_global.0', '$real322.1']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=326, inst=BINARY_MULTIPLY(arg=None, lineno=256)
DEBUG 2023-04-14 17:43:04,566 stack ['$320load_global.0', '$real322.1', '$const324.2']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=328, inst=LOAD_FAST(arg=6, lineno=256)
DEBUG 2023-04-14 17:43:04,566 stack ['$320load_global.0', '$326binary_multiply.3']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=330, inst=CALL_FUNCTION(arg=2, lineno=256)
DEBUG 2023-04-14 17:43:04,566 stack ['$320load_global.0', '$326binary_multiply.3', '$imag328.4']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=332, inst=RETURN_VALUE(arg=None, lineno=256)
DEBUG 2023-04-14 17:43:04,566 stack ['$330call_function.5']
DEBUG 2023-04-14 17:43:04,566 end state. edges=[]
DEBUG 2023-04-14 17:43:04,566 pending: deque([State(pc_initial=334 nstack_initial=0)])
DEBUG 2023-04-14 17:43:04,566 stack: []
DEBUG 2023-04-14 17:43:04,566 dispatch pc=334, inst=LOAD_GLOBAL(arg=2, lineno=258)
DEBUG 2023-04-14 17:43:04,566 stack []
DEBUG 2023-04-14 17:43:04,566 dispatch pc=336, inst=LOAD_FAST(arg=5, lineno=258)
DEBUG 2023-04-14 17:43:04,566 stack ['$334load_global.0']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=338, inst=LOAD_FAST(arg=6, lineno=258)
DEBUG 2023-04-14 17:43:04,566 stack ['$334load_global.0', '$real336.1']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=340, inst=CALL_FUNCTION(arg=2, lineno=258)
DEBUG 2023-04-14 17:43:04,566 stack ['$334load_global.0', '$real336.1', '$imag338.2']
DEBUG 2023-04-14 17:43:04,566 dispatch pc=342, inst=RETURN_VALUE(arg=None, lineno=258)
DEBUG 2023-04-14 17:43:04,566 stack ['$340call_function.3']
DEBUG 2023-04-14 17:43:04,566 end state. edges=[]
DEBUG 2023-04-14 17:43:04,566 -------------------------Prune PHIs-------------------------
DEBUG 2023-04-14 17:43:04,566 Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=132 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=166 nstack_initial=0): set(),
             State(pc_initial=178 nstack_initial=0): set(),
             State(pc_initial=200 nstack_initial=0): set(),
             State(pc_initial=204 nstack_initial=0): set(),
             State(pc_initial=214 nstack_initial=0): set(),
             State(pc_initial=258 nstack_initial=0): set(),
             State(pc_initial=314 nstack_initial=0): set(),
             State(pc_initial=320 nstack_initial=0): set(),
             State(pc_initial=334 nstack_initial=0): set()})
DEBUG 2023-04-14 17:43:04,566 defmap: {}
DEBUG 2023-04-14 17:43:04,566 phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:04,566 changing phismap: defaultdict(<class 'set'>, {})
DEBUG 2023-04-14 17:43:04,566 keep phismap: {}
DEBUG 2023-04-14 17:43:04,566 new_out: defaultdict(<class 'dict'>, {})
DEBUG 2023-04-14 17:43:04,566 ----------------------DONE Prune PHIs-----------------------
DEBUG 2023-04-14 17:43:04,566 block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$z2.0'}), (4, {'item': '$z2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$z8.2'}), (10, {'item': '$z8.2', 'res': '$10load_attr.3'}), (12, {'value': '$10load_attr.3'}), (14, {'res': '$a14.4'}), (16, {'res': '$const16.5'}), (18, {'lhs': '$a14.4', 'rhs': '$const16.5', 'res': '$18compare_op.6'}), (20, {'pred': '$18compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 44: ()})
DEBUG 2023-04-14 17:43:04,566 block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$b22.0'}), (24, {'res': '$const24.1'}), (26, {'lhs': '$b22.0', 'rhs': '$const24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 44: ()})
DEBUG 2023-04-14 17:43:04,566 block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$30load_global.0'}), (32, {'res': '$32load_global.1'}), (34, {'res': '$b34.2'}), (36, {'func': '$32load_global.1', 'args': ['$b34.2'], 'res': '$36call_function.3'}), (38, {'res': '$b38.4'}), (40, {'func': '$30load_global.0', 'args': ['$36call_function.3', '$b38.4'], 'res': '$40call_function.5'}), (42, {'retval': '$40call_function.5', 'castval': '$42return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,566 block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'item': '$44load_global.0', 'res': '$46load_method.1'}), (48, {'res': '$b48.2'}), (50, {'func': '$46load_method.1', 'args': ['$b48.2'], 'res': '$50call_method.3'}), (52, {'pred': '$50call_method.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 68: ()})
DEBUG 2023-04-14 17:43:04,566 block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$54load_global.0'}), (56, {'res': '$56load_global.1'}), (58, {'res': '$b58.2'}), (60, {'func': '$56load_global.1', 'args': ['$b58.2'], 'res': '$60call_function.3'}), (62, {'res': '$b62.4'}), (64, {'func': '$54load_global.0', 'args': ['$60call_function.3', '$b62.4'], 'res': '$64call_function.5'}), (66, {'retval': '$64call_function.5', 'castval': '$66return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,566 block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'item': '$68load_global.0', 'res': '$70load_method.1'}), (72, {'res': '$a72.2'}), (74, {'func': '$70load_method.1', 'args': ['$a72.2'], 'res': '$74call_method.3'}), (76, {'pred': '$74call_method.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 88: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$a80.1'}), (82, {'res': '$a82.2'}), (84, {'func': '$78load_global.0', 'args': ['$a80.1', '$a82.2'], 'res': '$84call_function.3'}), (86, {'retval': '$84call_function.3', 'castval': '$86return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$88load_global.0'}), (90, {'item': '$88load_global.0', 'res': '$90load_method.1'}), (92, {'res': '$a92.2'}), (94, {'func': '$90load_method.1', 'args': ['$a92.2'], 'res': '$94call_method.3'}), (96, {'pred': '$94call_method.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: (), 154: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$a98.0'}), (100, {'res': '$const100.1'}), (102, {'lhs': '$a98.0', 'rhs': '$const100.1', 'res': '$102compare_op.2'}), (104, {'pred': '$102compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 132: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$106load_global.0'}), (108, {'res': '$108load_global.1'}), (110, {'res': '$b110.2'}), (112, {'res': '$b112.3'}), (114, {'lhs': '$b110.2', 'rhs': '$b112.3', 'res': '$114binary_subtract.4'}), (116, {'func': '$108load_global.1', 'args': ['$114binary_subtract.4'], 'res': '$116call_function.5'}), (118, {'res': '$118load_global.6'}), (120, {'item': '$118load_global.6', 'res': '$120load_method.7'}), (122, {'res': '$a122.8'}), (124, {'res': '$b124.9'}), (126, {'func': '$120load_method.7', 'args': ['$a122.8', '$b124.9'], 'res': '$126call_method.10'}), (128, {'func': '$106load_global.0', 'args': ['$116call_function.5', '$126call_method.10'], 'res': '$128call_function.11'}), (130, {'retval': '$128call_function.11', 'castval': '$130return_value.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=132 nstack_initial=0):
AdaptBlockInfo(insts=((132, {'res': '$132load_global.0'}), (134, {'res': '$a134.1'}), (136, {'res': '$136load_global.2'}), (138, {'item': '$136load_global.2', 'res': '$138load_method.3'}), (140, {'res': '$b140.4'}), (142, {'res': '$b142.5'}), (144, {'lhs': '$b140.4', 'rhs': '$b142.5', 'res': '$144binary_subtract.6'}), (146, {'res': '$b146.7'}), (148, {'func': '$138load_method.3', 'args': ['$144binary_subtract.6', '$b146.7'], 'res': '$148call_method.8'}), (150, {'func': '$132load_global.0', 'args': ['$a134.1', '$148call_method.8'], 'res': '$150call_function.9'}), (152, {'retval': '$150call_function.9', 'castval': '$152return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$154load_global.0'}), (156, {'res': '$a156.1'}), (158, {'func': '$154load_global.0', 'args': ['$a156.1'], 'res': '$158call_function.2'}), (160, {'res': '$160load_deref.3'}), (162, {'lhs': '$158call_function.2', 'rhs': '$160load_deref.3', 'res': '$162compare_op.4'}), (164, {'pred': '$162compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={166: (), 178: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=166 nstack_initial=0):
AdaptBlockInfo(insts=((166, {'res': '$166load_global.0'}), (168, {'res': '$b168.1'}), (170, {'func': '$166load_global.0', 'args': ['$b168.1'], 'res': '$170call_function.2'}), (172, {'res': '$172load_deref.3'}), (174, {'lhs': '$170call_function.2', 'rhs': '$172load_deref.3', 'res': '$174compare_op.4'}), (176, {'pred': '$174compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={178: (), 200: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=178 nstack_initial=0):
AdaptBlockInfo(insts=((178, {'res': '$a178.0'}), (180, {'res': '$const180.1'}), (182, {'lhs': '$a178.0', 'rhs': '$const180.1', 'res': '$182inplace_multiply.2'}), (184, {'value': '$182inplace_multiply.2'}), (186, {'res': '$b186.3'}), (188, {'res': '$const188.4'}), (190, {'lhs': '$b186.3', 'rhs': '$const188.4', 'res': '$190inplace_multiply.5'}), (192, {'value': '$190inplace_multiply.5'}), (194, {'res': '$const194.6'}), (196, {'value': '$const194.6'}), (198, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={204: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=200 nstack_initial=0):
AdaptBlockInfo(insts=((200, {'res': '$const200.0'}), (202, {'value': '$const200.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={204: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=204 nstack_initial=0):
AdaptBlockInfo(insts=((204, {'res': '$a204.0'}), (206, {'res': '$const206.1'}), (208, {'lhs': '$a204.0', 'rhs': '$const206.1', 'res': '$208compare_op.2'}), (210, {'pred': '$208compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={214: (), 258: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=214 nstack_initial=0):
AdaptBlockInfo(insts=((214, {'res': '$214load_global.0'}), (216, {'item': '$214load_global.0', 'res': '$216load_method.1'}), (218, {'res': '$a218.2'}), (220, {'res': '$220load_global.3'}), (222, {'item': '$220load_global.3', 'res': '$222load_method.4'}), (224, {'res': '$a224.5'}), (226, {'res': '$b226.6'}), (228, {'func': '$222load_method.4', 'args': ['$a224.5', '$b226.6'], 'res': '$228call_method.7'}), (230, {'lhs': '$a218.2', 'rhs': '$228call_method.7', 'res': '$230binary_add.8'}), (232, {'res': '$const232.9'}), (234, {'lhs': '$230binary_add.8', 'rhs': '$const232.9', 'res': '$234binary_multiply.10'}), (236, {'func': '$216load_method.1', 'args': ['$234binary_multiply.10'], 'res': '$236call_method.11'}), (238, {'value': '$236call_method.11'}), (240, {'res': '$t240.12'}), (242, {'value': '$t240.12'}), (244, {'res': '$b244.13'}), (246, {'res': '$const246.14'}), (248, {'res': '$t248.15'}), (250, {'lhs': '$const246.14', 'rhs': '$t248.15', 'res': '$250binary_multiply.16'}), (252, {'lhs': '$b244.13', 'rhs': '$250binary_multiply.16', 'res': '$252binary_true_divide.17'}), (254, {'value': '$252binary_true_divide.17'}), (256, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={314: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=258 nstack_initial=0):
AdaptBlockInfo(insts=((258, {'res': '$258load_global.0'}), (260, {'item': '$258load_global.0', 'res': '$260load_method.1'}), (262, {'res': '$a262.2'}), (264, {'value': '$a262.2', 'res': '$264unary_negative.3'}), (266, {'res': '$266load_global.4'}), (268, {'item': '$266load_global.4', 'res': '$268load_method.5'}), (270, {'res': '$a270.6'}), (272, {'res': '$b272.7'}), (274, {'func': '$268load_method.5', 'args': ['$a270.6', '$b272.7'], 'res': '$274call_method.8'}), (276, {'lhs': '$264unary_negative.3', 'rhs': '$274call_method.8', 'res': '$276binary_add.9'}), (278, {'res': '$const278.10'}), (280, {'lhs': '$276binary_add.9', 'rhs': '$const278.10', 'res': '$280binary_multiply.11'}), (282, {'func': '$260load_method.1', 'args': ['$280binary_multiply.11'], 'res': '$282call_method.12'}), (284, {'value': '$282call_method.12'}), (286, {'res': '$286load_global.13'}), (288, {'res': '$b288.14'}), (290, {'func': '$286load_global.13', 'args': ['$b288.14'], 'res': '$290call_function.15'}), (292, {'res': '$const292.16'}), (294, {'res': '$t294.17'}), (296, {'lhs': '$const292.16', 'rhs': '$t294.17', 'res': '$296binary_multiply.18'}), (298, {'lhs': '$290call_function.15', 'rhs': '$296binary_multiply.18', 'res': '$298binary_true_divide.19'}), (300, {'value': '$298binary_true_divide.19'}), (302, {'res': '$302load_global.20'}), (304, {'item': '$302load_global.20', 'res': '$304load_method.21'}), (306, {'res': '$t306.22'}), (308, {'res': '$b308.23'}), (310, {'func': '$304load_method.21', 'args': ['$t306.22', '$b308.23'], 'res': '$310call_method.24'}), (312, {'value': '$310call_method.24'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={314: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=314 nstack_initial=0):
AdaptBlockInfo(insts=((314, {'res': '$scale314.0'}), (316, {'pred': '$scale314.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={320: (), 334: ()})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=320 nstack_initial=0):
AdaptBlockInfo(insts=((320, {'res': '$320load_global.0'}), (322, {'res': '$real322.1'}), (324, {'res': '$const324.2'}), (326, {'lhs': '$real322.1', 'rhs': '$const324.2', 'res': '$326binary_multiply.3'}), (328, {'res': '$imag328.4'}), (330, {'func': '$320load_global.0', 'args': ['$326binary_multiply.3', '$imag328.4'], 'res': '$330call_function.5'}), (332, {'retval': '$330call_function.5', 'castval': '$332return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,571 block_infos State(pc_initial=334 nstack_initial=0):
AdaptBlockInfo(insts=((334, {'res': '$334load_global.0'}), (336, {'res': '$real336.1'}), (338, {'res': '$imag338.2'}), (340, {'func': '$334load_global.0', 'args': ['$real336.1', '$imag338.2'], 'res': '$340call_function.3'}), (342, {'retval': '$340call_function.3', 'castval': '$342return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
DEBUG 2023-04-14 17:43:04,575 label 0:
    z = arg(0, name=z)                       ['z']
    a = getattr(value=z, attr=real)          ['a', 'z']
    b = getattr(value=z, attr=imag)          ['b', 'z']
    $const16.5 = const(float, 0.0)           ['$const16.5']
    $18compare_op.6 = a == $const16.5        ['$18compare_op.6', '$const16.5', 'a']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$18compare_op.6', '$20pred', 'bool20']
    branch $20pred, 22, 44                   ['$20pred']
label 22:
    $const24.1 = const(float, 0.0)           ['$const24.1']
    $26compare_op.2 = b == $const24.1        ['$26compare_op.2', '$const24.1', 'b']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 44                   ['$28pred']
label 30:
    $30load_global.0 = global(complex: <class 'complex'>) ['$30load_global.0']
    $32load_global.1 = global(abs: <built-in function abs>) ['$32load_global.1']
    $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$32load_global.1', '$36call_function.3', 'b']
    $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.0', '$36call_function.3', '$40call_function.5', 'b']
    $42return_value.6 = cast(value=$40call_function.5) ['$40call_function.5', '$42return_value.6']
    return $42return_value.6                 ['$42return_value.6']
label 44:
    $44load_global.0 = global(math: <module 'math' (built-in)>) ['$44load_global.0']
    $46load_method.1 = getattr(value=$44load_global.0, attr=isinf) ['$44load_global.0', '$46load_method.1']
    $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$46load_method.1', '$50call_method.3', 'b']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$50call_method.3', '$52pred', 'bool52']
    branch $52pred, 54, 68                   ['$52pred']
label 54:
    $54load_global.0 = global(complex: <class 'complex'>) ['$54load_global.0']
    $56load_global.1 = global(abs: <built-in function abs>) ['$56load_global.1']
    $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_global.1', '$60call_function.3', 'b']
    $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$54load_global.0', '$60call_function.3', '$64call_function.5', 'b']
    $66return_value.6 = cast(value=$64call_function.5) ['$64call_function.5', '$66return_value.6']
    return $66return_value.6                 ['$66return_value.6']
label 68:
    $68load_global.0 = global(math: <module 'math' (built-in)>) ['$68load_global.0']
    $70load_method.1 = getattr(value=$68load_global.0, attr=isnan) ['$68load_global.0', '$70load_method.1']
    $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None) ['$70load_method.1', '$74call_method.3', 'a']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None) ['$74call_method.3', '$76pred', 'bool76']
    branch $76pred, 78, 88                   ['$76pred']
label 78:
    $78load_global.0 = global(complex: <class 'complex'>) ['$78load_global.0']
    $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None) ['$78load_global.0', '$84call_function.3', 'a', 'a']
    $86return_value.4 = cast(value=$84call_function.3) ['$84call_function.3', '$86return_value.4']
    return $86return_value.4                 ['$86return_value.4']
label 88:
    $88load_global.0 = global(math: <module 'math' (built-in)>) ['$88load_global.0']
    $90load_method.1 = getattr(value=$88load_global.0, attr=isinf) ['$88load_global.0', '$90load_method.1']
    $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None) ['$90load_method.1', '$94call_method.3', 'a']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$94call_method.3', '$96pred', 'bool96']
    branch $96pred, 98, 154                  ['$96pred']
label 98:
    $const100.1 = const(float, 0.0)          ['$const100.1']
    $102compare_op.2 = a < $const100.1       ['$102compare_op.2', '$const100.1', 'a']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None) ['$102compare_op.2', '$104pred', 'bool104']
    branch $104pred, 106, 132                ['$104pred']
label 106:
    $106load_global.0 = global(complex: <class 'complex'>) ['$106load_global.0']
    $108load_global.1 = global(abs: <built-in function abs>) ['$108load_global.1']
    $114binary_subtract.4 = b - b            ['$114binary_subtract.4', 'b', 'b']
    $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None) ['$108load_global.1', '$114binary_subtract.4', '$116call_function.5']
    $118load_global.6 = global(math: <module 'math' (built-in)>) ['$118load_global.6']
    $120load_method.7 = getattr(value=$118load_global.6, attr=copysign) ['$118load_global.6', '$120load_method.7']
    $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_method.7', '$126call_method.10', 'a', 'b']
    $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None) ['$106load_global.0', '$116call_function.5', '$126call_method.10', '$128call_function.11']
    $130return_value.12 = cast(value=$128call_function.11) ['$128call_function.11', '$130return_value.12']
    return $130return_value.12               ['$130return_value.12']
label 132:
    $132load_global.0 = global(complex: <class 'complex'>) ['$132load_global.0']
    $136load_global.2 = global(math: <module 'math' (built-in)>) ['$136load_global.2']
    $138load_method.3 = getattr(value=$136load_global.2, attr=copysign) ['$136load_global.2', '$138load_method.3']
    $144binary_subtract.6 = b - b            ['$144binary_subtract.6', 'b', 'b']
    $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$138load_method.3', '$144binary_subtract.6', '$148call_method.8', 'b']
    $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None) ['$132load_global.0', '$148call_method.8', '$150call_function.9', 'a']
    $152return_value.10 = cast(value=$150call_function.9) ['$150call_function.9', '$152return_value.10']
    return $152return_value.10               ['$152return_value.10']
label 154:
    $154load_global.0 = global(abs: <built-in function abs>) ['$154load_global.0']
    $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None) ['$154load_global.0', '$158call_function.2', 'a']
    $160load_deref.3 = freevar(THRES: 7.446288774449766e+307) ['$160load_deref.3']
    $162compare_op.4 = $158call_function.2 >= $160load_deref.3 ['$158call_function.2', '$160load_deref.3', '$162compare_op.4']
    bool164 = global(bool: <class 'bool'>)   ['bool164']
    $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None) ['$162compare_op.4', '$164pred', 'bool164']
    branch $164pred, 178, 166                ['$164pred']
label 166:
    $166load_global.0 = global(abs: <built-in function abs>) ['$166load_global.0']
    $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$166load_global.0', '$170call_function.2', 'b']
    $172load_deref.3 = freevar(THRES: 7.446288774449766e+307) ['$172load_deref.3']
    $174compare_op.4 = $170call_function.2 >= $172load_deref.3 ['$170call_function.2', '$172load_deref.3', '$174compare_op.4']
    bool176 = global(bool: <class 'bool'>)   ['bool176']
    $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None) ['$174compare_op.4', '$176pred', 'bool176']
    branch $176pred, 178, 200                ['$176pred']
label 178:
    $const180.1 = const(float, 0.25)         ['$const180.1']
    $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined) ['$182inplace_multiply.2', '$const180.1', 'a']
    a = $182inplace_multiply.2               ['$182inplace_multiply.2', 'a']
    $const188.4 = const(float, 0.25)         ['$const188.4']
    $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined) ['$190inplace_multiply.5', '$const188.4', 'b']
    b = $190inplace_multiply.5               ['$190inplace_multiply.5', 'b']
    scale = const(bool, True)                ['scale']
    jump 204                                 []
label 200:
    scale = const(bool, False)               ['scale']
    jump 204                                 []
label 204:
    $const206.1 = const(int, 0)              ['$const206.1']
    $208compare_op.2 = a >= $const206.1      ['$208compare_op.2', '$const206.1', 'a']
    bool210 = global(bool: <class 'bool'>)   ['bool210']
    $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None) ['$208compare_op.2', '$210pred', 'bool210']
    branch $210pred, 214, 258                ['$210pred']
label 214:
    $214load_global.0 = global(math: <module 'math' (built-in)>) ['$214load_global.0']
    $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt) ['$214load_global.0', '$216load_method.1']
    $220load_global.3 = global(math: <module 'math' (built-in)>) ['$220load_global.3']
    $222load_method.4 = getattr(value=$220load_global.3, attr=hypot) ['$220load_global.3', '$222load_method.4']
    $228call_method.7 = call $222load_method.4(a, b, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$222load_method.4', '$228call_method.7', 'a', 'b']
    $230binary_add.8 = a + $228call_method.7 ['$228call_method.7', '$230binary_add.8', 'a']
    $const232.9 = const(float, 0.5)          ['$const232.9']
    $234binary_multiply.10 = $230binary_add.8 * $const232.9 ['$230binary_add.8', '$234binary_multiply.10', '$const232.9']
    t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None) ['$216load_method.1', '$234binary_multiply.10', 't']
    real = t                                 ['real', 't']
    $const246.14 = const(int, 2)             ['$const246.14']
    $250binary_multiply.16 = $const246.14 * t ['$250binary_multiply.16', '$const246.14', 't']
    imag = b / $250binary_multiply.16        ['$250binary_multiply.16', 'b', 'imag']
    jump 314                                 []
label 258:
    $258load_global.0 = global(math: <module 'math' (built-in)>) ['$258load_global.0']
    $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt) ['$258load_global.0', '$260load_method.1']
    $264unary_negative.3 = unary(fn=<built-in function neg>, value=a) ['$264unary_negative.3', 'a']
    $266load_global.4 = global(math: <module 'math' (built-in)>) ['$266load_global.4']
    $268load_method.5 = getattr(value=$266load_global.4, attr=hypot) ['$266load_global.4', '$268load_method.5']
    $274call_method.8 = call $268load_method.5(a, b, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$268load_method.5', '$274call_method.8', 'a', 'b']
    $276binary_add.9 = $264unary_negative.3 + $274call_method.8 ['$264unary_negative.3', '$274call_method.8', '$276binary_add.9']
    $const278.10 = const(float, 0.5)         ['$const278.10']
    $280binary_multiply.11 = $276binary_add.9 * $const278.10 ['$276binary_add.9', '$280binary_multiply.11', '$const278.10']
    t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None) ['$260load_method.1', '$280binary_multiply.11', 't']
    $286load_global.13 = global(abs: <built-in function abs>) ['$286load_global.13']
    $290call_function.15 = call $286load_global.13(b, func=$286load_global.13, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$286load_global.13', '$290call_function.15', 'b']
    $const292.16 = const(int, 2)             ['$const292.16']
    $296binary_multiply.18 = $const292.16 * t ['$296binary_multiply.18', '$const292.16', 't']
    real = $290call_function.15 / $296binary_multiply.18 ['$290call_function.15', '$296binary_multiply.18', 'real']
    $302load_global.20 = global(math: <module 'math' (built-in)>) ['$302load_global.20']
    $304load_method.21 = getattr(value=$302load_global.20, attr=copysign) ['$302load_global.20', '$304load_method.21']
    imag = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None) ['$304load_method.21', 'b', 'imag', 't']
    jump 314                                 []
label 314:
    bool316 = global(bool: <class 'bool'>)   ['bool316']
    $316pred = call bool316(scale, func=bool316, args=(Var(scale, cmathimpl.py:242),), kws=(), vararg=None, varkwarg=None, target=None) ['$316pred', 'bool316', 'scale']
    branch $316pred, 320, 334                ['$316pred']
label 320:
    $320load_global.0 = global(complex: <class 'complex'>) ['$320load_global.0']
    $const324.2 = const(int, 2)              ['$const324.2']
    $326binary_multiply.3 = real * $const324.2 ['$326binary_multiply.3', '$const324.2', 'real']
    $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag, cmathimpl.py:249)], kws=(), vararg=None, varkwarg=None, target=None) ['$320load_global.0', '$326binary_multiply.3', '$330call_function.5', 'imag']
    $332return_value.6 = cast(value=$330call_function.5) ['$330call_function.5', '$332return_value.6']
    return $332return_value.6                ['$332return_value.6']
label 334:
    $334load_global.0 = global(complex: <class 'complex'>) ['$334load_global.0']
    $340call_function.3 = call $334load_global.0(real, imag, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag, cmathimpl.py:249)], kws=(), vararg=None, varkwarg=None, target=None) ['$334load_global.0', '$340call_function.3', 'imag', 'real']
    $342return_value.4 = cast(value=$340call_function.3) ['$340call_function.3', '$342return_value.4']
    return $342return_value.4                ['$342return_value.4']

DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 0
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,596 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,596 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,596 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,596 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,596 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 22
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,596 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,596 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 30
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,596 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 44
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,596 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 54
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,596 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 68
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,596 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 78
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,596 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 88
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,596 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 98
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,596 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,596 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 106
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,596 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,596 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,596 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 132
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,596 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,596 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,596 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 154
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,596 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,596 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 166
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,596 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,596 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,596 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,596 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,596 ==== SSA block analysis pass on 178
DEBUG 2023-04-14 17:43:04,596 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,596 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,596 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,596 on stmt: a = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,596 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,596 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,596 on stmt: b = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,605 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,605 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,605 ==== SSA block analysis pass on 200
DEBUG 2023-04-14 17:43:04,605 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,605 on stmt: scale = const(bool, False)
DEBUG 2023-04-14 17:43:04,605 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,605 ==== SSA block analysis pass on 204
DEBUG 2023-04-14 17:43:04,605 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,605 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,605 on stmt: $208compare_op.2 = a >= $const206.1
DEBUG 2023-04-14 17:43:04,605 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,605 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,605 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,605 ==== SSA block analysis pass on 214
DEBUG 2023-04-14 17:43:04,605 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,605 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,605 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,605 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,605 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,605 on stmt: $228call_method.7 = call $222load_method.4(a, b, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,605 on stmt: $230binary_add.8 = a + $228call_method.7
DEBUG 2023-04-14 17:43:04,605 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,605 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,605 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,605 on stmt: real = t
DEBUG 2023-04-14 17:43:04,605 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,605 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,605 on stmt: imag = b / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,605 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,605 ==== SSA block analysis pass on 258
DEBUG 2023-04-14 17:43:04,605 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,605 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,605 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,605 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a)
DEBUG 2023-04-14 17:43:04,605 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,605 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,605 on stmt: $274call_method.8 = call $268load_method.5(a, b, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,605 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,605 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,605 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,605 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,605 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,605 on stmt: $290call_function.15 = call $286load_global.13(b, func=$286load_global.13, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,605 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,605 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,605 on stmt: real = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,605 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,605 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,605 on stmt: imag = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,605 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,605 ==== SSA block analysis pass on 314
DEBUG 2023-04-14 17:43:04,605 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,605 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,605 on stmt: $316pred = call bool316(scale, func=bool316, args=(Var(scale, cmathimpl.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,605 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,605 ==== SSA block analysis pass on 320
DEBUG 2023-04-14 17:43:04,605 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,605 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,605 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,605 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,605 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag, cmathimpl.py:249)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,605 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,605 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,605 ==== SSA block analysis pass on 334
DEBUG 2023-04-14 17:43:04,605 Running <numba.core.ssa._GatherDefsHandler object at 0x0000026617DD47F0>
DEBUG 2023-04-14 17:43:04,605 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,605 on stmt: $340call_function.3 = call $334load_global.0(real, imag, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag, cmathimpl.py:249)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,605 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,605 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,610 defs defaultdict(<class 'list'>,
            {'$102compare_op.2': [<numba.core.ir.Assign object at 0x000002661919D910>],
             '$104pred': [<numba.core.ir.Assign object at 0x000002661919DD90>],
             '$106load_global.0': [<numba.core.ir.Assign object at 0x0000026619197340>],
             '$108load_global.1': [<numba.core.ir.Assign object at 0x00000266191973D0>],
             '$114binary_subtract.4': [<numba.core.ir.Assign object at 0x0000026619199E80>],
             '$116call_function.5': [<numba.core.ir.Assign object at 0x0000026619199FD0>],
             '$118load_global.6': [<numba.core.ir.Assign object at 0x0000026619199B20>],
             '$120load_method.7': [<numba.core.ir.Assign object at 0x0000026619199D30>],
             '$126call_method.10': [<numba.core.ir.Assign object at 0x0000026619199700>],
             '$128call_function.11': [<numba.core.ir.Assign object at 0x00000266191997F0>],
             '$130return_value.12': [<numba.core.ir.Assign object at 0x0000026619199550>],
             '$132load_global.0': [<numba.core.ir.Assign object at 0x0000026619199640>],
             '$136load_global.2': [<numba.core.ir.Assign object at 0x0000026617B80730>],
             '$138load_method.3': [<numba.core.ir.Assign object at 0x000002661905CC40>],
             '$144binary_subtract.6': [<numba.core.ir.Assign object at 0x000002661905C3A0>],
             '$148call_method.8': [<numba.core.ir.Assign object at 0x000002661905C9D0>],
             '$150call_function.9': [<numba.core.ir.Assign object at 0x000002661905C5B0>],
             '$152return_value.10': [<numba.core.ir.Assign object at 0x000002661905C280>],
             '$154load_global.0': [<numba.core.ir.Assign object at 0x000002661905C3D0>],
             '$158call_function.2': [<numba.core.ir.Assign object at 0x000002661905C7C0>],
             '$160load_deref.3': [<numba.core.ir.Assign object at 0x000002661905C7F0>],
             '$162compare_op.4': [<numba.core.ir.Assign object at 0x0000026618E6FA60>],
             '$164pred': [<numba.core.ir.Assign object at 0x0000026618E6F940>],
             '$166load_global.0': [<numba.core.ir.Assign object at 0x0000026618E6F3D0>],
             '$170call_function.2': [<numba.core.ir.Assign object at 0x0000026618E6F850>],
             '$172load_deref.3': [<numba.core.ir.Assign object at 0x0000026618E6F0D0>],
             '$174compare_op.4': [<numba.core.ir.Assign object at 0x0000026618E6F9A0>],
             '$176pred': [<numba.core.ir.Assign object at 0x0000026618E6F190>],
             '$182inplace_multiply.2': [<numba.core.ir.Assign object at 0x0000026618E3C370>],
             '$18compare_op.6': [<numba.core.ir.Assign object at 0x0000026618F59E80>],
             '$190inplace_multiply.5': [<numba.core.ir.Assign object at 0x0000026618E3CBB0>],
             '$208compare_op.2': [<numba.core.ir.Assign object at 0x00000266145D1940>],
             '$20pred': [<numba.core.ir.Assign object at 0x000002661909CAF0>],
             '$210pred': [<numba.core.ir.Assign object at 0x0000026617AD2250>],
             '$214load_global.0': [<numba.core.ir.Assign object at 0x0000026617AD22E0>],
             '$216load_method.1': [<numba.core.ir.Assign object at 0x00000266146491C0>],
             '$220load_global.3': [<numba.core.ir.Assign object at 0x0000026617B41D90>],
             '$222load_method.4': [<numba.core.ir.Assign object at 0x0000026617B41F40>],
             '$228call_method.7': [<numba.core.ir.Assign object at 0x000002661460A970>],
             '$230binary_add.8': [<numba.core.ir.Assign object at 0x000002661460AE50>],
             '$234binary_multiply.10': [<numba.core.ir.Assign object at 0x000002661460A7F0>],
             '$250binary_multiply.16': [<numba.core.ir.Assign object at 0x0000026617DCF940>],
             '$258load_global.0': [<numba.core.ir.Assign object at 0x00000266145D1B20>],
             '$260load_method.1': [<numba.core.ir.Assign object at 0x0000026617DCF730>],
             '$264unary_negative.3': [<numba.core.ir.Assign object at 0x0000026617DCFA30>],
             '$266load_global.4': [<numba.core.ir.Assign object at 0x0000026617DCF430>],
             '$268load_method.5': [<numba.core.ir.Assign object at 0x0000026617DCFFA0>],
             '$26compare_op.2': [<numba.core.ir.Assign object at 0x000002661909C460>],
             '$274call_method.8': [<numba.core.ir.Assign object at 0x0000026617E0FBE0>],
             '$276binary_add.9': [<numba.core.ir.Assign object at 0x0000026617E0F760>],
             '$280binary_multiply.11': [<numba.core.ir.Assign object at 0x0000026617E0F070>],
             '$286load_global.13': [<numba.core.ir.Assign object at 0x0000026617E0FB20>],
             '$28pred': [<numba.core.ir.Assign object at 0x000002661909C4C0>],
             '$290call_function.15': [<numba.core.ir.Assign object at 0x0000026617E0FDC0>],
             '$296binary_multiply.18': [<numba.core.ir.Assign object at 0x0000026617DF9A90>],
             '$302load_global.20': [<numba.core.ir.Assign object at 0x0000026617DF9DC0>],
             '$304load_method.21': [<numba.core.ir.Assign object at 0x0000026617DF9F40>],
             '$30load_global.0': [<numba.core.ir.Assign object at 0x000002661909C2E0>],
             '$316pred': [<numba.core.ir.Assign object at 0x0000026617DF9790>],
             '$320load_global.0': [<numba.core.ir.Assign object at 0x0000026617DF9670>],
             '$326binary_multiply.3': [<numba.core.ir.Assign object at 0x00000266145C3AC0>],
             '$32load_global.1': [<numba.core.ir.Assign object at 0x000002661909C070>],
             '$330call_function.5': [<numba.core.ir.Assign object at 0x0000026617DEEE50>],
             '$332return_value.6': [<numba.core.ir.Assign object at 0x0000026617DEEAF0>],
             '$334load_global.0': [<numba.core.ir.Assign object at 0x0000026617DEE370>],
             '$340call_function.3': [<numba.core.ir.Assign object at 0x0000026617DEE280>],
             '$342return_value.4': [<numba.core.ir.Assign object at 0x0000026617DEE700>],
             '$36call_function.3': [<numba.core.ir.Assign object at 0x0000026618F60910>],
             '$40call_function.5': [<numba.core.ir.Assign object at 0x0000026619188EE0>],
             '$42return_value.6': [<numba.core.ir.Assign object at 0x0000026619188190>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x0000026619188250>],
             '$46load_method.1': [<numba.core.ir.Assign object at 0x0000026619188910>],
             '$50call_method.3': [<numba.core.ir.Assign object at 0x0000026619188BE0>],
             '$52pred': [<numba.core.ir.Assign object at 0x0000026619188520>],
             '$54load_global.0': [<numba.core.ir.Assign object at 0x0000026619188AC0>],
             '$56load_global.1': [<numba.core.ir.Assign object at 0x0000026619188880>],
             '$60call_function.3': [<numba.core.ir.Assign object at 0x0000026619190D00>],
             '$64call_function.5': [<numba.core.ir.Assign object at 0x00000266191908E0>],
             '$66return_value.6': [<numba.core.ir.Assign object at 0x0000026619190A60>],
             '$68load_global.0': [<numba.core.ir.Assign object at 0x0000026619190D30>],
             '$70load_method.1': [<numba.core.ir.Assign object at 0x0000026619190730>],
             '$74call_method.3': [<numba.core.ir.Assign object at 0x00000266191A9DC0>],
             '$76pred': [<numba.core.ir.Assign object at 0x00000266191A9F70>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x00000266191A9610>],
             '$84call_function.3': [<numba.core.ir.Assign object at 0x00000266191A92E0>],
             '$86return_value.4': [<numba.core.ir.Assign object at 0x00000266191A97F0>],
             '$88load_global.0': [<numba.core.ir.Assign object at 0x00000266191A9FA0>],
             '$90load_method.1': [<numba.core.ir.Assign object at 0x000002661919D130>],
             '$94call_method.3': [<numba.core.ir.Assign object at 0x000002661919D580>],
             '$96pred': [<numba.core.ir.Assign object at 0x000002661919DB50>],
             '$const100.1': [<numba.core.ir.Assign object at 0x000002661919DAF0>],
             '$const16.5': [<numba.core.ir.Assign object at 0x0000026618F59BB0>],
             '$const180.1': [<numba.core.ir.Assign object at 0x0000026618E3C1C0>],
             '$const188.4': [<numba.core.ir.Assign object at 0x0000026618E3CFA0>],
             '$const206.1': [<numba.core.ir.Assign object at 0x00000266145D1B50>],
             '$const232.9': [<numba.core.ir.Assign object at 0x000002661460ACD0>],
             '$const24.1': [<numba.core.ir.Assign object at 0x000002661909C670>],
             '$const246.14': [<numba.core.ir.Assign object at 0x0000026617DCF520>],
             '$const278.10': [<numba.core.ir.Assign object at 0x0000026617E0F430>],
             '$const292.16': [<numba.core.ir.Assign object at 0x0000026617E0F820>],
             '$const324.2': [<numba.core.ir.Assign object at 0x00000266145C30A0>],
             'a': [<numba.core.ir.Assign object at 0x0000026618F59460>,
                   <numba.core.ir.Assign object at 0x0000026618E3C700>],
             'b': [<numba.core.ir.Assign object at 0x0000026618F59610>,
                   <numba.core.ir.Assign object at 0x0000026618E3C880>],
             'bool104': [<numba.core.ir.Assign object at 0x000002661919D6D0>],
             'bool164': [<numba.core.ir.Assign object at 0x0000026618E6FEB0>],
             'bool176': [<numba.core.ir.Assign object at 0x0000026618E6F280>],
             'bool20': [<numba.core.ir.Assign object at 0x000002661909CB20>],
             'bool210': [<numba.core.ir.Assign object at 0x00000266145D1130>],
             'bool28': [<numba.core.ir.Assign object at 0x000002661909C3D0>],
             'bool316': [<numba.core.ir.Assign object at 0x0000026617DF99D0>],
             'bool52': [<numba.core.ir.Assign object at 0x0000026619188700>],
             'bool76': [<numba.core.ir.Assign object at 0x00000266191A9CA0>],
             'bool96': [<numba.core.ir.Assign object at 0x000002661919DBE0>],
             'imag': [<numba.core.ir.Assign object at 0x0000026617DCF220>,
                      <numba.core.ir.Assign object at 0x0000026617DF9370>],
             'real': [<numba.core.ir.Assign object at 0x0000026614647940>,
                      <numba.core.ir.Assign object at 0x0000026617DF9BB0>],
             'scale': [<numba.core.ir.Assign object at 0x0000026618E3CDF0>,
                       <numba.core.ir.Assign object at 0x00000266145D15B0>],
             't': [<numba.core.ir.Assign object at 0x000002661460AD90>,
                   <numba.core.ir.Assign object at 0x0000026617E0F1F0>],
             'z': [<numba.core.ir.Assign object at 0x0000026618F59EE0>]})
DEBUG 2023-04-14 17:43:04,610 SSA violators {'imag', 'scale', 'b', 'a', 'real', 't'}
DEBUG 2023-04-14 17:43:04,610 Fix SSA violator on var imag
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,610 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,610 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,610 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,610 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,610 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,610 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,610 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,610 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,610 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,610 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,610 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,610 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,610 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,610 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,610 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,610 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,610 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,610 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,610 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,610 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,610 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,610 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,610 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,610 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,610 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,610 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,610 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,610 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,610 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,610 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,610 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,610 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,615 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,616 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,616 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,616 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,616 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,616 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,616 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,616 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,616 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,616 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,616 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,616 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,616 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,616 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,616 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,616 on stmt: a = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,616 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,616 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,616 on stmt: b = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,616 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,616 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,616 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,616 on stmt: scale = const(bool, False)
DEBUG 2023-04-14 17:43:04,616 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,616 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,616 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,616 on stmt: $208compare_op.2 = a >= $const206.1
DEBUG 2023-04-14 17:43:04,616 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,616 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,616 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,616 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,616 on stmt: $228call_method.7 = call $222load_method.4(a, b, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: $230binary_add.8 = a + $228call_method.7
DEBUG 2023-04-14 17:43:04,616 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,616 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,616 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: real = t
DEBUG 2023-04-14 17:43:04,616 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,616 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,616 on stmt: imag = b / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,616 first assign: imag
DEBUG 2023-04-14 17:43:04,616 replaced with: imag = b / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,616 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,616 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,616 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,616 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a)
DEBUG 2023-04-14 17:43:04,616 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,616 on stmt: $274call_method.8 = call $268load_method.5(a, b, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,616 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,616 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,616 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $290call_function.15 = call $286load_global.13(b, func=$286load_global.13, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,616 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,616 on stmt: real = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,616 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,616 on stmt: imag = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 replaced with: imag.1 = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,616 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,616 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $316pred = call bool316(scale, func=bool316, args=(Var(scale, cmathimpl.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,616 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,616 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,616 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,616 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,616 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,616 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag, cmathimpl.py:249)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,616 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,621 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $340call_function.3 = call $334load_global.0(real, imag, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag, cmathimpl.py:249)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,621 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,621 Replaced assignments: defaultdict(<class 'list'>,
            {214: [<numba.core.ir.Assign object at 0x0000026618F60E20>],
             258: [<numba.core.ir.Assign object at 0x0000026618F60D60>]})
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,621 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,621 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,621 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,621 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,621 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,621 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,621 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,621 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,621 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,621 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,621 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,621 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,621 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,621 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,621 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,621 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,621 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,621 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,621 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,621 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,621 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,621 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,626 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,626 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,626 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,626 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,626 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,626 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,626 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,626 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,626 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,626 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,626 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,626 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,626 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,626 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,626 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,626 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,626 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,626 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,626 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,626 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,626 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,626 on stmt: a = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,626 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,626 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,626 on stmt: b = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,626 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,626 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,626 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,626 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,626 on stmt: scale = const(bool, False)
DEBUG 2023-04-14 17:43:04,626 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,626 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,626 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,626 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,626 on stmt: $208compare_op.2 = a >= $const206.1
DEBUG 2023-04-14 17:43:04,626 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,626 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,626 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,626 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,626 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,626 on stmt: $228call_method.7 = call $222load_method.4(a, b, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: $230binary_add.8 = a + $228call_method.7
DEBUG 2023-04-14 17:43:04,626 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,626 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,626 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: real = t
DEBUG 2023-04-14 17:43:04,626 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,626 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,626 on stmt: imag = b / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,626 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,626 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,626 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,626 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,626 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a)
DEBUG 2023-04-14 17:43:04,626 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,626 on stmt: $274call_method.8 = call $268load_method.5(a, b, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,626 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,626 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,626 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,626 on stmt: $290call_function.15 = call $286load_global.13(b, func=$286load_global.13, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,626 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,626 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,631 on stmt: real = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,631 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,631 on stmt: imag.1 = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,631 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,631 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,631 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $316pred = call bool316(scale, func=bool316, args=(Var(scale, cmathimpl.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,631 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,631 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,631 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,631 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,631 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag, cmathimpl.py:249)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 find_def var='imag' stmt=$330call_function.5 = call $320load_global.0($326binary_multiply.3, imag, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag, cmathimpl.py:249)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 find_def_from_top label 320
DEBUG 2023-04-14 17:43:04,631 idom 314 from label 320
DEBUG 2023-04-14 17:43:04,631 find_def_from_bottom label 314
DEBUG 2023-04-14 17:43:04,631 find_def_from_top label 314
DEBUG 2023-04-14 17:43:04,631 insert phi node imag.2 = phi(incoming_values=[], incoming_blocks=[]) at 314
DEBUG 2023-04-14 17:43:04,631 find_def_from_bottom label 258
DEBUG 2023-04-14 17:43:04,631 incoming_def imag.1 = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 find_def_from_bottom label 214
DEBUG 2023-04-14 17:43:04,631 incoming_def imag = b / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,631 replaced with: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,631 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,631 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,631 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,631 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $340call_function.3 = call $334load_global.0(real, imag, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag, cmathimpl.py:249)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 find_def var='imag' stmt=$340call_function.3 = call $334load_global.0(real, imag, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag, cmathimpl.py:249)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 find_def_from_top label 334
DEBUG 2023-04-14 17:43:04,631 idom 314 from label 334
DEBUG 2023-04-14 17:43:04,631 find_def_from_bottom label 314
DEBUG 2023-04-14 17:43:04,631 replaced with: $340call_function.3 = call $334load_global.0(real, imag.2, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,631 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,631 Fix SSA violator on var scale
DEBUG 2023-04-14 17:43:04,631 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,631 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,631 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,631 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,631 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,631 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,631 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,631 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,631 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,631 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,631 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,631 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,631 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,631 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,631 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,631 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,631 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,631 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,631 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,631 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,631 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,631 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,631 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,631 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,631 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,631 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,631 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,631 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,631 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,631 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,631 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,635 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,635 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,635 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,635 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,635 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,635 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,635 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,635 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,635 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,635 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,635 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,635 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,635 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,635 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,635 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,635 on stmt: a = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,635 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,635 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,635 on stmt: b = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,635 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,635 first assign: scale
DEBUG 2023-04-14 17:43:04,635 replaced with: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,635 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: scale = const(bool, False)
DEBUG 2023-04-14 17:43:04,635 replaced with: scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,635 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,635 on stmt: $208compare_op.2 = a >= $const206.1
DEBUG 2023-04-14 17:43:04,635 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,635 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,635 on stmt: $228call_method.7 = call $222load_method.4(a, b, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $230binary_add.8 = a + $228call_method.7
DEBUG 2023-04-14 17:43:04,635 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,635 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,635 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: real = t
DEBUG 2023-04-14 17:43:04,635 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,635 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,635 on stmt: imag = b / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,635 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,635 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a)
DEBUG 2023-04-14 17:43:04,635 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,635 on stmt: $274call_method.8 = call $268load_method.5(a, b, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,635 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,635 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,635 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $290call_function.15 = call $286load_global.13(b, func=$286load_global.13, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,635 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,635 on stmt: real = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,635 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,635 on stmt: imag.1 = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: imag.2 = phi(incoming_values=[Var(imag.1, cmathimpl.py:253), Var(imag, cmathimpl.py:249)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,635 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $316pred = call bool316(scale, func=bool316, args=(Var(scale, cmathimpl.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,635 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,635 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,635 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FreshVarHandler object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,635 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $340call_function.3 = call $334load_global.0(real, imag.2, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,635 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,635 Replaced assignments: defaultdict(<class 'list'>,
            {178: [<numba.core.ir.Assign object at 0x0000026617B39280>],
             200: [<numba.core.ir.Assign object at 0x0000026618F606A0>]})
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,635 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,635 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,635 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,635 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,635 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,635 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,635 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,635 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,635 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,635 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,635 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,635 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,635 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,635 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,635 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,635 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,635 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,635 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,635 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,635 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,635 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,635 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,635 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,645 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,645 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,645 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,645 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,645 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,645 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,645 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,645 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,645 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,645 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,645 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,645 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,645 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,645 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,645 on stmt: a = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,645 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,645 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,645 on stmt: b = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,645 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,645 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,645 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,645 on stmt: $208compare_op.2 = a >= $const206.1
DEBUG 2023-04-14 17:43:04,645 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,645 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,645 on stmt: $228call_method.7 = call $222load_method.4(a, b, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $230binary_add.8 = a + $228call_method.7
DEBUG 2023-04-14 17:43:04,645 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,645 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,645 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: real = t
DEBUG 2023-04-14 17:43:04,645 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,645 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,645 on stmt: imag = b / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,645 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,645 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a)
DEBUG 2023-04-14 17:43:04,645 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,645 on stmt: $274call_method.8 = call $268load_method.5(a, b, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,645 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,645 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,645 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $290call_function.15 = call $286load_global.13(b, func=$286load_global.13, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,645 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,645 on stmt: real = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,645 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,645 on stmt: imag.1 = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: imag.2 = phi(incoming_values=[Var(imag.1, cmathimpl.py:253), Var(imag, cmathimpl.py:249)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,645 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $316pred = call bool316(scale, func=bool316, args=(Var(scale, cmathimpl.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 find_def var='scale' stmt=$316pred = call bool316(scale, func=bool316, args=(Var(scale, cmathimpl.py:242),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 find_def_from_top label 314
DEBUG 2023-04-14 17:43:04,645 idom 204 from label 314
DEBUG 2023-04-14 17:43:04,645 find_def_from_bottom label 204
DEBUG 2023-04-14 17:43:04,645 find_def_from_top label 204
DEBUG 2023-04-14 17:43:04,645 insert phi node scale.2 = phi(incoming_values=[], incoming_blocks=[]) at 204
DEBUG 2023-04-14 17:43:04,645 find_def_from_bottom label 200
DEBUG 2023-04-14 17:43:04,645 incoming_def scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,645 find_def_from_bottom label 178
DEBUG 2023-04-14 17:43:04,645 incoming_def scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,645 replaced with: $316pred = call bool316(scale.2, func=bool316, args=(Var(scale.2, cmathimpl.py:255),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,645 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,645 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,645 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B390A0>
DEBUG 2023-04-14 17:43:04,645 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $340call_function.3 = call $334load_global.0(real, imag.2, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,645 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,645 Fix SSA violator on var b
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,645 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,645 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,645 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,645 first assign: b
DEBUG 2023-04-14 17:43:04,645 replaced with: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,645 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,645 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,645 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,645 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,645 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,645 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,645 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,645 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,645 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,645 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,645 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,645 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,645 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,645 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,645 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,645 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,645 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,655 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,655 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,655 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,655 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,655 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,655 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,655 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,655 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,655 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,655 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,655 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,655 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,655 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,655 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,655 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,655 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,655 on stmt: a = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,655 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,655 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,655 on stmt: b = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,655 replaced with: b.1 = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,655 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,655 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,655 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: scale.2 = phi(incoming_values=[Var(scale.1, cmathimpl.py:244), Var(scale, cmathimpl.py:242)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,655 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,655 on stmt: $208compare_op.2 = a >= $const206.1
DEBUG 2023-04-14 17:43:04,655 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,655 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,655 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,655 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,655 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,655 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,655 on stmt: $228call_method.7 = call $222load_method.4(a, b, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: $230binary_add.8 = a + $228call_method.7
DEBUG 2023-04-14 17:43:04,655 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,655 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,655 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,655 on stmt: real = t
DEBUG 2023-04-14 17:43:04,655 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,660 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,660 on stmt: imag = b / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,660 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,660 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,660 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,660 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,660 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a)
DEBUG 2023-04-14 17:43:04,660 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,660 on stmt: $274call_method.8 = call $268load_method.5(a, b, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,660 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,660 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,660 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $290call_function.15 = call $286load_global.13(b, func=$286load_global.13, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,660 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,660 on stmt: real = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,660 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,660 on stmt: imag.1 = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,660 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,660 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,660 on stmt: imag.2 = phi(incoming_values=[Var(imag.1, cmathimpl.py:253), Var(imag, cmathimpl.py:249)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,660 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $316pred = call bool316(scale.2, func=bool316, args=(Var(scale.2, cmathimpl.py:255),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,660 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,660 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,660 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,660 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,660 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,660 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,660 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,660 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,660 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $340call_function.3 = call $334load_global.0(real, imag.2, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,660 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,660 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026617B39040>],
             178: [<numba.core.ir.Assign object at 0x0000026618F60B20>]})
DEBUG 2023-04-14 17:43:04,660 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,660 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,660 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,660 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,660 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,660 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,660 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,660 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,660 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,660 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,660 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,660 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,660 find_def var='b' stmt=$26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,660 find_def_from_top label 22
DEBUG 2023-04-14 17:43:04,660 idom 0 from label 22
DEBUG 2023-04-14 17:43:04,660 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,660 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,660 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,660 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,660 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 find_def var='b' stmt=$36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 find_def_from_top label 30
DEBUG 2023-04-14 17:43:04,660 idom 22 from label 30
DEBUG 2023-04-14 17:43:04,660 find_def_from_bottom label 22
DEBUG 2023-04-14 17:43:04,660 find_def_from_top label 22
DEBUG 2023-04-14 17:43:04,660 idom 0 from label 22
DEBUG 2023-04-14 17:43:04,660 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,660 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 find_def var='b' stmt=$40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 find_def_from_top label 30
DEBUG 2023-04-14 17:43:04,660 idom 22 from label 30
DEBUG 2023-04-14 17:43:04,660 find_def_from_bottom label 22
DEBUG 2023-04-14 17:43:04,660 find_def_from_top label 22
DEBUG 2023-04-14 17:43:04,660 idom 0 from label 22
DEBUG 2023-04-14 17:43:04,660 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,660 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,660 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,660 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,660 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,660 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,660 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,660 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 find_def var='b' stmt=$50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,660 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,660 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,660 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,665 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,665 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,665 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,665 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 find_def var='b' stmt=$60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 54
DEBUG 2023-04-14 17:43:04,665 idom 44 from label 54
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,665 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,665 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 find_def var='b' stmt=$64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 54
DEBUG 2023-04-14 17:43:04,665 idom 44 from label 54
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,665 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,665 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,665 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,665 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,665 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,665 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,665 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,665 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,665 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,665 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,665 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,665 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,665 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,665 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,665 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,665 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,665 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,665 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,665 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,665 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,665 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,665 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,665 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,665 find_def var='b' stmt=$114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 106
DEBUG 2023-04-14 17:43:04,665 idom 98 from label 106
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 98
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 98
DEBUG 2023-04-14 17:43:04,665 idom 88 from label 98
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,665 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,665 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,665 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,665 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,665 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,665 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 find_def var='b' stmt=$126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 106
DEBUG 2023-04-14 17:43:04,665 idom 98 from label 106
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 98
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 98
DEBUG 2023-04-14 17:43:04,665 idom 88 from label 98
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,665 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,665 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,665 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,665 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,665 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,665 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,665 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,665 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,670 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,670 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,670 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,670 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,670 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,670 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,670 find_def var='b' stmt=$144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 132
DEBUG 2023-04-14 17:43:04,670 idom 98 from label 132
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 98
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 98
DEBUG 2023-04-14 17:43:04,670 idom 88 from label 98
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,670 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,670 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,670 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,670 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,670 find_def var='b' stmt=$148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 132
DEBUG 2023-04-14 17:43:04,670 idom 98 from label 132
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 98
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 98
DEBUG 2023-04-14 17:43:04,670 idom 88 from label 98
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,670 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,670 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,670 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,670 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,670 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,670 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,670 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,670 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,670 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,670 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,670 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,670 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,670 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,670 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,670 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,670 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,670 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,670 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,670 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,670 find_def var='b' stmt=$170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 166
DEBUG 2023-04-14 17:43:04,670 idom 154 from label 166
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 154
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 154
DEBUG 2023-04-14 17:43:04,670 idom 88 from label 154
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,670 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,670 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,670 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,670 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,670 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,670 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,670 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,670 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,670 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,670 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,670 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,670 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,670 on stmt: a = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,670 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,670 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,670 find_def var='b' stmt=$190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 178
DEBUG 2023-04-14 17:43:04,670 idom 154 from label 178
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 154
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 154
DEBUG 2023-04-14 17:43:04,670 idom 88 from label 154
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,670 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,670 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,670 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,670 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,670 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,670 on stmt: b.1 = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,670 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,670 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,670 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,670 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,670 on stmt: scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,670 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,670 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,670 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,670 on stmt: scale.2 = phi(incoming_values=[Var(scale.1, cmathimpl.py:244), Var(scale, cmathimpl.py:242)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,670 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,670 on stmt: $208compare_op.2 = a >= $const206.1
DEBUG 2023-04-14 17:43:04,675 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,675 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,675 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,675 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,675 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,675 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,675 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,675 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,675 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,675 on stmt: $228call_method.7 = call $222load_method.4(a, b, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,675 find_def var='b' stmt=$228call_method.7 = call $222load_method.4(a, b, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,675 find_def_from_top label 214
DEBUG 2023-04-14 17:43:04,675 idom 204 from label 214
DEBUG 2023-04-14 17:43:04,675 find_def_from_bottom label 204
DEBUG 2023-04-14 17:43:04,675 find_def_from_top label 204
DEBUG 2023-04-14 17:43:04,675 insert phi node b.2 = phi(incoming_values=[], incoming_blocks=[]) at 204
DEBUG 2023-04-14 17:43:04,675 find_def_from_bottom label 200
DEBUG 2023-04-14 17:43:04,675 find_def_from_top label 200
DEBUG 2023-04-14 17:43:04,675 idom 166 from label 200
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 166
DEBUG 2023-04-14 17:43:04,676 find_def_from_top label 166
DEBUG 2023-04-14 17:43:04,676 idom 154 from label 166
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 154
DEBUG 2023-04-14 17:43:04,676 find_def_from_top label 154
DEBUG 2023-04-14 17:43:04,676 idom 88 from label 154
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,676 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,676 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,676 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,676 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,676 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,676 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,676 incoming_def b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 178
DEBUG 2023-04-14 17:43:04,676 incoming_def b.1 = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,676 replaced with: $228call_method.7 = call $222load_method.4(a, b.2, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $230binary_add.8 = a + $228call_method.7
DEBUG 2023-04-14 17:43:04,676 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,676 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,676 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: real = t
DEBUG 2023-04-14 17:43:04,676 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,676 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,676 on stmt: imag = b / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,676 find_def var='b' stmt=imag = b / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,676 find_def_from_top label 214
DEBUG 2023-04-14 17:43:04,676 idom 204 from label 214
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 204
DEBUG 2023-04-14 17:43:04,676 replaced with: imag = b.2 / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,676 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,676 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,676 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a)
DEBUG 2023-04-14 17:43:04,676 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,676 on stmt: $274call_method.8 = call $268load_method.5(a, b, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 find_def var='b' stmt=$274call_method.8 = call $268load_method.5(a, b, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 find_def_from_top label 258
DEBUG 2023-04-14 17:43:04,676 idom 204 from label 258
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 204
DEBUG 2023-04-14 17:43:04,676 replaced with: $274call_method.8 = call $268load_method.5(a, b.2, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,676 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,676 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,676 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $290call_function.15 = call $286load_global.13(b, func=$286load_global.13, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 find_def var='b' stmt=$290call_function.15 = call $286load_global.13(b, func=$286load_global.13, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 find_def_from_top label 258
DEBUG 2023-04-14 17:43:04,676 idom 204 from label 258
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 204
DEBUG 2023-04-14 17:43:04,676 replaced with: $290call_function.15 = call $286load_global.13(b.2, func=$286load_global.13, args=[Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,676 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,676 on stmt: real = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,676 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,676 on stmt: imag.1 = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 find_def var='b' stmt=imag.1 = call $304load_method.21(t, b, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 find_def_from_top label 258
DEBUG 2023-04-14 17:43:04,676 idom 204 from label 258
DEBUG 2023-04-14 17:43:04,676 find_def_from_bottom label 204
DEBUG 2023-04-14 17:43:04,676 replaced with: imag.1 = call $304load_method.21(t, b.2, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,676 on stmt: imag.2 = phi(incoming_values=[Var(imag.1, cmathimpl.py:253), Var(imag, cmathimpl.py:249)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,676 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $316pred = call bool316(scale.2, func=bool316, args=(Var(scale.2, cmathimpl.py:255),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,676 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,676 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,676 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,676 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FixSSAVars object at 0x00000266145F4F40>
DEBUG 2023-04-14 17:43:04,676 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $340call_function.3 = call $334load_global.0(real, imag.2, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,676 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,676 Fix SSA violator on var a
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,676 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,676 first assign: a
DEBUG 2023-04-14 17:43:04,676 replaced with: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,676 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,676 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,676 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,676 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,676 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,676 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,676 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,676 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,676 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,676 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,676 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,676 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,676 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,676 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,676 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,676 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,676 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,676 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,676 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,676 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,676 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,676 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,686 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,686 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,686 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,686 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,686 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,686 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,686 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,686 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,686 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,686 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,686 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,686 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,686 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,686 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,686 on stmt: a = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,686 replaced with: a.1 = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,686 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,686 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,686 on stmt: b.1 = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,686 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,686 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,686 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,686 on stmt: scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,686 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,686 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,686 on stmt: b.2 = phi(incoming_values=[Var(b, cmathimpl.py:222), Var(b.1, cmathimpl.py:241)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,686 on stmt: scale.2 = phi(incoming_values=[Var(scale.1, cmathimpl.py:244), Var(scale, cmathimpl.py:242)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,686 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,686 on stmt: $208compare_op.2 = a >= $const206.1
DEBUG 2023-04-14 17:43:04,686 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,686 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,686 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,686 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,686 on stmt: $228call_method.7 = call $222load_method.4(a, b.2, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: $230binary_add.8 = a + $228call_method.7
DEBUG 2023-04-14 17:43:04,686 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,686 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,686 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: real = t
DEBUG 2023-04-14 17:43:04,686 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,686 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,686 on stmt: imag = b.2 / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,686 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,686 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,686 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,686 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a)
DEBUG 2023-04-14 17:43:04,686 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,686 on stmt: $274call_method.8 = call $268load_method.5(a, b.2, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,686 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,686 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,686 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $290call_function.15 = call $286load_global.13(b.2, func=$286load_global.13, args=[Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,686 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,686 on stmt: real = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,686 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,686 on stmt: imag.1 = call $304load_method.21(t, b.2, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,686 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,686 on stmt: imag.2 = phi(incoming_values=[Var(imag.1, cmathimpl.py:253), Var(imag, cmathimpl.py:249)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,686 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $316pred = call bool316(scale.2, func=bool316, args=(Var(scale.2, cmathimpl.py:255),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,686 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,686 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,686 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,686 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,686 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,686 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,686 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,691 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,691 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,691 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DE7940>
DEBUG 2023-04-14 17:43:04,691 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $340call_function.3 = call $334load_global.0(real, imag.2, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,691 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,691 Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026617DE72E0>],
             178: [<numba.core.ir.Assign object at 0x00000266145F4DF0>]})
DEBUG 2023-04-14 17:43:04,691 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,691 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,691 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,691 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,691 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,691 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,691 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,691 find_def var='a' stmt=$18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,691 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,691 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,691 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,691 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,691 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,691 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,691 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,691 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,691 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,691 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,691 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,691 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,691 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,691 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,691 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,691 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,691 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,691 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,691 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,691 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,691 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,691 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 find_def var='a' stmt=$74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,691 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,691 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,691 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,691 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,691 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,691 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,691 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,691 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,691 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 find_def var='a' stmt=$84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 find_def_from_top label 78
DEBUG 2023-04-14 17:43:04,691 idom 68 from label 78
DEBUG 2023-04-14 17:43:04,691 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,691 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,691 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,691 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,691 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,691 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,691 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,691 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,691 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,691 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,691 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,691 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,691 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 find_def var='a' stmt=$94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,691 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,691 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,691 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,691 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,691 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,691 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,691 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,691 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,691 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,691 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,691 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,691 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,691 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,691 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,691 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,696 find_def var='a' stmt=$102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 98
DEBUG 2023-04-14 17:43:04,696 idom 88 from label 98
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,696 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,696 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,696 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,696 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,696 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,696 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,696 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,696 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,696 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,696 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,696 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,696 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,696 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 find_def var='a' stmt=$126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 106
DEBUG 2023-04-14 17:43:04,696 idom 98 from label 106
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 98
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 98
DEBUG 2023-04-14 17:43:04,696 idom 88 from label 98
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,696 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,696 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,696 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,696 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,696 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,696 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,696 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,696 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,696 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,696 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,696 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,696 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 find_def var='a' stmt=$150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 132
DEBUG 2023-04-14 17:43:04,696 idom 98 from label 132
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 98
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 98
DEBUG 2023-04-14 17:43:04,696 idom 88 from label 98
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,696 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,696 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,696 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,696 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,696 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,696 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,696 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,696 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,696 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 find_def var='a' stmt=$158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 154
DEBUG 2023-04-14 17:43:04,696 idom 88 from label 154
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,696 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,696 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,696 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,696 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,696 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,696 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,696 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,696 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,696 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,696 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,696 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,696 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,696 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,696 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,696 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,696 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,696 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,696 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,696 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,696 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,696 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,701 find_def var='a' stmt=$182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 178
DEBUG 2023-04-14 17:43:04,701 idom 154 from label 178
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 154
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 154
DEBUG 2023-04-14 17:43:04,701 idom 88 from label 154
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,701 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,701 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,701 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,701 on stmt: a.1 = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,701 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,701 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,701 on stmt: b.1 = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,701 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,701 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,701 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,701 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,701 on stmt: scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,701 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,701 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,701 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,701 on stmt: b.2 = phi(incoming_values=[Var(b, cmathimpl.py:222), Var(b.1, cmathimpl.py:241)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,701 on stmt: scale.2 = phi(incoming_values=[Var(scale.1, cmathimpl.py:244), Var(scale, cmathimpl.py:242)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,701 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,701 on stmt: $208compare_op.2 = a >= $const206.1
DEBUG 2023-04-14 17:43:04,701 find_def var='a' stmt=$208compare_op.2 = a >= $const206.1
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 204
DEBUG 2023-04-14 17:43:04,701 insert phi node a.2 = phi(incoming_values=[], incoming_blocks=[]) at 204
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 200
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 200
DEBUG 2023-04-14 17:43:04,701 idom 166 from label 200
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 166
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 166
DEBUG 2023-04-14 17:43:04,701 idom 154 from label 166
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 154
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 154
DEBUG 2023-04-14 17:43:04,701 idom 88 from label 154
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 88
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 88
DEBUG 2023-04-14 17:43:04,701 idom 68 from label 88
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 68
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 68
DEBUG 2023-04-14 17:43:04,701 idom 44 from label 68
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 44
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 44
DEBUG 2023-04-14 17:43:04,701 idom 0 from label 44
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 0
DEBUG 2023-04-14 17:43:04,701 incoming_def a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 178
DEBUG 2023-04-14 17:43:04,701 incoming_def a.1 = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,701 replaced with: $208compare_op.2 = a.2 >= $const206.1
DEBUG 2023-04-14 17:43:04,701 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,701 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,701 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,701 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,701 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,701 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,701 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,701 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,701 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,701 on stmt: $228call_method.7 = call $222load_method.4(a, b.2, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,701 find_def var='a' stmt=$228call_method.7 = call $222load_method.4(a, b.2, func=$222load_method.4, args=[Var(a, cmathimpl.py:221), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 214
DEBUG 2023-04-14 17:43:04,701 idom 204 from label 214
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 204
DEBUG 2023-04-14 17:43:04,701 replaced with: $228call_method.7 = call $222load_method.4(a.2, b.2, func=$222load_method.4, args=[Var(a.2, cmathimpl.py:246), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,701 on stmt: $230binary_add.8 = a + $228call_method.7
DEBUG 2023-04-14 17:43:04,701 find_def var='a' stmt=$230binary_add.8 = a + $228call_method.7
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 214
DEBUG 2023-04-14 17:43:04,701 idom 204 from label 214
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 204
DEBUG 2023-04-14 17:43:04,701 replaced with: $230binary_add.8 = a.2 + $228call_method.7
DEBUG 2023-04-14 17:43:04,701 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,701 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,701 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,701 on stmt: real = t
DEBUG 2023-04-14 17:43:04,701 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,701 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,701 on stmt: imag = b.2 / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,701 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,701 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,701 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,701 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,701 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,701 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a)
DEBUG 2023-04-14 17:43:04,701 find_def var='a' stmt=$264unary_negative.3 = unary(fn=<built-in function neg>, value=a)
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 258
DEBUG 2023-04-14 17:43:04,701 idom 204 from label 258
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 204
DEBUG 2023-04-14 17:43:04,701 replaced with: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a.2)
DEBUG 2023-04-14 17:43:04,701 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,701 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,701 on stmt: $274call_method.8 = call $268load_method.5(a, b.2, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,701 find_def var='a' stmt=$274call_method.8 = call $268load_method.5(a, b.2, func=$268load_method.5, args=[Var(a, cmathimpl.py:221), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,701 find_def_from_top label 258
DEBUG 2023-04-14 17:43:04,701 idom 204 from label 258
DEBUG 2023-04-14 17:43:04,701 find_def_from_bottom label 204
DEBUG 2023-04-14 17:43:04,701 replaced with: $274call_method.8 = call $268load_method.5(a.2, b.2, func=$268load_method.5, args=[Var(a.2, cmathimpl.py:246), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,706 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,706 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,706 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $290call_function.15 = call $286load_global.13(b.2, func=$286load_global.13, args=[Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,706 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,706 on stmt: real = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,706 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,706 on stmt: imag.1 = call $304load_method.21(t, b.2, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,706 on stmt: imag.2 = phi(incoming_values=[Var(imag.1, cmathimpl.py:253), Var(imag, cmathimpl.py:249)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,706 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $316pred = call bool316(scale.2, func=bool316, args=(Var(scale.2, cmathimpl.py:255),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,706 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,706 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,706 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,706 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,706 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $340call_function.3 = call $334load_global.0(real, imag.2, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,706 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,706 Fix SSA violator on var real
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,706 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,706 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,706 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,706 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,706 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,706 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,706 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,706 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,706 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,706 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,706 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,706 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,706 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,706 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,706 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,706 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,706 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,706 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,706 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,706 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,706 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,706 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,706 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,706 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,706 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,706 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,706 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,711 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,711 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,711 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,711 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,711 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,711 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,711 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,711 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,711 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,711 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,711 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,711 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,711 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,711 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,711 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,711 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,711 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,711 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,711 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,711 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,711 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,711 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,711 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,711 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,711 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,711 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,711 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,711 on stmt: a.1 = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,711 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,711 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,711 on stmt: b.1 = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,711 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,711 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,711 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,711 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,711 on stmt: scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,711 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,711 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,711 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,711 on stmt: a.2 = phi(incoming_values=[Var(a, cmathimpl.py:221), Var(a.1, cmathimpl.py:240)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,711 on stmt: b.2 = phi(incoming_values=[Var(b, cmathimpl.py:222), Var(b.1, cmathimpl.py:241)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,711 on stmt: scale.2 = phi(incoming_values=[Var(scale.1, cmathimpl.py:244), Var(scale, cmathimpl.py:242)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,711 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,711 on stmt: $208compare_op.2 = a.2 >= $const206.1
DEBUG 2023-04-14 17:43:04,711 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,711 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,711 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,711 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,711 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,711 on stmt: $228call_method.7 = call $222load_method.4(a.2, b.2, func=$222load_method.4, args=[Var(a.2, cmathimpl.py:246), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: $230binary_add.8 = a.2 + $228call_method.7
DEBUG 2023-04-14 17:43:04,711 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,711 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,711 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: real = t
DEBUG 2023-04-14 17:43:04,711 first assign: real
DEBUG 2023-04-14 17:43:04,711 replaced with: real = t
DEBUG 2023-04-14 17:43:04,711 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,711 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,711 on stmt: imag = b.2 / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,711 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,711 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,711 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,711 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,711 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a.2)
DEBUG 2023-04-14 17:43:04,711 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,711 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,711 on stmt: $274call_method.8 = call $268load_method.5(a.2, b.2, func=$268load_method.5, args=[Var(a.2, cmathimpl.py:246), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,711 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,715 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,715 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,715 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $290call_function.15 = call $286load_global.13(b.2, func=$286load_global.13, args=[Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,715 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,715 on stmt: real = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,715 replaced with: real.1 = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,715 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,715 on stmt: imag.1 = call $304load_method.21(t, b.2, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,715 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,715 on stmt: imag.2 = phi(incoming_values=[Var(imag.1, cmathimpl.py:253), Var(imag, cmathimpl.py:249)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,715 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $316pred = call bool316(scale.2, func=bool316, args=(Var(scale.2, cmathimpl.py:255),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,715 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,715 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,715 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,715 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,715 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,715 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617B391C0>
DEBUG 2023-04-14 17:43:04,715 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $340call_function.3 = call $334load_global.0(real, imag.2, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,715 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,715 Replaced assignments: defaultdict(<class 'list'>,
            {214: [<numba.core.ir.Assign object at 0x0000026617DE7700>],
             258: [<numba.core.ir.Assign object at 0x0000026617DD4610>]})
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,715 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,715 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,715 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,715 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,715 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,715 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,715 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,715 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,715 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,715 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,715 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,715 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,715 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,715 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,715 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,715 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,715 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,715 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,715 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,715 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,715 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,715 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,715 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,715 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,715 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,715 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,715 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,715 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,715 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,720 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,720 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,720 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,720 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,720 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,720 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,720 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,720 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,720 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,720 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,720 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,720 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,720 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,720 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,720 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,720 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,720 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,720 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,720 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,720 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,720 on stmt: a.1 = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,720 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,720 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,720 on stmt: b.1 = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,720 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,720 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,720 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,720 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,720 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: a.2 = phi(incoming_values=[Var(a, cmathimpl.py:221), Var(a.1, cmathimpl.py:240)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,720 on stmt: b.2 = phi(incoming_values=[Var(b, cmathimpl.py:222), Var(b.1, cmathimpl.py:241)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,720 on stmt: scale.2 = phi(incoming_values=[Var(scale.1, cmathimpl.py:244), Var(scale, cmathimpl.py:242)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,720 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,720 on stmt: $208compare_op.2 = a.2 >= $const206.1
DEBUG 2023-04-14 17:43:04,720 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,720 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,720 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,720 on stmt: $228call_method.7 = call $222load_method.4(a.2, b.2, func=$222load_method.4, args=[Var(a.2, cmathimpl.py:246), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: $230binary_add.8 = a.2 + $228call_method.7
DEBUG 2023-04-14 17:43:04,720 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,720 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,720 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,720 on stmt: real = t
DEBUG 2023-04-14 17:43:04,720 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,720 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,720 on stmt: imag = b.2 / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,720 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,720 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,720 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,720 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,720 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a.2)
DEBUG 2023-04-14 17:43:04,720 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,720 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,720 on stmt: $274call_method.8 = call $268load_method.5(a.2, b.2, func=$268load_method.5, args=[Var(a.2, cmathimpl.py:246), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,725 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,725 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,725 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $290call_function.15 = call $286load_global.13(b.2, func=$286load_global.13, args=[Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,725 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,725 on stmt: real.1 = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,725 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,725 on stmt: imag.1 = call $304load_method.21(t, b.2, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,725 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,725 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,725 on stmt: imag.2 = phi(incoming_values=[Var(imag.1, cmathimpl.py:253), Var(imag, cmathimpl.py:249)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,725 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $316pred = call bool316(scale.2, func=bool316, args=(Var(scale.2, cmathimpl.py:255),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,725 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,725 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,725 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,725 on stmt: $326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,725 find_def var='real' stmt=$326binary_multiply.3 = real * $const324.2
DEBUG 2023-04-14 17:43:04,725 find_def_from_top label 320
DEBUG 2023-04-14 17:43:04,725 idom 314 from label 320
DEBUG 2023-04-14 17:43:04,725 find_def_from_bottom label 314
DEBUG 2023-04-14 17:43:04,725 find_def_from_top label 314
DEBUG 2023-04-14 17:43:04,725 insert phi node real.2 = phi(incoming_values=[], incoming_blocks=[]) at 314
DEBUG 2023-04-14 17:43:04,725 find_def_from_bottom label 258
DEBUG 2023-04-14 17:43:04,725 incoming_def real.1 = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,725 find_def_from_bottom label 214
DEBUG 2023-04-14 17:43:04,725 incoming_def real = t
DEBUG 2023-04-14 17:43:04,725 replaced with: $326binary_multiply.3 = real.2 * $const324.2
DEBUG 2023-04-14 17:43:04,725 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,725 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,725 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,725 Running <numba.core.ssa._FixSSAVars object at 0x0000026617DE7790>
DEBUG 2023-04-14 17:43:04,725 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $340call_function.3 = call $334load_global.0(real, imag.2, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 find_def var='real' stmt=$340call_function.3 = call $334load_global.0(real, imag.2, func=$334load_global.0, args=[Var(real, cmathimpl.py:248), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 find_def_from_top label 334
DEBUG 2023-04-14 17:43:04,725 idom 314 from label 334
DEBUG 2023-04-14 17:43:04,725 find_def_from_bottom label 314
DEBUG 2023-04-14 17:43:04,725 replaced with: $340call_function.3 = call $334load_global.0(real.2, imag.2, func=$334load_global.0, args=[Var(real.2, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,725 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,725 Fix SSA violator on var t
DEBUG 2023-04-14 17:43:04,725 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,725 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,725 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,725 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,725 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,725 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,725 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,725 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,725 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,725 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,725 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,725 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,725 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,725 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,725 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,725 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,725 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,725 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,725 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,725 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,725 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,725 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,725 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,725 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,725 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,725 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,725 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,730 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,730 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,730 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,730 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,730 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,730 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,730 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,730 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,730 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,730 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,730 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,730 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,730 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,730 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,730 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,730 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,730 on stmt: a.1 = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,730 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,730 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,730 on stmt: b.1 = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,730 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,730 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,730 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: a.2 = phi(incoming_values=[Var(a, cmathimpl.py:221), Var(a.1, cmathimpl.py:240)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,730 on stmt: b.2 = phi(incoming_values=[Var(b, cmathimpl.py:222), Var(b.1, cmathimpl.py:241)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,730 on stmt: scale.2 = phi(incoming_values=[Var(scale.1, cmathimpl.py:244), Var(scale, cmathimpl.py:242)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,730 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,730 on stmt: $208compare_op.2 = a.2 >= $const206.1
DEBUG 2023-04-14 17:43:04,730 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,730 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,730 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,730 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,730 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,730 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,730 on stmt: $228call_method.7 = call $222load_method.4(a.2, b.2, func=$222load_method.4, args=[Var(a.2, cmathimpl.py:246), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 on stmt: $230binary_add.8 = a.2 + $228call_method.7
DEBUG 2023-04-14 17:43:04,730 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,730 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,730 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,730 first assign: t
DEBUG 2023-04-14 17:43:04,735 replaced with: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: real = t
DEBUG 2023-04-14 17:43:04,735 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,735 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,735 on stmt: imag = b.2 / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,735 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,735 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,735 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a.2)
DEBUG 2023-04-14 17:43:04,735 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,735 on stmt: $274call_method.8 = call $268load_method.5(a.2, b.2, func=$268load_method.5, args=[Var(a.2, cmathimpl.py:246), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,735 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,735 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,735 on stmt: t = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 replaced with: t.1 = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $290call_function.15 = call $286load_global.13(b.2, func=$286load_global.13, args=[Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,735 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,735 on stmt: real.1 = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,735 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,735 on stmt: imag.1 = call $304load_method.21(t, b.2, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,735 on stmt: real.2 = phi(incoming_values=[Var(real.1, cmathimpl.py:252), Var(real, cmathimpl.py:248)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,735 on stmt: imag.2 = phi(incoming_values=[Var(imag.1, cmathimpl.py:253), Var(imag, cmathimpl.py:249)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,735 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $316pred = call bool316(scale.2, func=bool316, args=(Var(scale.2, cmathimpl.py:255),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,735 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,735 on stmt: $326binary_multiply.3 = real.2 * $const324.2
DEBUG 2023-04-14 17:43:04,735 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,735 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FreshVarHandler object at 0x0000026617DD48E0>
DEBUG 2023-04-14 17:43:04,735 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $340call_function.3 = call $334load_global.0(real.2, imag.2, func=$334load_global.0, args=[Var(real.2, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,735 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:43:04,735 Replaced assignments: defaultdict(<class 'list'>,
            {214: [<numba.core.ir.Assign object at 0x0000026617B39EB0>],
             258: [<numba.core.ir.Assign object at 0x0000026617B393A0>]})
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 0
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: z = arg(0, name=z)
DEBUG 2023-04-14 17:43:04,735 on stmt: a = getattr(value=z, attr=real)
DEBUG 2023-04-14 17:43:04,735 on stmt: b = getattr(value=z, attr=imag)
DEBUG 2023-04-14 17:43:04,735 on stmt: $const16.5 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,735 on stmt: $18compare_op.6 = a == $const16.5
DEBUG 2023-04-14 17:43:04,735 on stmt: bool20 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $20pred = call bool20($18compare_op.6, func=bool20, args=(Var($18compare_op.6, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: branch $20pred, 22, 44
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 22
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $const24.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,735 on stmt: $26compare_op.2 = b == $const24.1
DEBUG 2023-04-14 17:43:04,735 on stmt: bool28 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, cmathimpl.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: branch $28pred, 30, 44
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 30
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $30load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $32load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $36call_function.3 = call $32load_global.1(b, func=$32load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $40call_function.5 = call $30load_global.0($36call_function.3, b, func=$30load_global.0, args=[Var($36call_function.3, cmathimpl.py:224), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $42return_value.6 = cast(value=$40call_function.5)
DEBUG 2023-04-14 17:43:04,735 on stmt: return $42return_value.6
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 44
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $44load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,735 on stmt: $50call_method.3 = call $46load_method.1(b, func=$46load_method.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: bool52 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, cmathimpl.py:225),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: branch $52pred, 54, 68
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 54
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $54load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $56load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $60call_function.3 = call $56load_global.1(b, func=$56load_global.1, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $64call_function.5 = call $54load_global.0($60call_function.3, b, func=$54load_global.0, args=[Var($60call_function.3, cmathimpl.py:226), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $66return_value.6 = cast(value=$64call_function.5)
DEBUG 2023-04-14 17:43:04,735 on stmt: return $66return_value.6
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 68
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $68load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $70load_method.1 = getattr(value=$68load_global.0, attr=isnan)
DEBUG 2023-04-14 17:43:04,735 on stmt: $74call_method.3 = call $70load_method.1(a, func=$70load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: bool76 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $76pred = call bool76($74call_method.3, func=bool76, args=(Var($74call_method.3, cmathimpl.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: branch $76pred, 78, 88
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 78
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $78load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $84call_function.3 = call $78load_global.0(a, a, func=$78load_global.0, args=[Var(a, cmathimpl.py:221), Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $86return_value.4 = cast(value=$84call_function.3)
DEBUG 2023-04-14 17:43:04,735 on stmt: return $86return_value.4
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 88
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $88load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $90load_method.1 = getattr(value=$88load_global.0, attr=isinf)
DEBUG 2023-04-14 17:43:04,735 on stmt: $94call_method.3 = call $90load_method.1(a, func=$90load_method.1, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: bool96 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $96pred = call bool96($94call_method.3, func=bool96, args=(Var($94call_method.3, cmathimpl.py:229),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: branch $96pred, 98, 154
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 98
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $const100.1 = const(float, 0.0)
DEBUG 2023-04-14 17:43:04,735 on stmt: $102compare_op.2 = a < $const100.1
DEBUG 2023-04-14 17:43:04,735 on stmt: bool104 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $104pred = call bool104($102compare_op.2, func=bool104, args=(Var($102compare_op.2, cmathimpl.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: branch $104pred, 106, 132
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 106
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $106load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $108load_global.1 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $114binary_subtract.4 = b - b
DEBUG 2023-04-14 17:43:04,735 on stmt: $116call_function.5 = call $108load_global.1($114binary_subtract.4, func=$108load_global.1, args=[Var($114binary_subtract.4, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $118load_global.6 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $120load_method.7 = getattr(value=$118load_global.6, attr=copysign)
DEBUG 2023-04-14 17:43:04,735 on stmt: $126call_method.10 = call $120load_method.7(a, b, func=$120load_method.7, args=[Var(a, cmathimpl.py:221), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $128call_function.11 = call $106load_global.0($116call_function.5, $126call_method.10, func=$106load_global.0, args=[Var($116call_function.5, cmathimpl.py:231), Var($126call_method.10, cmathimpl.py:231)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $130return_value.12 = cast(value=$128call_function.11)
DEBUG 2023-04-14 17:43:04,735 on stmt: return $130return_value.12
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 132
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $132load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $136load_global.2 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $138load_method.3 = getattr(value=$136load_global.2, attr=copysign)
DEBUG 2023-04-14 17:43:04,735 on stmt: $144binary_subtract.6 = b - b
DEBUG 2023-04-14 17:43:04,735 on stmt: $148call_method.8 = call $138load_method.3($144binary_subtract.6, b, func=$138load_method.3, args=[Var($144binary_subtract.6, cmathimpl.py:233), Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $150call_function.9 = call $132load_global.0(a, $148call_method.8, func=$132load_global.0, args=[Var(a, cmathimpl.py:221), Var($148call_method.8, cmathimpl.py:233)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $152return_value.10 = cast(value=$150call_function.9)
DEBUG 2023-04-14 17:43:04,735 on stmt: return $152return_value.10
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 154
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $154load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $158call_function.2 = call $154load_global.0(a, func=$154load_global.0, args=[Var(a, cmathimpl.py:221)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $160load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,735 on stmt: $162compare_op.4 = $158call_function.2 >= $160load_deref.3
DEBUG 2023-04-14 17:43:04,735 on stmt: bool164 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $164pred = call bool164($162compare_op.4, func=bool164, args=(Var($162compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: branch $164pred, 178, 166
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 166
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $166load_global.0 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $170call_function.2 = call $166load_global.0(b, func=$166load_global.0, args=[Var(b, cmathimpl.py:222)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $172load_deref.3 = freevar(THRES: 7.446288774449766e+307)
DEBUG 2023-04-14 17:43:04,735 on stmt: $174compare_op.4 = $170call_function.2 >= $172load_deref.3
DEBUG 2023-04-14 17:43:04,735 on stmt: bool176 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $176pred = call bool176($174compare_op.4, func=bool176, args=(Var($174compare_op.4, cmathimpl.py:239),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: branch $176pred, 178, 200
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 178
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $const180.1 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,735 on stmt: $182inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a, rhs=$const180.1, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,735 on stmt: a.1 = $182inplace_multiply.2
DEBUG 2023-04-14 17:43:04,735 on stmt: $const188.4 = const(float, 0.25)
DEBUG 2023-04-14 17:43:04,735 on stmt: $190inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=b, rhs=$const188.4, static_lhs=Undefined, static_rhs=Undefined)
DEBUG 2023-04-14 17:43:04,735 on stmt: b.1 = $190inplace_multiply.5
DEBUG 2023-04-14 17:43:04,735 on stmt: scale = const(bool, True)
DEBUG 2023-04-14 17:43:04,735 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 200
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: scale.1 = const(bool, False)
DEBUG 2023-04-14 17:43:04,735 on stmt: jump 204
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 204
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: a.2 = phi(incoming_values=[Var(a, cmathimpl.py:221), Var(a.1, cmathimpl.py:240)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,735 on stmt: b.2 = phi(incoming_values=[Var(b, cmathimpl.py:222), Var(b.1, cmathimpl.py:241)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,735 on stmt: scale.2 = phi(incoming_values=[Var(scale.1, cmathimpl.py:244), Var(scale, cmathimpl.py:242)], incoming_blocks=[200, 178])
DEBUG 2023-04-14 17:43:04,735 on stmt: $const206.1 = const(int, 0)
DEBUG 2023-04-14 17:43:04,735 on stmt: $208compare_op.2 = a.2 >= $const206.1
DEBUG 2023-04-14 17:43:04,735 on stmt: bool210 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $210pred = call bool210($208compare_op.2, func=bool210, args=(Var($208compare_op.2, cmathimpl.py:246),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: branch $210pred, 214, 258
DEBUG 2023-04-14 17:43:04,735 ==== SSA block rewrite pass on 214
DEBUG 2023-04-14 17:43:04,735 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,735 on stmt: $214load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $216load_method.1 = getattr(value=$214load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,735 on stmt: $220load_global.3 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,735 on stmt: $222load_method.4 = getattr(value=$220load_global.3, attr=hypot)
DEBUG 2023-04-14 17:43:04,735 on stmt: $228call_method.7 = call $222load_method.4(a.2, b.2, func=$222load_method.4, args=[Var(a.2, cmathimpl.py:246), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: $230binary_add.8 = a.2 + $228call_method.7
DEBUG 2023-04-14 17:43:04,735 on stmt: $const232.9 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,735 on stmt: $234binary_multiply.10 = $230binary_add.8 * $const232.9
DEBUG 2023-04-14 17:43:04,735 on stmt: t = call $216load_method.1($234binary_multiply.10, func=$216load_method.1, args=[Var($234binary_multiply.10, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,735 on stmt: real = t
DEBUG 2023-04-14 17:43:04,735 find_def var='t' stmt=real = t
DEBUG 2023-04-14 17:43:04,735 on stmt: $const246.14 = const(int, 2)
DEBUG 2023-04-14 17:43:04,745 on stmt: $250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,746 find_def var='t' stmt=$250binary_multiply.16 = $const246.14 * t
DEBUG 2023-04-14 17:43:04,746 on stmt: imag = b.2 / $250binary_multiply.16
DEBUG 2023-04-14 17:43:04,746 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,746 ==== SSA block rewrite pass on 258
DEBUG 2023-04-14 17:43:04,746 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,746 on stmt: $258load_global.0 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,746 on stmt: $260load_method.1 = getattr(value=$258load_global.0, attr=sqrt)
DEBUG 2023-04-14 17:43:04,746 on stmt: $264unary_negative.3 = unary(fn=<built-in function neg>, value=a.2)
DEBUG 2023-04-14 17:43:04,746 on stmt: $266load_global.4 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,746 on stmt: $268load_method.5 = getattr(value=$266load_global.4, attr=hypot)
DEBUG 2023-04-14 17:43:04,746 on stmt: $274call_method.8 = call $268load_method.5(a.2, b.2, func=$268load_method.5, args=[Var(a.2, cmathimpl.py:246), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,746 on stmt: $276binary_add.9 = $264unary_negative.3 + $274call_method.8
DEBUG 2023-04-14 17:43:04,746 on stmt: $const278.10 = const(float, 0.5)
DEBUG 2023-04-14 17:43:04,746 on stmt: $280binary_multiply.11 = $276binary_add.9 * $const278.10
DEBUG 2023-04-14 17:43:04,746 on stmt: t.1 = call $260load_method.1($280binary_multiply.11, func=$260load_method.1, args=[Var($280binary_multiply.11, cmathimpl.py:251)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,746 on stmt: $286load_global.13 = global(abs: <built-in function abs>)
DEBUG 2023-04-14 17:43:04,746 on stmt: $290call_function.15 = call $286load_global.13(b.2, func=$286load_global.13, args=[Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,746 on stmt: $const292.16 = const(int, 2)
DEBUG 2023-04-14 17:43:04,746 on stmt: $296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,746 find_def var='t' stmt=$296binary_multiply.18 = $const292.16 * t
DEBUG 2023-04-14 17:43:04,746 replaced with: $296binary_multiply.18 = $const292.16 * t.1
DEBUG 2023-04-14 17:43:04,746 on stmt: real.1 = $290call_function.15 / $296binary_multiply.18
DEBUG 2023-04-14 17:43:04,746 on stmt: $302load_global.20 = global(math: <module 'math' (built-in)>)
DEBUG 2023-04-14 17:43:04,746 on stmt: $304load_method.21 = getattr(value=$302load_global.20, attr=copysign)
DEBUG 2023-04-14 17:43:04,746 on stmt: imag.1 = call $304load_method.21(t, b.2, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,746 find_def var='t' stmt=imag.1 = call $304load_method.21(t, b.2, func=$304load_method.21, args=[Var(t, cmathimpl.py:247), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,746 replaced with: imag.1 = call $304load_method.21(t.1, b.2, func=$304load_method.21, args=[Var(t.1, cmathimpl.py:251), Var(b.2, cmathimpl.py:247)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,746 on stmt: jump 314
DEBUG 2023-04-14 17:43:04,746 ==== SSA block rewrite pass on 314
DEBUG 2023-04-14 17:43:04,746 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,746 on stmt: real.2 = phi(incoming_values=[Var(real.1, cmathimpl.py:252), Var(real, cmathimpl.py:248)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,746 on stmt: imag.2 = phi(incoming_values=[Var(imag.1, cmathimpl.py:253), Var(imag, cmathimpl.py:249)], incoming_blocks=[258, 214])
DEBUG 2023-04-14 17:43:04,746 on stmt: bool316 = global(bool: <class 'bool'>)
DEBUG 2023-04-14 17:43:04,746 on stmt: $316pred = call bool316(scale.2, func=bool316, args=(Var(scale.2, cmathimpl.py:255),), kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,746 on stmt: branch $316pred, 320, 334
DEBUG 2023-04-14 17:43:04,746 ==== SSA block rewrite pass on 320
DEBUG 2023-04-14 17:43:04,746 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,746 on stmt: $320load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,746 on stmt: $const324.2 = const(int, 2)
DEBUG 2023-04-14 17:43:04,746 on stmt: $326binary_multiply.3 = real.2 * $const324.2
DEBUG 2023-04-14 17:43:04,746 on stmt: $330call_function.5 = call $320load_global.0($326binary_multiply.3, imag.2, func=$320load_global.0, args=[Var($326binary_multiply.3, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,746 on stmt: $332return_value.6 = cast(value=$330call_function.5)
DEBUG 2023-04-14 17:43:04,746 on stmt: return $332return_value.6
DEBUG 2023-04-14 17:43:04,746 ==== SSA block rewrite pass on 334
DEBUG 2023-04-14 17:43:04,746 Running <numba.core.ssa._FixSSAVars object at 0x0000026617B39640>
DEBUG 2023-04-14 17:43:04,746 on stmt: $334load_global.0 = global(complex: <class 'complex'>)
DEBUG 2023-04-14 17:43:04,746 on stmt: $340call_function.3 = call $334load_global.0(real.2, imag.2, func=$334load_global.0, args=[Var(real.2, cmathimpl.py:256), Var(imag.2, cmathimpl.py:256)], kws=(), vararg=None, varkwarg=None, target=None)
DEBUG 2023-04-14 17:43:04,746 on stmt: $342return_value.4 = cast(value=$340call_function.3)
DEBUG 2023-04-14 17:43:04,746 on stmt: return $342return_value.4
DEBUG 2023-04-14 17:49:00,494 findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-Italic.otf', name='Adobe Devanagari', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,494 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\teamviewer15.otf', name='TeamViewer15', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-Regular.otf', name='Adobe Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,505 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWDB.TTF', name='Leelawadee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-BoldItalic.otf', name='Adobe Devanagari', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,514 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\teamviewer15.otf', name='TeamViewer15', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\System_Detect.ttf', name='System Detect', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MSUIGHUB.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LEELAWAD.TTF', name='Leelawadee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\marlett.ttf', name='Marlett', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-Bold.otf', name='Adobe Devanagari', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,519 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,524 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MSUIGHUR.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\System_Detect.ttf', name='System Detect', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUB.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUR.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,525 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LEELAWDB.TTF', name='Leelawadee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWAD.TTF', name='Leelawadee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,535 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,544 findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG 2023-04-14 17:49:00,654 findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG 2023-04-14 17:49:00,654 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,654 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,654 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,654 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG 2023-04-14 17:49:00,654 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,654 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,654 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,654 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,654 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-Italic.otf', name='Adobe Devanagari', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguibl.ttf', name='Segoe UI', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,659 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG 2023-04-14 17:49:00,665 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,666 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,666 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,666 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,666 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,666 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,666 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LHANDW.TTF', name='Lucida Handwriting', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,667 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHIC.TTF', name='Century Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BASKVILL.TTF', name='Baskerville Old Face', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,668 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbd.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,669 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ebrimabd.ttf', name='Ebrima', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ERASLGHT.TTF', name='Eras Light ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,670 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MAGNETOB.TTF', name='Magneto', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOS.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCB_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\NirmalaS.ttf', name='Nirmala UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,671 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOTHICBI.TTF', name='Century Gothic', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ntailu.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LFAXI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtextb.ttf', name='Myanmar Text', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PALSCRI.TTF', name='Palace Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,672 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILI____.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothM.ttc', name='Yu Gothic', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,673 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\teamviewer15.otf', name='TeamViewer15', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,674 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,674 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,674 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRADHITC.TTF', name='Bradley Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,674 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,674 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,674 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOSI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,674 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SitkaI.ttc', name='Sitka Small', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\IMPRISHA.TTF', name='Imprint MT Shadow', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSI.TTF', name='Goudy Old Style', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-Regular.otf', name='Adobe Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASDEMI.TTF', name='Eras Demi ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWDB.TTF', name='Leelawadee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\constan.ttf', name='Constantia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SitkaZ.ttc', name='Sitka Small', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\DUBAI-MEDIUM.TTF', name='Dubai', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LeelUIsl.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILLUBCD.TTF', name='Gill Sans Ultra Bold Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candara.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\COLONNA.TTF', name='Colonna MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCCB___.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-BoldItalic.otf', name='Adobe Devanagari', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\courbi.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKBI.TTF', name='Rockwell', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LATINWD.TTF', name='Wide Latin', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCKI.TTF', name='Rockwell', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CBI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ENGR.TTF', name='Engravers MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,675 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanz.ttf', name='Constantia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguihis.ttf', name='Segoe UI Historic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CHILLER.TTF', name='Chiller', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothB.ttc', name='Yu Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanab.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\NIAGENG.TTF', name='Niagara Engraved', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\teamviewer15.otf', name='TeamViewer15', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADM.TTF', name='Franklin Gothic Demi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\REFSPCL.TTF', name='MS Reference Specialty', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrib.ttf', name='Calibri', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\System_Detect.ttf', name='System Detect', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\gadugib.ttf', name='Gadugi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbelb.ttf', name='Corbel', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNTI.TTF', name='Elephant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PRISTINA.TTF', name='Pristina', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MSUIGHUB.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\palai.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbelli.ttf', name='Corbel', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HATTEN.TTF', name='Haettenschweiler', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candarai.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLECB.TTF', name='Gloucester MT Extra Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYR.TTF', name='Agency FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MAIAN.TTF', name='Maiandra GD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\l_10646.ttf', name='Lucida Sans Unicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeui.ttf', name='Segoe UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolaz.ttf', name='Consolas', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cour.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCB____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\JOKERMAN.TTF', name='Jokerman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LSANSD.TTF', name='Lucida Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\VINERITC.TTF', name='Viner Hand ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LEELAWAD.TTF', name='Leelawadee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\marlett.ttf', name='Marlett', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,685 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CASTELAR.TTF', name='Castellar', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERI____.TTF', name='Perpetua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCKEB.TTF', name='Rockwell Extra Bold', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Resource\\Font\\AdobeDevanagari-Bold.otf', name='Adobe Devanagari', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CENTURY.TTF', name='Century', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIST.TTF', name='Calisto MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSB.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\phagspa.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITED.TTF', name='Lucida Bright', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_PSTC.TTF', name='Bodoni MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ELEPHNT.TTF', name='Elephant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDOSB.TTF', name='Goudy Old Style', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\palab.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TEMPSITC.TTF', name='Tempus Sans ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SitkaB.ttc', name='Sitka Small', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTEXTRA.TTF', name='MT Extra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERTI.TTF', name='High Tower Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILSANUB.TTF', name='Gill Sans Ultra Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjh.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BKANT.TTF', name='Book Antiqua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuib.ttf', name='Segoe UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARAIT.TTF', name='Garamond', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhbd.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segmdl2.ttf', name='Segoe MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MOD20.TTF', name='Modern No. 20', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\comicbd.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BROADW.TTF', name='Broadway', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrii.ttf', name='Calibri', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ARLRDBD.TTF', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSR.TTF', name='Berlin Sans FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguisym.ttf', name='Segoe UI Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PER_____.TTF', name='Perpetua', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALISTBI.TTF', name='Calisto MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ITCEDSCR.TTF', name='Edwardian Script ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\simsunb.ttf', name='SimSun-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\consolab.ttf', name='Consolas', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguisb.ttf', name='Segoe UI', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SNAP____.TTF', name='Snap ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MSUIGHUR.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\malgunsl.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\COPRGTB.TTF', name='Copperplate Gothic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OLDENGL.TTF', name='Old English Text MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msjhbd.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOOKOSBI.TTF', name='Bookman Old Style', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\comic.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BELLI.TTF', name='Bell MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LSANS.TTF', name='Lucida Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeuil.ttf', name='Segoe UI', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOOKOS.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbelz.ttf', name='Corbel', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILB____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_I.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Gabriola.ttf', name='Gabriola', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\palabi.ttf', name='Palatino Linotype', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PERTIBD.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\JUICE___.TTF', name='Juice ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BELLB.TTF', name='Bell MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNBI.TTF', name='Arial', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 7.8986363636363635
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LSANSDI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\javatext.ttf', name='Javanese Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Sitka.ttc', name='Sitka Small', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BAUHS93.TTF', name='Bauhaus 93', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ONYX.TTF', name='Onyx', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCKB.TTF', name='Rockwell', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALIFR.TTF', name='Californian FB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuiz.ttf', name='Segoe UI', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\georgiai.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRAHV.TTF', name='Franklin Gothic Heavy', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\monbaiti.ttf', name='Mongolian Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\System_Detect.ttf', name='System Detect', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framdit.ttf', name='Franklin Gothic Medium', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\taile.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCMI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ANTQUABI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRAHVIT.TTF', name='Franklin Gothic Heavy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\himalaya.ttf', name='Microsoft Himalaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ARIALN.TTF', name='Arial', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 6.613636363636363
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,694 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SCHLBKBI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-BOLD.TTF', name='Dubai', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LeelaUIb.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUB.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\REFSAN.TTF', name='MS Reference Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbeli.ttf', name='Corbel', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HARLOWSI.TTF', name='Harlow Solid Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MSUIGHUR.TTF', name='Microsoft Uighur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ariblk.ttf', name='Arial', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 6.888636363636364
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ITCBLKAD.TTF', name='Blackadder ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constani.ttf', name='Constantia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CB.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoescb.ttf', name='Segoe Script', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoepr.ttf', name='Segoe Print', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\lucon.ttf', name='Lucida Console', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msjhl.ttc', name='Microsoft JhengHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\OUTLOOK.TTF', name='MS Outlook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgun.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMIT.TTF', name='Franklin Gothic Demi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICB.TTF', name='Century Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LBRITEI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENSCBK.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRABK.TTF', name='Franklin Gothic Book', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\YuGothR.ttc', name='Yu Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\courbd.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ebrima.ttf', name='Ebrima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msgothic.ttc', name='MS Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FORTE.TTF', name='Forte', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-REGULAR.TTF', name='Dubai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\INFROMAN.TTF', name='Informal Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\VIVALDII.TTF', name='Vivaldi', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\mingliub.ttc', name='MingLiU-ExtB', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\pala.ttf', name='Palatino Linotype', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ntailub.ttf', name='Microsoft New Tai Lue', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCCM____.TTF', name='Tw Cen MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\sylfaen.ttf', name='Sylfaen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consola.ttf', name='Consolas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\cambriab.ttf', name='Cambria', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALIFB.TTF', name='Californian FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MISTRAL.TTF', name='Mistral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyhl.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=290, stretch='normal', size='scalable')) = 10.1545
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCCEB.TTF', name='Tw Cen MT Condensed Extra Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LBRITEDI.TTF', name='Lucida Bright', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candarab.ttf', name='Candara', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LEELAWDB.TTF', name='Leelawadee', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ROCC____.TTF', name='Rockwell Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PAPYRUS.TTF', name='Papyrus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\simsun.ttc', name='SimSun', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\HTOWERT.TTF', name='High Tower Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\comici.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_BLAR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALISTI.TTF', name='Calisto MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GIGI.TTF', name='Gigi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\NirmalaB.ttf', name='Nirmala UI', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXD.TTF', name='Lucida Fax', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\consolai.ttf', name='Consolas', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAI.TTF', name='Book Antiqua', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MTCORSVA.TTF', name='Monotype Corsiva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ERASMD.TTF', name='Eras Medium ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\DUBAI-LIGHT.TTF', name='Dubai', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\timesbd.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibril.ttf', name='Calibri', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\AGENCYB.TTF', name='Agency FB', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LFAX.TTF', name='Lucida Fax', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CENTAUR.TTF', name='Centaur', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\SHOWG.TTF', name='Showcard Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\micross.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LSANSI.TTF', name='Lucida Sans', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\tahomabd.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaral.ttf', name='Candara', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_BI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\wingding.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PERBI___.TTF', name='Perpetua', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOOKOSB.TTF', name='Bookman Old Style', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibri.ttf', name='Calibri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ARIALNI.TTF', name='Arial', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 7.613636363636363
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\KUNSTLER.TTF', name='Kunstler Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\comicz.ttf', name='Comic Sans MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRABKIT.TTF', name='Franklin Gothic Book', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguili.ttf', name='Segoe UI', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LEELAWAD.TTF', name='Leelawadee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LFAXDI.TTF', name='Lucida Fax', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEBO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\COOPBL.TTF', name='Cooper Black', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\OCRAEXT.TTF', name='OCR A Extended', style='normal', variant='normal', weight=400, stretch='expanded', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,705 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\calibrili.ttf', name='Calibri', style='italic', variant='normal', weight=300, stretch='normal', size='scalable')) = 11.145
DEBUG 2023-04-14 17:49:00,715 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRSCRIPT.TTF', name='French Script MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,715 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,715 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\MATURASC.TTF', name='Matura MT Script Capitals', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,715 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Nirmala.ttf', name='Nirmala UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,715 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LBRITE.TTF', name='Lucida Bright', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,715 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG3.TTF', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,715 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambriai.ttf', name='Cambria', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\couri.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\NIAGSOL.TTF', name='Niagara Solid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanai.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FELIXTI.TTF', name='Felix Titling', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FRAMDCN.TTF', name='Franklin Gothic Medium Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\arialbd.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_B.TTF', name='Bodoni MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRITANIC.TTF', name='Britannic Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOUDYSTO.TTF', name='Goudy Stout', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LCALLIG.TTF', name='Lucida Calligraphy', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,716 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\TCM_____.TTF', name='Tw Cen MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\times.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguibli.ttf', name='Segoe UI', style='italic', variant='normal', weight=900, stretch='normal', size='scalable')) = 11.525
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\georgiaz.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\WINGDNG2.TTF', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\FREESCPT.TTF', name='Freestyle Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\COPRGTL.TTF', name='Copperplate Gothic Light', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebucbi.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuisl.ttf', name='Segoe UI', style='normal', variant='normal', weight=350, stretch='normal', size='scalable')) = 10.0975
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PERTILI.TTF', name='Perpetua Titling MT', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\calibriz.ttf', name='Calibri', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeprb.ttf', name='Segoe Print', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPE.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguisli.ttf', name='Segoe UI', style='italic', variant='normal', weight=350, stretch='normal', size='scalable')) = 11.0975
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\trebuc.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,717 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\mmrtext.ttf', name='Myanmar Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\RAVIE.TTF', name='Ravie', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BERNHC.TTF', name='Bernard MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CI.TTF', name='Bodoni MT', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\PARCHM.TTF', name='Parchment', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LeelawUI.ttf', name='Leelawadee UI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\msyi.ttf', name='Microsoft Yi Baiti', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ANTQUAB.TTF', name='Book Antiqua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PLAYBILL.TTF', name='Playbill', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\seguisbi.ttf', name='Segoe UI', style='italic', variant='normal', weight=600, stretch='normal', size='scalable')) = 11.24
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\msyh.ttc', name='Microsoft YaHei', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Inkfree.ttf', name='Ink Free', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\VLADIMIR.TTF', name='Vladimir Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\gadugi.ttf', name='Gadugi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbell.ttf', name='Corbel', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,718 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SCRIPTBL.TTF', name='Script MT Bold', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\malgunbd.ttf', name='Malgun Gothic', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\LTYPEO.TTF', name='Lucida Sans Typewriter', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\YuGothL.ttc', name='Yu Gothic', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\cambria.ttc', name='Cambria', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\Candarali.ttf', name='Candara', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\cambriaz.ttf', name='Cambria', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\STENCIL.TTF', name='Stencil', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\arialbi.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\HARNGTON.TTF', name='Harrington', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\PERB____.TTF', name='Perpetua', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALISTB.TTF', name='Calisto MT', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\mvboli.ttf', name='MV Boli', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ARIALNB.TTF', name='Arial', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 6.8986363636363635
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\framd.ttf', name='Franklin Gothic Medium', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,719 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\Candaraz.ttf', name='Candara', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SCHLBKB.TTF', name='Century Schoolbook', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\taileb.ttf', name='Microsoft Tai Le', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRUSHSCI.TTF', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\georgiab.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GIL_____.TTF', name='Gill Sans MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\CURLZ___.TTF', name='Curlz MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ariali.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesi.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FTLTLT.TTF', name='Footlight MT Light', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\segoesc.ttf', name='Segoe Script', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\corbel.ttf', name='Corbel', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ERASBD.TTF', name='Eras Bold ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GARA.TTF', name='Garamond', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,720 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\FRADMCN.TTF', name='Franklin Gothic Demi Cond', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BRLNSDB.TTF', name='Berlin Sans FB Demi', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BSSYM7.TTF', name='Bookshelf Symbol 7', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\trebucit.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\timesbi.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\TCBI____.TTF', name='Tw Cen MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\phagspab.ttf', name='Microsoft PhagsPa', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\segoeuii.ttf', name='Segoe UI', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ROCK.TTF', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GARABD.TTF', name='Garamond', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BOD_R.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\BELL.TTF', name='Bell MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\LTYPEB.TTF', name='Lucida Sans Typewriter', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG 2023-04-14 17:49:00,721 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GLSNECB.TTF', name='Gill Sans MT Ext Condensed Bold', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\holomdl2.ttf', name='HoloLens MDL2 Assets', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GOTHICI.TTF', name='Century Gothic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\RAGE.TTF', name='Rage Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\ITCKRIST.TTF', name='Kristen ITC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\GILC____.TTF', name='Gill Sans MT Condensed', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\CALIFI.TTF', name='Californian FB', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\GILBI___.TTF', name='Gill Sans MT', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\seguiemj.ttf', name='Segoe UI Emoji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\SCHLBKI.TTF', name='Century Schoolbook', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\BOD_CR.TTF', name='Bodoni MT', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\verdanaz.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\WINDOWS\\Fonts\\POORICH.TTF', name='Poor Richard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\constanb.ttf', name='Constantia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG 2023-04-14 17:49:00,722 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\bahnschrift.ttf', name='Bahnschrift', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,723 findfont: score(FontEntry(fname='C:\\Windows\\Fonts\\ALGER.TTF', name='Algerian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG 2023-04-14 17:49:00,723 findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\em1120\\Anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
