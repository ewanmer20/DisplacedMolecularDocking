import traceback  # For displaying exceptions
import os
import logging
from log_utils import LogUtils
from datetime import datetime  # For current day and time
from datetime import date
from time import time  # For runtime of scripts

from strawberryfields.apps import data, plot, sample, clique
from strawberryfields.apps.sample import postselect
from strawberryfields.decompositions import takagi
from scipy.sparse.csgraph import laplacian
from thewalrus.samples import hafnian_sample_graph
import numpy as np
import networkx as nx
import csv
import plotly
from Analysis_lib import*
from Generate_samples import*

#Loading samples generated by Generate_samples.py file
cwd='Reference_samples\\'
excel_file=cwd+'Reference_mean_n=0.89 nsamples=100000.0_nsubspace=10.0_samples_cov.csv'
tot_samples=log_data(excel_file)
print(tot_samples[:10])
#Loading the graph from TaceAs problem
TA = data.TaceAs()
A_test=TA.adj
#Using the adjacency matrix reduced to the first 10 modes to be consistent with the GBS simulation
A = TA.adj[:10,:10]

#Retrieving the potential values for the adjacency matrix
weights=make_potential_vect()[:10]
print(weights)


# Histogram of the number of photons per sample
a,nmax=plot_histogram(tot_samples)
print(a)

#Remove the non-zero clicks event and the collision events
cleaned_samples,ncollision=clean_samples(tot_samples,nmax)
cleaned_samples=postselect(cleaned_samples,5,5)
print(ncollision)
cleaned_samples.append(np.array([0,0,1,1,1,0,1,1,1,0]))
print(len(cleaned_samples))
print(cleaned_samples[10:])

#Find the maximum clique with classical algorithm
clique_max,clique_weight=find_max_clique(A,weights)
print(clique_max)
print(clique_weight)

print(count_clique_occurence(cleaned_samples,clique_max))
print(count_cliques(cleaned_samples,nx.Graph(A)))
# print(a)
# print(sum(a))

list_cliques=nx.find_cliques(nx.Graph(A))
for el in list_cliques:
    print(el)
# plot_success_rate_vs_niter(tot_GBS_samples=tot_samples,postselection_number=postselection_number,graph_ref=TA_graph,niter=10)
# samples_GBS=postselect(tot_samples,postselection_number+4,postselection_number+4) # Postselecting the samples according the number of clicks
#
# print(samples_GBS)
#
#
# fig=plot.graph(TA_graph)
# fig.show()
